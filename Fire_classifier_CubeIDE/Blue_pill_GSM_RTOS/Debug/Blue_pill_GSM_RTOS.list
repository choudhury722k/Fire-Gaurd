
Blue_pill_GSM_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c8  080021c8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080021c8  080021c8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021c8  080021c8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021cc  080021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080021d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200000a8  08002278  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002278  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069af  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001297  00000000  00000000  00026a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00027d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00028328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000147e  00000000  00000000  000288c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075d0  00000000  00000000  00029d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827f8  00000000  00000000  0003130e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3b06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  000b3b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080020c8 	.word	0x080020c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	080020c8 	.word	0x080020c8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
char Cnum[] = "AT+CMGS=\"+918144109993\"\r";
char Msg[] = "Hello";
char End[] = "26";

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b090      	sub	sp, #64	; 0x40
 8000174:	af00      	add	r7, sp, #0
//  while (1){
//		gsm_loop();
//  }

  char buf[50];
  uint8_t num = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  int buf_len = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	63bb      	str	r3, [r7, #56]	; 0x38

  SystemClock_Config();
 8000180:	f000 f86e 	bl	8000260 <SystemClock_Config>

  MX_GPIO_Init();
 8000184:	f000 f8dc 	bl	8000340 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000188:	f000 f8b0 	bl	80002ec <MX_USART1_UART_Init>

  HAL_UART_Transmit(&huart1, (uint8_t *)Test, 2, 10);
 800018c:	230a      	movs	r3, #10
 800018e:	2202      	movs	r2, #2
 8000190:	492a      	ldr	r1, [pc, #168]	; (800023c <main+0xcc>)
 8000192:	482b      	ldr	r0, [pc, #172]	; (8000240 <main+0xd0>)
 8000194:	f001 f8da 	bl	800134c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, (uint8_t *)Reply, 2, 10);
 8000198:	230a      	movs	r3, #10
 800019a:	2202      	movs	r2, #2
 800019c:	4929      	ldr	r1, [pc, #164]	; (8000244 <main+0xd4>)
 800019e:	4828      	ldr	r0, [pc, #160]	; (8000240 <main+0xd0>)
 80001a0:	f001 f957 	bl	8001452 <HAL_UART_Receive>
  if (strcmp(Reply, "OK")){
 80001a4:	4928      	ldr	r1, [pc, #160]	; (8000248 <main+0xd8>)
 80001a6:	4827      	ldr	r0, [pc, #156]	; (8000244 <main+0xd4>)
 80001a8:	f7ff ffd0 	bl	800014c <strcmp>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d02b      	beq.n	800020a <main+0x9a>
	  HAL_UART_Transmit(&huart1, (uint8_t *)Stext, strlen(Stext), 10);
 80001b2:	4826      	ldr	r0, [pc, #152]	; (800024c <main+0xdc>)
 80001b4:	f7ff ffd4 	bl	8000160 <strlen>
 80001b8:	4603      	mov	r3, r0
 80001ba:	b29a      	uxth	r2, r3
 80001bc:	230a      	movs	r3, #10
 80001be:	4923      	ldr	r1, [pc, #140]	; (800024c <main+0xdc>)
 80001c0:	481f      	ldr	r0, [pc, #124]	; (8000240 <main+0xd0>)
 80001c2:	f001 f8c3 	bl	800134c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)Cnum, strlen(Cnum), 10);
 80001c6:	4822      	ldr	r0, [pc, #136]	; (8000250 <main+0xe0>)
 80001c8:	f7ff ffca 	bl	8000160 <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	230a      	movs	r3, #10
 80001d2:	491f      	ldr	r1, [pc, #124]	; (8000250 <main+0xe0>)
 80001d4:	481a      	ldr	r0, [pc, #104]	; (8000240 <main+0xd0>)
 80001d6:	f001 f8b9 	bl	800134c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)Msg, strlen(Msg), 10);
 80001da:	481e      	ldr	r0, [pc, #120]	; (8000254 <main+0xe4>)
 80001dc:	f7ff ffc0 	bl	8000160 <strlen>
 80001e0:	4603      	mov	r3, r0
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	230a      	movs	r3, #10
 80001e6:	491b      	ldr	r1, [pc, #108]	; (8000254 <main+0xe4>)
 80001e8:	4815      	ldr	r0, [pc, #84]	; (8000240 <main+0xd0>)
 80001ea:	f001 f8af 	bl	800134c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)End, strlen(End), 10);
 80001ee:	481a      	ldr	r0, [pc, #104]	; (8000258 <main+0xe8>)
 80001f0:	f7ff ffb6 	bl	8000160 <strlen>
 80001f4:	4603      	mov	r3, r0
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	230a      	movs	r3, #10
 80001fa:	4917      	ldr	r1, [pc, #92]	; (8000258 <main+0xe8>)
 80001fc:	4810      	ldr	r0, [pc, #64]	; (8000240 <main+0xd0>)
 80001fe:	f001 f8a5 	bl	800134c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 f9e5 	bl	80005d4 <HAL_Delay>
  }

  while (1)
  {

	buf_len = sprintf(buf,"Welcome to Testing! Counting = %d\r\n",num);
 800020a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4912      	ldr	r1, [pc, #72]	; (800025c <main+0xec>)
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fbca 	bl	80019ac <siprintf>
 8000218:	63b8      	str	r0, [r7, #56]	; 0x38
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800021c:	b29a      	uxth	r2, r3
 800021e:	1d39      	adds	r1, r7, #4
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	4807      	ldr	r0, [pc, #28]	; (8000240 <main+0xd0>)
 8000224:	f001 f892 	bl	800134c <HAL_UART_Transmit>
	HAL_Delay(500);
 8000228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022c:	f000 f9d2 	bl	80005d4 <HAL_Delay>
	num++;
 8000230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000234:	3301      	adds	r3, #1
 8000236:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buf_len = sprintf(buf,"Welcome to Testing! Counting = %d\r\n",num);
 800023a:	e7e6      	b.n	800020a <main+0x9a>
 800023c:	20000000 	.word	0x20000000
 8000240:	200000c4 	.word	0x200000c4
 8000244:	2000010c 	.word	0x2000010c
 8000248:	080020e0 	.word	0x080020e0
 800024c:	20000004 	.word	0x20000004
 8000250:	20000010 	.word	0x20000010
 8000254:	2000002c 	.word	0x2000002c
 8000258:	20000034 	.word	0x20000034
 800025c:	080020e4 	.word	0x080020e4

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b090      	sub	sp, #64	; 0x40
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 faa8 	bl	80017c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fbef 	bl	8000a8c <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b4:	f000 f866 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2302      	movs	r3, #2
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fe5c 	bl	8000f90 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f851 	bl	8000384 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	; 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART1_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART1_UART_Init+0x4c>)
 8000324:	f000 ffc2 	bl	80012ac <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f829 	bl	8000384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000c4 	.word	0x200000c4
 800033c:	40013800 	.word	0x40013800

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <MX_GPIO_Init+0x40>)
 800034c:	f043 0320 	orr.w	r3, r3, #32
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0320 	and.w	r3, r3, #32
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_GPIO_Init+0x40>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a07      	ldr	r2, [pc, #28]	; (8000380 <MX_GPIO_Init+0x40>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_GPIO_Init+0x40>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	e7fe      	b.n	800038c <Error_Handler+0x8>
	...

08000390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <HAL_UART_MspInit+0x8c>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d131      	bne.n	8000414 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_UART_MspInit+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e6:	2302      	movs	r3, #2
 80003e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ea:	2303      	movs	r3, #3
 80003ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <HAL_UART_MspInit+0x94>)
 80003f6:	f000 f9c5 	bl	8000784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <HAL_UART_MspInit+0x94>)
 8000410:	f000 f9b8 	bl	8000784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40013800 	.word	0x40013800
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046e:	f000 f895 	bl	800059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <_sbrk+0x5c>)
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <_sbrk+0x60>)
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <_sbrk+0x64>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d102      	bne.n	800049a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <_sbrk+0x64>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <_sbrk+0x68>)
 8000498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	693a      	ldr	r2, [r7, #16]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d207      	bcs.n	80004b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a8:	f001 f962 	bl	8001770 <__errno>
 80004ac:	4603      	mov	r3, r0
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e009      	b.n	80004cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <_sbrk+0x64>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <_sbrk+0x64>)
 80004c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20005000 	.word	0x20005000
 80004d8:	00000400 	.word	0x00000400
 80004dc:	20000110 	.word	0x20000110
 80004e0:	20000128 	.word	0x20000128

080004e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f0:	f7ff fff8 	bl	80004e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004f6:	490c      	ldr	r1, [pc, #48]	; (8000528 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004f8:	4a0c      	ldr	r2, [pc, #48]	; (800052c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800050c:	4c09      	ldr	r4, [pc, #36]	; (8000534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051a:	f001 f92f 	bl	800177c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fe27 	bl	8000170 <main>
  bx lr
 8000522:	4770      	bx	lr
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800052c:	080021d0 	.word	0x080021d0
  ldr r2, =_sbss
 8000530:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000534:	20000128 	.word	0x20000128

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x54>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x58>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f906 	bl	800076c <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	e00e      	b.n	8000588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d80a      	bhi.n	8000586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f8dc 	bl	8000734 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_InitTick+0x5c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e000      	b.n	8000588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000038 	.word	0x20000038
 8000594:	20000040 	.word	0x20000040
 8000598:	2000003c 	.word	0x2000003c

0800059c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_IncTick+0x1c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_IncTick+0x20>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <HAL_IncTick+0x20>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	20000040 	.word	0x20000040
 80005bc:	20000114 	.word	0x20000114

080005c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <HAL_GetTick+0x10>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000114 	.word	0x20000114

080005d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff fff0 	bl	80005c0 <HAL_GetTick>
 80005e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ec:	d005      	beq.n	80005fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_Delay+0x44>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005fa:	bf00      	nop
 80005fc:	f7ff ffe0 	bl	80005c0 <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d8f7      	bhi.n	80005fc <HAL_Delay+0x28>
  {
  }
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000040 	.word	0x20000040

0800061c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <__NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000700:	d301      	bcc.n	8000706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2301      	movs	r3, #1
 8000704:	e00f      	b.n	8000726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <SysTick_Config+0x40>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070e:	210f      	movs	r1, #15
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f7ff ff90 	bl	8000638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SysTick_Config+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SysTick_Config+0x40>)
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000746:	f7ff ff69 	bl	800061c <__NVIC_GetPriorityGrouping>
 800074a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	68b9      	ldr	r1, [r7, #8]
 8000750:	6978      	ldr	r0, [r7, #20]
 8000752:	f7ff ff9b 	bl	800068c <NVIC_EncodePriority>
 8000756:	4602      	mov	r2, r0
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff6a 	bl	8000638 <__NVIC_SetPriority>
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ffbb 	bl	80006f0 <SysTick_Config>
 800077a:	4603      	mov	r3, r0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000784:	b480      	push	{r7}
 8000786:	b08b      	sub	sp, #44	; 0x2c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000796:	e169      	b.n	8000a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000798:	2201      	movs	r2, #1
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	69fa      	ldr	r2, [r7, #28]
 80007a8:	4013      	ands	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	f040 8158 	bne.w	8000a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	4a9a      	ldr	r2, [pc, #616]	; (8000a24 <HAL_GPIO_Init+0x2a0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d05e      	beq.n	800087e <HAL_GPIO_Init+0xfa>
 80007c0:	4a98      	ldr	r2, [pc, #608]	; (8000a24 <HAL_GPIO_Init+0x2a0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d875      	bhi.n	80008b2 <HAL_GPIO_Init+0x12e>
 80007c6:	4a98      	ldr	r2, [pc, #608]	; (8000a28 <HAL_GPIO_Init+0x2a4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d058      	beq.n	800087e <HAL_GPIO_Init+0xfa>
 80007cc:	4a96      	ldr	r2, [pc, #600]	; (8000a28 <HAL_GPIO_Init+0x2a4>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d86f      	bhi.n	80008b2 <HAL_GPIO_Init+0x12e>
 80007d2:	4a96      	ldr	r2, [pc, #600]	; (8000a2c <HAL_GPIO_Init+0x2a8>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d052      	beq.n	800087e <HAL_GPIO_Init+0xfa>
 80007d8:	4a94      	ldr	r2, [pc, #592]	; (8000a2c <HAL_GPIO_Init+0x2a8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d869      	bhi.n	80008b2 <HAL_GPIO_Init+0x12e>
 80007de:	4a94      	ldr	r2, [pc, #592]	; (8000a30 <HAL_GPIO_Init+0x2ac>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d04c      	beq.n	800087e <HAL_GPIO_Init+0xfa>
 80007e4:	4a92      	ldr	r2, [pc, #584]	; (8000a30 <HAL_GPIO_Init+0x2ac>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d863      	bhi.n	80008b2 <HAL_GPIO_Init+0x12e>
 80007ea:	4a92      	ldr	r2, [pc, #584]	; (8000a34 <HAL_GPIO_Init+0x2b0>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d046      	beq.n	800087e <HAL_GPIO_Init+0xfa>
 80007f0:	4a90      	ldr	r2, [pc, #576]	; (8000a34 <HAL_GPIO_Init+0x2b0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d85d      	bhi.n	80008b2 <HAL_GPIO_Init+0x12e>
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d82a      	bhi.n	8000850 <HAL_GPIO_Init+0xcc>
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d859      	bhi.n	80008b2 <HAL_GPIO_Init+0x12e>
 80007fe:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <HAL_GPIO_Init+0x80>)
 8000800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000804:	0800087f 	.word	0x0800087f
 8000808:	08000859 	.word	0x08000859
 800080c:	0800086b 	.word	0x0800086b
 8000810:	080008ad 	.word	0x080008ad
 8000814:	080008b3 	.word	0x080008b3
 8000818:	080008b3 	.word	0x080008b3
 800081c:	080008b3 	.word	0x080008b3
 8000820:	080008b3 	.word	0x080008b3
 8000824:	080008b3 	.word	0x080008b3
 8000828:	080008b3 	.word	0x080008b3
 800082c:	080008b3 	.word	0x080008b3
 8000830:	080008b3 	.word	0x080008b3
 8000834:	080008b3 	.word	0x080008b3
 8000838:	080008b3 	.word	0x080008b3
 800083c:	080008b3 	.word	0x080008b3
 8000840:	080008b3 	.word	0x080008b3
 8000844:	080008b3 	.word	0x080008b3
 8000848:	08000861 	.word	0x08000861
 800084c:	08000875 	.word	0x08000875
 8000850:	4a79      	ldr	r2, [pc, #484]	; (8000a38 <HAL_GPIO_Init+0x2b4>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d013      	beq.n	800087e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000856:	e02c      	b.n	80008b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	623b      	str	r3, [r7, #32]
          break;
 800085e:	e029      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	3304      	adds	r3, #4
 8000866:	623b      	str	r3, [r7, #32]
          break;
 8000868:	e024      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	3308      	adds	r3, #8
 8000870:	623b      	str	r3, [r7, #32]
          break;
 8000872:	e01f      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	330c      	adds	r3, #12
 800087a:	623b      	str	r3, [r7, #32]
          break;
 800087c:	e01a      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d102      	bne.n	800088c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000886:	2304      	movs	r3, #4
 8000888:	623b      	str	r3, [r7, #32]
          break;
 800088a:	e013      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d105      	bne.n	80008a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000894:	2308      	movs	r3, #8
 8000896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	611a      	str	r2, [r3, #16]
          break;
 800089e:	e009      	b.n	80008b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a0:	2308      	movs	r3, #8
 80008a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	615a      	str	r2, [r3, #20]
          break;
 80008aa:	e003      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e000      	b.n	80008b4 <HAL_GPIO_Init+0x130>
          break;
 80008b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	2bff      	cmp	r3, #255	; 0xff
 80008b8:	d801      	bhi.n	80008be <HAL_GPIO_Init+0x13a>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	e001      	b.n	80008c2 <HAL_GPIO_Init+0x13e>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3304      	adds	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d802      	bhi.n	80008d0 <HAL_GPIO_Init+0x14c>
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	e002      	b.n	80008d6 <HAL_GPIO_Init+0x152>
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	3b08      	subs	r3, #8
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	210f      	movs	r1, #15
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	401a      	ands	r2, r3
 80008e8:	6a39      	ldr	r1, [r7, #32]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	431a      	orrs	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 80b1 	beq.w	8000a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000904:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <HAL_GPIO_Init+0x2b8>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a4c      	ldr	r2, [pc, #304]	; (8000a3c <HAL_GPIO_Init+0x2b8>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <HAL_GPIO_Init+0x2b8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800091c:	4a48      	ldr	r2, [pc, #288]	; (8000a40 <HAL_GPIO_Init+0x2bc>)
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	089b      	lsrs	r3, r3, #2
 8000922:	3302      	adds	r3, #2
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	220f      	movs	r2, #15
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a40      	ldr	r2, [pc, #256]	; (8000a44 <HAL_GPIO_Init+0x2c0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d013      	beq.n	8000970 <HAL_GPIO_Init+0x1ec>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <HAL_GPIO_Init+0x2c4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d00d      	beq.n	800096c <HAL_GPIO_Init+0x1e8>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a3e      	ldr	r2, [pc, #248]	; (8000a4c <HAL_GPIO_Init+0x2c8>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d007      	beq.n	8000968 <HAL_GPIO_Init+0x1e4>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <HAL_GPIO_Init+0x2cc>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d101      	bne.n	8000964 <HAL_GPIO_Init+0x1e0>
 8000960:	2303      	movs	r3, #3
 8000962:	e006      	b.n	8000972 <HAL_GPIO_Init+0x1ee>
 8000964:	2304      	movs	r3, #4
 8000966:	e004      	b.n	8000972 <HAL_GPIO_Init+0x1ee>
 8000968:	2302      	movs	r3, #2
 800096a:	e002      	b.n	8000972 <HAL_GPIO_Init+0x1ee>
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <HAL_GPIO_Init+0x1ee>
 8000970:	2300      	movs	r3, #0
 8000972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000974:	f002 0203 	and.w	r2, r2, #3
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	4093      	lsls	r3, r2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000982:	492f      	ldr	r1, [pc, #188]	; (8000a40 <HAL_GPIO_Init+0x2bc>)
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	492c      	ldr	r1, [pc, #176]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	608b      	str	r3, [r1, #8]
 80009a8:	e006      	b.n	80009b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4928      	ldr	r1, [pc, #160]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d006      	beq.n	80009d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	4922      	ldr	r1, [pc, #136]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60cb      	str	r3, [r1, #12]
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	43db      	mvns	r3, r3
 80009da:	491e      	ldr	r1, [pc, #120]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009dc:	4013      	ands	r3, r2
 80009de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d006      	beq.n	80009fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	4918      	ldr	r1, [pc, #96]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	604b      	str	r3, [r1, #4]
 80009f8:	e006      	b.n	8000a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	4914      	ldr	r1, [pc, #80]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d021      	beq.n	8000a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	490e      	ldr	r1, [pc, #56]	; (8000a54 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
 8000a20:	e021      	b.n	8000a66 <HAL_GPIO_Init+0x2e2>
 8000a22:	bf00      	nop
 8000a24:	10320000 	.word	0x10320000
 8000a28:	10310000 	.word	0x10310000
 8000a2c:	10220000 	.word	0x10220000
 8000a30:	10210000 	.word	0x10210000
 8000a34:	10120000 	.word	0x10120000
 8000a38:	10110000 	.word	0x10110000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40011400 	.word	0x40011400
 8000a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_GPIO_Init+0x304>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	4909      	ldr	r1, [pc, #36]	; (8000a88 <HAL_GPIO_Init+0x304>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3301      	adds	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	fa22 f303 	lsr.w	r3, r2, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f47f ae8e 	bne.w	8000798 <HAL_GPIO_Init+0x14>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	372c      	adds	r7, #44	; 0x2c
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40010400 	.word	0x40010400

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e272      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 8087 	beq.w	8000bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aac:	4b92      	ldr	r3, [pc, #584]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 030c 	and.w	r3, r3, #12
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d00c      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ab8:	4b8f      	ldr	r3, [pc, #572]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	2b08      	cmp	r3, #8
 8000ac2:	d112      	bne.n	8000aea <HAL_RCC_OscConfig+0x5e>
 8000ac4:	4b8c      	ldr	r3, [pc, #560]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ad0:	d10b      	bne.n	8000aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad2:	4b89      	ldr	r3, [pc, #548]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d06c      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x12c>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d168      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e24c      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af2:	d106      	bne.n	8000b02 <HAL_RCC_OscConfig+0x76>
 8000af4:	4b80      	ldr	r3, [pc, #512]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a7f      	ldr	r2, [pc, #508]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e02e      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10c      	bne.n	8000b24 <HAL_RCC_OscConfig+0x98>
 8000b0a:	4b7b      	ldr	r3, [pc, #492]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a7a      	ldr	r2, [pc, #488]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	4b78      	ldr	r3, [pc, #480]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a77      	ldr	r2, [pc, #476]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e01d      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b2c:	d10c      	bne.n	8000b48 <HAL_RCC_OscConfig+0xbc>
 8000b2e:	4b72      	ldr	r3, [pc, #456]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a71      	ldr	r2, [pc, #452]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	4b6f      	ldr	r3, [pc, #444]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a6e      	ldr	r2, [pc, #440]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e00b      	b.n	8000b60 <HAL_RCC_OscConfig+0xd4>
 8000b48:	4b6b      	ldr	r3, [pc, #428]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a6a      	ldr	r2, [pc, #424]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b68      	ldr	r3, [pc, #416]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a67      	ldr	r2, [pc, #412]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d013      	beq.n	8000b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b68:	f7ff fd2a 	bl	80005c0 <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b70:	f7ff fd26 	bl	80005c0 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b64      	cmp	r3, #100	; 0x64
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e200      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	4b5d      	ldr	r3, [pc, #372]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f0      	beq.n	8000b70 <HAL_RCC_OscConfig+0xe4>
 8000b8e:	e014      	b.n	8000bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b90:	f7ff fd16 	bl	80005c0 <HAL_GetTick>
 8000b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b98:	f7ff fd12 	bl	80005c0 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b64      	cmp	r3, #100	; 0x64
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e1ec      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f0      	bne.n	8000b98 <HAL_RCC_OscConfig+0x10c>
 8000bb6:	e000      	b.n	8000bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d063      	beq.n	8000c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bc6:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 030c 	and.w	r3, r3, #12
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00b      	beq.n	8000bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bd2:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d11c      	bne.n	8000c18 <HAL_RCC_OscConfig+0x18c>
 8000bde:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d116      	bne.n	8000c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bea:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <HAL_RCC_OscConfig+0x176>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d001      	beq.n	8000c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e1c0      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	4939      	ldr	r1, [pc, #228]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c16:	e03a      	b.n	8000c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d020      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c26:	f7ff fccb 	bl	80005c0 <HAL_GetTick>
 8000c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	e008      	b.n	8000c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fcc7 	bl	80005c0 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e1a1      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f0      	beq.n	8000c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4927      	ldr	r1, [pc, #156]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]
 8000c60:	e015      	b.n	8000c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fcaa 	bl	80005c0 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c70:	f7ff fca6 	bl	80005c0 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e180      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d03a      	beq.n	8000d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d019      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_RCC_OscConfig+0x274>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca8:	f7ff fc8a 	bl	80005c0 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fc86 	bl	80005c0 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e160      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f0      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 face 	bl	8001270 <RCC_Delay>
 8000cd4:	e01c      	b.n	8000d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc70 	bl	80005c0 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ce2:	e00f      	b.n	8000d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc6c 	bl	80005c0 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d908      	bls.n	8000d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e146      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	42420000 	.word	0x42420000
 8000d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d04:	4b92      	ldr	r3, [pc, #584]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e9      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80a6 	beq.w	8000e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d22:	4b8b      	ldr	r3, [pc, #556]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10d      	bne.n	8000d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b85      	ldr	r3, [pc, #532]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d46:	2301      	movs	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4a:	4b82      	ldr	r3, [pc, #520]	; (8000f54 <HAL_RCC_OscConfig+0x4c8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d118      	bne.n	8000d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d56:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <HAL_RCC_OscConfig+0x4c8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a7e      	ldr	r2, [pc, #504]	; (8000f54 <HAL_RCC_OscConfig+0x4c8>)
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d62:	f7ff fc2d 	bl	80005c0 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d6a:	f7ff fc29 	bl	80005c0 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e103      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7c:	4b75      	ldr	r3, [pc, #468]	; (8000f54 <HAL_RCC_OscConfig+0x4c8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d106      	bne.n	8000d9e <HAL_RCC_OscConfig+0x312>
 8000d90:	4b6f      	ldr	r3, [pc, #444]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4a6e      	ldr	r2, [pc, #440]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6213      	str	r3, [r2, #32]
 8000d9c:	e02d      	b.n	8000dfa <HAL_RCC_OscConfig+0x36e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10c      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x334>
 8000da6:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a69      	ldr	r2, [pc, #420]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	6213      	str	r3, [r2, #32]
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	4a66      	ldr	r2, [pc, #408]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000db8:	f023 0304 	bic.w	r3, r3, #4
 8000dbc:	6213      	str	r3, [r2, #32]
 8000dbe:	e01c      	b.n	8000dfa <HAL_RCC_OscConfig+0x36e>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x356>
 8000dc8:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4a60      	ldr	r2, [pc, #384]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6213      	str	r3, [r2, #32]
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4a5d      	ldr	r2, [pc, #372]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6213      	str	r3, [r2, #32]
 8000de0:	e00b      	b.n	8000dfa <HAL_RCC_OscConfig+0x36e>
 8000de2:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a5a      	ldr	r2, [pc, #360]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6213      	str	r3, [r2, #32]
 8000dee:	4b58      	ldr	r3, [pc, #352]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a57      	ldr	r2, [pc, #348]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d015      	beq.n	8000e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbdd 	bl	80005c0 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fbd9 	bl	80005c0 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e0b1      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e20:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0ee      	beq.n	8000e0a <HAL_RCC_OscConfig+0x37e>
 8000e2c:	e014      	b.n	8000e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbc7 	bl	80005c0 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fbc3 	bl	80005c0 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e09b      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4c:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1ee      	bne.n	8000e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d105      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8087 	beq.w	8000f82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e74:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d061      	beq.n	8000f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d146      	bne.n	8000f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e88:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_RCC_OscConfig+0x4cc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fb97 	bl	80005c0 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fb93 	bl	80005c0 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e06d      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d108      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	4921      	ldr	r1, [pc, #132]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a19      	ldr	r1, [r3, #32]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	491b      	ldr	r1, [pc, #108]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_RCC_OscConfig+0x4cc>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fb67 	bl	80005c0 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff fb63 	bl	80005c0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e03d      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x46a>
 8000f14:	e035      	b.n	8000f82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_RCC_OscConfig+0x4cc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fb50 	bl	80005c0 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff fb4c 	bl	80005c0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e026      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x498>
 8000f42:	e01e      	b.n	8000f82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d107      	bne.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e019      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40007000 	.word	0x40007000
 8000f58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_RCC_OscConfig+0x500>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d001      	beq.n	8000f82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e0d0      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d910      	bls.n	8000fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb2:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 0207 	bic.w	r2, r3, #7
 8000fba:	4965      	ldr	r1, [pc, #404]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fc2:	4b63      	ldr	r3, [pc, #396]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d001      	beq.n	8000fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0b8      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d020      	beq.n	8001022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a58      	ldr	r2, [pc, #352]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800100e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001010:	4b50      	ldr	r3, [pc, #320]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	494d      	ldr	r1, [pc, #308]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	4313      	orrs	r3, r2
 8001020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d040      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d107      	bne.n	8001046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	4b47      	ldr	r3, [pc, #284]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d115      	bne.n	800106e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e07f      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d107      	bne.n	800105e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e073      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e06b      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f023 0203 	bic.w	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4936      	ldr	r1, [pc, #216]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001080:	f7ff fa9e 	bl	80005c0 <HAL_GetTick>
 8001084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001086:	e00a      	b.n	800109e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001088:	f7ff fa9a 	bl	80005c0 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f241 3288 	movw	r2, #5000	; 0x1388
 8001096:	4293      	cmp	r3, r2
 8001098:	d901      	bls.n	800109e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e053      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 020c 	and.w	r2, r3, #12
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d1eb      	bne.n	8001088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d210      	bcs.n	80010e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 0207 	bic.w	r2, r3, #7
 80010c6:	4922      	ldr	r1, [pc, #136]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d001      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e032      	b.n	8001146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4916      	ldr	r1, [pc, #88]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d009      	beq.n	800111e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	490e      	ldr	r1, [pc, #56]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800111e:	f000 f821 	bl	8001164 <HAL_RCC_GetSysClockFreq>
 8001122:	4602      	mov	r2, r0
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	490a      	ldr	r1, [pc, #40]	; (8001158 <HAL_RCC_ClockConfig+0x1c8>)
 8001130:	5ccb      	ldrb	r3, [r1, r3]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_RCC_ClockConfig+0x1cc>)
 8001138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_RCC_ClockConfig+0x1d0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9fc 	bl	800053c <HAL_InitTick>

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000
 8001154:	40021000 	.word	0x40021000
 8001158:	08002108 	.word	0x08002108
 800115c:	20000038 	.word	0x20000038
 8001160:	2000003c 	.word	0x2000003c

08001164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b04      	cmp	r3, #4
 800118c:	d002      	beq.n	8001194 <HAL_RCC_GetSysClockFreq+0x30>
 800118e:	2b08      	cmp	r3, #8
 8001190:	d003      	beq.n	800119a <HAL_RCC_GetSysClockFreq+0x36>
 8001192:	e027      	b.n	80011e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001196:	613b      	str	r3, [r7, #16]
      break;
 8001198:	e027      	b.n	80011ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	0c9b      	lsrs	r3, r3, #18
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d010      	beq.n	80011d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	0c5b      	lsrs	r3, r3, #17
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_RCC_GetSysClockFreq+0x98>)
 80011c6:	fb03 f202 	mul.w	r2, r3, r2
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e004      	b.n	80011de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	613b      	str	r3, [r7, #16]
      break;
 80011e2:	e002      	b.n	80011ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_RCC_GetSysClockFreq+0x98>)
 80011e6:	613b      	str	r3, [r7, #16]
      break;
 80011e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011ea:	693b      	ldr	r3, [r7, #16]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	007a1200 	.word	0x007a1200
 8001200:	08002120 	.word	0x08002120
 8001204:	08002130 	.word	0x08002130
 8001208:	003d0900 	.word	0x003d0900

0800120c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_RCC_GetHCLKFreq+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000038 	.word	0x20000038

08001220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001224:	f7ff fff2 	bl	800120c <HAL_RCC_GetHCLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	4903      	ldr	r1, [pc, #12]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	08002118 	.word	0x08002118

08001248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800124c:	f7ff ffde 	bl	800120c <HAL_RCC_GetHCLKFreq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	0adb      	lsrs	r3, r3, #11
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	4903      	ldr	r1, [pc, #12]	; (800126c <HAL_RCC_GetPCLK2Freq+0x24>)
 800125e:	5ccb      	ldrb	r3, [r1, r3]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	08002118 	.word	0x08002118

08001270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <RCC_Delay+0x34>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <RCC_Delay+0x38>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0a5b      	lsrs	r3, r3, #9
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800128c:	bf00      	nop
  }
  while (Delay --);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	60fa      	str	r2, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <RCC_Delay+0x1c>
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000038 	.word	0x20000038
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e042      	b.n	8001344 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff f85c 	bl	8000390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f9af 	bl	8001654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b20      	cmp	r3, #32
 800136a:	d16d      	bne.n	8001448 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_UART_Transmit+0x2c>
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e066      	b.n	800144a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2221      	movs	r2, #33	; 0x21
 8001386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800138a:	f7ff f919 	bl	80005c0 <HAL_GetTick>
 800138e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a4:	d108      	bne.n	80013b8 <HAL_UART_Transmit+0x6c>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d104      	bne.n	80013b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e003      	b.n	80013c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80013c0:	e02a      	b.n	8001418 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2200      	movs	r2, #0
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f8d2 	bl	8001576 <UART_WaitOnFlagUntilTimeout>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e036      	b.n	800144a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10b      	bne.n	80013fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	3302      	adds	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	e007      	b.n	800140a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	3301      	adds	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1cf      	bne.n	80013c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2200      	movs	r2, #0
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f8a2 	bl	8001576 <UART_WaitOnFlagUntilTimeout>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e006      	b.n	800144a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08a      	sub	sp, #40	; 0x28
 8001456:	af02      	add	r7, sp, #8
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d17c      	bne.n	800156c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_UART_Receive+0x2c>
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e075      	b.n	800156e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2222      	movs	r2, #34	; 0x22
 800148c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001496:	f7ff f893 	bl	80005c0 <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b0:	d108      	bne.n	80014c4 <HAL_UART_Receive+0x72>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d104      	bne.n	80014c4 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	e003      	b.n	80014cc <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80014cc:	e043      	b.n	8001556 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2200      	movs	r2, #0
 80014d6:	2120      	movs	r1, #32
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f84c 	bl	8001576 <UART_WaitOnFlagUntilTimeout>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e042      	b.n	800156e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	3302      	adds	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	e01f      	b.n	8001548 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001510:	d007      	beq.n	8001522 <HAL_UART_Receive+0xd0>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10a      	bne.n	8001530 <HAL_UART_Receive+0xde>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e008      	b.n	8001542 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800153c:	b2da      	uxtb	r2, r3
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800154c:	b29b      	uxth	r3, r3
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1b6      	bne.n	80014ce <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800156c:	2302      	movs	r3, #2
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b090      	sub	sp, #64	; 0x40
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001586:	e050      	b.n	800162a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800158a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158e:	d04c      	beq.n	800162a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001596:	f7ff f813 	bl	80005c0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d241      	bcs.n	800162a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	330c      	adds	r3, #12
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	e853 3f00 	ldrex	r3, [r3]
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	330c      	adds	r3, #12
 80015c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015c6:	637a      	str	r2, [r7, #52]	; 0x34
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ce:	e841 2300 	strex	r3, r2, [r1]
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1e5      	bne.n	80015a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3314      	adds	r3, #20
 80015e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	e853 3f00 	ldrex	r3, [r3]
 80015e8:	613b      	str	r3, [r7, #16]
   return(result);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3314      	adds	r3, #20
 80015f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015fa:	623a      	str	r2, [r7, #32]
 80015fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015fe:	69f9      	ldr	r1, [r7, #28]
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	e841 2300 	strex	r3, r2, [r1]
 8001606:	61bb      	str	r3, [r7, #24]
   return(result);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e5      	bne.n	80015da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e00f      	b.n	800164a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4013      	ands	r3, r2
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	429a      	cmp	r2, r3
 8001646:	d09f      	beq.n	8001588 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800168e:	f023 030c 	bic.w	r3, r3, #12
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	430b      	orrs	r3, r1
 800169a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a2c      	ldr	r2, [pc, #176]	; (8001768 <UART_SetConfig+0x114>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d103      	bne.n	80016c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016bc:	f7ff fdc4 	bl	8001248 <HAL_RCC_GetPCLK2Freq>
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	e002      	b.n	80016ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016c4:	f7ff fdac 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 80016c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009a      	lsls	r2, r3, #2
 80016d4:	441a      	add	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	4a22      	ldr	r2, [pc, #136]	; (800176c <UART_SetConfig+0x118>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	0119      	lsls	r1, r3, #4
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	441a      	add	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <UART_SetConfig+0x118>)
 8001702:	fba3 0302 	umull	r0, r3, r3, r2
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2064      	movs	r0, #100	; 0x64
 800170a:	fb00 f303 	mul.w	r3, r0, r3
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	3332      	adds	r3, #50	; 0x32
 8001714:	4a15      	ldr	r2, [pc, #84]	; (800176c <UART_SetConfig+0x118>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	4419      	add	r1, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009a      	lsls	r2, r3, #2
 800172c:	441a      	add	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fbb2 f2f3 	udiv	r2, r2, r3
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <UART_SetConfig+0x118>)
 800173a:	fba3 0302 	umull	r0, r3, r3, r2
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	fb00 f303 	mul.w	r3, r0, r3
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	3332      	adds	r3, #50	; 0x32
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <UART_SetConfig+0x118>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	f003 020f 	and.w	r2, r3, #15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	440a      	add	r2, r1
 800175e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40013800 	.word	0x40013800
 800176c:	51eb851f 	.word	0x51eb851f

08001770 <__errno>:
 8001770:	4b01      	ldr	r3, [pc, #4]	; (8001778 <__errno+0x8>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000044 	.word	0x20000044

0800177c <__libc_init_array>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	2600      	movs	r6, #0
 8001780:	4d0c      	ldr	r5, [pc, #48]	; (80017b4 <__libc_init_array+0x38>)
 8001782:	4c0d      	ldr	r4, [pc, #52]	; (80017b8 <__libc_init_array+0x3c>)
 8001784:	1b64      	subs	r4, r4, r5
 8001786:	10a4      	asrs	r4, r4, #2
 8001788:	42a6      	cmp	r6, r4
 800178a:	d109      	bne.n	80017a0 <__libc_init_array+0x24>
 800178c:	f000 fc9c 	bl	80020c8 <_init>
 8001790:	2600      	movs	r6, #0
 8001792:	4d0a      	ldr	r5, [pc, #40]	; (80017bc <__libc_init_array+0x40>)
 8001794:	4c0a      	ldr	r4, [pc, #40]	; (80017c0 <__libc_init_array+0x44>)
 8001796:	1b64      	subs	r4, r4, r5
 8001798:	10a4      	asrs	r4, r4, #2
 800179a:	42a6      	cmp	r6, r4
 800179c:	d105      	bne.n	80017aa <__libc_init_array+0x2e>
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a4:	4798      	blx	r3
 80017a6:	3601      	adds	r6, #1
 80017a8:	e7ee      	b.n	8001788 <__libc_init_array+0xc>
 80017aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ae:	4798      	blx	r3
 80017b0:	3601      	adds	r6, #1
 80017b2:	e7f2      	b.n	800179a <__libc_init_array+0x1e>
 80017b4:	080021c8 	.word	0x080021c8
 80017b8:	080021c8 	.word	0x080021c8
 80017bc:	080021c8 	.word	0x080021c8
 80017c0:	080021cc 	.word	0x080021cc

080017c4 <memset>:
 80017c4:	4603      	mov	r3, r0
 80017c6:	4402      	add	r2, r0
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d100      	bne.n	80017ce <memset+0xa>
 80017cc:	4770      	bx	lr
 80017ce:	f803 1b01 	strb.w	r1, [r3], #1
 80017d2:	e7f9      	b.n	80017c8 <memset+0x4>

080017d4 <_free_r>:
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	2900      	cmp	r1, #0
 80017da:	d040      	beq.n	800185e <_free_r+0x8a>
 80017dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017e0:	1f0c      	subs	r4, r1, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfb8      	it	lt
 80017e6:	18e4      	addlt	r4, r4, r3
 80017e8:	f000 f902 	bl	80019f0 <__malloc_lock>
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <_free_r+0x8c>)
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	b933      	cbnz	r3, 8001800 <_free_r+0x2c>
 80017f2:	6063      	str	r3, [r4, #4]
 80017f4:	6014      	str	r4, [r2, #0]
 80017f6:	4628      	mov	r0, r5
 80017f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017fc:	f000 b8fe 	b.w	80019fc <__malloc_unlock>
 8001800:	42a3      	cmp	r3, r4
 8001802:	d908      	bls.n	8001816 <_free_r+0x42>
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	1821      	adds	r1, r4, r0
 8001808:	428b      	cmp	r3, r1
 800180a:	bf01      	itttt	eq
 800180c:	6819      	ldreq	r1, [r3, #0]
 800180e:	685b      	ldreq	r3, [r3, #4]
 8001810:	1809      	addeq	r1, r1, r0
 8001812:	6021      	streq	r1, [r4, #0]
 8001814:	e7ed      	b.n	80017f2 <_free_r+0x1e>
 8001816:	461a      	mov	r2, r3
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	b10b      	cbz	r3, 8001820 <_free_r+0x4c>
 800181c:	42a3      	cmp	r3, r4
 800181e:	d9fa      	bls.n	8001816 <_free_r+0x42>
 8001820:	6811      	ldr	r1, [r2, #0]
 8001822:	1850      	adds	r0, r2, r1
 8001824:	42a0      	cmp	r0, r4
 8001826:	d10b      	bne.n	8001840 <_free_r+0x6c>
 8001828:	6820      	ldr	r0, [r4, #0]
 800182a:	4401      	add	r1, r0
 800182c:	1850      	adds	r0, r2, r1
 800182e:	4283      	cmp	r3, r0
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	d1e0      	bne.n	80017f6 <_free_r+0x22>
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4401      	add	r1, r0
 800183a:	6011      	str	r1, [r2, #0]
 800183c:	6053      	str	r3, [r2, #4]
 800183e:	e7da      	b.n	80017f6 <_free_r+0x22>
 8001840:	d902      	bls.n	8001848 <_free_r+0x74>
 8001842:	230c      	movs	r3, #12
 8001844:	602b      	str	r3, [r5, #0]
 8001846:	e7d6      	b.n	80017f6 <_free_r+0x22>
 8001848:	6820      	ldr	r0, [r4, #0]
 800184a:	1821      	adds	r1, r4, r0
 800184c:	428b      	cmp	r3, r1
 800184e:	bf01      	itttt	eq
 8001850:	6819      	ldreq	r1, [r3, #0]
 8001852:	685b      	ldreq	r3, [r3, #4]
 8001854:	1809      	addeq	r1, r1, r0
 8001856:	6021      	streq	r1, [r4, #0]
 8001858:	6063      	str	r3, [r4, #4]
 800185a:	6054      	str	r4, [r2, #4]
 800185c:	e7cb      	b.n	80017f6 <_free_r+0x22>
 800185e:	bd38      	pop	{r3, r4, r5, pc}
 8001860:	20000118 	.word	0x20000118

08001864 <sbrk_aligned>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	4e0e      	ldr	r6, [pc, #56]	; (80018a0 <sbrk_aligned+0x3c>)
 8001868:	460c      	mov	r4, r1
 800186a:	6831      	ldr	r1, [r6, #0]
 800186c:	4605      	mov	r5, r0
 800186e:	b911      	cbnz	r1, 8001876 <sbrk_aligned+0x12>
 8001870:	f000 f88c 	bl	800198c <_sbrk_r>
 8001874:	6030      	str	r0, [r6, #0]
 8001876:	4621      	mov	r1, r4
 8001878:	4628      	mov	r0, r5
 800187a:	f000 f887 	bl	800198c <_sbrk_r>
 800187e:	1c43      	adds	r3, r0, #1
 8001880:	d00a      	beq.n	8001898 <sbrk_aligned+0x34>
 8001882:	1cc4      	adds	r4, r0, #3
 8001884:	f024 0403 	bic.w	r4, r4, #3
 8001888:	42a0      	cmp	r0, r4
 800188a:	d007      	beq.n	800189c <sbrk_aligned+0x38>
 800188c:	1a21      	subs	r1, r4, r0
 800188e:	4628      	mov	r0, r5
 8001890:	f000 f87c 	bl	800198c <_sbrk_r>
 8001894:	3001      	adds	r0, #1
 8001896:	d101      	bne.n	800189c <sbrk_aligned+0x38>
 8001898:	f04f 34ff 	mov.w	r4, #4294967295
 800189c:	4620      	mov	r0, r4
 800189e:	bd70      	pop	{r4, r5, r6, pc}
 80018a0:	2000011c 	.word	0x2000011c

080018a4 <_malloc_r>:
 80018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a8:	1ccd      	adds	r5, r1, #3
 80018aa:	f025 0503 	bic.w	r5, r5, #3
 80018ae:	3508      	adds	r5, #8
 80018b0:	2d0c      	cmp	r5, #12
 80018b2:	bf38      	it	cc
 80018b4:	250c      	movcc	r5, #12
 80018b6:	2d00      	cmp	r5, #0
 80018b8:	4607      	mov	r7, r0
 80018ba:	db01      	blt.n	80018c0 <_malloc_r+0x1c>
 80018bc:	42a9      	cmp	r1, r5
 80018be:	d905      	bls.n	80018cc <_malloc_r+0x28>
 80018c0:	230c      	movs	r3, #12
 80018c2:	2600      	movs	r6, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4630      	mov	r0, r6
 80018c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018cc:	4e2e      	ldr	r6, [pc, #184]	; (8001988 <_malloc_r+0xe4>)
 80018ce:	f000 f88f 	bl	80019f0 <__malloc_lock>
 80018d2:	6833      	ldr	r3, [r6, #0]
 80018d4:	461c      	mov	r4, r3
 80018d6:	bb34      	cbnz	r4, 8001926 <_malloc_r+0x82>
 80018d8:	4629      	mov	r1, r5
 80018da:	4638      	mov	r0, r7
 80018dc:	f7ff ffc2 	bl	8001864 <sbrk_aligned>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	4604      	mov	r4, r0
 80018e4:	d14d      	bne.n	8001982 <_malloc_r+0xde>
 80018e6:	6834      	ldr	r4, [r6, #0]
 80018e8:	4626      	mov	r6, r4
 80018ea:	2e00      	cmp	r6, #0
 80018ec:	d140      	bne.n	8001970 <_malloc_r+0xcc>
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	4631      	mov	r1, r6
 80018f2:	4638      	mov	r0, r7
 80018f4:	eb04 0803 	add.w	r8, r4, r3
 80018f8:	f000 f848 	bl	800198c <_sbrk_r>
 80018fc:	4580      	cmp	r8, r0
 80018fe:	d13a      	bne.n	8001976 <_malloc_r+0xd2>
 8001900:	6821      	ldr	r1, [r4, #0]
 8001902:	3503      	adds	r5, #3
 8001904:	1a6d      	subs	r5, r5, r1
 8001906:	f025 0503 	bic.w	r5, r5, #3
 800190a:	3508      	adds	r5, #8
 800190c:	2d0c      	cmp	r5, #12
 800190e:	bf38      	it	cc
 8001910:	250c      	movcc	r5, #12
 8001912:	4638      	mov	r0, r7
 8001914:	4629      	mov	r1, r5
 8001916:	f7ff ffa5 	bl	8001864 <sbrk_aligned>
 800191a:	3001      	adds	r0, #1
 800191c:	d02b      	beq.n	8001976 <_malloc_r+0xd2>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	442b      	add	r3, r5
 8001922:	6023      	str	r3, [r4, #0]
 8001924:	e00e      	b.n	8001944 <_malloc_r+0xa0>
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	1b52      	subs	r2, r2, r5
 800192a:	d41e      	bmi.n	800196a <_malloc_r+0xc6>
 800192c:	2a0b      	cmp	r2, #11
 800192e:	d916      	bls.n	800195e <_malloc_r+0xba>
 8001930:	1961      	adds	r1, r4, r5
 8001932:	42a3      	cmp	r3, r4
 8001934:	6025      	str	r5, [r4, #0]
 8001936:	bf18      	it	ne
 8001938:	6059      	strne	r1, [r3, #4]
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	bf08      	it	eq
 800193e:	6031      	streq	r1, [r6, #0]
 8001940:	5162      	str	r2, [r4, r5]
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	4638      	mov	r0, r7
 8001946:	f104 060b 	add.w	r6, r4, #11
 800194a:	f000 f857 	bl	80019fc <__malloc_unlock>
 800194e:	f026 0607 	bic.w	r6, r6, #7
 8001952:	1d23      	adds	r3, r4, #4
 8001954:	1af2      	subs	r2, r6, r3
 8001956:	d0b6      	beq.n	80018c6 <_malloc_r+0x22>
 8001958:	1b9b      	subs	r3, r3, r6
 800195a:	50a3      	str	r3, [r4, r2]
 800195c:	e7b3      	b.n	80018c6 <_malloc_r+0x22>
 800195e:	6862      	ldr	r2, [r4, #4]
 8001960:	42a3      	cmp	r3, r4
 8001962:	bf0c      	ite	eq
 8001964:	6032      	streq	r2, [r6, #0]
 8001966:	605a      	strne	r2, [r3, #4]
 8001968:	e7ec      	b.n	8001944 <_malloc_r+0xa0>
 800196a:	4623      	mov	r3, r4
 800196c:	6864      	ldr	r4, [r4, #4]
 800196e:	e7b2      	b.n	80018d6 <_malloc_r+0x32>
 8001970:	4634      	mov	r4, r6
 8001972:	6876      	ldr	r6, [r6, #4]
 8001974:	e7b9      	b.n	80018ea <_malloc_r+0x46>
 8001976:	230c      	movs	r3, #12
 8001978:	4638      	mov	r0, r7
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	f000 f83e 	bl	80019fc <__malloc_unlock>
 8001980:	e7a1      	b.n	80018c6 <_malloc_r+0x22>
 8001982:	6025      	str	r5, [r4, #0]
 8001984:	e7de      	b.n	8001944 <_malloc_r+0xa0>
 8001986:	bf00      	nop
 8001988:	20000118 	.word	0x20000118

0800198c <_sbrk_r>:
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	2300      	movs	r3, #0
 8001990:	4d05      	ldr	r5, [pc, #20]	; (80019a8 <_sbrk_r+0x1c>)
 8001992:	4604      	mov	r4, r0
 8001994:	4608      	mov	r0, r1
 8001996:	602b      	str	r3, [r5, #0]
 8001998:	f7fe fd6e 	bl	8000478 <_sbrk>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	d102      	bne.n	80019a6 <_sbrk_r+0x1a>
 80019a0:	682b      	ldr	r3, [r5, #0]
 80019a2:	b103      	cbz	r3, 80019a6 <_sbrk_r+0x1a>
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	20000124 	.word	0x20000124

080019ac <siprintf>:
 80019ac:	b40e      	push	{r1, r2, r3}
 80019ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019b2:	b500      	push	{lr}
 80019b4:	b09c      	sub	sp, #112	; 0x70
 80019b6:	ab1d      	add	r3, sp, #116	; 0x74
 80019b8:	9002      	str	r0, [sp, #8]
 80019ba:	9006      	str	r0, [sp, #24]
 80019bc:	9107      	str	r1, [sp, #28]
 80019be:	9104      	str	r1, [sp, #16]
 80019c0:	4808      	ldr	r0, [pc, #32]	; (80019e4 <siprintf+0x38>)
 80019c2:	4909      	ldr	r1, [pc, #36]	; (80019e8 <siprintf+0x3c>)
 80019c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80019c8:	9105      	str	r1, [sp, #20]
 80019ca:	6800      	ldr	r0, [r0, #0]
 80019cc:	a902      	add	r1, sp, #8
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f000 f876 	bl	8001ac0 <_svfiprintf_r>
 80019d4:	2200      	movs	r2, #0
 80019d6:	9b02      	ldr	r3, [sp, #8]
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	b01c      	add	sp, #112	; 0x70
 80019dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80019e0:	b003      	add	sp, #12
 80019e2:	4770      	bx	lr
 80019e4:	20000044 	.word	0x20000044
 80019e8:	ffff0208 	.word	0xffff0208

080019ec <__retarget_lock_acquire_recursive>:
 80019ec:	4770      	bx	lr

080019ee <__retarget_lock_release_recursive>:
 80019ee:	4770      	bx	lr

080019f0 <__malloc_lock>:
 80019f0:	4801      	ldr	r0, [pc, #4]	; (80019f8 <__malloc_lock+0x8>)
 80019f2:	f7ff bffb 	b.w	80019ec <__retarget_lock_acquire_recursive>
 80019f6:	bf00      	nop
 80019f8:	20000120 	.word	0x20000120

080019fc <__malloc_unlock>:
 80019fc:	4801      	ldr	r0, [pc, #4]	; (8001a04 <__malloc_unlock+0x8>)
 80019fe:	f7ff bff6 	b.w	80019ee <__retarget_lock_release_recursive>
 8001a02:	bf00      	nop
 8001a04:	20000120 	.word	0x20000120

08001a08 <__ssputs_r>:
 8001a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a0c:	688e      	ldr	r6, [r1, #8]
 8001a0e:	4682      	mov	sl, r0
 8001a10:	429e      	cmp	r6, r3
 8001a12:	460c      	mov	r4, r1
 8001a14:	4690      	mov	r8, r2
 8001a16:	461f      	mov	r7, r3
 8001a18:	d838      	bhi.n	8001a8c <__ssputs_r+0x84>
 8001a1a:	898a      	ldrh	r2, [r1, #12]
 8001a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a20:	d032      	beq.n	8001a88 <__ssputs_r+0x80>
 8001a22:	6825      	ldr	r5, [r4, #0]
 8001a24:	6909      	ldr	r1, [r1, #16]
 8001a26:	3301      	adds	r3, #1
 8001a28:	eba5 0901 	sub.w	r9, r5, r1
 8001a2c:	6965      	ldr	r5, [r4, #20]
 8001a2e:	444b      	add	r3, r9
 8001a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a38:	106d      	asrs	r5, r5, #1
 8001a3a:	429d      	cmp	r5, r3
 8001a3c:	bf38      	it	cc
 8001a3e:	461d      	movcc	r5, r3
 8001a40:	0553      	lsls	r3, r2, #21
 8001a42:	d531      	bpl.n	8001aa8 <__ssputs_r+0xa0>
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7ff ff2d 	bl	80018a4 <_malloc_r>
 8001a4a:	4606      	mov	r6, r0
 8001a4c:	b950      	cbnz	r0, 8001a64 <__ssputs_r+0x5c>
 8001a4e:	230c      	movs	r3, #12
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f8ca 3000 	str.w	r3, [sl]
 8001a58:	89a3      	ldrh	r3, [r4, #12]
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5e:	81a3      	strh	r3, [r4, #12]
 8001a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a64:	464a      	mov	r2, r9
 8001a66:	6921      	ldr	r1, [r4, #16]
 8001a68:	f000 face 	bl	8002008 <memcpy>
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	81a3      	strh	r3, [r4, #12]
 8001a78:	6126      	str	r6, [r4, #16]
 8001a7a:	444e      	add	r6, r9
 8001a7c:	6026      	str	r6, [r4, #0]
 8001a7e:	463e      	mov	r6, r7
 8001a80:	6165      	str	r5, [r4, #20]
 8001a82:	eba5 0509 	sub.w	r5, r5, r9
 8001a86:	60a5      	str	r5, [r4, #8]
 8001a88:	42be      	cmp	r6, r7
 8001a8a:	d900      	bls.n	8001a8e <__ssputs_r+0x86>
 8001a8c:	463e      	mov	r6, r7
 8001a8e:	4632      	mov	r2, r6
 8001a90:	4641      	mov	r1, r8
 8001a92:	6820      	ldr	r0, [r4, #0]
 8001a94:	f000 fac6 	bl	8002024 <memmove>
 8001a98:	68a3      	ldr	r3, [r4, #8]
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	1b9b      	subs	r3, r3, r6
 8001a9e:	60a3      	str	r3, [r4, #8]
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	4433      	add	r3, r6
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	e7db      	b.n	8001a60 <__ssputs_r+0x58>
 8001aa8:	462a      	mov	r2, r5
 8001aaa:	f000 fad5 	bl	8002058 <_realloc_r>
 8001aae:	4606      	mov	r6, r0
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d1e1      	bne.n	8001a78 <__ssputs_r+0x70>
 8001ab4:	4650      	mov	r0, sl
 8001ab6:	6921      	ldr	r1, [r4, #16]
 8001ab8:	f7ff fe8c 	bl	80017d4 <_free_r>
 8001abc:	e7c7      	b.n	8001a4e <__ssputs_r+0x46>
	...

08001ac0 <_svfiprintf_r>:
 8001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	898b      	ldrh	r3, [r1, #12]
 8001ac8:	4607      	mov	r7, r0
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	460d      	mov	r5, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	b09d      	sub	sp, #116	; 0x74
 8001ad2:	d50e      	bpl.n	8001af2 <_svfiprintf_r+0x32>
 8001ad4:	690b      	ldr	r3, [r1, #16]
 8001ad6:	b963      	cbnz	r3, 8001af2 <_svfiprintf_r+0x32>
 8001ad8:	2140      	movs	r1, #64	; 0x40
 8001ada:	f7ff fee3 	bl	80018a4 <_malloc_r>
 8001ade:	6028      	str	r0, [r5, #0]
 8001ae0:	6128      	str	r0, [r5, #16]
 8001ae2:	b920      	cbnz	r0, 8001aee <_svfiprintf_r+0x2e>
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	e0d1      	b.n	8001c92 <_svfiprintf_r+0x1d2>
 8001aee:	2340      	movs	r3, #64	; 0x40
 8001af0:	616b      	str	r3, [r5, #20]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9309      	str	r3, [sp, #36]	; 0x24
 8001af6:	2320      	movs	r3, #32
 8001af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001afc:	2330      	movs	r3, #48	; 0x30
 8001afe:	f04f 0901 	mov.w	r9, #1
 8001b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001cac <_svfiprintf_r+0x1ec>
 8001b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b0e:	4623      	mov	r3, r4
 8001b10:	469a      	mov	sl, r3
 8001b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b16:	b10a      	cbz	r2, 8001b1c <_svfiprintf_r+0x5c>
 8001b18:	2a25      	cmp	r2, #37	; 0x25
 8001b1a:	d1f9      	bne.n	8001b10 <_svfiprintf_r+0x50>
 8001b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8001b20:	d00b      	beq.n	8001b3a <_svfiprintf_r+0x7a>
 8001b22:	465b      	mov	r3, fp
 8001b24:	4622      	mov	r2, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	4638      	mov	r0, r7
 8001b2a:	f7ff ff6d 	bl	8001a08 <__ssputs_r>
 8001b2e:	3001      	adds	r0, #1
 8001b30:	f000 80aa 	beq.w	8001c88 <_svfiprintf_r+0x1c8>
 8001b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b36:	445a      	add	r2, fp
 8001b38:	9209      	str	r2, [sp, #36]	; 0x24
 8001b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a2 	beq.w	8001c88 <_svfiprintf_r+0x1c8>
 8001b44:	2300      	movs	r3, #0
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b4e:	f10a 0a01 	add.w	sl, sl, #1
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	9307      	str	r3, [sp, #28]
 8001b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8001b5c:	4654      	mov	r4, sl
 8001b5e:	2205      	movs	r2, #5
 8001b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b64:	4851      	ldr	r0, [pc, #324]	; (8001cac <_svfiprintf_r+0x1ec>)
 8001b66:	f000 fa41 	bl	8001fec <memchr>
 8001b6a:	9a04      	ldr	r2, [sp, #16]
 8001b6c:	b9d8      	cbnz	r0, 8001ba6 <_svfiprintf_r+0xe6>
 8001b6e:	06d0      	lsls	r0, r2, #27
 8001b70:	bf44      	itt	mi
 8001b72:	2320      	movmi	r3, #32
 8001b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b78:	0711      	lsls	r1, r2, #28
 8001b7a:	bf44      	itt	mi
 8001b7c:	232b      	movmi	r3, #43	; 0x2b
 8001b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b82:	f89a 3000 	ldrb.w	r3, [sl]
 8001b86:	2b2a      	cmp	r3, #42	; 0x2a
 8001b88:	d015      	beq.n	8001bb6 <_svfiprintf_r+0xf6>
 8001b8a:	4654      	mov	r4, sl
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f04f 0c0a 	mov.w	ip, #10
 8001b92:	9a07      	ldr	r2, [sp, #28]
 8001b94:	4621      	mov	r1, r4
 8001b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b9a:	3b30      	subs	r3, #48	; 0x30
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d94e      	bls.n	8001c3e <_svfiprintf_r+0x17e>
 8001ba0:	b1b0      	cbz	r0, 8001bd0 <_svfiprintf_r+0x110>
 8001ba2:	9207      	str	r2, [sp, #28]
 8001ba4:	e014      	b.n	8001bd0 <_svfiprintf_r+0x110>
 8001ba6:	eba0 0308 	sub.w	r3, r0, r8
 8001baa:	fa09 f303 	lsl.w	r3, r9, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	46a2      	mov	sl, r4
 8001bb2:	9304      	str	r3, [sp, #16]
 8001bb4:	e7d2      	b.n	8001b5c <_svfiprintf_r+0x9c>
 8001bb6:	9b03      	ldr	r3, [sp, #12]
 8001bb8:	1d19      	adds	r1, r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	9103      	str	r1, [sp, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bfbb      	ittet	lt
 8001bc2:	425b      	neglt	r3, r3
 8001bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8001bc8:	9307      	strge	r3, [sp, #28]
 8001bca:	9307      	strlt	r3, [sp, #28]
 8001bcc:	bfb8      	it	lt
 8001bce:	9204      	strlt	r2, [sp, #16]
 8001bd0:	7823      	ldrb	r3, [r4, #0]
 8001bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8001bd4:	d10c      	bne.n	8001bf0 <_svfiprintf_r+0x130>
 8001bd6:	7863      	ldrb	r3, [r4, #1]
 8001bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8001bda:	d135      	bne.n	8001c48 <_svfiprintf_r+0x188>
 8001bdc:	9b03      	ldr	r3, [sp, #12]
 8001bde:	3402      	adds	r4, #2
 8001be0:	1d1a      	adds	r2, r3, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	9203      	str	r2, [sp, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bfb8      	it	lt
 8001bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8001bee:	9305      	str	r3, [sp, #20]
 8001bf0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001cb0 <_svfiprintf_r+0x1f0>
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	7821      	ldrb	r1, [r4, #0]
 8001bfa:	f000 f9f7 	bl	8001fec <memchr>
 8001bfe:	b140      	cbz	r0, 8001c12 <_svfiprintf_r+0x152>
 8001c00:	2340      	movs	r3, #64	; 0x40
 8001c02:	eba0 000a 	sub.w	r0, r0, sl
 8001c06:	fa03 f000 	lsl.w	r0, r3, r0
 8001c0a:	9b04      	ldr	r3, [sp, #16]
 8001c0c:	3401      	adds	r4, #1
 8001c0e:	4303      	orrs	r3, r0
 8001c10:	9304      	str	r3, [sp, #16]
 8001c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c16:	2206      	movs	r2, #6
 8001c18:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <_svfiprintf_r+0x1f4>)
 8001c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c1e:	f000 f9e5 	bl	8001fec <memchr>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d038      	beq.n	8001c98 <_svfiprintf_r+0x1d8>
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <_svfiprintf_r+0x1f8>)
 8001c28:	bb1b      	cbnz	r3, 8001c72 <_svfiprintf_r+0x1b2>
 8001c2a:	9b03      	ldr	r3, [sp, #12]
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	f023 0307 	bic.w	r3, r3, #7
 8001c32:	3308      	adds	r3, #8
 8001c34:	9303      	str	r3, [sp, #12]
 8001c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c38:	4433      	add	r3, r6
 8001c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c3c:	e767      	b.n	8001b0e <_svfiprintf_r+0x4e>
 8001c3e:	460c      	mov	r4, r1
 8001c40:	2001      	movs	r0, #1
 8001c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c46:	e7a5      	b.n	8001b94 <_svfiprintf_r+0xd4>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f04f 0c0a 	mov.w	ip, #10
 8001c4e:	4619      	mov	r1, r3
 8001c50:	3401      	adds	r4, #1
 8001c52:	9305      	str	r3, [sp, #20]
 8001c54:	4620      	mov	r0, r4
 8001c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c5a:	3a30      	subs	r2, #48	; 0x30
 8001c5c:	2a09      	cmp	r2, #9
 8001c5e:	d903      	bls.n	8001c68 <_svfiprintf_r+0x1a8>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0c5      	beq.n	8001bf0 <_svfiprintf_r+0x130>
 8001c64:	9105      	str	r1, [sp, #20]
 8001c66:	e7c3      	b.n	8001bf0 <_svfiprintf_r+0x130>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c70:	e7f0      	b.n	8001c54 <_svfiprintf_r+0x194>
 8001c72:	ab03      	add	r3, sp, #12
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	462a      	mov	r2, r5
 8001c78:	4638      	mov	r0, r7
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_svfiprintf_r+0x1fc>)
 8001c7c:	a904      	add	r1, sp, #16
 8001c7e:	f3af 8000 	nop.w
 8001c82:	1c42      	adds	r2, r0, #1
 8001c84:	4606      	mov	r6, r0
 8001c86:	d1d6      	bne.n	8001c36 <_svfiprintf_r+0x176>
 8001c88:	89ab      	ldrh	r3, [r5, #12]
 8001c8a:	065b      	lsls	r3, r3, #25
 8001c8c:	f53f af2c 	bmi.w	8001ae8 <_svfiprintf_r+0x28>
 8001c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c92:	b01d      	add	sp, #116	; 0x74
 8001c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c98:	ab03      	add	r3, sp, #12
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	462a      	mov	r2, r5
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <_svfiprintf_r+0x1fc>)
 8001ca2:	a904      	add	r1, sp, #16
 8001ca4:	f000 f87c 	bl	8001da0 <_printf_i>
 8001ca8:	e7eb      	b.n	8001c82 <_svfiprintf_r+0x1c2>
 8001caa:	bf00      	nop
 8001cac:	08002194 	.word	0x08002194
 8001cb0:	0800219a 	.word	0x0800219a
 8001cb4:	0800219e 	.word	0x0800219e
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	08001a09 	.word	0x08001a09

08001cc0 <_printf_common>:
 8001cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc4:	4616      	mov	r6, r2
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	688a      	ldr	r2, [r1, #8]
 8001cca:	690b      	ldr	r3, [r1, #16]
 8001ccc:	4607      	mov	r7, r0
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	bfb8      	it	lt
 8001cd2:	4613      	movlt	r3, r2
 8001cd4:	6033      	str	r3, [r6, #0]
 8001cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cda:	460c      	mov	r4, r1
 8001cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ce0:	b10a      	cbz	r2, 8001ce6 <_printf_common+0x26>
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	6033      	str	r3, [r6, #0]
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	0699      	lsls	r1, r3, #26
 8001cea:	bf42      	ittt	mi
 8001cec:	6833      	ldrmi	r3, [r6, #0]
 8001cee:	3302      	addmi	r3, #2
 8001cf0:	6033      	strmi	r3, [r6, #0]
 8001cf2:	6825      	ldr	r5, [r4, #0]
 8001cf4:	f015 0506 	ands.w	r5, r5, #6
 8001cf8:	d106      	bne.n	8001d08 <_printf_common+0x48>
 8001cfa:	f104 0a19 	add.w	sl, r4, #25
 8001cfe:	68e3      	ldr	r3, [r4, #12]
 8001d00:	6832      	ldr	r2, [r6, #0]
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	42ab      	cmp	r3, r5
 8001d06:	dc28      	bgt.n	8001d5a <_printf_common+0x9a>
 8001d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d0c:	1e13      	subs	r3, r2, #0
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	bf18      	it	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	0692      	lsls	r2, r2, #26
 8001d16:	d42d      	bmi.n	8001d74 <_printf_common+0xb4>
 8001d18:	4649      	mov	r1, r9
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d20:	47c0      	blx	r8
 8001d22:	3001      	adds	r0, #1
 8001d24:	d020      	beq.n	8001d68 <_printf_common+0xa8>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	68e5      	ldr	r5, [r4, #12]
 8001d2a:	f003 0306 	and.w	r3, r3, #6
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf18      	it	ne
 8001d32:	2500      	movne	r5, #0
 8001d34:	6832      	ldr	r2, [r6, #0]
 8001d36:	f04f 0600 	mov.w	r6, #0
 8001d3a:	68a3      	ldr	r3, [r4, #8]
 8001d3c:	bf08      	it	eq
 8001d3e:	1aad      	subeq	r5, r5, r2
 8001d40:	6922      	ldr	r2, [r4, #16]
 8001d42:	bf08      	it	eq
 8001d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	bfc4      	itt	gt
 8001d4c:	1a9b      	subgt	r3, r3, r2
 8001d4e:	18ed      	addgt	r5, r5, r3
 8001d50:	341a      	adds	r4, #26
 8001d52:	42b5      	cmp	r5, r6
 8001d54:	d11a      	bne.n	8001d8c <_printf_common+0xcc>
 8001d56:	2000      	movs	r0, #0
 8001d58:	e008      	b.n	8001d6c <_printf_common+0xac>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	4649      	mov	r1, r9
 8001d60:	4638      	mov	r0, r7
 8001d62:	47c0      	blx	r8
 8001d64:	3001      	adds	r0, #1
 8001d66:	d103      	bne.n	8001d70 <_printf_common+0xb0>
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d70:	3501      	adds	r5, #1
 8001d72:	e7c4      	b.n	8001cfe <_printf_common+0x3e>
 8001d74:	2030      	movs	r0, #48	; 0x30
 8001d76:	18e1      	adds	r1, r4, r3
 8001d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d82:	4422      	add	r2, r4
 8001d84:	3302      	adds	r3, #2
 8001d86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d8a:	e7c5      	b.n	8001d18 <_printf_common+0x58>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4622      	mov	r2, r4
 8001d90:	4649      	mov	r1, r9
 8001d92:	4638      	mov	r0, r7
 8001d94:	47c0      	blx	r8
 8001d96:	3001      	adds	r0, #1
 8001d98:	d0e6      	beq.n	8001d68 <_printf_common+0xa8>
 8001d9a:	3601      	adds	r6, #1
 8001d9c:	e7d9      	b.n	8001d52 <_printf_common+0x92>
	...

08001da0 <_printf_i>:
 8001da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001da4:	7e0f      	ldrb	r7, [r1, #24]
 8001da6:	4691      	mov	r9, r2
 8001da8:	2f78      	cmp	r7, #120	; 0x78
 8001daa:	4680      	mov	r8, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	469a      	mov	sl, r3
 8001db0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001db6:	d807      	bhi.n	8001dc8 <_printf_i+0x28>
 8001db8:	2f62      	cmp	r7, #98	; 0x62
 8001dba:	d80a      	bhi.n	8001dd2 <_printf_i+0x32>
 8001dbc:	2f00      	cmp	r7, #0
 8001dbe:	f000 80d9 	beq.w	8001f74 <_printf_i+0x1d4>
 8001dc2:	2f58      	cmp	r7, #88	; 0x58
 8001dc4:	f000 80a4 	beq.w	8001f10 <_printf_i+0x170>
 8001dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001dd0:	e03a      	b.n	8001e48 <_printf_i+0xa8>
 8001dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001dd6:	2b15      	cmp	r3, #21
 8001dd8:	d8f6      	bhi.n	8001dc8 <_printf_i+0x28>
 8001dda:	a101      	add	r1, pc, #4	; (adr r1, 8001de0 <_printf_i+0x40>)
 8001ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001de0:	08001e39 	.word	0x08001e39
 8001de4:	08001e4d 	.word	0x08001e4d
 8001de8:	08001dc9 	.word	0x08001dc9
 8001dec:	08001dc9 	.word	0x08001dc9
 8001df0:	08001dc9 	.word	0x08001dc9
 8001df4:	08001dc9 	.word	0x08001dc9
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001dc9 	.word	0x08001dc9
 8001e00:	08001dc9 	.word	0x08001dc9
 8001e04:	08001dc9 	.word	0x08001dc9
 8001e08:	08001dc9 	.word	0x08001dc9
 8001e0c:	08001f5b 	.word	0x08001f5b
 8001e10:	08001e7d 	.word	0x08001e7d
 8001e14:	08001f3d 	.word	0x08001f3d
 8001e18:	08001dc9 	.word	0x08001dc9
 8001e1c:	08001dc9 	.word	0x08001dc9
 8001e20:	08001f7d 	.word	0x08001f7d
 8001e24:	08001dc9 	.word	0x08001dc9
 8001e28:	08001e7d 	.word	0x08001e7d
 8001e2c:	08001dc9 	.word	0x08001dc9
 8001e30:	08001dc9 	.word	0x08001dc9
 8001e34:	08001f45 	.word	0x08001f45
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	602a      	str	r2, [r5, #0]
 8001e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0a4      	b.n	8001f96 <_printf_i+0x1f6>
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	6829      	ldr	r1, [r5, #0]
 8001e50:	0606      	lsls	r6, r0, #24
 8001e52:	f101 0304 	add.w	r3, r1, #4
 8001e56:	d50a      	bpl.n	8001e6e <_printf_i+0xce>
 8001e58:	680e      	ldr	r6, [r1, #0]
 8001e5a:	602b      	str	r3, [r5, #0]
 8001e5c:	2e00      	cmp	r6, #0
 8001e5e:	da03      	bge.n	8001e68 <_printf_i+0xc8>
 8001e60:	232d      	movs	r3, #45	; 0x2d
 8001e62:	4276      	negs	r6, r6
 8001e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e68:	230a      	movs	r3, #10
 8001e6a:	485e      	ldr	r0, [pc, #376]	; (8001fe4 <_printf_i+0x244>)
 8001e6c:	e019      	b.n	8001ea2 <_printf_i+0x102>
 8001e6e:	680e      	ldr	r6, [r1, #0]
 8001e70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e74:	602b      	str	r3, [r5, #0]
 8001e76:	bf18      	it	ne
 8001e78:	b236      	sxthne	r6, r6
 8001e7a:	e7ef      	b.n	8001e5c <_printf_i+0xbc>
 8001e7c:	682b      	ldr	r3, [r5, #0]
 8001e7e:	6820      	ldr	r0, [r4, #0]
 8001e80:	1d19      	adds	r1, r3, #4
 8001e82:	6029      	str	r1, [r5, #0]
 8001e84:	0601      	lsls	r1, r0, #24
 8001e86:	d501      	bpl.n	8001e8c <_printf_i+0xec>
 8001e88:	681e      	ldr	r6, [r3, #0]
 8001e8a:	e002      	b.n	8001e92 <_printf_i+0xf2>
 8001e8c:	0646      	lsls	r6, r0, #25
 8001e8e:	d5fb      	bpl.n	8001e88 <_printf_i+0xe8>
 8001e90:	881e      	ldrh	r6, [r3, #0]
 8001e92:	2f6f      	cmp	r7, #111	; 0x6f
 8001e94:	bf0c      	ite	eq
 8001e96:	2308      	moveq	r3, #8
 8001e98:	230a      	movne	r3, #10
 8001e9a:	4852      	ldr	r0, [pc, #328]	; (8001fe4 <_printf_i+0x244>)
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ea2:	6865      	ldr	r5, [r4, #4]
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	bfa8      	it	ge
 8001ea8:	6821      	ldrge	r1, [r4, #0]
 8001eaa:	60a5      	str	r5, [r4, #8]
 8001eac:	bfa4      	itt	ge
 8001eae:	f021 0104 	bicge.w	r1, r1, #4
 8001eb2:	6021      	strge	r1, [r4, #0]
 8001eb4:	b90e      	cbnz	r6, 8001eba <_printf_i+0x11a>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d04d      	beq.n	8001f56 <_printf_i+0x1b6>
 8001eba:	4615      	mov	r5, r2
 8001ebc:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ec0:	fb03 6711 	mls	r7, r3, r1, r6
 8001ec4:	5dc7      	ldrb	r7, [r0, r7]
 8001ec6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001eca:	4637      	mov	r7, r6
 8001ecc:	42bb      	cmp	r3, r7
 8001ece:	460e      	mov	r6, r1
 8001ed0:	d9f4      	bls.n	8001ebc <_printf_i+0x11c>
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d10b      	bne.n	8001eee <_printf_i+0x14e>
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	07de      	lsls	r6, r3, #31
 8001eda:	d508      	bpl.n	8001eee <_printf_i+0x14e>
 8001edc:	6923      	ldr	r3, [r4, #16]
 8001ede:	6861      	ldr	r1, [r4, #4]
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	bfde      	ittt	le
 8001ee4:	2330      	movle	r3, #48	; 0x30
 8001ee6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001eea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001eee:	1b52      	subs	r2, r2, r5
 8001ef0:	6122      	str	r2, [r4, #16]
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	f8cd a000 	str.w	sl, [sp]
 8001efc:	aa03      	add	r2, sp, #12
 8001efe:	f7ff fedf 	bl	8001cc0 <_printf_common>
 8001f02:	3001      	adds	r0, #1
 8001f04:	d14c      	bne.n	8001fa0 <_printf_i+0x200>
 8001f06:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0a:	b004      	add	sp, #16
 8001f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f10:	4834      	ldr	r0, [pc, #208]	; (8001fe4 <_printf_i+0x244>)
 8001f12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001f16:	6829      	ldr	r1, [r5, #0]
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8001f1e:	6029      	str	r1, [r5, #0]
 8001f20:	061d      	lsls	r5, r3, #24
 8001f22:	d514      	bpl.n	8001f4e <_printf_i+0x1ae>
 8001f24:	07df      	lsls	r7, r3, #31
 8001f26:	bf44      	itt	mi
 8001f28:	f043 0320 	orrmi.w	r3, r3, #32
 8001f2c:	6023      	strmi	r3, [r4, #0]
 8001f2e:	b91e      	cbnz	r6, 8001f38 <_printf_i+0x198>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	f023 0320 	bic.w	r3, r3, #32
 8001f36:	6023      	str	r3, [r4, #0]
 8001f38:	2310      	movs	r3, #16
 8001f3a:	e7af      	b.n	8001e9c <_printf_i+0xfc>
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	6023      	str	r3, [r4, #0]
 8001f44:	2378      	movs	r3, #120	; 0x78
 8001f46:	4828      	ldr	r0, [pc, #160]	; (8001fe8 <_printf_i+0x248>)
 8001f48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f4c:	e7e3      	b.n	8001f16 <_printf_i+0x176>
 8001f4e:	0659      	lsls	r1, r3, #25
 8001f50:	bf48      	it	mi
 8001f52:	b2b6      	uxthmi	r6, r6
 8001f54:	e7e6      	b.n	8001f24 <_printf_i+0x184>
 8001f56:	4615      	mov	r5, r2
 8001f58:	e7bb      	b.n	8001ed2 <_printf_i+0x132>
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	6826      	ldr	r6, [r4, #0]
 8001f5e:	1d18      	adds	r0, r3, #4
 8001f60:	6961      	ldr	r1, [r4, #20]
 8001f62:	6028      	str	r0, [r5, #0]
 8001f64:	0635      	lsls	r5, r6, #24
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	d501      	bpl.n	8001f6e <_printf_i+0x1ce>
 8001f6a:	6019      	str	r1, [r3, #0]
 8001f6c:	e002      	b.n	8001f74 <_printf_i+0x1d4>
 8001f6e:	0670      	lsls	r0, r6, #25
 8001f70:	d5fb      	bpl.n	8001f6a <_printf_i+0x1ca>
 8001f72:	8019      	strh	r1, [r3, #0]
 8001f74:	2300      	movs	r3, #0
 8001f76:	4615      	mov	r5, r2
 8001f78:	6123      	str	r3, [r4, #16]
 8001f7a:	e7ba      	b.n	8001ef2 <_printf_i+0x152>
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	1d1a      	adds	r2, r3, #4
 8001f82:	602a      	str	r2, [r5, #0]
 8001f84:	681d      	ldr	r5, [r3, #0]
 8001f86:	6862      	ldr	r2, [r4, #4]
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f000 f82f 	bl	8001fec <memchr>
 8001f8e:	b108      	cbz	r0, 8001f94 <_printf_i+0x1f4>
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	6060      	str	r0, [r4, #4]
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	6123      	str	r3, [r4, #16]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f9e:	e7a8      	b.n	8001ef2 <_printf_i+0x152>
 8001fa0:	462a      	mov	r2, r5
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	4640      	mov	r0, r8
 8001fa6:	6923      	ldr	r3, [r4, #16]
 8001fa8:	47d0      	blx	sl
 8001faa:	3001      	adds	r0, #1
 8001fac:	d0ab      	beq.n	8001f06 <_printf_i+0x166>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	079b      	lsls	r3, r3, #30
 8001fb2:	d413      	bmi.n	8001fdc <_printf_i+0x23c>
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	9b03      	ldr	r3, [sp, #12]
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	bfb8      	it	lt
 8001fbc:	4618      	movlt	r0, r3
 8001fbe:	e7a4      	b.n	8001f0a <_printf_i+0x16a>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4632      	mov	r2, r6
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	47d0      	blx	sl
 8001fca:	3001      	adds	r0, #1
 8001fcc:	d09b      	beq.n	8001f06 <_printf_i+0x166>
 8001fce:	3501      	adds	r5, #1
 8001fd0:	68e3      	ldr	r3, [r4, #12]
 8001fd2:	9903      	ldr	r1, [sp, #12]
 8001fd4:	1a5b      	subs	r3, r3, r1
 8001fd6:	42ab      	cmp	r3, r5
 8001fd8:	dcf2      	bgt.n	8001fc0 <_printf_i+0x220>
 8001fda:	e7eb      	b.n	8001fb4 <_printf_i+0x214>
 8001fdc:	2500      	movs	r5, #0
 8001fde:	f104 0619 	add.w	r6, r4, #25
 8001fe2:	e7f5      	b.n	8001fd0 <_printf_i+0x230>
 8001fe4:	080021a5 	.word	0x080021a5
 8001fe8:	080021b6 	.word	0x080021b6

08001fec <memchr>:
 8001fec:	4603      	mov	r3, r0
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	b2c9      	uxtb	r1, r1
 8001ff2:	4402      	add	r2, r0
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	d101      	bne.n	8001ffe <memchr+0x12>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e003      	b.n	8002006 <memchr+0x1a>
 8001ffe:	7804      	ldrb	r4, [r0, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	428c      	cmp	r4, r1
 8002004:	d1f6      	bne.n	8001ff4 <memchr+0x8>
 8002006:	bd10      	pop	{r4, pc}

08002008 <memcpy>:
 8002008:	440a      	add	r2, r1
 800200a:	4291      	cmp	r1, r2
 800200c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002010:	d100      	bne.n	8002014 <memcpy+0xc>
 8002012:	4770      	bx	lr
 8002014:	b510      	push	{r4, lr}
 8002016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800201a:	4291      	cmp	r1, r2
 800201c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002020:	d1f9      	bne.n	8002016 <memcpy+0xe>
 8002022:	bd10      	pop	{r4, pc}

08002024 <memmove>:
 8002024:	4288      	cmp	r0, r1
 8002026:	b510      	push	{r4, lr}
 8002028:	eb01 0402 	add.w	r4, r1, r2
 800202c:	d902      	bls.n	8002034 <memmove+0x10>
 800202e:	4284      	cmp	r4, r0
 8002030:	4623      	mov	r3, r4
 8002032:	d807      	bhi.n	8002044 <memmove+0x20>
 8002034:	1e43      	subs	r3, r0, #1
 8002036:	42a1      	cmp	r1, r4
 8002038:	d008      	beq.n	800204c <memmove+0x28>
 800203a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800203e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002042:	e7f8      	b.n	8002036 <memmove+0x12>
 8002044:	4601      	mov	r1, r0
 8002046:	4402      	add	r2, r0
 8002048:	428a      	cmp	r2, r1
 800204a:	d100      	bne.n	800204e <memmove+0x2a>
 800204c:	bd10      	pop	{r4, pc}
 800204e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002056:	e7f7      	b.n	8002048 <memmove+0x24>

08002058 <_realloc_r>:
 8002058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800205c:	4680      	mov	r8, r0
 800205e:	4614      	mov	r4, r2
 8002060:	460e      	mov	r6, r1
 8002062:	b921      	cbnz	r1, 800206e <_realloc_r+0x16>
 8002064:	4611      	mov	r1, r2
 8002066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800206a:	f7ff bc1b 	b.w	80018a4 <_malloc_r>
 800206e:	b92a      	cbnz	r2, 800207c <_realloc_r+0x24>
 8002070:	f7ff fbb0 	bl	80017d4 <_free_r>
 8002074:	4625      	mov	r5, r4
 8002076:	4628      	mov	r0, r5
 8002078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800207c:	f000 f81b 	bl	80020b6 <_malloc_usable_size_r>
 8002080:	4284      	cmp	r4, r0
 8002082:	4607      	mov	r7, r0
 8002084:	d802      	bhi.n	800208c <_realloc_r+0x34>
 8002086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800208a:	d812      	bhi.n	80020b2 <_realloc_r+0x5a>
 800208c:	4621      	mov	r1, r4
 800208e:	4640      	mov	r0, r8
 8002090:	f7ff fc08 	bl	80018a4 <_malloc_r>
 8002094:	4605      	mov	r5, r0
 8002096:	2800      	cmp	r0, #0
 8002098:	d0ed      	beq.n	8002076 <_realloc_r+0x1e>
 800209a:	42bc      	cmp	r4, r7
 800209c:	4622      	mov	r2, r4
 800209e:	4631      	mov	r1, r6
 80020a0:	bf28      	it	cs
 80020a2:	463a      	movcs	r2, r7
 80020a4:	f7ff ffb0 	bl	8002008 <memcpy>
 80020a8:	4631      	mov	r1, r6
 80020aa:	4640      	mov	r0, r8
 80020ac:	f7ff fb92 	bl	80017d4 <_free_r>
 80020b0:	e7e1      	b.n	8002076 <_realloc_r+0x1e>
 80020b2:	4635      	mov	r5, r6
 80020b4:	e7df      	b.n	8002076 <_realloc_r+0x1e>

080020b6 <_malloc_usable_size_r>:
 80020b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020ba:	1f18      	subs	r0, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bfbc      	itt	lt
 80020c0:	580b      	ldrlt	r3, [r1, r0]
 80020c2:	18c0      	addlt	r0, r0, r3
 80020c4:	4770      	bx	lr
	...

080020c8 <_init>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr

080020d4 <_fini>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr
