#include "main.h"

#include "apds9960.h"

#include <stdio.h>

#include "ai_datatypes_defines.h"
#include "ai_platform.h"
#include "fire.h"
#include "fire_data.h"

char Test[2] = "AT";
char Reply[2] = "";

char Stext[] = "AT+CMGF=1";
char Cnum[] = "AT+CMGS=\"+918144109993\"\r";
char Msg[] = "Fire Alert";
char End[] = "26";

TIM_HandleTypeDef htim14;

CRC_HandleTypeDef hcrc;

void SystemClock_Config(void);
static void MX_CRC_Init(void);
static void MX_TIM14_Init(void);


USART_Handle_t usart2_handle;

void USART2_Init(void){
	usart2_handle.pUSARTx = USART2;
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
	USART_Init(&usart2_handle);
}

void 	USART2_GPIOInit(void){
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
	GPIO_Init(&usart_gpios);

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
	GPIO_Init(&usart_gpios);
}

int main(void){
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_CRC_Init();
  MX_TIM14_Init();

  color_handle_t current_RGB;

  APDS9960_RGB_INIT();

  GPIO_ButtonInit();

  USART2_GPIOInit();

  USART2_Init();

  USART_PeripheralControl(USART2,ENABLE);


  ai_error ai_err;
  ai_i32 nbatch;
  uint32_t timestamp;
  float y_val;

  // Chunk of memory used to hold intermediate values for neural network
  AI_ALIGNED(4) ai_u8 activations[AI_FIRE_DATA_ACTIVATIONS_SIZE];

  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_FIRE_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_FIRE_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle fire_model = AI_HANDLE_NULL;

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_FIRE_IN_NUM] = AI_FIRE_IN;
  ai_buffer ai_output[AI_FIRE_OUT_NUM] = AI_FIRE_OUT;

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {AI_FIRE_DATA_WEIGHTS(ai_fire_data_weights_get()),
  					  AI_FIRE_DATA_ACTIVATIONS(activations)
  					  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
  ai_input[0].data = AI_HANDLE_PTR(in_data);
  ai_output[0].n_batches = 1;
  ai_output[0].data = AI_HANDLE_PTR(out_data);

  // Start timer/counter
  HAL_TIM_Base_Start(&htim14);

  // Greetings!
  printf("\r\n\r\nSTM32 X-Cube-AI test\r\n");

  // Create instance of neural network
  ai_err = ai_fire_create(&fire_model, AI_FIRE_DATA_CONFIG);
  if (ai_err.type != AI_ERROR_NONE){
	  printf("Error: could not create NN instance\r\n");
	  while(1);
  }

  // Initialize neural network
  if (!ai_fire_init(fire_model, &ai_params)){
	  printf("Error: could not initialize NN\r\n");
	  while(1);
  }

  while (1){
	  APDS9960_RGB_value(&current_RGB);

	  // Fill input buffer (use test value)
//	  for (uint32_t i = 0; i < AI_FIRE_IN_1_SIZE; i++)
//	  {
//		((ai_float *)in_data)[i] = (ai_float)2.0f;
//	  }
	  // Room
//	  ((ai_float *)in_data)[0] = 0.34;
//	  ((ai_float *)in_data)[1] = 0.32;
//	  ((ai_float *)in_data)[2] = 0.32;
	  // Fire
	  ((ai_float *)in_data)[0] = 0.54;
	  ((ai_float *)in_data)[1] = 0.28;
	  ((ai_float *)in_data)[2] = 0.18;


	  // Get current timestamp
	  timestamp = htim14.Instance->CNT;

	  // Perform inference
	  nbatch = ai_fire_run(fire_model, &ai_input[0], &ai_output[0]);
	  if (nbatch != 1) {
		printf("Error: could not run inference\r\n");
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];

	  // Print output of neural network along with inference time (microseconds)
	  printf("Output: %f | Duration: %lu\r\n", y_val,
			  		  htim14.Instance->CNT - timestamp);

	  if(y_val > 0.9){
		  USART_SendData(&usart2_handle,(uint8_t*)Test,strlen(Test));
		  USART_ReceiveDataIT(&usart2_handle,(uint8_t *)Reply, 2);
		  if (strcmp(Reply, "OK")){
			  USART_SendData(&usart2_handle, (uint8_t *)Stext, strlen(Stext));
			  USART_SendData(&usart2_handle, (uint8_t *)Cnum, strlen(Cnum));
			  USART_SendData(&usart2_handle, (uint8_t *)Msg, strlen(Msg));
			  USART_SendData(&usart2_handle, (uint8_t *)End, strlen(End));
			  HAL_Delay(1000);
		   }
	  }

  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}
/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void){

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void){

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 79;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 65534;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
