
Fire_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08007dd8  08007dd8  00017dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008464  08008464  000208a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800846c  0800846c  000208a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a4  20000000  08008474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200008a4  08008d18  000208a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200009fc  08008d18  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb5c  00000000  00000000  000208d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221a  00000000  00000000  0002d430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00030280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002514f  00000000  00000000  00030d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e161  00000000  00000000  00055ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0289  00000000  00000000  00064028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  001442b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  0014437c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200008a4 	.word	0x200008a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007dc0 	.word	0x08007dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200008a8 	.word	0x200008a8
 800020c:	08007dc0 	.word	0x08007dc0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <USART2_Init>:
static void MX_TIM14_Init(void);


USART_Handle_t usart2_handle;

void USART2_Init(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <USART2_Init+0x3c>)
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <USART2_Init+0x40>)
 8000f14:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <USART2_Init+0x3c>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <USART2_Init+0x3c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <USART2_Init+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <USART2_Init+0x3c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <USART2_Init+0x3c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <USART2_Init+0x3c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART2_Init+0x3c>)
 8000f3e:	f001 fb73 	bl	8002628 <USART_Init>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000914 	.word	0x20000914
 8000f4c:	40004400 	.word	0x40004400

08000f50 <USART2_GPIOInit>:

void USART2_GPIOInit(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <USART2_GPIOInit+0x40>)
 8000f58:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f62:	2301      	movs	r3, #1
 8000f64:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f66:	2303      	movs	r3, #3
 8000f68:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fdf5 	bl	8001b64 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fdef 	bl	8001b64 <GPIO_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020000 	.word	0x40020000
 8000f94:	00000000 	.word	0x00000000

08000f98 <main>:

int main(void){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b0b4      	sub	sp, #208	; 0xd0
 8000f9c:	af02      	add	r7, sp, #8
  HAL_Init();
 8000f9e:	f001 fcb3 	bl	8002908 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f973 	bl	800128c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8000fa6:	f000 f9dd 	bl	8001364 <MX_CRC_Init>
  MX_TIM14_Init();
 8000faa:	f000 f9ef 	bl	800138c <MX_TIM14_Init>

  color_handle_t current_RGB;

  if(APDS9960_RGB_INIT()){
 8000fae:	f000 fbd7 	bl	8001760 <APDS9960_RGB_INIT>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <main+0x26>
	  printf("\r\n\r\nAPDS-9960 Initialized\r\n");
 8000fb8:	489d      	ldr	r0, [pc, #628]	; (8001230 <main+0x298>)
 8000fba:	f004 fe11 	bl	8005be0 <puts>
  }

  USART2_GPIOInit();
 8000fbe:	f7ff ffc7 	bl	8000f50 <USART2_GPIOInit>
  USART2_Init();
 8000fc2:	f7ff ffa3 	bl	8000f0c <USART2_Init>
  USART_PeripheralControl(USART2,ENABLE);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	489a      	ldr	r0, [pc, #616]	; (8001234 <main+0x29c>)
 8000fca:	f001 fbb0 	bl	800272e <USART_PeripheralControl>
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_FIRE_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_FIRE_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle fire_model = AI_HANDLE_NULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_FIRE_IN_NUM] = AI_FIRE_IN;
 8000fd2:	4b99      	ldr	r3, [pc, #612]	; (8001238 <main+0x2a0>)
 8000fd4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000fd8:	461d      	mov	r5, r3
 8000fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fe2:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_FIRE_OUT_NUM] = AI_FIRE_OUT;
 8000fe6:	4b95      	ldr	r3, [pc, #596]	; (800123c <main+0x2a4>)
 8000fe8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ff6:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {AI_FIRE_DATA_WEIGHTS(ai_fire_data_weights_get()),
 8000ffa:	4b91      	ldr	r3, [pc, #580]	; (8001240 <main+0x2a8>)
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	2301      	movs	r3, #1
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	2301      	movs	r3, #1
 8001008:	813b      	strh	r3, [r7, #8]
 800100a:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	f002 fe46 	bl	8003ca0 <ai_fire_data_weights_get>
 8001014:	4603      	mov	r3, r0
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	4b89      	ldr	r3, [pc, #548]	; (8001244 <main+0x2ac>)
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	2301      	movs	r3, #1
 8001022:	83bb      	strh	r3, [r7, #28]
 8001024:	2301      	movs	r3, #1
 8001026:	83fb      	strh	r3, [r7, #30]
 8001028:	2301      	movs	r3, #1
 800102a:	843b      	strh	r3, [r7, #32]
 800102c:	2334      	movs	r3, #52	; 0x34
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
 8001030:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  					  AI_FIRE_DATA_ACTIVATIONS(activations)
  					  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001044:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	86bb      	strh	r3, [r7, #52]	; 0x34
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800104a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800104e:	643b      	str	r3, [r7, #64]	; 0x40

  // Start timer/counter
  HAL_TIM_Base_Start(&htim14);
 8001050:	487d      	ldr	r0, [pc, #500]	; (8001248 <main+0x2b0>)
 8001052:	f002 fbf5 	bl	8003840 <HAL_TIM_Base_Start>

  // Greetings!
  printf("\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001056:	487d      	ldr	r0, [pc, #500]	; (800124c <main+0x2b4>)
 8001058:	f004 fdc2 	bl	8005be0 <puts>

  // Create instance of neural network
  ai_err = ai_fire_create(&fire_model, AI_FIRE_DATA_CONFIG);
 800105c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fdb6 	bl	8003bd4 <ai_fire_create>
 8001068:	4603      	mov	r3, r0
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (ai_err.type != AI_ERROR_NONE){
 800106e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <main+0xe6>
	  printf("Error: could not create NN instance\r\n");
 8001076:	4876      	ldr	r0, [pc, #472]	; (8001250 <main+0x2b8>)
 8001078:	f004 fdb2 	bl	8005be0 <puts>
	  while(1);
 800107c:	e7fe      	b.n	800107c <main+0xe4>
  }

  // Initialize neural network
  if (!ai_fire_init(fire_model, &ai_params)){
 800107e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001080:	463a      	mov	r2, r7
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fdbb 	bl	8003c00 <ai_fire_init>
 800108a:	4603      	mov	r3, r0
 800108c:	f083 0301 	eor.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <main+0x106>
	  printf("Error: could not initialize NN\r\n");
 8001096:	486f      	ldr	r0, [pc, #444]	; (8001254 <main+0x2bc>)
 8001098:	f004 fda2 	bl	8005be0 <puts>
	  while(1);
 800109c:	e7fe      	b.n	800109c <main+0x104>
  }

  while (1){
	  APDS9960_RGB_value(&current_RGB);
 800109e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fc6e 	bl	8001984 <APDS9960_RGB_value>

	  // Fill input buffer (use test value)
	  uint16_t total_rgb = current_RGB.Colour_Red + current_RGB.Colour_Green + current_RGB.Colour_Blue;
 80010a8:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80010ac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80010b0:	4413      	add	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80010b8:	4413      	add	r3, r2
 80010ba:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	  ((ai_float *)in_data)[0] = current_RGB.Colour_Red / total_rgb;
 80010be:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80010c2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d8:	edc3 7a00 	vstr	s15, [r3]
	  ((ai_float *)in_data)[1] = current_RGB.Colour_Green / total_rgb;
 80010dc:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80010e0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f2:	3304      	adds	r3, #4
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	edc3 7a00 	vstr	s15, [r3]
	  ((ai_float *)in_data)[2] = current_RGB.Colour_Blue / total_rgb;
 80010fc:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8001100:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001104:	fbb2 f3f3 	udiv	r3, r2, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001112:	3308      	adds	r3, #8
 8001114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001118:	edc3 7a00 	vstr	s15, [r3]
//	  ((ai_float *)in_data)[0] = 0.34;
//	  ((ai_float *)in_data)[1] = 0.32;
//	  ((ai_float *)in_data)[2] = 0.32;

	  // Fire
	  ((ai_float *)in_data)[0] = 0.54;
 800111c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <main+0x2c0>)
 8001122:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[1] = 0.28;
 8001124:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001128:	3304      	adds	r3, #4
 800112a:	4a4c      	ldr	r2, [pc, #304]	; (800125c <main+0x2c4>)
 800112c:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[2] = 0.18;
 800112e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001132:	3308      	adds	r3, #8
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <main+0x2c8>)
 8001136:	601a      	str	r2, [r3, #0]


	  // Get current timestamp
	  timestamp = htim14.Instance->CNT;
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <main+0x2b0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	  // Perform inference
	  nbatch = ai_fire_run(fire_model, &ai_input[0], &ai_output[0]);
 8001142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001144:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001148:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fd96 	bl	8003c7e <ai_fire_run>
 8001152:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	  if (nbatch != 1) {
 8001156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800115a:	2b01      	cmp	r3, #1
 800115c:	d002      	beq.n	8001164 <main+0x1cc>
		printf("Error: could not run inference\r\n");
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <main+0x2cc>)
 8001160:	f004 fd3e 	bl	8005be0 <puts>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 8001164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  // Print output of neural network along with inference time (microseconds)
	  printf("Output: %f | Duration: %lu\r\n", y_val,
 800116e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001172:	f7ff fa19 	bl	80005a8 <__aeabi_f2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
			  		  htim14.Instance->CNT - timestamp);
 800117a:	4933      	ldr	r1, [pc, #204]	; (8001248 <main+0x2b0>)
 800117c:	6809      	ldr	r1, [r1, #0]
 800117e:	6a48      	ldr	r0, [r1, #36]	; 0x24
	  printf("Output: %f | Duration: %lu\r\n", y_val,
 8001180:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001184:	1a41      	subs	r1, r0, r1
 8001186:	9100      	str	r1, [sp, #0]
 8001188:	4837      	ldr	r0, [pc, #220]	; (8001268 <main+0x2d0>)
 800118a:	f004 fca3 	bl	8005ad4 <iprintf>

	  if(y_val > 0.9){
 800118e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001192:	f7ff fa09 	bl	80005a8 <__aeabi_f2d>
 8001196:	a324      	add	r3, pc, #144	; (adr r3, 8001228 <main+0x290>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fcec 	bl	8000b78 <__aeabi_dcmpgt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03d      	beq.n	8001222 <main+0x28a>
		  USART_SendData(&usart2_handle,(uint8_t*)Test,strlen(Test));
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <main+0x2d4>)
 80011a8:	f7ff f83c 	bl	8000224 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	492e      	ldr	r1, [pc, #184]	; (800126c <main+0x2d4>)
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <main+0x2d8>)
 80011b4:	f001 fb31 	bl	800281a <USART_SendData>
		  USART_ReceiveDataIT(&usart2_handle,(uint8_t *)Reply, 2);
 80011b8:	2202      	movs	r2, #2
 80011ba:	492e      	ldr	r1, [pc, #184]	; (8001274 <main+0x2dc>)
 80011bc:	482c      	ldr	r0, [pc, #176]	; (8001270 <main+0x2d8>)
 80011be:	f001 fb7a 	bl	80028b6 <USART_ReceiveDataIT>
		  if (strcmp(Reply, "OK")){
 80011c2:	492d      	ldr	r1, [pc, #180]	; (8001278 <main+0x2e0>)
 80011c4:	482b      	ldr	r0, [pc, #172]	; (8001274 <main+0x2dc>)
 80011c6:	f7ff f823 	bl	8000210 <strcmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f43f af66 	beq.w	800109e <main+0x106>
			  USART_SendData(&usart2_handle, (uint8_t *)Stext, strlen(Stext));
 80011d2:	482a      	ldr	r0, [pc, #168]	; (800127c <main+0x2e4>)
 80011d4:	f7ff f826 	bl	8000224 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4927      	ldr	r1, [pc, #156]	; (800127c <main+0x2e4>)
 80011de:	4824      	ldr	r0, [pc, #144]	; (8001270 <main+0x2d8>)
 80011e0:	f001 fb1b 	bl	800281a <USART_SendData>
			  USART_SendData(&usart2_handle, (uint8_t *)Cnum, strlen(Cnum));
 80011e4:	4826      	ldr	r0, [pc, #152]	; (8001280 <main+0x2e8>)
 80011e6:	f7ff f81d 	bl	8000224 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4924      	ldr	r1, [pc, #144]	; (8001280 <main+0x2e8>)
 80011f0:	481f      	ldr	r0, [pc, #124]	; (8001270 <main+0x2d8>)
 80011f2:	f001 fb12 	bl	800281a <USART_SendData>
			  USART_SendData(&usart2_handle, (uint8_t *)Msg, strlen(Msg));
 80011f6:	4823      	ldr	r0, [pc, #140]	; (8001284 <main+0x2ec>)
 80011f8:	f7ff f814 	bl	8000224 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4920      	ldr	r1, [pc, #128]	; (8001284 <main+0x2ec>)
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <main+0x2d8>)
 8001204:	f001 fb09 	bl	800281a <USART_SendData>
			  USART_SendData(&usart2_handle, (uint8_t *)End, strlen(End));
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <main+0x2f0>)
 800120a:	f7ff f80b 	bl	8000224 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	491d      	ldr	r1, [pc, #116]	; (8001288 <main+0x2f0>)
 8001214:	4816      	ldr	r0, [pc, #88]	; (8001270 <main+0x2d8>)
 8001216:	f001 fb00 	bl	800281a <USART_SendData>
			  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f001 fbe5 	bl	80029ec <HAL_Delay>
  while (1){
 8001222:	e73c      	b.n	800109e <main+0x106>
 8001224:	f3af 8000 	nop.w
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	3feccccc 	.word	0x3feccccc
 8001230:	08007dd8 	.word	0x08007dd8
 8001234:	40004400 	.word	0x40004400
 8001238:	08007e9c 	.word	0x08007e9c
 800123c:	08007eb4 	.word	0x08007eb4
 8001240:	40040440 	.word	0x40040440
 8001244:	00040440 	.word	0x00040440
 8001248:	200008c4 	.word	0x200008c4
 800124c:	08007df4 	.word	0x08007df4
 8001250:	08007e10 	.word	0x08007e10
 8001254:	08007e38 	.word	0x08007e38
 8001258:	3f0a3d71 	.word	0x3f0a3d71
 800125c:	3e8f5c29 	.word	0x3e8f5c29
 8001260:	3e3851ec 	.word	0x3e3851ec
 8001264:	08007e58 	.word	0x08007e58
 8001268:	08007e78 	.word	0x08007e78
 800126c:	20000000 	.word	0x20000000
 8001270:	20000914 	.word	0x20000914
 8001274:	200008c0 	.word	0x200008c0
 8001278:	08007e98 	.word	0x08007e98
 800127c:	20000004 	.word	0x20000004
 8001280:	20000010 	.word	0x20000010
 8001284:	2000002c 	.word	0x2000002c
 8001288:	20000038 	.word	0x20000038

0800128c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2234      	movs	r2, #52	; 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fec8 	bl	8005030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a28      	ldr	r2, [pc, #160]	; (800135c <SystemClock_Config+0xd0>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <SystemClock_Config+0xd0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <SystemClock_Config+0xd4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <SystemClock_Config+0xd4>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <SystemClock_Config+0xd4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	2310      	movs	r3, #16
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001300:	2308      	movs	r3, #8
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001304:	2350      	movs	r3, #80	; 0x50
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001308:	2302      	movs	r3, #2
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001310:	2302      	movs	r3, #2
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4618      	mov	r0, r3
 800131a:	f001 ffa3 	bl	8003264 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001324:	f000 f856 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fc77 	bl	8002c38 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001350:	f000 f840 	bl	80013d4 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	; 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_CRC_Init>:
/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_CRC_Init+0x20>)
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <MX_CRC_Init+0x24>)
 800136c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_CRC_Init+0x20>)
 8001370:	f001 fc45 	bl	8002bfe <HAL_CRC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800137a:	f000 f82b 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000090c 	.word	0x2000090c
 8001388:	40023000 	.word	0x40023000

0800138c <MX_TIM14_Init>:
/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_TIM14_Init+0x40>)
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <MX_TIM14_Init+0x44>)
 8001394:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_TIM14_Init+0x40>)
 8001398:	224f      	movs	r2, #79	; 0x4f
 800139a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_TIM14_Init+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65534;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_TIM14_Init+0x40>)
 80013a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013a8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_TIM14_Init+0x40>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_TIM14_Init+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM14_Init+0x40>)
 80013b8:	f002 f9f2 	bl	80037a0 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80013c2:	f000 f807 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200008c4 	.word	0x200008c4
 80013d0:	40002000 	.word	0x40002000

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800141e:	2007      	movs	r0, #7
 8001420:	f001 fbba 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_CRC_MspInit+0x3c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10d      	bne.n	800145e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_CRC_MspInit+0x40>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_CRC_MspInit+0x40>)
 800144c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_CRC_MspInit+0x40>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023000 	.word	0x40023000
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10d      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_TIM_Base_MspInit+0x40>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_TIM_Base_MspInit+0x40>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_TIM_Base_MspInit+0x40>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40002000 	.word	0x40002000
 80014b4:	40023800 	.word	0x40023800

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f001 fa52 	bl	80029ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <ITM_SendChar+0x48>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <ITM_SendChar+0x48>)
 800151c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001520:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <ITM_SendChar+0x4c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <ITM_SendChar+0x4c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800152e:	bf00      	nop
 8001530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f8      	beq.n	8001530 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800153e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000edfc 	.word	0xe000edfc
 8001558:	e0000e00 	.word	0xe0000e00

0800155c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_kill>:

int _kill(int pid, int sig)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001576:	f003 fd1b 	bl	8004fb0 <__errno>
 800157a:	4603      	mov	r3, r0
 800157c:	2216      	movs	r2, #22
 800157e:	601a      	str	r2, [r3, #0]
	return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_exit>:

void _exit (int status)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_kill>
	while (1) {}		/* Make sure we hang here */
 800159e:	e7fe      	b.n	800159e <_exit+0x12>

080015a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00a      	b.n	80015c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b2:	f3af 8000 	nop.w
 80015b6:	4601      	mov	r1, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf0      	blt.n	80015b2 <_read+0x12>
	}

return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff89 	bl	800150c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf1      	blt.n	80015ec <_write+0x12>
	}
	return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_close>:

int _close(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163a:	605a      	str	r2, [r3, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_isatty>:

int _isatty(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f003 fc80 	bl	8004fb0 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20020000 	.word	0x20020000
 80016dc:	00000800 	.word	0x00000800
 80016e0:	20000938 	.word	0x20000938
 80016e4:	20000a00 	.word	0x20000a00

080016e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001712:	490e      	ldr	r1, [pc, #56]	; (800174c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001728:	4c0b      	ldr	r4, [pc, #44]	; (8001758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001736:	f7ff ffd7 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173a:	f003 fc3f 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff fc2b 	bl	8000f98 <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	200008a4 	.word	0x200008a4
  ldr r2, =_sidata
 8001750:	08008474 	.word	0x08008474
  ldr r2, =_sbss
 8001754:	200008a4 	.word	0x200008a4
  ldr r4, =_ebss
 8001758:	200009fc 	.word	0x200009fc

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>
	...

08001760 <APDS9960_RGB_INIT>:

I2C_Handle_t g_apds9960_I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t APDS9960_RGB_INIT(void){
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

	//1. init the i2c pins

	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	220c      	movs	r2, #12
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fc5e 	bl	8005030 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	220c      	movs	r2, #12
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fc58 	bl	8005030 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = APDS9960_I2C_GPIO_PORT;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <APDS9960_RGB_INIT+0xc0>)
 8001782:	613b      	str	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	767b      	strb	r3, [r7, #25]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001788:	2302      	movs	r3, #2
 800178a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = APDS9960_I2C_SDA_PIN;
 800178c:	2307      	movs	r3, #7
 800178e:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001790:	2301      	movs	r3, #1
 8001792:	763b      	strb	r3, [r7, #24]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = APDS9960_I2C_PUPD;
 8001794:	2301      	movs	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001798:	2303      	movs	r3, #3
 800179a:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(&i2c_sda);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f9df 	bl	8001b64 <GPIO_Init>

	i2c_scl.pGPIOx = APDS9960_I2C_GPIO_PORT;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <APDS9960_RGB_INIT+0xc0>)
 80017a8:	607b      	str	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80017aa:	2304      	movs	r3, #4
 80017ac:	737b      	strb	r3, [r7, #13]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80017ae:	2302      	movs	r3, #2
 80017b0:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = APDS9960_I2C_SCL_PIN;
 80017b2:	2306      	movs	r3, #6
 80017b4:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80017b6:	2301      	movs	r3, #1
 80017b8:	733b      	strb	r3, [r7, #12]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = APDS9960_I2C_PUPD;
 80017ba:	2301      	movs	r3, #1
 80017bc:	72fb      	strb	r3, [r7, #11]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80017be:	2303      	movs	r3, #3
 80017c0:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&i2c_scl);
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f9cd 	bl	8001b64 <GPIO_Init>

	//2. initialize the i2c peripheral
	g_apds9960_I2cHandle.pI2Cx = APDS9960_I2C;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <APDS9960_RGB_INIT+0xc4>)
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <APDS9960_RGB_INIT+0xc8>)
 80017ce:	601a      	str	r2, [r3, #0]
	g_apds9960_I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <APDS9960_RGB_INIT+0xc4>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	725a      	strb	r2, [r3, #9]
	g_apds9960_I2cHandle.I2C_Config.I2C_SCLSpeed = APDS9960_I2C_SPEED;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <APDS9960_RGB_INIT+0xc4>)
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <APDS9960_RGB_INIT+0xcc>)
 80017da:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_apds9960_I2cHandle);
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <APDS9960_RGB_INIT+0xc4>)
 80017de:	f000 fc29 	bl	8002034 <I2C_Init>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(APDS9960_I2C, ENABLE);
 80017e2:	2101      	movs	r1, #1
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <APDS9960_RGB_INIT+0xc8>)
 80017e6:	f000 fbd0 	bl	8001f8a <I2C_PeripheralControl>

	// Determine the ATIME register. By default, when the module starts, the ATIME register is set to 0xFF
	// and if nothing is changed, this will affect the sensitivity of the sensor - the sensitivity will be low.
	APDS9960_write(DEFAULT_ATIME, APDS9960_ATIME);
 80017ea:	2181      	movs	r1, #129	; 0x81
 80017ec:	20db      	movs	r0, #219	; 0xdb
 80017ee:	f000 f81f 	bl	8001830 <APDS9960_write>

	// the next step is to set the AGAIN parameter field (ALS and Color Gain Control)
	// of the Control Register One register (0x8F) to the value corresponding to the gain equal to x4
	// (DEFAULT_AGAIN equal to AGAIN_4X)
	APDS9960_write(DEFAULT_AGAIN, APDS9960_CONTROL);
 80017f2:	218f      	movs	r1, #143	; 0x8f
 80017f4:	2001      	movs	r0, #1
 80017f6:	f000 f81b 	bl	8001830 <APDS9960_write>

	// enable the ALS option by setting the AEN bit of the Enable Register register (0x80)
	// turn on the module power supply by setting the PON bit of the same register
	APDS9960_write((APDS9960_PON | APDS9960_AEN), APDS9960_ENABLE);
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f817 	bl	8001830 <APDS9960_write>

	uint8_t x = APDS9960_read(APDS9960_ID);
 8001802:	2092      	movs	r0, #146	; 0x92
 8001804:	f000 f830 	bl	8001868 <APDS9960_read>
 8001808:	4603      	mov	r3, r0
 800180a:	77fb      	strb	r3, [r7, #31]
	if (x != 0xAB) {
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	2bab      	cmp	r3, #171	; 0xab
 8001810:	d001      	beq.n	8001816 <APDS9960_RGB_INIT+0xb6>
		return 0;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <APDS9960_RGB_INIT+0xb8>
	}

	return 1;
 8001816:	2301      	movs	r3, #1

}
 8001818:	4618      	mov	r0, r3
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40020400 	.word	0x40020400
 8001824:	2000093c 	.word	0x2000093c
 8001828:	40005400 	.word	0x40005400
 800182c:	000186a0 	.word	0x000186a0

08001830 <APDS9960_write>:

void APDS9960_write(uint8_t value, uint8_t reg_addr){
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_apds9960_I2cHandle, tx, 2, APDS9960_I2C_ADDR, 0);
 8001848:	f107 010c 	add.w	r1, r7, #12
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2339      	movs	r3, #57	; 0x39
 8001852:	2202      	movs	r2, #2
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <APDS9960_write+0x34>)
 8001856:	f000 fcb3 	bl	80021c0 <I2C_MasterSendData>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000093c 	.word	0x2000093c

08001868 <APDS9960_read>:

uint8_t APDS9960_read(uint8_t reg_addr){
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_apds9960_I2cHandle, &reg_addr, 1, APDS9960_I2C_ADDR, 0);
 8001872:	1df9      	adds	r1, r7, #7
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2339      	movs	r3, #57	; 0x39
 800187a:	2201      	movs	r2, #1
 800187c:	4808      	ldr	r0, [pc, #32]	; (80018a0 <APDS9960_read+0x38>)
 800187e:	f000 fc9f 	bl	80021c0 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_apds9960_I2cHandle, &data, 1, APDS9960_I2C_ADDR, 0);
 8001882:	f107 010f 	add.w	r1, r7, #15
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2339      	movs	r3, #57	; 0x39
 800188c:	2201      	movs	r2, #1
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <APDS9960_read+0x38>)
 8001890:	f000 fcf9 	bl	8002286 <I2C_MasterReceiveData>

    return data;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000093c 	.word	0x2000093c

080018a4 <APDS9960_readAmbientLight>:

uint16_t APDS9960_readAmbientLight(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_CDATAH );
 80018aa:	2095      	movs	r0, #149	; 0x95
 80018ac:	f7ff ffdc 	bl	8001868 <APDS9960_read>
 80018b0:	4603      	mov	r3, r0
 80018b2:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_CDATAL );
 80018b4:	2094      	movs	r0, #148	; 0x94
 80018b6:	f7ff ffd7 	bl	8001868 <APDS9960_read>
 80018ba:	4603      	mov	r3, r0
 80018bc:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 80018be:	793b      	ldrb	r3, [r7, #4]
 80018c0:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 80018c8:	797b      	ldrb	r3, [r7, #5]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]

    return result;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <APDS9960_readRedLight>:

/* Read RED light data function */
uint16_t APDS9960_readRedLight(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_RDATAH );
 80018e2:	2097      	movs	r0, #151	; 0x97
 80018e4:	f7ff ffc0 	bl	8001868 <APDS9960_read>
 80018e8:	4603      	mov	r3, r0
 80018ea:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_RDATAL );
 80018ec:	2096      	movs	r0, #150	; 0x96
 80018ee:	f7ff ffbb 	bl	8001868 <APDS9960_read>
 80018f2:	4603      	mov	r3, r0
 80018f4:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 80018f6:	793b      	ldrb	r3, [r7, #4]
 80018f8:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 8001900:	797b      	ldrb	r3, [r7, #5]
 8001902:	b29a      	uxth	r2, r3
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4313      	orrs	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]

    return result;
 800190a:	88fb      	ldrh	r3, [r7, #6]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <APDS9960_readGreenLight>:

/* Read GREEN light data function */
uint16_t APDS9960_readGreenLight(){
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_GDATAH );
 800191a:	2099      	movs	r0, #153	; 0x99
 800191c:	f7ff ffa4 	bl	8001868 <APDS9960_read>
 8001920:	4603      	mov	r3, r0
 8001922:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_GDATAL );
 8001924:	2098      	movs	r0, #152	; 0x98
 8001926:	f7ff ff9f 	bl	8001868 <APDS9960_read>
 800192a:	4603      	mov	r3, r0
 800192c:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 800192e:	793b      	ldrb	r3, [r7, #4]
 8001930:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 8001938:	797b      	ldrb	r3, [r7, #5]
 800193a:	b29a      	uxth	r2, r3
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4313      	orrs	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]

    return result;
 8001942:	88fb      	ldrh	r3, [r7, #6]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <APDS9960_readBlueLight>:

/* Read BLUE light data function */
uint16_t APDS9960_readBlueLight(){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_BDATAH );
 8001952:	209b      	movs	r0, #155	; 0x9b
 8001954:	f7ff ff88 	bl	8001868 <APDS9960_read>
 8001958:	4603      	mov	r3, r0
 800195a:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_BDATAL );
 800195c:	209a      	movs	r0, #154	; 0x9a
 800195e:	f7ff ff83 	bl	8001868 <APDS9960_read>
 8001962:	4603      	mov	r3, r0
 8001964:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 8001966:	793b      	ldrb	r3, [r7, #4]
 8001968:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 8001970:	797b      	ldrb	r3, [r7, #5]
 8001972:	b29a      	uxth	r2, r3
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	4313      	orrs	r3, r2
 8001978:	80fb      	strh	r3, [r7, #6]

    return result;
 800197a:	88fb      	ldrh	r3, [r7, #6]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <APDS9960_RGB_value>:

void APDS9960_RGB_value(color_handle_t *rgb_c_data){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	rgb_c_data->Colour_Clear =  APDS9960_readAmbientLight();
 800198c:	f7ff ff8a 	bl	80018a4 <APDS9960_readAmbientLight>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	801a      	strh	r2, [r3, #0]
	rgb_c_data->Colour_Red =  APDS9960_readRedLight();
 8001998:	f7ff ffa0 	bl	80018dc <APDS9960_readRedLight>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	805a      	strh	r2, [r3, #2]
	rgb_c_data->Colour_Green =  APDS9960_readGreenLight();
 80019a4:	f7ff ffb6 	bl	8001914 <APDS9960_readGreenLight>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	809a      	strh	r2, [r3, #4]
	rgb_c_data->Colour_Blue =  APDS9960_readBlueLight();
 80019b0:	f7ff ffcc 	bl	800194c <APDS9960_readBlueLight>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	80da      	strh	r2, [r3, #6]
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <GPIO_PeriClockControl>:
 *
 * @return          - none
 *
 * @Note            - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d157      	bne.n	8001a86 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a59      	ldr	r2, [pc, #356]	; (8001b40 <GPIO_PeriClockControl+0x17c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d106      	bne.n	80019ec <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80019ea:	e0a3      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a56      	ldr	r2, [pc, #344]	; (8001b48 <GPIO_PeriClockControl+0x184>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d106      	bne.n	8001a02 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a00:	e098      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <GPIO_PeriClockControl+0x188>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d106      	bne.n	8001a18 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a16:	e08d      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a4d      	ldr	r2, [pc, #308]	; (8001b50 <GPIO_PeriClockControl+0x18c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d106      	bne.n	8001a2e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001a20:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a2c:	e082      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a48      	ldr	r2, [pc, #288]	; (8001b54 <GPIO_PeriClockControl+0x190>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d106      	bne.n	8001a44 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a42:	e077      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <GPIO_PeriClockControl+0x194>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d106      	bne.n	8001a5a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a52:	f043 0320 	orr.w	r3, r3, #32
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a58:	e06c      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <GPIO_PeriClockControl+0x198>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d106      	bne.n	8001a70 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a37      	ldr	r2, [pc, #220]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a6e:	e061      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <GPIO_PeriClockControl+0x19c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d15d      	bne.n	8001b34 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	4a31      	ldr	r2, [pc, #196]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a84:	e056      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <GPIO_PeriClockControl+0x17c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d106      	bne.n	8001a9c <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a9a:	e04b      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <GPIO_PeriClockControl+0x184>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d106      	bne.n	8001ab2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ab0:	e040      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <GPIO_PeriClockControl+0x188>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d106      	bne.n	8001ac8 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ac6:	e035      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <GPIO_PeriClockControl+0x18c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d106      	bne.n	8001ade <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001ad6:	f023 0308 	bic.w	r3, r3, #8
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001adc:	e02a      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <GPIO_PeriClockControl+0x190>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d106      	bne.n	8001af4 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001aec:	f023 0310 	bic.w	r3, r3, #16
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001af2:	e01f      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <GPIO_PeriClockControl+0x194>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d106      	bne.n	8001b0a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001b02:	f023 0320 	bic.w	r3, r3, #32
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b08:	e014      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <GPIO_PeriClockControl+0x198>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d106      	bne.n	8001b20 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b1e:	e009      	b.n	8001b34 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <GPIO_PeriClockControl+0x19c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d105      	bne.n	8001b34 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <GPIO_PeriClockControl+0x180>)
 8001b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40021400 	.word	0x40021400
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	40021c00 	.word	0x40021c00

08001b64 <GPIO_Init>:
 *
 * @return          - none
 *
 * @Note            - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff24 	bl	80019c4 <GPIO_PeriClockControl>

	// 1. configure the mode of GPIO pin
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	795b      	ldrb	r3, [r3, #5]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d821      	bhi.n	8001bc8 <GPIO_Init+0x64>
		// the non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	795b      	ldrb	r3, [r3, #5]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	791b      	ldrb	r3, [r3, #4]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // Clearing
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	400a      	ands	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;                                                   // Setting
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
		temp = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e0b8      	b.n	8001d3a <GPIO_Init+0x1d6>
	}else{
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	795b      	ldrb	r3, [r3, #5]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d117      	bne.n	8001c00 <GPIO_Init+0x9c>
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001bd0:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <GPIO_Init+0x18c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	7912      	ldrb	r2, [r2, #4]
 8001bd8:	4611      	mov	r1, r2
 8001bda:	2201      	movs	r2, #1
 8001bdc:	408a      	lsls	r2, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	4a43      	ldr	r2, [pc, #268]	; (8001cf0 <GPIO_Init+0x18c>)
 8001be2:	430b      	orrs	r3, r1
 8001be4:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTST BIT
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001be6:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <GPIO_Init+0x18c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7912      	ldrb	r2, [r2, #4]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	408a      	lsls	r2, r1
 8001bf4:	43d2      	mvns	r2, r2
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4a3d      	ldr	r2, [pc, #244]	; (8001cf0 <GPIO_Init+0x18c>)
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	6093      	str	r3, [r2, #8]
 8001bfe:	e035      	b.n	8001c6c <GPIO_Init+0x108>
		}else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	795b      	ldrb	r3, [r3, #5]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d117      	bne.n	8001c38 <GPIO_Init+0xd4>
			// 1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	7912      	ldrb	r2, [r2, #4]
 8001c10:	4611      	mov	r1, r2
 8001c12:	2201      	movs	r2, #1
 8001c14:	408a      	lsls	r2, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	4a35      	ldr	r2, [pc, #212]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTST BIT
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	7912      	ldrb	r2, [r2, #4]
 8001c26:	4611      	mov	r1, r2
 8001c28:	2201      	movs	r2, #1
 8001c2a:	408a      	lsls	r2, r1
 8001c2c:	43d2      	mvns	r2, r2
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4a2f      	ldr	r2, [pc, #188]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	60d3      	str	r3, [r2, #12]
 8001c36:	e019      	b.n	8001c6c <GPIO_Init+0x108>
		}else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d115      	bne.n	8001c6c <GPIO_Init+0x108>
			// 1. Configure both the FTSR and the RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	7912      	ldrb	r2, [r2, #4]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	408a      	lsls	r2, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c52:	430b      	orrs	r3, r1
 8001c54:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	7912      	ldrb	r2, [r2, #4]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	2201      	movs	r2, #1
 8001c62:	408a      	lsls	r2, r1
 8001c64:	4611      	mov	r1, r2
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <GPIO_Init+0x18c>)
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	6093      	str	r3, [r2, #8]
		}
		// 2. Configure the GPIO port selection in the SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <GPIO_Init+0x190>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d03b      	beq.n	8001d00 <GPIO_Init+0x19c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <GPIO_Init+0x194>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d02b      	beq.n	8001cea <GPIO_Init+0x186>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <GPIO_Init+0x198>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d024      	beq.n	8001ce6 <GPIO_Init+0x182>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <GPIO_Init+0x194>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01d      	beq.n	8001ce2 <GPIO_Init+0x17e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <GPIO_Init+0x190>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d016      	beq.n	8001cde <GPIO_Init+0x17a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <GPIO_Init+0x194>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00f      	beq.n	8001cda <GPIO_Init+0x176>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <GPIO_Init+0x190>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d008      	beq.n	8001cd6 <GPIO_Init+0x172>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <GPIO_Init+0x194>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <GPIO_Init+0x16e>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e017      	b.n	8001d02 <GPIO_Init+0x19e>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e015      	b.n	8001d02 <GPIO_Init+0x19e>
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	e013      	b.n	8001d02 <GPIO_Init+0x19e>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e011      	b.n	8001d02 <GPIO_Init+0x19e>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e00f      	b.n	8001d02 <GPIO_Init+0x19e>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e00d      	b.n	8001d02 <GPIO_Init+0x19e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e00b      	b.n	8001d02 <GPIO_Init+0x19e>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e009      	b.n	8001d02 <GPIO_Init+0x19e>
 8001cee:	bf00      	nop
 8001cf0:	40013c00 	.word	0x40013c00
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	2300      	movs	r3, #0
 8001d02:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();
 8001d04:	4b5c      	ldr	r3, [pc, #368]	; (8001e78 <GPIO_Init+0x314>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	4a5b      	ldr	r2, [pc, #364]	; (8001e78 <GPIO_Init+0x314>)
 8001d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001d10:	7c7a      	ldrb	r2, [r7, #17]
 8001d12:	7cbb      	ldrb	r3, [r7, #18]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f103 	lsl.w	r1, r2, r3
 8001d1a:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <GPIO_Init+0x318>)
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001d24:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <GPIO_Init+0x31c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	7912      	ldrb	r2, [r2, #4]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	2201      	movs	r2, #1
 8001d30:	408a      	lsls	r2, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <GPIO_Init+0x31c>)
 8001d36:	430b      	orrs	r3, r1
 8001d38:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	799b      	ldrb	r3, [r3, #6]
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	791b      	ldrb	r3, [r3, #4]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	408b      	lsls	r3, r1
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	400a      	ands	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]
	temp = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	79db      	ldrb	r3, [r3, #7]
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	2303      	movs	r3, #3
 8001da0:	408b      	lsls	r3, r1
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68d9      	ldr	r1, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7a1b      	ldrb	r3, [r3, #8]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	791b      	ldrb	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2301      	movs	r3, #1
 8001de0:	408b      	lsls	r3, r1
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
	temp = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	795b      	ldrb	r3, [r3, #5]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d131      	bne.n	8001e6e <GPIO_Init+0x30a>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	791b      	ldrb	r3, [r3, #4]
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	791b      	ldrb	r3, [r3, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	7c3a      	ldrb	r2, [r7, #16]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	7c3a      	ldrb	r2, [r7, #16]
 8001e3c:	4001      	ands	r1, r0
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  (4 * temp2));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	7c3a      	ldrb	r2, [r7, #16]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7a5b      	ldrb	r3, [r3, #9]
 8001e54:	461a      	mov	r2, r3
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	7c3a      	ldrb	r2, [r7, #16]
 8001e66:	4301      	orrs	r1, r0
 8001e68:	3208      	adds	r2, #8
 8001e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/w bit=0
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	611a      	str	r2, [r3, #16]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)){
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01f      	beq.n	8001f52 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7f1b      	ldrb	r3, [r3, #28]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d112      	bne.n	8001f40 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1){
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d11f      	bne.n	8001f62 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fa3e 	bl	80023aa <I2C_ManageAcking>
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001f3e:	e010      	b.n	8001f62 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	60fb      	str	r3, [r7, #12]
}
 8001f50:	e007      	b.n	8001f62 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	60fb      	str	r3, [r7, #12]
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <I2C_GenerateStopCondition>:

 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <I2C_PeripheralControl>:
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }
 }

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d106      	bne.n	8001faa <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	}else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8001fa8:	e005      	b.n	8001fb6 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0201 	bic.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d11f      	bne.n	8002016 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1){
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <I2C_PeriClockControl+0x60>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d106      	bne.n	8001fec <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <I2C_PeriClockControl+0x64>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a11      	ldr	r2, [pc, #68]	; (8002028 <I2C_PeriClockControl+0x64>)
 8001fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	else{
		//TODO
	}
}
 8001fea:	e014      	b.n	8002016 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2){
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <I2C_PeriClockControl+0x68>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d106      	bne.n	8002002 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <I2C_PeriClockControl+0x64>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <I2C_PeriClockControl+0x64>)
 8001ffa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002000:	e009      	b.n	8002016 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3){
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <I2C_PeriClockControl+0x6c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d105      	bne.n	8002016 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <I2C_PeriClockControl+0x64>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a06      	ldr	r2, [pc, #24]	; (8002028 <I2C_PeriClockControl+0x64>)
 8002010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40005400 	.word	0x40005400
 8002028:	40023800 	.word	0x40023800
 800202c:	40005800 	.word	0x40005800
 8002030:	40005c00 	.word	0x40005c00

08002034 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffbc 	bl	8001fc4 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7a5b      	ldrb	r3, [r3, #9]
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8002066:	f000 f9bd 	bl	80023e4 <RCC_GetPCLK1Value>
 800206a:	4603      	mov	r3, r0
 800206c:	4a47      	ldr	r2, [pc, #284]	; (800218c <I2C_Init+0x158>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002084:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7a1b      	ldrb	r3, [r3, #8]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a36      	ldr	r2, [pc, #216]	; (8002190 <I2C_Init+0x15c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d80f      	bhi.n	80020da <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80020ba:	f000 f993 	bl	80023e4 <RCC_GetPCLK1Value>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80020cc:	897b      	ldrh	r3, [r7, #10]
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e02d      	b.n	8002136 <I2C_Init+0x102>
	}else{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7a9b      	ldrb	r3, [r3, #10]
 80020e6:	039b      	lsls	r3, r3, #14
 80020e8:	461a      	mov	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7a9b      	ldrb	r3, [r3, #10]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80020f8:	f000 f974 	bl	80023e4 <RCC_GetPCLK1Value>
 80020fc:	4601      	mov	r1, r0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	fbb1 f3f3 	udiv	r3, r1, r3
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	e00c      	b.n	800212a <I2C_Init+0xf6>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8002110:	f000 f968 	bl	80023e4 <RCC_GetPCLK1Value>
 8002114:	4601      	mov	r1, r0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009a      	lsls	r2, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	fbb1 f3f3 	udiv	r3, r1, r3
 8002128:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <I2C_Init+0x15c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d809      	bhi.n	800215c <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8002148:	f000 f94c 	bl	80023e4 <RCC_GetPCLK1Value>
 800214c:	4603      	mov	r3, r0
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <I2C_Init+0x158>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e00d      	b.n	8002178 <I2C_Init+0x144>
	}else{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 800215c:	f000 f942 	bl	80023e4 <RCC_GetPCLK1Value>
 8002160:	4603      	mov	r3, r0
 8002162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	4a09      	ldr	r2, [pc, #36]	; (8002194 <I2C_Init+0x160>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	09db      	lsrs	r3, r3, #7
 8002174:	3301      	adds	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002182:	621a      	str	r2, [r3, #32]
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	431bde83 	.word	0x431bde83
 8002190:	000186a0 	.word	0x000186a0
 8002194:	00044b83 	.word	0x00044b83

08002198 <I2C_GetFlagStatus>:

void I2C_DeInit(I2C_RegDef_t *pI2Cx){

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fe56 	bl	8001e84 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 80021d8:	bf00      	nop
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ffd9 	bl	8002198 <I2C_GetFlagStatus>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f6      	beq.n	80021da <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe55 	bl	8001ea4 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 80021fa:	bf00      	nop
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2102      	movs	r1, #2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ffc8 	bl	8002198 <I2C_GetFlagStatus>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f6      	beq.n	80021fc <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f7ff fe74 	bl	8001efc <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0
	while(Len > 0){
 8002214:	e014      	b.n	8002240 <I2C_MasterSendData+0x80>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8002216:	bf00      	nop
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ffba 	bl	8002198 <I2C_GetFlagStatus>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f6      	beq.n	8002218 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3301      	adds	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
		Len--;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3b01      	subs	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1e7      	bne.n	8002216 <I2C_MasterSendData+0x56>
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8002246:	bf00      	nop
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ffa2 	bl	8002198 <I2C_GetFlagStatus>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f6      	beq.n	8002248 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 800225a:	bf00      	nop
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2104      	movs	r1, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff98 	bl	8002198 <I2C_GetFlagStatus>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f6      	beq.n	800225c <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800226e:	7e3b      	ldrb	r3, [r7, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fe76 	bl	8001f6a <I2C_GenerateStopCondition>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	4611      	mov	r1, r2
 8002292:	461a      	mov	r2, r3
 8002294:	460b      	mov	r3, r1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fdef 	bl	8001e84 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80022a6:	bf00      	nop
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff72 	bl	8002198 <I2C_GetFlagStatus>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f6      	beq.n	80022a8 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	79ba      	ldrb	r2, [r7, #6]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fe04 	bl	8001ed0 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80022c8:	bf00      	nop
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff61 	bl	8002198 <I2C_GetFlagStatus>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f6      	beq.n	80022ca <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len == 1){
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d121      	bne.n	8002326 <I2C_MasterReceiveData+0xa0>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f85e 	bl	80023aa <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fe04 	bl	8001efc <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80022f4:	bf00      	nop
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff4b 	bl	8002198 <I2C_GetFlagStatus>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f6      	beq.n	80022f6 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8002308:	f897 3020 	ldrb.w	r3, [r7, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fe28 	bl	8001f6a <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	701a      	strb	r2, [r3, #0]
	}
    //procedure to read data from slave when Len > 1
	if(Len > 1){
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d930      	bls.n	800238e <I2C_MasterReceiveData+0x108>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fde5 	bl	8001efc <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--){
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e027      	b.n	8002388 <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8002338:	bf00      	nop
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff29 	bl	8002198 <I2C_GetFlagStatus>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f6      	beq.n	800233a <I2C_MasterReceiveData+0xb4>
			//if last 2 bytes are remaining
			if(i == 2){
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d10e      	bne.n	8002370 <I2C_MasterReceiveData+0xea>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f826 	bl	80023aa <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 800235e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fdfd 	bl	8001f6a <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3301      	adds	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--){
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3b01      	subs	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d4      	bne.n	8002338 <I2C_MasterReceiveData+0xb2>
		}
	}
	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)	{
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	7a5b      	ldrb	r3, [r3, #9]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f804 	bl	80023aa <I2C_ManageAcking>
	}
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	601a      	str	r2, [r3, #0]
	}else{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80023c8:	e005      	b.n	80023d6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <RCC_GetPCLK1Value>:
#include "rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80023ea:	4b25      	ldr	r3, [pc, #148]	; (8002480 <RCC_GetPCLK1Value+0x9c>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 ){
 80023f8:	7a7b      	ldrb	r3, [r7, #9]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <RCC_GetPCLK1Value+0xa0>)
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e00b      	b.n	800241c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8002404:	7a7b      	ldrb	r3, [r7, #9]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800240a:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <RCC_GetPCLK1Value+0xa4>)
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e005      	b.n	800241c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2){
 8002410:	7a7b      	ldrb	r3, [r7, #9]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d102      	bne.n	800241c <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8002416:	f000 f88d 	bl	8002534 <RCC_GetPLLOutputClock>
 800241a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <RCC_GetPCLK1Value+0x9c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 800242a:	7a3b      	ldrb	r3, [r7, #8]
 800242c:	2b07      	cmp	r3, #7
 800242e:	d802      	bhi.n	8002436 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	72fb      	strb	r3, [r7, #11]
 8002434:	e005      	b.n	8002442 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 8002436:	7a3b      	ldrb	r3, [r7, #8]
 8002438:	3b08      	subs	r3, #8
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <RCC_GetPCLK1Value+0xa8>)
 800243c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002440:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <RCC_GetPCLK1Value+0x9c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8002450:	7a3b      	ldrb	r3, [r7, #8]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d802      	bhi.n	800245c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	72bb      	strb	r3, [r7, #10]
 800245a:	e004      	b.n	8002466 <RCC_GetPCLK1Value+0x82>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 800245c:	7a3b      	ldrb	r3, [r7, #8]
 800245e:	3b04      	subs	r3, #4
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <RCC_GetPCLK1Value+0xac>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	fbb2 f2f3 	udiv	r2, r2, r3
 800246e:	7abb      	ldrb	r3, [r7, #10]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	607b      	str	r3, [r7, #4]

	return pclk1;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	007a1200 	.word	0x007a1200
 800248c:	20000040 	.word	0x20000040
 8002490:	20000050 	.word	0x20000050

08002494 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void){
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <RCC_GetPCLK2Value+0x8c>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0){
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <RCC_GetPCLK2Value+0x24>
		SystemClock = 16000000;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <RCC_GetPCLK2Value+0x90>)
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e001      	b.n	80024bc <RCC_GetPCLK2Value+0x28>
	}else{
		SystemClock = 8000000;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <RCC_GetPCLK2Value+0x94>)
 80024ba:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <RCC_GetPCLK2Value+0x8c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b07      	cmp	r3, #7
 80024cc:	d802      	bhi.n	80024d4 <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	72fb      	strb	r3, [r7, #11]
 80024d2:	e005      	b.n	80024e0 <RCC_GetPCLK2Value+0x4c>
	}else{
       ahbp = AHB_PreScaler[tmp-8];
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b08      	subs	r3, #8
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <RCC_GetPCLK2Value+0x98>)
 80024da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024de:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <RCC_GetPCLK2Value+0x8c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	0b5b      	lsrs	r3, r3, #13
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d802      	bhi.n	80024f8 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	72bb      	strb	r3, [r7, #10]
 80024f6:	e004      	b.n	8002502 <RCC_GetPCLK2Value+0x6e>
	}else{
		apb2p = APB1_PreScaler[tmp-4];
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b04      	subs	r3, #4
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <RCC_GetPCLK2Value+0x9c>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	fbb2 f2f3 	udiv	r2, r2, r3
 800250a:	7abb      	ldrb	r3, [r7, #10]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	603b      	str	r3, [r7, #0]

	return pclk2;
 8002512:	683b      	ldr	r3, [r7, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40023800 	.word	0x40023800
 8002524:	00f42400 	.word	0x00f42400
 8002528:	007a1200 	.word	0x007a1200
 800252c:	20000040 	.word	0x20000040
 8002530:	20000050 	.word	0x20000050

08002534 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock(){
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <USART_SetBaudRate>:
 *      Author: SOUMYA
 */

#include "uart_driver.h"

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;
	uint32_t tempreg=0;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]

 	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a31      	ldr	r2, [pc, #196]	; (800261c <USART_SetBaudRate+0xd8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <USART_SetBaudRate+0x1e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a30      	ldr	r2, [pc, #192]	; (8002620 <USART_SetBaudRate+0xdc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d103      	bne.n	800256a <USART_SetBaudRate+0x26>
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8002562:	f7ff ff97 	bl	8002494 <RCC_GetPCLK2Value>
 8002566:	61f8      	str	r0, [r7, #28]
 8002568:	e002      	b.n	8002570 <USART_SetBaudRate+0x2c>
	}else{
		PCLKx = RCC_GetPCLK1Value();
 800256a:	f7ff ff3b 	bl	80023e4 <RCC_GetPCLK1Value>
 800256e:	61f8      	str	r0, [r7, #28]
	}
		//Check for OVER8 configuration bit
		if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <USART_SetBaudRate+0x50>
			//OVER8 = 1 , over sampling by 8
			usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009a      	lsls	r2, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e00a      	b.n	80025aa <USART_SetBaudRate+0x66>
	}else{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009a      	lsls	r2, r3, #2
 800259e:	441a      	add	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	61bb      	str	r3, [r7, #24]
	}

	 //Calculate the Mantissa part
	 M_part = usartdiv/100;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <USART_SetBaudRate+0xe0>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	60fb      	str	r3, [r7, #12]
		  //Place the Mantissa part in appropriate bit position . refer USART_BRR
	 tempreg |= M_part << 4;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

	 //Extract the fraction part
	 F_part = (usartdiv - (M_part * 100));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2264      	movs	r2, #100	; 0x64
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]

	 //Calculate the final fractional
     if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)){
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <USART_SetBaudRate+0xac>
    	 //OVER8 = 1 , over sampling by 8
    	 F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	3332      	adds	r3, #50	; 0x32
 80025e0:	4a10      	ldr	r2, [pc, #64]	; (8002624 <USART_SetBaudRate+0xe0>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e009      	b.n	8002604 <USART_SetBaudRate+0xc0>
     }else{
    	 //over sampling by 16
    	 F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3332      	adds	r3, #50	; 0x32
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <USART_SetBaudRate+0xe0>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	617b      	str	r3, [r7, #20]
     }

     //Place the fractional part in appropriate bit position . refer USART_BRR
     tempreg |= F_part;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

     //copy the value of tempreg in to BRR register
     pUSARTx->BRR = tempreg;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	609a      	str	r2, [r3, #8]
 }
 8002612:	bf00      	nop
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	51eb851f 	.word	0x51eb851f

08002628 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle){
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]

     /******************************** Configuration of CR1*********************/
	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f894 	bl	8002768 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	791b      	ldrb	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d104      	bne.n	8002652 <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e010      	b.n	8002674 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	791b      	ldrb	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d104      	bne.n	8002664 <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e007      	b.n	8002674 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	791b      	ldrb	r3, [r3, #4]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d103      	bne.n	8002674 <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f043 030c 	orr.w	r3, r3, #12
 8002672:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b5b      	ldrb	r3, [r3, #13]
 8002678:	031b      	lsls	r3, r3, #12
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7b9b      	ldrb	r3, [r3, #14]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <USART_Init+0x6c>
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e00b      	b.n	80026ac <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD ){
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7b9b      	ldrb	r3, [r3, #14]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d107      	bne.n	80026ac <USART_Init+0x84>
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a2:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	60fb      	str	r3, [r7, #12]

	}

    //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]

    /******************************** Configuration of CR2******************************************/

	tempreg=0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7b1b      	ldrb	r3, [r3, #12]
 80026bc:	031b      	lsls	r3, r3, #12
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7bdb      	ldrb	r3, [r3, #15]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d104      	bne.n	80026e4 <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e014      	b.n	800270e <USART_Init+0xe6>
	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7bdb      	ldrb	r3, [r3, #15]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d104      	bne.n	80026f6 <USART_Init+0xce>
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e00b      	b.n	800270e <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7bdb      	ldrb	r3, [r3, #15]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <USART_Init+0xe6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002704:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	60fb      	str	r3, [r7, #12]
	}
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	615a      	str	r2, [r3, #20]

    /******************************** Configuration of BRR(Baudrate register)******************************************/
	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f7ff ff0f 	bl	8002544 <USART_SetBaudRate>
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd){
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE){
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << 13);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 800274c:	e005      	b.n	800275a <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60da      	str	r2, [r3, #12]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <USART_PeriClockControl>:

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d12a      	bne.n	80027d0 <USART_PeriClockControl+0x68>
		if(pUSARTx == USART1){
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <USART_PeriClockControl+0x74>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d106      	bne.n	8002790 <USART_PeriClockControl+0x28>
			USART1_PCCK_EN();
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <USART_PeriClockControl+0x78>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <USART_PeriClockControl+0x78>)
 8002788:	f043 0310 	orr.w	r3, r3, #16
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
		}
	}
	else{
		//TODO
	}
}
 800278e:	e01f      	b.n	80027d0 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <USART_PeriClockControl+0x7c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d106      	bne.n	80027a6 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <USART_PeriClockControl+0x78>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <USART_PeriClockControl+0x78>)
 800279e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80027a4:	e014      	b.n	80027d0 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3){
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <USART_PeriClockControl+0x80>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d106      	bne.n	80027bc <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <USART_PeriClockControl+0x78>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <USART_PeriClockControl+0x78>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80027ba:	e009      	b.n	80027d0 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == UART4){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <USART_PeriClockControl+0x84>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d105      	bne.n	80027d0 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <USART_PeriClockControl+0x78>)
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <USART_PeriClockControl+0x78>)
 80027ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027ce:	6453      	str	r3, [r2, #68]	; 0x44
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40004400 	.word	0x40004400
 80027e8:	40004800 	.word	0x40004800
 80027ec:	40004c00 	.word	0x40004c00

080027f0 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName){
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <USART_GetFlagStatus+0x1c>
    	return SET;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <USART_GetFlagStatus+0x1e>
    }
   return RESET;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <USART_SendData>:

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++){
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e031      	b.n	8002890 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 800282c:	bf00      	nop
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ffdb 	bl	80027f0 <USART_GetFlagStatus>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f6      	beq.n	800282e <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	7b5b      	ldrb	r3, [r3, #13]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d118      	bne.n	800287a <USART_SendData+0x60>
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285a:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	7b9b      	ldrb	r3, [r3, #14]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <USART_SendData+0x58>
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	3301      	adds	r3, #1
 8002868:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3301      	adds	r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	e00b      	b.n	800288a <USART_SendData+0x70>
			}else{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3301      	adds	r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	e007      	b.n	800288a <USART_SendData+0x70>
			}
		}else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++){
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d3c9      	bcc.n	800282c <USART_SendData+0x12>
		}
	}
	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8002898:	bf00      	nop
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2140      	movs	r1, #64	; 0x40
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ffa5 	bl	80027f0 <USART_GetFlagStatus>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f6      	beq.n	800289a <USART_SendData+0x80>
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <USART_ReceiveDataIT>:
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TCIE);
	}
	return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len){
 80028b6:	b480      	push	{r7}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028c8:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX){
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d014      	beq.n	80028fa <USART_ReceiveDataIT+0x44>
		pUSARTHandle->RxLen = Len;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0220 	orr.w	r2, r2, #32
 80028f8:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <HAL_Init+0x40>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_Init+0x40>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_Init+0x40>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f000 f931 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002936:	2000      	movs	r0, #0
 8002938:	f000 f808 	bl	800294c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293c:	f7fe fd50 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_InitTick+0x54>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_InitTick+0x58>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002962:	fbb3 f3f1 	udiv	r3, r3, r1
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f93b 	bl	8002be6 <HAL_SYSTICK_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e00e      	b.n	8002998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b0f      	cmp	r3, #15
 800297e:	d80a      	bhi.n	8002996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002980:	2200      	movs	r2, #0
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f000 f911 	bl	8002bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800298c:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <HAL_InitTick+0x5c>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000003c 	.word	0x2000003c
 80029a4:	20000058 	.word	0x20000058
 80029a8:	20000054 	.word	0x20000054

080029ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x20>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_IncTick+0x24>)
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000058 	.word	0x20000058
 80029d0:	20000964 	.word	0x20000964

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_GetTick+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000964 	.word	0x20000964

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d005      	beq.n	8002a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_Delay+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a12:	bf00      	nop
 8002a14:	f7ff ffde 	bl	80029d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d8f7      	bhi.n	8002a14 <HAL_Delay+0x28>
  {
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000058 	.word	0x20000058

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff47 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc0:	f7ff ff5c 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7ff ff8e 	bl	8002aec <NVIC_EncodePriority>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff5d 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffb0 	bl	8002b54 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e00e      	b.n	8002c2e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	795b      	ldrb	r3, [r3, #5]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe fc05 	bl	8001430 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0cc      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d90c      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0b8      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c8c:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a52      	ldr	r2, [pc, #328]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	494d      	ldr	r1, [pc, #308]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d044      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e07f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e067      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4934      	ldr	r1, [pc, #208]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d28:	f7ff fe54 	bl	80029d4 <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7ff fe50 	bl	80029d4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e04f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d20c      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e032      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4916      	ldr	r1, [pc, #88]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	490e      	ldr	r1, [pc, #56]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dbe:	f000 f821 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	490a      	ldr	r1, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	5ccb      	ldrb	r3, [r1, r3]
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fdb4 	bl	800294c <HAL_InitTick>

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00
 8002df4:	40023800 	.word	0x40023800
 8002df8:	08007ed0 	.word	0x08007ed0
 8002dfc:	2000003c 	.word	0x2000003c
 8002e00:	20000054 	.word	0x20000054

08002e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e08:	b0ae      	sub	sp, #184	; 0xb8
 8002e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2a:	4bcb      	ldr	r3, [pc, #812]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	f200 8206 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x440>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08003245 	.word	0x08003245
 8002e48:	08003245 	.word	0x08003245
 8002e4c:	08003245 	.word	0x08003245
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08003245 	.word	0x08003245
 8002e58:	08003245 	.word	0x08003245
 8002e5c:	08003245 	.word	0x08003245
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08003245 	.word	0x08003245
 8002e68:	08003245 	.word	0x08003245
 8002e6c:	08003245 	.word	0x08003245
 8002e70:	08003075 	.word	0x08003075
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4bb9      	ldr	r3, [pc, #740]	; (800315c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e7a:	e1e7      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7c:	4bb8      	ldr	r3, [pc, #736]	; (8003160 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e82:	e1e3      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e84:	4bb4      	ldr	r3, [pc, #720]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e90:	4bb1      	ldr	r3, [pc, #708]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d071      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9c:	4bae      	ldr	r3, [pc, #696]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4621      	mov	r1, r4
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	6439      	str	r1, [r7, #64]	; 0x40
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4641      	mov	r1, r8
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4641      	mov	r1, r8
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f08:	4649      	mov	r1, r9
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	00cb      	lsls	r3, r1, #3
 8002f20:	4641      	mov	r1, r8
 8002f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f26:	4641      	mov	r1, r8
 8002f28:	00ca      	lsls	r2, r1, #3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4622      	mov	r2, r4
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
 8002f36:	462b      	mov	r3, r5
 8002f38:	460a      	mov	r2, r1
 8002f3a:	eb42 0303 	adc.w	r3, r2, r3
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	024b      	lsls	r3, r1, #9
 8002f50:	4621      	mov	r1, r4
 8002f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f56:	4621      	mov	r1, r4
 8002f58:	024a      	lsls	r2, r1, #9
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f70:	f7fd fe4a 	bl	8000c08 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f7e:	e067      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4641      	mov	r1, r8
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4641      	mov	r1, r8
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe8:	4649      	mov	r1, r9
 8002fea:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ffa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003002:	4692      	mov	sl, r2
 8003004:	469b      	mov	fp, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb1a 0303 	adds.w	r3, sl, r3
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	462b      	mov	r3, r5
 8003010:	eb4b 0303 	adc.w	r3, fp, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003022:	4629      	mov	r1, r5
 8003024:	028b      	lsls	r3, r1, #10
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800302c:	4621      	mov	r1, r4
 800302e:	028a      	lsls	r2, r1, #10
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003038:	2200      	movs	r2, #0
 800303a:	673b      	str	r3, [r7, #112]	; 0x70
 800303c:	677a      	str	r2, [r7, #116]	; 0x74
 800303e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003042:	f7fd fde1 	bl	8000c08 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4613      	mov	r3, r2
 800304c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003050:	4b41      	ldr	r3, [pc, #260]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003072:	e0eb      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d06b      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b32      	ldr	r3, [pc, #200]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	66bb      	str	r3, [r7, #104]	; 0x68
 8003096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	663b      	str	r3, [r7, #96]	; 0x60
 80030a0:	2300      	movs	r3, #0
 80030a2:	667b      	str	r3, [r7, #100]	; 0x64
 80030a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030a8:	4622      	mov	r2, r4
 80030aa:	462b      	mov	r3, r5
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	0159      	lsls	r1, r3, #5
 80030b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ba:	0150      	lsls	r0, r2, #5
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4621      	mov	r1, r4
 80030c2:	1a51      	subs	r1, r2, r1
 80030c4:	61b9      	str	r1, [r7, #24]
 80030c6:	4629      	mov	r1, r5
 80030c8:	eb63 0301 	sbc.w	r3, r3, r1
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030da:	4659      	mov	r1, fp
 80030dc:	018b      	lsls	r3, r1, #6
 80030de:	4651      	mov	r1, sl
 80030e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e4:	4651      	mov	r1, sl
 80030e6:	018a      	lsls	r2, r1, #6
 80030e8:	4651      	mov	r1, sl
 80030ea:	ebb2 0801 	subs.w	r8, r2, r1
 80030ee:	4659      	mov	r1, fp
 80030f0:	eb63 0901 	sbc.w	r9, r3, r1
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003100:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003104:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003108:	4690      	mov	r8, r2
 800310a:	4699      	mov	r9, r3
 800310c:	4623      	mov	r3, r4
 800310e:	eb18 0303 	adds.w	r3, r8, r3
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	462b      	mov	r3, r5
 8003116:	eb49 0303 	adc.w	r3, r9, r3
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003128:	4629      	mov	r1, r5
 800312a:	024b      	lsls	r3, r1, #9
 800312c:	4621      	mov	r1, r4
 800312e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003132:	4621      	mov	r1, r4
 8003134:	024a      	lsls	r2, r1, #9
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800313e:	2200      	movs	r2, #0
 8003140:	65bb      	str	r3, [r7, #88]	; 0x58
 8003142:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003144:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003148:	f7fd fd5e 	bl	8000c08 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003156:	e065      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x420>
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_GetSysClockFreq+0x458>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	2200      	movs	r2, #0
 800316c:	4618      	mov	r0, r3
 800316e:	4611      	mov	r1, r2
 8003170:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003174:	653b      	str	r3, [r7, #80]	; 0x50
 8003176:	2300      	movs	r3, #0
 8003178:	657b      	str	r3, [r7, #84]	; 0x54
 800317a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800317e:	4642      	mov	r2, r8
 8003180:	464b      	mov	r3, r9
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4641      	mov	r1, r8
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	4649      	mov	r1, r9
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	1a54      	subs	r4, r2, r1
 80031c2:	4659      	mov	r1, fp
 80031c4:	eb63 0501 	sbc.w	r5, r3, r1
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	00eb      	lsls	r3, r5, #3
 80031d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d6:	00e2      	lsls	r2, r4, #3
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	18e3      	adds	r3, r4, r3
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb45 0303 	adc.w	r3, r5, r3
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f6:	4629      	mov	r1, r5
 80031f8:	028b      	lsls	r3, r1, #10
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003200:	4621      	mov	r1, r4
 8003202:	028a      	lsls	r2, r1, #10
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800320c:	2200      	movs	r2, #0
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003210:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003212:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003216:	f7fd fcf7 	bl	8000c08 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4613      	mov	r3, r2
 8003220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCC_GetSysClockFreq+0x458>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0f1b      	lsrs	r3, r3, #28
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003242:	e003      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800324a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003250:	4618      	mov	r0, r3
 8003252:	37b8      	adds	r7, #184	; 0xb8
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	00f42400 	.word	0x00f42400

08003264 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e28d      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8083 	beq.w	800338a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003284:	4b94      	ldr	r3, [pc, #592]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d019      	beq.n	80032c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003298:	2b08      	cmp	r3, #8
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800329c:	4b8e      	ldr	r3, [pc, #568]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a8:	d00c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032aa:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d112      	bne.n	80032dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d10b      	bne.n	80032dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b84      	ldr	r3, [pc, #528]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05b      	beq.n	8003388 <HAL_RCC_OscConfig+0x124>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d157      	bne.n	8003388 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e25a      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_OscConfig+0x90>
 80032e6:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7b      	ldr	r2, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xcc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xb4>
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xcc>
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6b      	ldr	r2, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7ff fb4c 	bl	80029d4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff fb48 	bl	80029d4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e21f      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xdc>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7ff fb38 	bl	80029d4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7ff fb34 	bl	80029d4 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e20b      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x104>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d06f      	beq.n	8003476 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d017      	beq.n	80033d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033a2:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d105      	bne.n	80033ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ae:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d11c      	bne.n	8003400 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d116      	bne.n	8003400 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x186>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1d3      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4937      	ldr	r1, [pc, #220]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	e03a      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x278>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7ff fae1 	bl	80029d4 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7ff fadd 	bl	80029d4 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e1b4      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4925      	ldr	r1, [pc, #148]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
 8003448:	e015      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344a:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x278>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7ff fac0 	bl	80029d4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7ff fabc 	bl	80029d4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e193      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d036      	beq.n	80034f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7ff faa0 	bl	80029d4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003498:	f7ff fa9c 	bl	80029d4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e173      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x234>
 80034b6:	e01b      	b.n	80034f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7ff fa89 	bl	80029d4 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	e00e      	b.n	80034e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c6:	f7ff fa85 	bl	80029d4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d907      	bls.n	80034e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e15c      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	42470000 	.word	0x42470000
 80034e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b8a      	ldr	r3, [pc, #552]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ea      	bne.n	80034c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8097 	beq.w	800362c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b83      	ldr	r3, [pc, #524]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	4b7f      	ldr	r3, [pc, #508]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a7e      	ldr	r2, [pc, #504]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b7c      	ldr	r3, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b79      	ldr	r3, [pc, #484]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7ff fa45 	bl	80029d4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7ff fa41 	bl	80029d4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e118      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x31e>
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a65      	ldr	r2, [pc, #404]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x358>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x340>
 800358a:	4b61      	ldr	r3, [pc, #388]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a60      	ldr	r2, [pc, #384]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a5d      	ldr	r2, [pc, #372]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0x358>
 80035a4:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a59      	ldr	r2, [pc, #356]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	4b57      	ldr	r3, [pc, #348]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a56      	ldr	r2, [pc, #344]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7ff fa06 	bl	80029d4 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7ff fa02 	bl	80029d4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0d7      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ee      	beq.n	80035cc <HAL_RCC_OscConfig+0x368>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7ff f9f0 	bl	80029d4 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7ff f9ec 	bl	80029d4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0c1      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ee      	bne.n	80035f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d105      	bne.n	800362c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003620:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	4a3a      	ldr	r2, [pc, #232]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80ad 	beq.w	8003790 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d060      	beq.n	8003704 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d145      	bne.n	80036d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_RCC_OscConfig+0x4b4>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7ff f9c0 	bl	80029d4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7ff f9bc 	bl	80029d4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e093      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	071b      	lsls	r3, r3, #28
 80036a2:	491b      	ldr	r1, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x4b4>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7ff f991 	bl	80029d4 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7ff f98d 	bl	80029d4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e064      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x452>
 80036d4:	e05c      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x4b4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7ff f97a 	bl	80029d4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7ff f976 	bl	80029d4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e04d      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x480>
 8003702:	e045      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e040      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
 8003710:	40023800 	.word	0x40023800
 8003714:	40007000 	.word	0x40007000
 8003718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCC_OscConfig+0x538>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d030      	beq.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d129      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d122      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	4293      	cmp	r3, r2
 8003756:	d119      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	3b01      	subs	r3, #1
 8003766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d10f      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e041      	b.n	8003836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fe54 	bl	8001474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 f896 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d001      	beq.n	8003858 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e046      	b.n	80038e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_TIM_Base_Start+0xb4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d022      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d01d      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_TIM_Base_Start+0xb8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d018      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_TIM_Base_Start+0xbc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_TIM_Base_Start+0xc0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00e      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <HAL_TIM_Base_Start+0xc4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d009      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_TIM_Base_Start+0xc8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_TIM_Base_Start+0x70>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_TIM_Base_Start+0xcc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d111      	bne.n	80038d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d010      	beq.n	80038e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	e007      	b.n	80038e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40010400 	.word	0x40010400
 8003908:	40014000 	.word	0x40014000
 800390c:	40001800 	.word	0x40001800

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d027      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d023      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <TIM_Base_SetConfig+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_Base_SetConfig+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <TIM_Base_SetConfig+0x13c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	40001800 	.word	0x40001800
 8003a48:	40001c00 	.word	0x40001c00
 8003a4c:	40002000 	.word	0x40002000

08003a50 <fire_configure_activations>:


AI_DECLARE_STATIC
ai_bool fire_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_FIRE_ACTIVATIONS_ALIGNMENT));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	3303      	adds	r3, #3
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <fire_configure_activations+0x80>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <fire_configure_activations+0x80>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <fire_configure_activations+0x84>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8003a78:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <fire_configure_activations+0x84>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8003a7e:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <fire_configure_activations+0x88>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <fire_configure_activations+0x88>)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 32);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3320      	adds	r3, #32
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <fire_configure_activations+0x8c>)
 8003a90:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 32);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3320      	adds	r3, #32
 8003a96:	4a11      	ldr	r2, [pc, #68]	; (8003adc <fire_configure_activations+0x8c>)
 8003a98:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 8003a9a:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <fire_configure_activations+0x90>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <fire_configure_activations+0x90>)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 20);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <fire_configure_activations+0x94>)
 8003aac:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 20);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <fire_configure_activations+0x94>)
 8003ab4:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <fire_configure_activations+0x98>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <fire_configure_activations+0x98>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8003ac2:	2301      	movs	r3, #1
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	2000011c 	.word	0x2000011c
 8003ad4:	2000012c 	.word	0x2000012c
 8003ad8:	2000013c 	.word	0x2000013c
 8003adc:	2000014c 	.word	0x2000014c
 8003ae0:	2000015c 	.word	0x2000015c
 8003ae4:	2000016c 	.word	0x2000016c
 8003ae8:	2000017c 	.word	0x2000017c

08003aec <fire_configure_weights>:


AI_DECLARE_STATIC
ai_bool fire_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <fire_configure_weights+0xd0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b04:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <fire_configure_weights+0xd0>)
 8003b06:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 348);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003b0e:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <fire_configure_weights+0xd0>)
 8003b10:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 348);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003b18:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <fire_configure_weights+0xd0>)
 8003b1a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <fire_configure_weights+0xd4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <fire_configure_weights+0xd4>)
 8003b26:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 308);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <fire_configure_weights+0xd4>)
 8003b30:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 308);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003b38:	4a21      	ldr	r2, [pc, #132]	; (8003bc0 <fire_configure_weights+0xd4>)
 8003b3a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <fire_configure_weights+0xd8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <fire_configure_weights+0xd8>)
 8003b46:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 288);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <fire_configure_weights+0xd8>)
 8003b50:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 288);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b58:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <fire_configure_weights+0xd8>)
 8003b5a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <fire_configure_weights+0xdc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <fire_configure_weights+0xdc>)
 8003b66:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3380      	adds	r3, #128	; 0x80
 8003b6c:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <fire_configure_weights+0xdc>)
 8003b6e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3380      	adds	r3, #128	; 0x80
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <fire_configure_weights+0xdc>)
 8003b76:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <fire_configure_weights+0xe0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <fire_configure_weights+0xe0>)
 8003b82:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 96);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <fire_configure_weights+0xe0>)
 8003b8a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 96);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3360      	adds	r3, #96	; 0x60
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <fire_configure_weights+0xe0>)
 8003b92:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <fire_configure_weights+0xe4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <fire_configure_weights+0xe4>)
 8003b9e:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8003ba0:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <fire_configure_weights+0xe4>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <fire_configure_weights+0xe4>)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8003bac:	2301      	movs	r3, #1
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200000bc 	.word	0x200000bc
 8003bc0:	200000cc 	.word	0x200000cc
 8003bc4:	200000dc 	.word	0x200000dc
 8003bc8:	200000ec 	.word	0x200000ec
 8003bcc:	200000fc 	.word	0x200000fc
 8003bd0:	2000010c 	.word	0x2000010c

08003bd4 <ai_fire_create>:
}

AI_API_ENTRY
ai_error ai_fire_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003bde:	2300      	movs	r3, #0
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	2303      	movs	r3, #3
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2301      	movs	r3, #1
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <ai_fire_create+0x28>)
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f881 	bl	8003cf4 <ai_platform_network_create>
 8003bf2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	2000005c 	.word	0x2000005c

08003c00 <ai_fire_init>:
}

AI_API_ENTRY
ai_bool ai_fire_init(
  ai_handle network, const ai_network_params* params)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8c9 	bl	8003da4 <ai_platform_network_init>
 8003c12:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <ai_fire_init+0x1e>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e02b      	b.n	8003c76 <ai_fire_init+0x76>

  ai_bool ok = true;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_weights(net_ctx, &params->params);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ff60 	bl	8003aec <fire_configure_weights>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_activations(net_ctx, &params->activations);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	3318      	adds	r3, #24
 8003c42:	4619      	mov	r1, r3
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ff03 	bl	8003a50 <fire_configure_activations>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f91f 	bl	8003ea0 <ai_platform_network_post_init>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	7afb      	ldrb	r3, [r7, #11]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003c74:	7afb      	ldrb	r3, [r7, #11]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <ai_fire_run>:


AI_API_ENTRY
ai_i32 ai_fire_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f94e 	bl	8003f30 <ai_platform_network_process>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <ai_fire_data_weights_get>:
#include "fire_data.h"

ai_handle ai_fire_data_weights_get(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
    0x92, 0xe6, 0x3f, 0x10, 0x57, 0x49, 0xbf, 0x93, 0xd9,
    0x7a, 0x3f, 0x86, 0xfd, 0xd0, 0xbf, 0xfd, 0x48, 0x0e,
    0xbf, 0xdb, 0xbb, 0x2b, 0x3d, 0xdb, 0xbb, 0x2b, 0xbd
  };

  return AI_HANDLE_PTR(s_fire_weights);
 8003ca4:	4b02      	ldr	r3, [pc, #8]	; (8003cb0 <ai_fire_data_weights_get+0x10>)

}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	08007f10 	.word	0x08007f10

08003cb4 <_platform_network_state_setup.isra.1>:
 8003cb4:	b430      	push	{r4, r5}
 8003cb6:	68dd      	ldr	r5, [r3, #12]
 8003cb8:	695c      	ldr	r4, [r3, #20]
 8003cba:	68ed      	ldr	r5, [r5, #12]
 8003cbc:	68e4      	ldr	r4, [r4, #12]
 8003cbe:	fb04 f405 	mul.w	r4, r4, r5
 8003cc2:	6084      	str	r4, [r0, #8]
 8003cc4:	8809      	ldrh	r1, [r1, #0]
 8003cc6:	fb04 f401 	mul.w	r4, r4, r1
 8003cca:	60c4      	str	r4, [r0, #12]
 8003ccc:	6811      	ldr	r1, [r2, #0]
 8003cce:	6041      	str	r1, [r0, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	4414      	add	r4, r2
 8003cd4:	6004      	str	r4, [r0, #0]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	6814      	ldr	r4, [r2, #0]
 8003cda:	00a4      	lsls	r4, r4, #2
 8003cdc:	d407      	bmi.n	8003cee <_platform_network_state_setup.isra.1+0x3a>
 8003cde:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	4421      	add	r1, r4
 8003ce6:	6091      	str	r1, [r2, #8]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	6842      	ldr	r2, [r0, #4]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	bc30      	pop	{r4, r5}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <ai_platform_network_create>:
 8003cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf8:	4e23      	ldr	r6, [pc, #140]	; (8003d88 <ai_platform_network_create+0x94>)
 8003cfa:	4924      	ldr	r1, [pc, #144]	; (8003d8c <ai_platform_network_create+0x98>)
 8003cfc:	6835      	ldr	r5, [r6, #0]
 8003cfe:	b082      	sub	sp, #8
 8003d00:	f025 0501 	bic.w	r5, r5, #1
 8003d04:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8003d08:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003d0c:	6035      	str	r5, [r6, #0]
 8003d0e:	2501      	movs	r5, #1
 8003d10:	600d      	str	r5, [r1, #0]
 8003d12:	680d      	ldr	r5, [r1, #0]
 8003d14:	2d00      	cmp	r5, #0
 8003d16:	d1fc      	bne.n	8003d12 <ai_platform_network_create+0x1e>
 8003d18:	491d      	ldr	r1, [pc, #116]	; (8003d90 <ai_platform_network_create+0x9c>)
 8003d1a:	4e1e      	ldr	r6, [pc, #120]	; (8003d94 <ai_platform_network_create+0xa0>)
 8003d1c:	600e      	str	r6, [r1, #0]
 8003d1e:	680e      	ldr	r6, [r1, #0]
 8003d20:	491d      	ldr	r1, [pc, #116]	; (8003d98 <ai_platform_network_create+0xa4>)
 8003d22:	428e      	cmp	r6, r1
 8003d24:	d000      	beq.n	8003d28 <ai_platform_network_create+0x34>
 8003d26:	e7fe      	b.n	8003d26 <ai_platform_network_create+0x32>
 8003d28:	b1d0      	cbz	r0, 8003d60 <ai_platform_network_create+0x6c>
 8003d2a:	4698      	mov	r8, r3
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <ai_platform_network_create+0xa8>)
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	6003      	str	r3, [r0, #0]
 8003d34:	4606      	mov	r6, r0
 8003d36:	f000 fb05 	bl	8004344 <core_init>
 8003d3a:	b1b0      	cbz	r0, 8003d6a <ai_platform_network_create+0x76>
 8003d3c:	0223      	lsls	r3, r4, #8
 8003d3e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003d42:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8003d46:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8003d4a:	d910      	bls.n	8003d6e <ai_platform_network_create+0x7a>
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6033      	str	r3, [r6, #0]
 8003d52:	2310      	movs	r3, #16
 8003d54:	2000      	movs	r0, #0
 8003d56:	f362 0007 	bfi	r0, r2, #0, #8
 8003d5a:	f363 201f 	bfi	r0, r3, #8, #24
 8003d5e:	e001      	b.n	8003d64 <ai_platform_network_create+0x70>
 8003d60:	f241 0010 	movw	r0, #4112	; 0x1010
 8003d64:	b002      	add	sp, #8
 8003d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6a:	2230      	movs	r2, #48	; 0x30
 8003d6c:	e7ef      	b.n	8003d4e <ai_platform_network_create+0x5a>
 8003d6e:	a802      	add	r0, sp, #8
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <ai_platform_network_create+0xac>)
 8003d72:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003d76:	f001 f849 	bl	8004e0c <ai_check_custom_types>
 8003d7a:	b110      	cbz	r0, 8003d82 <ai_platform_network_create+0x8e>
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	462a      	mov	r2, r5
 8003d80:	e7e8      	b.n	8003d54 <ai_platform_network_create+0x60>
 8003d82:	2202      	movs	r2, #2
 8003d84:	e7e3      	b.n	8003d4e <ai_platform_network_create+0x5a>
 8003d86:	bf00      	nop
 8003d88:	e0002000 	.word	0xe0002000
 8003d8c:	40023008 	.word	0x40023008
 8003d90:	40023000 	.word	0x40023000
 8003d94:	f407a5c2 	.word	0xf407a5c2
 8003d98:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d9c:	a1c00100 	.word	0xa1c00100
 8003da0:	84048403 	.word	0x84048403

08003da4 <ai_platform_network_init>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	460c      	mov	r4, r1
 8003da8:	4605      	mov	r5, r0
 8003daa:	b120      	cbz	r0, 8003db6 <ai_platform_network_init+0x12>
 8003dac:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <ai_platform_network_init+0xe4>)
 8003dae:	6802      	ldr	r2, [r0, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	bf18      	it	ne
 8003db4:	2500      	movne	r5, #0
 8003db6:	4935      	ldr	r1, [pc, #212]	; (8003e8c <ai_platform_network_init+0xe8>)
 8003db8:	4a35      	ldr	r2, [pc, #212]	; (8003e90 <ai_platform_network_init+0xec>)
 8003dba:	680b      	ldr	r3, [r1, #0]
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	6010      	str	r0, [r2, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d1fc      	bne.n	8003dc8 <ai_platform_network_init+0x24>
 8003dce:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <ai_platform_network_init+0xf0>)
 8003dd0:	4a31      	ldr	r2, [pc, #196]	; (8003e98 <ai_platform_network_init+0xf4>)
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <ai_platform_network_init+0xf8>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d000      	beq.n	8003dde <ai_platform_network_init+0x3a>
 8003ddc:	e7fe      	b.n	8003ddc <ai_platform_network_init+0x38>
 8003dde:	b33d      	cbz	r5, 8003e30 <ai_platform_network_init+0x8c>
 8003de0:	b344      	cbz	r4, 8003e34 <ai_platform_network_init+0x90>
 8003de2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003de4:	6926      	ldr	r6, [r4, #16]
 8003de6:	2f00      	cmp	r7, #0
 8003de8:	d03d      	beq.n	8003e66 <ai_platform_network_init+0xc2>
 8003dea:	b35e      	cbz	r6, 8003e44 <ai_platform_network_init+0xa0>
 8003dec:	4627      	mov	r7, r4
 8003dee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003df0:	f105 0618 	add.w	r6, r5, #24
 8003df4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003df6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003dfa:	e886 0003 	stmia.w	r6, {r0, r1}
 8003dfe:	3418      	adds	r4, #24
 8003e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e02:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8003e06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e0c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003e10:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003e12:	2303      	movs	r3, #3
 8003e14:	60eb      	str	r3, [r5, #12]
 8003e16:	b15a      	cbz	r2, 8003e30 <ai_platform_network_init+0x8c>
 8003e18:	68d3      	ldr	r3, [r2, #12]
 8003e1a:	6095      	str	r5, [r2, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d007      	beq.n	8003e30 <ai_platform_network_init+0x8c>
 8003e20:	b133      	cbz	r3, 8003e30 <ai_platform_network_init+0x8c>
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	609d      	str	r5, [r3, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d002      	beq.n	8003e30 <ai_platform_network_init+0x8c>
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f8      	bne.n	8003e22 <ai_platform_network_init+0x7e>
 8003e30:	4628      	mov	r0, r5
 8003e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e34:	f105 0010 	add.w	r0, r5, #16
 8003e38:	2211      	movs	r2, #17
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	f000 fa84 	bl	8004348 <core_set_error>
 8003e40:	4625      	mov	r5, r4
 8003e42:	e7f5      	b.n	8003e30 <ai_platform_network_init+0x8c>
 8003e44:	8921      	ldrh	r1, [r4, #8]
 8003e46:	88e2      	ldrh	r2, [r4, #6]
 8003e48:	68e3      	ldr	r3, [r4, #12]
 8003e4a:	fb02 f201 	mul.w	r2, r2, r1
 8003e4e:	fb03 f302 	mul.w	r3, r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ca      	beq.n	8003dec <ai_platform_network_init+0x48>
 8003e56:	f105 0010 	add.w	r0, r5, #16
 8003e5a:	2212      	movs	r2, #18
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	f000 fa73 	bl	8004348 <core_set_error>
 8003e62:	4635      	mov	r5, r6
 8003e64:	e7e4      	b.n	8003e30 <ai_platform_network_init+0x8c>
 8003e66:	8c21      	ldrh	r1, [r4, #32]
 8003e68:	8be2      	ldrh	r2, [r4, #30]
 8003e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e6c:	fb02 f201 	mul.w	r2, r2, r1
 8003e70:	fb03 f302 	mul.w	r3, r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0b8      	beq.n	8003dea <ai_platform_network_init+0x46>
 8003e78:	f105 0010 	add.w	r0, r5, #16
 8003e7c:	2213      	movs	r2, #19
 8003e7e:	2110      	movs	r1, #16
 8003e80:	f000 fa62 	bl	8004348 <core_set_error>
 8003e84:	463d      	mov	r5, r7
 8003e86:	e7d3      	b.n	8003e30 <ai_platform_network_init+0x8c>
 8003e88:	a1c00100 	.word	0xa1c00100
 8003e8c:	e0002000 	.word	0xe0002000
 8003e90:	40023008 	.word	0x40023008
 8003e94:	40023000 	.word	0x40023000
 8003e98:	f407a5c2 	.word	0xf407a5c2
 8003e9c:	b5e8b5cd 	.word	0xb5e8b5cd

08003ea0 <ai_platform_network_post_init>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	b120      	cbz	r0, 8003eb0 <ai_platform_network_post_init+0x10>
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <ai_platform_network_post_init+0x78>)
 8003ea8:	6802      	ldr	r2, [r0, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	bf18      	it	ne
 8003eae:	2400      	movne	r4, #0
 8003eb0:	491a      	ldr	r1, [pc, #104]	; (8003f1c <ai_platform_network_post_init+0x7c>)
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <ai_platform_network_post_init+0x80>)
 8003eb4:	680b      	ldr	r3, [r1, #0]
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	600b      	str	r3, [r1, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	6010      	str	r0, [r2, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	d1fc      	bne.n	8003ec2 <ai_platform_network_post_init+0x22>
 8003ec8:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <ai_platform_network_post_init+0x84>)
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <ai_platform_network_post_init+0x88>)
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <ai_platform_network_post_init+0x8c>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d000      	beq.n	8003ed8 <ai_platform_network_post_init+0x38>
 8003ed6:	e7fe      	b.n	8003ed6 <ai_platform_network_post_init+0x36>
 8003ed8:	b1a4      	cbz	r4, 8003f04 <ai_platform_network_post_init+0x64>
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	f013 0502 	ands.w	r5, r3, #2
 8003ee0:	d012      	beq.n	8003f08 <ai_platform_network_post_init+0x68>
 8003ee2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ee4:	b163      	cbz	r3, 8003f00 <ai_platform_network_post_init+0x60>
 8003ee6:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003ee8:	b91d      	cbnz	r5, 8003ef2 <ai_platform_network_post_init+0x52>
 8003eea:	e009      	b.n	8003f00 <ai_platform_network_post_init+0x60>
 8003eec:	461d      	mov	r5, r3
 8003eee:	b13b      	cbz	r3, 8003f00 <ai_platform_network_post_init+0x60>
 8003ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ef2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	4798      	blx	r3
 8003efa:	68eb      	ldr	r3, [r5, #12]
 8003efc:	42ab      	cmp	r3, r5
 8003efe:	d1f5      	bne.n	8003eec <ai_platform_network_post_init+0x4c>
 8003f00:	2001      	movs	r0, #1
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	4620      	mov	r0, r4
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	f104 0010 	add.w	r0, r4, #16
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	2111      	movs	r1, #17
 8003f10:	f000 fa1a 	bl	8004348 <core_set_error>
 8003f14:	4628      	mov	r0, r5
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	a1c00100 	.word	0xa1c00100
 8003f1c:	e0002000 	.word	0xe0002000
 8003f20:	40023008 	.word	0x40023008
 8003f24:	40023000 	.word	0x40023000
 8003f28:	f407a5c2 	.word	0xf407a5c2
 8003f2c:	b5e8b5cd 	.word	0xb5e8b5cd

08003f30 <ai_platform_network_process>:
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f34:	b083      	sub	sp, #12
 8003f36:	4604      	mov	r4, r0
 8003f38:	9201      	str	r2, [sp, #4]
 8003f3a:	b120      	cbz	r0, 8003f46 <ai_platform_network_process+0x16>
 8003f3c:	4ba5      	ldr	r3, [pc, #660]	; (80041d4 <ai_platform_network_process+0x2a4>)
 8003f3e:	6802      	ldr	r2, [r0, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	bf18      	it	ne
 8003f44:	2400      	movne	r4, #0
 8003f46:	48a4      	ldr	r0, [pc, #656]	; (80041d8 <ai_platform_network_process+0x2a8>)
 8003f48:	4ba4      	ldr	r3, [pc, #656]	; (80041dc <ai_platform_network_process+0x2ac>)
 8003f4a:	6802      	ldr	r2, [r0, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	6002      	str	r2, [r0, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d1fc      	bne.n	8003f56 <ai_platform_network_process+0x26>
 8003f5c:	4ba0      	ldr	r3, [pc, #640]	; (80041e0 <ai_platform_network_process+0x2b0>)
 8003f5e:	4aa1      	ldr	r2, [pc, #644]	; (80041e4 <ai_platform_network_process+0x2b4>)
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4ba0      	ldr	r3, [pc, #640]	; (80041e8 <ai_platform_network_process+0x2b8>)
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d000      	beq.n	8003f6c <ai_platform_network_process+0x3c>
 8003f6a:	e7fe      	b.n	8003f6a <ai_platform_network_process+0x3a>
 8003f6c:	2c00      	cmp	r4, #0
 8003f6e:	d066      	beq.n	800403e <ai_platform_network_process+0x10e>
 8003f70:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8003f74:	b107      	cbz	r7, 8003f78 <ai_platform_network_process+0x48>
 8003f76:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003f78:	68e3      	ldr	r3, [r4, #12]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2600      	movs	r6, #0
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	6166      	str	r6, [r4, #20]
 8003f84:	f040 80fe 	bne.w	8004184 <ai_platform_network_process+0x254>
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d07f      	beq.n	800408c <ai_platform_network_process+0x15c>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	d07d      	beq.n	800408c <ai_platform_network_process+0x15c>
 8003f90:	883b      	ldrh	r3, [r7, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d07a      	beq.n	800408c <ai_platform_network_process+0x15c>
 8003f96:	460d      	mov	r5, r1
 8003f98:	46a0      	mov	r8, r4
 8003f9a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8003f9e:	429e      	cmp	r6, r3
 8003fa0:	d27d      	bcs.n	800409e <ai_platform_network_process+0x16e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d07a      	beq.n	800409e <ai_platform_network_process+0x16e>
 8003fa8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8003fac:	2c00      	cmp	r4, #0
 8003fae:	d076      	beq.n	800409e <ai_platform_network_process+0x16e>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8003fb8:	d067      	beq.n	800408a <ai_platform_network_process+0x15a>
 8003fba:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8003fbe:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8003fc2:	69a0      	ldr	r0, [r4, #24]
 8003fc4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8003fc8:	6841      	ldr	r1, [r0, #4]
 8003fca:	fb0b f30e 	mul.w	r3, fp, lr
 8003fce:	fb0c f303 	mul.w	r3, ip, r3
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	d350      	bcc.n	8004078 <ai_platform_network_process+0x148>
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	455a      	cmp	r2, fp
 8003fdc:	d14c      	bne.n	8004078 <ai_platform_network_process+0x148>
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4572      	cmp	r2, lr
 8003fe2:	d149      	bne.n	8004078 <ai_platform_network_process+0x148>
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	459c      	cmp	ip, r3
 8003fe8:	d146      	bne.n	8004078 <ai_platform_network_process+0x148>
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	f000 ffbe 	bl	8004f6c <ai_array_get_byte_size>
 8003ff0:	68e2      	ldr	r2, [r4, #12]
 8003ff2:	6963      	ldr	r3, [r4, #20]
 8003ff4:	68d2      	ldr	r2, [r2, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	fb03 f302 	mul.w	r3, r3, r2
 8003ffc:	4298      	cmp	r0, r3
 8003ffe:	d33b      	bcc.n	8004078 <ai_platform_network_process+0x148>
 8004000:	69a3      	ldr	r3, [r4, #24]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	f000 ff66 	bl	8004ed4 <ai_array_to_buffer_fmt>
 8004008:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800400c:	4043      	eors	r3, r0
 800400e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004012:	d128      	bne.n	8004066 <ai_platform_network_process+0x136>
 8004014:	68eb      	ldr	r3, [r5, #12]
 8004016:	b1f3      	cbz	r3, 8004056 <ai_platform_network_process+0x126>
 8004018:	f8b5 b000 	ldrh.w	fp, [r5]
 800401c:	f1bb 0f00 	cmp.w	fp, #0
 8004020:	d012      	beq.n	8004048 <ai_platform_network_process+0x118>
 8004022:	4623      	mov	r3, r4
 8004024:	f105 020c 	add.w	r2, r5, #12
 8004028:	4629      	mov	r1, r5
 800402a:	4650      	mov	r0, sl
 800402c:	f7ff fe42 	bl	8003cb4 <_platform_network_state_setup.isra.1>
 8004030:	45d9      	cmp	r9, fp
 8004032:	883b      	ldrh	r3, [r7, #0]
 8004034:	bf38      	it	cc
 8004036:	46d9      	movcc	r9, fp
 8004038:	3601      	adds	r6, #1
 800403a:	3518      	adds	r5, #24
 800403c:	e7af      	b.n	8003f9e <ai_platform_network_process+0x6e>
 800403e:	46a3      	mov	fp, r4
 8004040:	4658      	mov	r0, fp
 8004042:	b003      	add	sp, #12
 8004044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004048:	f108 0010 	add.w	r0, r8, #16
 800404c:	2221      	movs	r2, #33	; 0x21
 800404e:	2112      	movs	r1, #18
 8004050:	f000 f97a 	bl	8004348 <core_set_error>
 8004054:	e7f4      	b.n	8004040 <ai_platform_network_process+0x110>
 8004056:	f108 0010 	add.w	r0, r8, #16
 800405a:	2217      	movs	r2, #23
 800405c:	2112      	movs	r1, #18
 800405e:	469b      	mov	fp, r3
 8004060:	f000 f972 	bl	8004348 <core_set_error>
 8004064:	e7ec      	b.n	8004040 <ai_platform_network_process+0x110>
 8004066:	f108 0010 	add.w	r0, r8, #16
 800406a:	2219      	movs	r2, #25
 800406c:	2112      	movs	r1, #18
 800406e:	f000 f96b 	bl	8004348 <core_set_error>
 8004072:	f04f 0b00 	mov.w	fp, #0
 8004076:	e7e3      	b.n	8004040 <ai_platform_network_process+0x110>
 8004078:	f108 0010 	add.w	r0, r8, #16
 800407c:	2218      	movs	r2, #24
 800407e:	2112      	movs	r1, #18
 8004080:	f000 f962 	bl	8004348 <core_set_error>
 8004084:	f04f 0b00 	mov.w	fp, #0
 8004088:	e7da      	b.n	8004040 <ai_platform_network_process+0x110>
 800408a:	4644      	mov	r4, r8
 800408c:	f104 0010 	add.w	r0, r4, #16
 8004090:	2217      	movs	r2, #23
 8004092:	2112      	movs	r1, #18
 8004094:	f000 f958 	bl	8004348 <core_set_error>
 8004098:	f04f 0b00 	mov.w	fp, #0
 800409c:	e7d0      	b.n	8004040 <ai_platform_network_process+0x110>
 800409e:	9a01      	ldr	r2, [sp, #4]
 80040a0:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80040a4:	4644      	mov	r4, r8
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	f000 80a4 	beq.w	80041f4 <ai_platform_network_process+0x2c4>
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f240 8140 	bls.w	8004332 <ai_platform_network_process+0x402>
 80040b2:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80040b6:	f118 0f0c 	cmn.w	r8, #12
 80040ba:	f000 813a 	beq.w	8004332 <ai_platform_network_process+0x402>
 80040be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8135 	beq.w	8004332 <ai_platform_network_process+0x402>
 80040c8:	3204      	adds	r2, #4
 80040ca:	4615      	mov	r5, r2
 80040cc:	2700      	movs	r7, #0
 80040ce:	429f      	cmp	r7, r3
 80040d0:	f080 808c 	bcs.w	80041ec <ai_platform_network_process+0x2bc>
 80040d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8087 	beq.w	80041ec <ai_platform_network_process+0x2bc>
 80040de:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	f000 8082 	beq.w	80041ec <ai_platform_network_process+0x2bc>
 80040e8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80040f2:	d067      	beq.n	80041c4 <ai_platform_network_process+0x294>
 80040f4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80040f8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80040fc:	69b0      	ldr	r0, [r6, #24]
 80040fe:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004102:	6841      	ldr	r1, [r0, #4]
 8004104:	fb0b f30e 	mul.w	r3, fp, lr
 8004108:	fb0c f303 	mul.w	r3, ip, r3
 800410c:	4299      	cmp	r1, r3
 800410e:	f0c0 8110 	bcc.w	8004332 <ai_platform_network_process+0x402>
 8004112:	68f3      	ldr	r3, [r6, #12]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	455a      	cmp	r2, fp
 8004118:	f040 810b 	bne.w	8004332 <ai_platform_network_process+0x402>
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	4572      	cmp	r2, lr
 8004120:	f040 8107 	bne.w	8004332 <ai_platform_network_process+0x402>
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	459c      	cmp	ip, r3
 8004128:	f040 8103 	bne.w	8004332 <ai_platform_network_process+0x402>
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f000 ff1d 	bl	8004f6c <ai_array_get_byte_size>
 8004132:	68f2      	ldr	r2, [r6, #12]
 8004134:	6973      	ldr	r3, [r6, #20]
 8004136:	68d2      	ldr	r2, [r2, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	fb03 f302 	mul.w	r3, r3, r2
 800413e:	4298      	cmp	r0, r3
 8004140:	f0c0 80f7 	bcc.w	8004332 <ai_platform_network_process+0x402>
 8004144:	69b3      	ldr	r3, [r6, #24]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	f000 fec4 	bl	8004ed4 <ai_array_to_buffer_fmt>
 800414c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004150:	4043      	eors	r3, r0
 8004152:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004156:	d12c      	bne.n	80041b2 <ai_platform_network_process+0x282>
 8004158:	68eb      	ldr	r3, [r5, #12]
 800415a:	b313      	cbz	r3, 80041a2 <ai_platform_network_process+0x272>
 800415c:	f8b5 b000 	ldrh.w	fp, [r5]
 8004160:	f1bb 0f00 	cmp.w	fp, #0
 8004164:	d016      	beq.n	8004194 <ai_platform_network_process+0x264>
 8004166:	4633      	mov	r3, r6
 8004168:	f105 020c 	add.w	r2, r5, #12
 800416c:	4629      	mov	r1, r5
 800416e:	4650      	mov	r0, sl
 8004170:	f7ff fda0 	bl	8003cb4 <_platform_network_state_setup.isra.1>
 8004174:	45d9      	cmp	r9, fp
 8004176:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800417a:	bf38      	it	cc
 800417c:	46d9      	movcc	r9, fp
 800417e:	3701      	adds	r7, #1
 8004180:	3518      	adds	r5, #24
 8004182:	e7a4      	b.n	80040ce <ai_platform_network_process+0x19e>
 8004184:	f104 0010 	add.w	r0, r4, #16
 8004188:	2230      	movs	r2, #48	; 0x30
 800418a:	2111      	movs	r1, #17
 800418c:	f000 f8dc 	bl	8004348 <core_set_error>
 8004190:	46b3      	mov	fp, r6
 8004192:	e755      	b.n	8004040 <ai_platform_network_process+0x110>
 8004194:	f104 0010 	add.w	r0, r4, #16
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	2113      	movs	r1, #19
 800419c:	f000 f8d4 	bl	8004348 <core_set_error>
 80041a0:	e74e      	b.n	8004040 <ai_platform_network_process+0x110>
 80041a2:	f104 0010 	add.w	r0, r4, #16
 80041a6:	2217      	movs	r2, #23
 80041a8:	2113      	movs	r1, #19
 80041aa:	469b      	mov	fp, r3
 80041ac:	f000 f8cc 	bl	8004348 <core_set_error>
 80041b0:	e746      	b.n	8004040 <ai_platform_network_process+0x110>
 80041b2:	f104 0010 	add.w	r0, r4, #16
 80041b6:	2219      	movs	r2, #25
 80041b8:	2113      	movs	r1, #19
 80041ba:	f000 f8c5 	bl	8004348 <core_set_error>
 80041be:	f04f 0b00 	mov.w	fp, #0
 80041c2:	e73d      	b.n	8004040 <ai_platform_network_process+0x110>
 80041c4:	f104 0010 	add.w	r0, r4, #16
 80041c8:	2217      	movs	r2, #23
 80041ca:	2113      	movs	r1, #19
 80041cc:	f000 f8bc 	bl	8004348 <core_set_error>
 80041d0:	46d3      	mov	fp, sl
 80041d2:	e735      	b.n	8004040 <ai_platform_network_process+0x110>
 80041d4:	a1c00100 	.word	0xa1c00100
 80041d8:	e0002000 	.word	0xe0002000
 80041dc:	40023008 	.word	0x40023008
 80041e0:	40023000 	.word	0x40023000
 80041e4:	f407a5c2 	.word	0xf407a5c2
 80041e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80041ec:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80041f0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8099 	beq.w	800432c <ai_platform_network_process+0x3fc>
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80041fe:	f240 8093 	bls.w	8004328 <ai_platform_network_process+0x3f8>
 8004202:	f105 070c 	add.w	r7, r5, #12
 8004206:	8ae0      	ldrh	r0, [r4, #22]
 8004208:	8aa3      	ldrh	r3, [r4, #20]
 800420a:	4283      	cmp	r3, r0
 800420c:	d977      	bls.n	80042fe <ai_platform_network_process+0x3ce>
 800420e:	46a3      	mov	fp, r4
 8004210:	2d00      	cmp	r5, #0
 8004212:	d032      	beq.n	800427a <ai_platform_network_process+0x34a>
 8004214:	882b      	ldrh	r3, [r5, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d02f      	beq.n	800427a <ai_platform_network_process+0x34a>
 800421a:	686b      	ldr	r3, [r5, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d02c      	beq.n	800427a <ai_platform_network_process+0x34a>
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f04f 0800 	mov.w	r8, #0
 8004226:	b343      	cbz	r3, 800427a <ai_platform_network_process+0x34a>
 8004228:	68a9      	ldr	r1, [r5, #8]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	f8d1 a000 	ldr.w	sl, [r1]
 8004230:	6814      	ldr	r4, [r2, #0]
 8004232:	6890      	ldr	r0, [r2, #8]
 8004234:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004238:	eb0a 0609 	add.w	r6, sl, r9
 800423c:	00a4      	lsls	r4, r4, #2
 800423e:	6871      	ldr	r1, [r6, #4]
 8004240:	d45f      	bmi.n	8004302 <ai_platform_network_process+0x3d2>
 8004242:	68d4      	ldr	r4, [r2, #12]
 8004244:	1b00      	subs	r0, r0, r4
 8004246:	4401      	add	r1, r0
 8004248:	6091      	str	r1, [r2, #8]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	6872      	ldr	r2, [r6, #4]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004254:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004258:	440b      	add	r3, r1
 800425a:	4293      	cmp	r3, r2
 800425c:	bf24      	itt	cs
 800425e:	68f3      	ldrcs	r3, [r6, #12]
 8004260:	1ad3      	subcs	r3, r2, r3
 8004262:	6073      	str	r3, [r6, #4]
 8004264:	882b      	ldrh	r3, [r5, #0]
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	4598      	cmp	r8, r3
 800426c:	d205      	bcs.n	800427a <ai_platform_network_process+0x34a>
 800426e:	686b      	ldr	r3, [r5, #4]
 8004270:	b11b      	cbz	r3, 800427a <ai_platform_network_process+0x34a>
 8004272:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1d6      	bne.n	8004228 <ai_platform_network_process+0x2f8>
 800427a:	4658      	mov	r0, fp
 800427c:	f000 fdf0 	bl	8004e60 <ai_layers_forward_all>
 8004280:	2f00      	cmp	r7, #0
 8004282:	d032      	beq.n	80042ea <ai_platform_network_process+0x3ba>
 8004284:	883b      	ldrh	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02f      	beq.n	80042ea <ai_platform_network_process+0x3ba>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	b36b      	cbz	r3, 80042ea <ai_platform_network_process+0x3ba>
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	b358      	cbz	r0, 80042ea <ai_platform_network_process+0x3ba>
 8004292:	f04f 0800 	mov.w	r8, #0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6981      	ldr	r1, [r0, #24]
 800429a:	f8d3 a000 	ldr.w	sl, [r3]
 800429e:	680c      	ldr	r4, [r1, #0]
 80042a0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80042a4:	eb0a 0609 	add.w	r6, sl, r9
 80042a8:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80042ac:	00a4      	lsls	r4, r4, #2
 80042ae:	eb0c 0302 	add.w	r3, ip, r2
 80042b2:	d42a      	bmi.n	800430a <ai_platform_network_process+0x3da>
 80042b4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf24      	itt	cs
 80042bc:	68f3      	ldrcs	r3, [r6, #12]
 80042be:	1ad3      	subcs	r3, r2, r3
 80042c0:	6073      	str	r3, [r6, #4]
 80042c2:	6981      	ldr	r1, [r0, #24]
 80042c4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80042c8:	1b12      	subs	r2, r2, r4
 80042ca:	4413      	add	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	6872      	ldr	r2, [r6, #4]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	883b      	ldrh	r3, [r7, #0]
 80042d6:	f108 0801 	add.w	r8, r8, #1
 80042da:	4598      	cmp	r8, r3
 80042dc:	d205      	bcs.n	80042ea <ai_platform_network_process+0x3ba>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	b11b      	cbz	r3, 80042ea <ai_platform_network_process+0x3ba>
 80042e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d1d5      	bne.n	8004296 <ai_platform_network_process+0x366>
 80042ea:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80042ee:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80042f2:	3001      	adds	r0, #1
 80042f4:	b280      	uxth	r0, r0
 80042f6:	4283      	cmp	r3, r0
 80042f8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80042fc:	d888      	bhi.n	8004210 <ai_platform_network_process+0x2e0>
 80042fe:	4683      	mov	fp, r0
 8004300:	e69e      	b.n	8004040 <ai_platform_network_process+0x110>
 8004302:	68b2      	ldr	r2, [r6, #8]
 8004304:	f000 fe86 	bl	8005014 <memcpy>
 8004308:	e7a2      	b.n	8004250 <ai_platform_network_process+0x320>
 800430a:	6889      	ldr	r1, [r1, #8]
 800430c:	4660      	mov	r0, ip
 800430e:	f000 fe81 	bl	8005014 <memcpy>
 8004312:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004316:	f85a 2009 	ldr.w	r2, [sl, r9]
 800431a:	440b      	add	r3, r1
 800431c:	4293      	cmp	r3, r2
 800431e:	bf24      	itt	cs
 8004320:	68f3      	ldrcs	r3, [r6, #12]
 8004322:	1ad3      	subcs	r3, r2, r3
 8004324:	6073      	str	r3, [r6, #4]
 8004326:	e7d5      	b.n	80042d4 <ai_platform_network_process+0x3a4>
 8004328:	2700      	movs	r7, #0
 800432a:	e76c      	b.n	8004206 <ai_platform_network_process+0x2d6>
 800432c:	461d      	mov	r5, r3
 800432e:	461f      	mov	r7, r3
 8004330:	e769      	b.n	8004206 <ai_platform_network_process+0x2d6>
 8004332:	f104 0010 	add.w	r0, r4, #16
 8004336:	2218      	movs	r2, #24
 8004338:	2113      	movs	r1, #19
 800433a:	f000 f805 	bl	8004348 <core_set_error>
 800433e:	f04f 0b00 	mov.w	fp, #0
 8004342:	e67d      	b.n	8004040 <ai_platform_network_process+0x110>

08004344 <core_init>:
 8004344:	2001      	movs	r0, #1
 8004346:	4770      	bx	lr

08004348 <core_set_error>:
 8004348:	7803      	ldrb	r3, [r0, #0]
 800434a:	b933      	cbnz	r3, 800435a <core_set_error+0x12>
 800434c:	7001      	strb	r1, [r0, #0]
 800434e:	6803      	ldr	r3, [r0, #0]
 8004350:	f362 231f 	bfi	r3, r2, #8, #24
 8004354:	6003      	str	r3, [r0, #0]
 8004356:	2001      	movs	r0, #1
 8004358:	4770      	bx	lr
 800435a:	2000      	movs	r0, #0
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <ai_dict8_dot_array_f32>:
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004368:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800436c:	f000 80c0 	beq.w	80044f0 <ai_dict8_dot_array_f32+0x190>
 8004370:	f101 0408 	add.w	r4, r1, #8
 8004374:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004378:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80044f8 <ai_dict8_dot_array_f32+0x198>
 800437c:	eb04 0e09 	add.w	lr, r4, r9
 8004380:	f103 0520 	add.w	r5, r3, #32
 8004384:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004388:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800438c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8004390:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8004394:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004398:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800439c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80043a0:	ed55 3a04 	vldr	s7, [r5, #-16]
 80043a4:	ed55 4a03 	vldr	s9, [r5, #-12]
 80043a8:	ed55 5a02 	vldr	s11, [r5, #-8]
 80043ac:	ed55 6a01 	vldr	s13, [r5, #-4]
 80043b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80043b4:	edd6 7a00 	vldr	s15, [r6]
 80043b8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80043bc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80043c0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80043c4:	ed9a 3a00 	vldr	s6, [sl]
 80043c8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80043cc:	eee3 7a05 	vfma.f32	s15, s6, s10
 80043d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80043d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80043d8:	ed97 3a00 	vldr	s6, [r7]
 80043dc:	ed96 5a00 	vldr	s10, [r6]
 80043e0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80043e4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80043e8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80043ec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80043f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80043f4:	ed9a 3a00 	vldr	s6, [sl]
 80043f8:	ed96 4a00 	vldr	s8, [r6]
 80043fc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8004400:	eee5 7a06 	vfma.f32	s15, s10, s12
 8004404:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004408:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800440c:	ed97 5a00 	vldr	s10, [r7]
 8004410:	ed96 6a00 	vldr	s12, [r6]
 8004414:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004418:	3408      	adds	r4, #8
 800441a:	45a6      	cmp	lr, r4
 800441c:	f105 0520 	add.w	r5, r5, #32
 8004420:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004424:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004428:	eee6 7a26 	vfma.f32	s15, s12, s13
 800442c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004430:	d1a8      	bne.n	8004384 <ai_dict8_dot_array_f32+0x24>
 8004432:	4449      	add	r1, r9
 8004434:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004438:	f01c 0c07 	ands.w	ip, ip, #7
 800443c:	d050      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 800443e:	780c      	ldrb	r4, [r1, #0]
 8004440:	edd3 6a00 	vldr	s13, [r3]
 8004444:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004448:	edd4 7a00 	vldr	s15, [r4]
 800444c:	f1bc 0f01 	cmp.w	ip, #1
 8004450:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004454:	d044      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 8004456:	784c      	ldrb	r4, [r1, #1]
 8004458:	edd3 6a01 	vldr	s13, [r3, #4]
 800445c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004460:	edd4 7a00 	vldr	s15, [r4]
 8004464:	f1bc 0f02 	cmp.w	ip, #2
 8004468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800446c:	d038      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 800446e:	788c      	ldrb	r4, [r1, #2]
 8004470:	edd3 6a02 	vldr	s13, [r3, #8]
 8004474:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004478:	edd4 7a00 	vldr	s15, [r4]
 800447c:	f1bc 0f03 	cmp.w	ip, #3
 8004480:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004484:	d02c      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 8004486:	78cc      	ldrb	r4, [r1, #3]
 8004488:	edd3 6a03 	vldr	s13, [r3, #12]
 800448c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004490:	edd4 7a00 	vldr	s15, [r4]
 8004494:	f1bc 0f04 	cmp.w	ip, #4
 8004498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800449c:	d020      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 800449e:	790c      	ldrb	r4, [r1, #4]
 80044a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80044a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80044a8:	edd4 7a00 	vldr	s15, [r4]
 80044ac:	f1bc 0f05 	cmp.w	ip, #5
 80044b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044b4:	d014      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 80044b6:	794c      	ldrb	r4, [r1, #5]
 80044b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80044bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80044c0:	edd4 7a00 	vldr	s15, [r4]
 80044c4:	f1bc 0f06 	cmp.w	ip, #6
 80044c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044cc:	d008      	beq.n	80044e0 <ai_dict8_dot_array_f32+0x180>
 80044ce:	7989      	ldrb	r1, [r1, #6]
 80044d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80044d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80044d8:	edd2 6a00 	vldr	s13, [r2]
 80044dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044e0:	edd0 7a00 	vldr	s15, [r0]
 80044e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044e8:	ed80 7a00 	vstr	s14, [r0]
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80044f8 <ai_dict8_dot_array_f32+0x198>
 80044f4:	e7a0      	b.n	8004438 <ai_dict8_dot_array_f32+0xd8>
 80044f6:	bf00      	nop
 80044f8:	00000000 	.word	0x00000000

080044fc <ai_dict4_dot_array_f32>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004502:	f027 0c01 	bic.w	ip, r7, #1
 8004506:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800450a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800450e:	f000 80ae 	beq.w	800466e <ai_dict4_dot_array_f32+0x172>
 8004512:	1d0d      	adds	r5, r1, #4
 8004514:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8004518:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004674 <ai_dict4_dot_array_f32+0x178>
 800451c:	eb05 0e09 	add.w	lr, r5, r9
 8004520:	f103 0420 	add.w	r4, r3, #32
 8004524:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004528:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800452c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8004530:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8004534:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004538:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800453c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8004540:	ed54 5a03 	vldr	s11, [r4, #-12]
 8004544:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004548:	ed54 6a01 	vldr	s13, [r4, #-4]
 800454c:	f006 0a0f 	and.w	sl, r6, #15
 8004550:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004554:	edda 7a00 	vldr	s15, [sl]
 8004558:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800455c:	0936      	lsrs	r6, r6, #4
 800455e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004562:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004566:	ed96 3a00 	vldr	s6, [r6]
 800456a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800456e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004572:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004576:	f00b 0b0f 	and.w	fp, fp, #15
 800457a:	edd6 3a00 	vldr	s7, [r6]
 800457e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8004582:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004586:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800458a:	3504      	adds	r5, #4
 800458c:	ed9b 4a00 	vldr	s8, [fp]
 8004590:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8004594:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004598:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800459c:	f00a 0a0f 	and.w	sl, sl, #15
 80045a0:	eddb 4a00 	vldr	s9, [fp]
 80045a4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80045a8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80045ac:	45ae      	cmp	lr, r5
 80045ae:	ed9a 5a00 	vldr	s10, [sl]
 80045b2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80045b6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80045ba:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80045be:	f006 060f 	and.w	r6, r6, #15
 80045c2:	edda 5a00 	vldr	s11, [sl]
 80045c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80045ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80045ce:	f104 0420 	add.w	r4, r4, #32
 80045d2:	ed96 6a00 	vldr	s12, [r6]
 80045d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80045da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045de:	d1a1      	bne.n	8004524 <ai_dict4_dot_array_f32+0x28>
 80045e0:	4449      	add	r1, r9
 80045e2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80045e6:	459c      	cmp	ip, r3
 80045e8:	d92d      	bls.n	8004646 <ai_dict4_dot_array_f32+0x14a>
 80045ea:	f10c 0c07 	add.w	ip, ip, #7
 80045ee:	f103 0508 	add.w	r5, r3, #8
 80045f2:	ebac 0c05 	sub.w	ip, ip, r5
 80045f6:	f02c 0407 	bic.w	r4, ip, #7
 80045fa:	f103 0810 	add.w	r8, r3, #16
 80045fe:	44a0      	add	r8, r4
 8004600:	f101 3eff 	add.w	lr, r1, #4294967295
 8004604:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8004608:	ed15 6a01 	vldr	s12, [r5, #-4]
 800460c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004610:	f004 060f 	and.w	r6, r4, #15
 8004614:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004618:	0924      	lsrs	r4, r4, #4
 800461a:	edd6 7a00 	vldr	s15, [r6]
 800461e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004622:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004626:	ed94 6a00 	vldr	s12, [r4]
 800462a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800462e:	3508      	adds	r5, #8
 8004630:	45a8      	cmp	r8, r5
 8004632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004636:	d1e5      	bne.n	8004604 <ai_dict4_dot_array_f32+0x108>
 8004638:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800463c:	f10c 0c01 	add.w	ip, ip, #1
 8004640:	4461      	add	r1, ip
 8004642:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004646:	07fc      	lsls	r4, r7, #31
 8004648:	d509      	bpl.n	800465e <ai_dict4_dot_array_f32+0x162>
 800464a:	7809      	ldrb	r1, [r1, #0]
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	090b      	lsrs	r3, r1, #4
 8004652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004656:	edd2 6a00 	vldr	s13, [r2]
 800465a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800465e:	edd0 7a00 	vldr	s15, [r0]
 8004662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004666:	ed80 7a00 	vstr	s14, [r0]
 800466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004674 <ai_dict4_dot_array_f32+0x178>
 8004672:	e7b8      	b.n	80045e6 <ai_dict4_dot_array_f32+0xea>
 8004674:	00000000 	.word	0x00000000

08004678 <forward_dense>:
 8004678:	6942      	ldr	r2, [r0, #20]
 800467a:	8813      	ldrh	r3, [r2, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 81ca 	beq.w	8004a16 <forward_dense+0x39e>
 8004682:	6852      	ldr	r2, [r2, #4]
 8004684:	6850      	ldr	r0, [r2, #4]
 8004686:	b100      	cbz	r0, 800468a <forward_dense+0x12>
 8004688:	6800      	ldr	r0, [r0, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	f240 81c0 	bls.w	8004a10 <forward_dense+0x398>
 8004690:	6911      	ldr	r1, [r2, #16]
 8004692:	b101      	cbz	r1, 8004696 <forward_dense+0x1e>
 8004694:	6809      	ldr	r1, [r1, #0]
 8004696:	2b02      	cmp	r3, #2
 8004698:	f000 81bf 	beq.w	8004a1a <forward_dense+0x3a2>
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	ed2d 8b10 	vpush	{d8-d15}
 80046a4:	69d3      	ldr	r3, [r2, #28]
 80046a6:	b091      	sub	sp, #68	; 0x44
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 820b 	beq.w	8004ac4 <forward_dense+0x44c>
 80046ae:	681c      	ldr	r4, [r3, #0]
 80046b0:	9408      	str	r4, [sp, #32]
 80046b2:	f112 0418 	adds.w	r4, r2, #24
 80046b6:	f000 81df 	beq.w	8004a78 <forward_dense+0x400>
 80046ba:	8b12      	ldrh	r2, [r2, #24]
 80046bc:	2a01      	cmp	r2, #1
 80046be:	f240 81fe 	bls.w	8004abe <forward_dense+0x446>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 81da 	beq.w	8004a7c <forward_dense+0x404>
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	9306      	str	r3, [sp, #24]
 80046cc:	9b08      	ldr	r3, [sp, #32]
 80046ce:	68cc      	ldr	r4, [r1, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	68c5      	ldr	r5, [r0, #12]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80046da:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80046de:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80046e2:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80046e6:	fa4c f505 	asr.w	r5, ip, r5
 80046ea:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80046ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80046f0:	2a04      	cmp	r2, #4
 80046f2:	fb07 f506 	mul.w	r5, r7, r6
 80046f6:	6864      	ldr	r4, [r4, #4]
 80046f8:	9507      	str	r5, [sp, #28]
 80046fa:	f000 81dd 	beq.w	8004ab8 <forward_dense+0x440>
 80046fe:	2a08      	cmp	r2, #8
 8004700:	f000 81da 	beq.w	8004ab8 <forward_dense+0x440>
 8004704:	f04f 0a00 	mov.w	sl, #0
 8004708:	698a      	ldr	r2, [r1, #24]
 800470a:	6981      	ldr	r1, [r0, #24]
 800470c:	6890      	ldr	r0, [r2, #8]
 800470e:	9a08      	ldr	r2, [sp, #32]
 8004710:	9004      	str	r0, [sp, #16]
 8004712:	6952      	ldr	r2, [r2, #20]
 8004714:	688f      	ldr	r7, [r1, #8]
 8004716:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800471a:	00a2      	lsls	r2, r4, #2
 800471c:	9209      	str	r2, [sp, #36]	; 0x24
 800471e:	1886      	adds	r6, r0, r2
 8004720:	9a07      	ldr	r2, [sp, #28]
 8004722:	2a00      	cmp	r2, #0
 8004724:	f000 81c3 	beq.w	8004aae <forward_dense+0x436>
 8004728:	f1a8 0210 	sub.w	r2, r8, #16
 800472c:	0912      	lsrs	r2, r2, #4
 800472e:	3201      	adds	r2, #1
 8004730:	0192      	lsls	r2, r2, #6
 8004732:	920c      	str	r2, [sp, #48]	; 0x30
 8004734:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004738:	920a      	str	r2, [sp, #40]	; 0x28
 800473a:	689d      	ldr	r5, [r3, #8]
 800473c:	9b06      	ldr	r3, [sp, #24]
 800473e:	eddf aad0 	vldr	s21, [pc, #832]	; 8004a80 <forward_dense+0x408>
 8004742:	2200      	movs	r2, #0
 8004744:	9205      	str	r2, [sp, #20]
 8004746:	f008 020f 	and.w	r2, r8, #15
 800474a:	920d      	str	r2, [sp, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d043      	beq.n	80047d8 <forward_dense+0x160>
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	689c      	ldr	r4, [r3, #8]
 8004754:	9b04      	ldr	r3, [sp, #16]
 8004756:	f1ba 0f00 	cmp.w	sl, #0
 800475a:	d042      	beq.n	80047e2 <forward_dense+0x16a>
 800475c:	42b3      	cmp	r3, r6
 800475e:	d22a      	bcs.n	80047b6 <forward_dense+0x13e>
 8004760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004762:	469b      	mov	fp, r3
 8004764:	ab0f      	add	r3, sp, #60	; 0x3c
 8004766:	9303      	str	r3, [sp, #12]
 8004768:	2a04      	cmp	r2, #4
 800476a:	4633      	mov	r3, r6
 800476c:	4646      	mov	r6, r8
 800476e:	4698      	mov	r8, r3
 8004770:	f000 8156 	beq.w	8004a20 <forward_dense+0x3a8>
 8004774:	2c00      	cmp	r4, #0
 8004776:	f000 8185 	beq.w	8004a84 <forward_dense+0x40c>
 800477a:	f8d4 c000 	ldr.w	ip, [r4]
 800477e:	9803      	ldr	r0, [sp, #12]
 8004780:	9600      	str	r6, [sp, #0]
 8004782:	463b      	mov	r3, r7
 8004784:	4629      	mov	r1, r5
 8004786:	4652      	mov	r2, sl
 8004788:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800478c:	f7ff fde8 	bl	8004360 <ai_dict8_dot_array_f32>
 8004790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004792:	f84b 3b04 	str.w	r3, [fp], #4
 8004796:	45c3      	cmp	fp, r8
 8004798:	f104 0404 	add.w	r4, r4, #4
 800479c:	444d      	add	r5, r9
 800479e:	d3e9      	bcc.n	8004774 <forward_dense+0xfc>
 80047a0:	4643      	mov	r3, r8
 80047a2:	46b0      	mov	r8, r6
 80047a4:	461e      	mov	r6, r3
 80047a6:	9a04      	ldr	r2, [sp, #16]
 80047a8:	43d3      	mvns	r3, r2
 80047aa:	4433      	add	r3, r6
 80047ac:	f023 0303 	bic.w	r3, r3, #3
 80047b0:	3304      	adds	r3, #4
 80047b2:	18d3      	adds	r3, r2, r3
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047b8:	9b05      	ldr	r3, [sp, #20]
 80047ba:	4417      	add	r7, r2
 80047bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047be:	4416      	add	r6, r2
 80047c0:	9a07      	ldr	r2, [sp, #28]
 80047c2:	3301      	adds	r3, #1
 80047c4:	4293      	cmp	r3, r2
 80047c6:	9305      	str	r3, [sp, #20]
 80047c8:	f000 8171 	beq.w	8004aae <forward_dense+0x436>
 80047cc:	9b08      	ldr	r3, [sp, #32]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	689d      	ldr	r5, [r3, #8]
 80047d2:	9b06      	ldr	r3, [sp, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1bb      	bne.n	8004750 <forward_dense+0xd8>
 80047d8:	461c      	mov	r4, r3
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	f1ba 0f00 	cmp.w	sl, #0
 80047e0:	d1bc      	bne.n	800475c <forward_dense+0xe4>
 80047e2:	42b3      	cmp	r3, r6
 80047e4:	d2e7      	bcs.n	80047b6 <forward_dense+0x13e>
 80047e6:	4618      	mov	r0, r3
 80047e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047ea:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80047ee:	eb07 0c03 	add.w	ip, r7, r3
 80047f2:	469e      	mov	lr, r3
 80047f4:	2c00      	cmp	r4, #0
 80047f6:	f000 80ff 	beq.w	80049f8 <forward_dense+0x380>
 80047fa:	f1b8 0f0f 	cmp.w	r8, #15
 80047fe:	edd4 fa00 	vldr	s31, [r4]
 8004802:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8004a80 <forward_dense+0x408>
 8004806:	f104 0404 	add.w	r4, r4, #4
 800480a:	f240 80fd 	bls.w	8004a08 <forward_dense+0x390>
 800480e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004812:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004816:	4641      	mov	r1, r8
 8004818:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800481c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004820:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004824:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004828:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800482c:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004830:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004834:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004838:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800483c:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004840:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004844:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004848:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800484c:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004850:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004854:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004858:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800485c:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004860:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004864:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004868:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800486c:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004870:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004874:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004878:	ed52 4a04 	vldr	s9, [r2, #-16]
 800487c:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004880:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004884:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004888:	ed13 7a02 	vldr	s14, [r3, #-8]
 800488c:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004890:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004894:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004898:	3910      	subs	r1, #16
 800489a:	290f      	cmp	r1, #15
 800489c:	ed53 ea01 	vldr	s29, [r3, #-4]
 80048a0:	ed12 ea01 	vldr	s28, [r2, #-4]
 80048a4:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80048a8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80048ac:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80048b0:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80048b4:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80048b8:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80048bc:	eee9 7a89 	vfma.f32	s15, s19, s18
 80048c0:	eee8 7a88 	vfma.f32	s15, s17, s16
 80048c4:	eee0 7a20 	vfma.f32	s15, s0, s1
 80048c8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80048cc:	eee2 7a22 	vfma.f32	s15, s4, s5
 80048d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80048d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80048d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80048e0:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80048e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048e8:	d896      	bhi.n	8004818 <forward_dense+0x1a0>
 80048ea:	eb05 010e 	add.w	r1, r5, lr
 80048ee:	465b      	mov	r3, fp
 80048f0:	4662      	mov	r2, ip
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d075      	beq.n	80049e2 <forward_dense+0x36a>
 80048f6:	ed91 7a00 	vldr	s14, [r1]
 80048fa:	edd2 7a00 	vldr	s15, [r2]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004904:	d06d      	beq.n	80049e2 <forward_dense+0x36a>
 8004906:	ed91 7a01 	vldr	s14, [r1, #4]
 800490a:	edd2 7a01 	vldr	s15, [r2, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004914:	d065      	beq.n	80049e2 <forward_dense+0x36a>
 8004916:	ed91 7a02 	vldr	s14, [r1, #8]
 800491a:	edd2 7a02 	vldr	s15, [r2, #8]
 800491e:	2b03      	cmp	r3, #3
 8004920:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004924:	d05d      	beq.n	80049e2 <forward_dense+0x36a>
 8004926:	ed91 7a03 	vldr	s14, [r1, #12]
 800492a:	edd2 7a03 	vldr	s15, [r2, #12]
 800492e:	2b04      	cmp	r3, #4
 8004930:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004934:	d055      	beq.n	80049e2 <forward_dense+0x36a>
 8004936:	ed91 7a04 	vldr	s14, [r1, #16]
 800493a:	edd2 7a04 	vldr	s15, [r2, #16]
 800493e:	2b05      	cmp	r3, #5
 8004940:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004944:	d04d      	beq.n	80049e2 <forward_dense+0x36a>
 8004946:	ed91 7a05 	vldr	s14, [r1, #20]
 800494a:	edd2 7a05 	vldr	s15, [r2, #20]
 800494e:	2b06      	cmp	r3, #6
 8004950:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004954:	d045      	beq.n	80049e2 <forward_dense+0x36a>
 8004956:	ed91 7a06 	vldr	s14, [r1, #24]
 800495a:	edd2 7a06 	vldr	s15, [r2, #24]
 800495e:	2b07      	cmp	r3, #7
 8004960:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004964:	d03d      	beq.n	80049e2 <forward_dense+0x36a>
 8004966:	ed91 7a07 	vldr	s14, [r1, #28]
 800496a:	edd2 7a07 	vldr	s15, [r2, #28]
 800496e:	2b08      	cmp	r3, #8
 8004970:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004974:	d035      	beq.n	80049e2 <forward_dense+0x36a>
 8004976:	ed91 7a08 	vldr	s14, [r1, #32]
 800497a:	edd2 7a08 	vldr	s15, [r2, #32]
 800497e:	2b09      	cmp	r3, #9
 8004980:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004984:	d02d      	beq.n	80049e2 <forward_dense+0x36a>
 8004986:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800498a:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800498e:	2b0a      	cmp	r3, #10
 8004990:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004994:	d025      	beq.n	80049e2 <forward_dense+0x36a>
 8004996:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800499a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800499e:	2b0b      	cmp	r3, #11
 80049a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049a4:	d01d      	beq.n	80049e2 <forward_dense+0x36a>
 80049a6:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80049aa:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049b4:	d015      	beq.n	80049e2 <forward_dense+0x36a>
 80049b6:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80049ba:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80049be:	2b0d      	cmp	r3, #13
 80049c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049c4:	d00d      	beq.n	80049e2 <forward_dense+0x36a>
 80049c6:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80049ca:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80049ce:	2b0e      	cmp	r3, #14
 80049d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049d4:	d005      	beq.n	80049e2 <forward_dense+0x36a>
 80049d6:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80049da:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80049de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049e2:	444d      	add	r5, r9
 80049e4:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80049e8:	ece0 6a01 	vstmia	r0!, {s13}
 80049ec:	42b0      	cmp	r0, r6
 80049ee:	f4bf aeda 	bcs.w	80047a6 <forward_dense+0x12e>
 80049f2:	2c00      	cmp	r4, #0
 80049f4:	f47f af01 	bne.w	80047fa <forward_dense+0x182>
 80049f8:	f1b8 0f0f 	cmp.w	r8, #15
 80049fc:	eef0 fa6a 	vmov.f32	s31, s21
 8004a00:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004a80 <forward_dense+0x408>
 8004a04:	f63f af03 	bhi.w	800480e <forward_dense+0x196>
 8004a08:	4643      	mov	r3, r8
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	463a      	mov	r2, r7
 8004a0e:	e770      	b.n	80048f2 <forward_dense+0x27a>
 8004a10:	2300      	movs	r3, #0
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	deff      	udf	#255	; 0xff
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	deff      	udf	#255	; 0xff
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	deff      	udf	#255	; 0xff
 8004a20:	b1ac      	cbz	r4, 8004a4e <forward_dense+0x3d6>
 8004a22:	f8d4 c000 	ldr.w	ip, [r4]
 8004a26:	9803      	ldr	r0, [sp, #12]
 8004a28:	9600      	str	r6, [sp, #0]
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4652      	mov	r2, sl
 8004a30:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004a34:	f7ff fd62 	bl	80044fc <ai_dict4_dot_array_f32>
 8004a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a3a:	f84b 3b04 	str.w	r3, [fp], #4
 8004a3e:	45c3      	cmp	fp, r8
 8004a40:	f104 0404 	add.w	r4, r4, #4
 8004a44:	444d      	add	r5, r9
 8004a46:	f4bf aeab 	bcs.w	80047a0 <forward_dense+0x128>
 8004a4a:	2c00      	cmp	r4, #0
 8004a4c:	d1e9      	bne.n	8004a22 <forward_dense+0x3aa>
 8004a4e:	4634      	mov	r4, r6
 8004a50:	4646      	mov	r6, r8
 8004a52:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a56:	9400      	str	r4, [sp, #0]
 8004a58:	463b      	mov	r3, r7
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4640      	mov	r0, r8
 8004a60:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004a64:	f7ff fd4a 	bl	80044fc <ai_dict4_dot_array_f32>
 8004a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a6a:	f84b 3b04 	str.w	r3, [fp], #4
 8004a6e:	45b3      	cmp	fp, r6
 8004a70:	444d      	add	r5, r9
 8004a72:	d3f0      	bcc.n	8004a56 <forward_dense+0x3de>
 8004a74:	46a0      	mov	r8, r4
 8004a76:	e696      	b.n	80047a6 <forward_dense+0x12e>
 8004a78:	9406      	str	r4, [sp, #24]
 8004a7a:	e627      	b.n	80046cc <forward_dense+0x54>
 8004a7c:	9306      	str	r3, [sp, #24]
 8004a7e:	e625      	b.n	80046cc <forward_dense+0x54>
 8004a80:	00000000 	.word	0x00000000
 8004a84:	4634      	mov	r4, r6
 8004a86:	4646      	mov	r6, r8
 8004a88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a8c:	9400      	str	r4, [sp, #0]
 8004a8e:	463b      	mov	r3, r7
 8004a90:	4629      	mov	r1, r5
 8004a92:	4652      	mov	r2, sl
 8004a94:	4640      	mov	r0, r8
 8004a96:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004a9a:	f7ff fc61 	bl	8004360 <ai_dict8_dot_array_f32>
 8004a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aa0:	f84b 3b04 	str.w	r3, [fp], #4
 8004aa4:	45b3      	cmp	fp, r6
 8004aa6:	444d      	add	r5, r9
 8004aa8:	d3f0      	bcc.n	8004a8c <forward_dense+0x414>
 8004aaa:	46a0      	mov	r8, r4
 8004aac:	e67b      	b.n	80047a6 <forward_dense+0x12e>
 8004aae:	b011      	add	sp, #68	; 0x44
 8004ab0:	ecbd 8b10 	vpop	{d8-d15}
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8004abc:	e624      	b.n	8004708 <forward_dense+0x90>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9306      	str	r3, [sp, #24]
 8004ac2:	e603      	b.n	80046cc <forward_dense+0x54>
 8004ac4:	9308      	str	r3, [sp, #32]
 8004ac6:	e5f4      	b.n	80046b2 <forward_dense+0x3a>

08004ac8 <nl_func_relu_generic_array_f32>:
 8004ac8:	b430      	push	{r4, r5}
 8004aca:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ace:	6880      	ldr	r0, [r0, #8]
 8004ad0:	688c      	ldr	r4, [r1, #8]
 8004ad2:	ed93 7a00 	vldr	s14, [r3]
 8004ad6:	ed93 6a01 	vldr	s12, [r3, #4]
 8004ada:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	4410      	add	r0, r2
 8004aec:	4422      	add	r2, r4
 8004aee:	d421      	bmi.n	8004b34 <nl_func_relu_generic_array_f32+0x6c>
 8004af0:	42a2      	cmp	r2, r4
 8004af2:	d33d      	bcc.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004af4:	1d13      	adds	r3, r2, #4
 8004af6:	1d02      	adds	r2, r0, #4
 8004af8:	e010      	b.n	8004b1c <nl_func_relu_generic_array_f32+0x54>
 8004afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b02:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004b06:	dd01      	ble.n	8004b0c <nl_func_relu_generic_array_f32+0x44>
 8004b08:	ee65 7a86 	vmul.f32	s15, s11, s12
 8004b0c:	ed62 7a01 	vstmdb	r2!, {s15}
 8004b10:	6888      	ldr	r0, [r1, #8]
 8004b12:	f1a3 0408 	sub.w	r4, r3, #8
 8004b16:	4284      	cmp	r4, r0
 8004b18:	462b      	mov	r3, r5
 8004b1a:	d329      	bcc.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004b1c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004b20:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	f1a3 0504 	sub.w	r5, r3, #4
 8004b2c:	dce5      	bgt.n	8004afa <nl_func_relu_generic_array_f32+0x32>
 8004b2e:	eef0 7a66 	vmov.f32	s15, s13
 8004b32:	e7eb      	b.n	8004b0c <nl_func_relu_generic_array_f32+0x44>
 8004b34:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d01a      	beq.n	8004b74 <nl_func_relu_generic_array_f32+0xac>
 8004b3e:	42a2      	cmp	r2, r4
 8004b40:	d316      	bcc.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004b42:	1d13      	adds	r3, r2, #4
 8004b44:	1d02      	adds	r2, r0, #4
 8004b46:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004b4a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b52:	f1a3 0408 	sub.w	r4, r3, #8
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	f1a3 0004 	sub.w	r0, r3, #4
 8004b5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004b62:	4623      	mov	r3, r4
 8004b64:	d51e      	bpl.n	8004ba4 <nl_func_relu_generic_array_f32+0xdc>
 8004b66:	ed62 6a01 	vstmdb	r2!, {s13}
 8004b6a:	688b      	ldr	r3, [r1, #8]
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d91e      	bls.n	8004bae <nl_func_relu_generic_array_f32+0xe6>
 8004b70:	bc30      	pop	{r4, r5}
 8004b72:	4770      	bx	lr
 8004b74:	42a2      	cmp	r2, r4
 8004b76:	d3fb      	bcc.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004b78:	1d13      	adds	r3, r2, #4
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	1d02      	adds	r2, r0, #4
 8004b7e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b86:	f1a3 0408 	sub.w	r4, r3, #8
 8004b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8e:	f1a3 0004 	sub.w	r0, r3, #4
 8004b92:	4623      	mov	r3, r4
 8004b94:	d80d      	bhi.n	8004bb2 <nl_func_relu_generic_array_f32+0xea>
 8004b96:	ed62 7a01 	vstmdb	r2!, {s15}
 8004b9a:	688b      	ldr	r3, [r1, #8]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d8e7      	bhi.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	e7ec      	b.n	8004b7e <nl_func_relu_generic_array_f32+0xb6>
 8004ba4:	ed62 7a01 	vstmdb	r2!, {s15}
 8004ba8:	688c      	ldr	r4, [r1, #8]
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d8e0      	bhi.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	e7c9      	b.n	8004b46 <nl_func_relu_generic_array_f32+0x7e>
 8004bb2:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004bb6:	688c      	ldr	r4, [r1, #8]
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	d8d9      	bhi.n	8004b70 <nl_func_relu_generic_array_f32+0xa8>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	e7de      	b.n	8004b7e <nl_func_relu_generic_array_f32+0xb6>

08004bc0 <forward_relu>:
 8004bc0:	6942      	ldr	r2, [r0, #20]
 8004bc2:	8813      	ldrh	r3, [r2, #0]
 8004bc4:	b33b      	cbz	r3, 8004c16 <forward_relu+0x56>
 8004bc6:	b470      	push	{r4, r5, r6}
 8004bc8:	6852      	ldr	r2, [r2, #4]
 8004bca:	6856      	ldr	r6, [r2, #4]
 8004bcc:	b106      	cbz	r6, 8004bd0 <forward_relu+0x10>
 8004bce:	6836      	ldr	r6, [r6, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d91d      	bls.n	8004c10 <forward_relu+0x50>
 8004bd4:	6913      	ldr	r3, [r2, #16]
 8004bd6:	b103      	cbz	r3, 8004bda <forward_relu+0x1a>
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6982      	ldr	r2, [r0, #24]
 8004bdc:	68b4      	ldr	r4, [r6, #8]
 8004bde:	6998      	ldr	r0, [r3, #24]
 8004be0:	69b1      	ldr	r1, [r6, #24]
 8004be2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8004be6:	2a00      	cmp	r2, #0
 8004be8:	d041      	beq.n	8004c6e <forward_relu+0xae>
 8004bea:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8004bee:	2d01      	cmp	r5, #1
 8004bf0:	d013      	beq.n	8004c1a <forward_relu+0x5a>
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	d06f      	beq.n	8004cd6 <forward_relu+0x116>
 8004bf6:	68f6      	ldr	r6, [r6, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004bfe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	fb05 f202 	mul.w	r2, r5, r2
 8004c08:	d1f9      	bne.n	8004bfe <forward_relu+0x3e>
 8004c0a:	bc70      	pop	{r4, r5, r6}
 8004c0c:	f7ff bf5c 	b.w	8004ac8 <nl_func_relu_generic_array_f32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	deff      	udf	#255	; 0xff
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	deff      	udf	#255	; 0xff
 8004c1a:	6880      	ldr	r0, [r0, #8]
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	ed93 7a00 	vldr	s14, [r3]
 8004c22:	b184      	cbz	r4, 8004c46 <forward_relu+0x86>
 8004c24:	68f6      	ldr	r6, [r6, #12]
 8004c26:	462b      	mov	r3, r5
 8004c28:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c30:	42a6      	cmp	r6, r4
 8004c32:	fb05 f303 	mul.w	r3, r5, r3
 8004c36:	d1f9      	bne.n	8004c2c <forward_relu+0x6c>
 8004c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	18d2      	adds	r2, r2, r3
 8004c42:	4418      	add	r0, r3
 8004c44:	d23d      	bcs.n	8004cc2 <forward_relu+0x102>
 8004c46:	1d13      	adds	r3, r2, #4
 8004c48:	2500      	movs	r5, #0
 8004c4a:	1d02      	adds	r2, r0, #4
 8004c4c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c58:	f1a3 0004 	sub.w	r0, r3, #4
 8004c5c:	d833      	bhi.n	8004cc6 <forward_relu+0x106>
 8004c5e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004c62:	688c      	ldr	r4, [r1, #8]
 8004c64:	3b08      	subs	r3, #8
 8004c66:	429c      	cmp	r4, r3
 8004c68:	d82b      	bhi.n	8004cc2 <forward_relu+0x102>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	e7ee      	b.n	8004c4c <forward_relu+0x8c>
 8004c6e:	6880      	ldr	r0, [r0, #8]
 8004c70:	688b      	ldr	r3, [r1, #8]
 8004c72:	b184      	cbz	r4, 8004c96 <forward_relu+0xd6>
 8004c74:	68f6      	ldr	r6, [r6, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004c7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c80:	42a6      	cmp	r6, r4
 8004c82:	fb05 f202 	mul.w	r2, r5, r2
 8004c86:	d1f9      	bne.n	8004c7c <forward_relu+0xbc>
 8004c88:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0092      	lsls	r2, r2, #2
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	4410      	add	r0, r2
 8004c94:	d215      	bcs.n	8004cc2 <forward_relu+0x102>
 8004c96:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004cdc <forward_relu+0x11c>
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	3004      	adds	r0, #4
 8004c9e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	bfb8      	it	lt
 8004cac:	eef0 7a47 	vmovlt.f32	s15, s14
 8004cb0:	ed60 7a01 	vstmdb	r0!, {s15}
 8004cb4:	688c      	ldr	r4, [r1, #8]
 8004cb6:	f1a3 0208 	sub.w	r2, r3, #8
 8004cba:	4294      	cmp	r4, r2
 8004cbc:	f1a3 0304 	sub.w	r3, r3, #4
 8004cc0:	d9ed      	bls.n	8004c9e <forward_relu+0xde>
 8004cc2:	bc70      	pop	{r4, r5, r6}
 8004cc4:	4770      	bx	lr
 8004cc6:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004cca:	688c      	ldr	r4, [r1, #8]
 8004ccc:	3b08      	subs	r3, #8
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	d8f7      	bhi.n	8004cc2 <forward_relu+0x102>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	e7ba      	b.n	8004c4c <forward_relu+0x8c>
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	e797      	b.n	8004c0a <forward_relu+0x4a>
 8004cda:	bf00      	nop
 8004cdc:	00000000 	.word	0x00000000

08004ce0 <forward_sm>:
 8004ce0:	6942      	ldr	r2, [r0, #20]
 8004ce2:	8813      	ldrh	r3, [r2, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 808a 	beq.w	8004dfe <forward_sm+0x11e>
 8004cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cee:	ed2d 8b04 	vpush	{d8-d9}
 8004cf2:	6852      	ldr	r2, [r2, #4]
 8004cf4:	6855      	ldr	r5, [r2, #4]
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	b105      	cbz	r5, 8004cfc <forward_sm+0x1c>
 8004cfa:	682d      	ldr	r5, [r5, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d976      	bls.n	8004dee <forward_sm+0x10e>
 8004d00:	6913      	ldr	r3, [r2, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d071      	beq.n	8004dea <forward_sm+0x10a>
 8004d06:	681f      	ldr	r7, [r3, #0]
 8004d08:	68ec      	ldr	r4, [r5, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	68ab      	ldr	r3, [r5, #8]
 8004d0e:	6850      	ldr	r0, [r2, #4]
 8004d10:	6862      	ldr	r2, [r4, #4]
 8004d12:	9201      	str	r2, [sp, #4]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	d074      	beq.n	8004e02 <forward_sm+0x122>
 8004d18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004d22:	429c      	cmp	r4, r3
 8004d24:	fb01 f202 	mul.w	r2, r1, r2
 8004d28:	d1f9      	bne.n	8004d1e <forward_sm+0x3e>
 8004d2a:	69ae      	ldr	r6, [r5, #24]
 8004d2c:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8004d30:	9f01      	ldr	r7, [sp, #4]
 8004d32:	68b5      	ldr	r5, [r6, #8]
 8004d34:	68f3      	ldr	r3, [r6, #12]
 8004d36:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8004d3a:	1bd1      	subs	r1, r2, r7
 8004d3c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8004d40:	1a12      	subs	r2, r2, r0
 8004d42:	429d      	cmp	r5, r3
 8004d44:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8004d48:	d345      	bcc.n	8004dd6 <forward_sm+0xf6>
 8004d4a:	00bb      	lsls	r3, r7, #2
 8004d4c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	f1c8 0200 	rsb	r2, r8, #0
 8004d56:	425b      	negs	r3, r3
 8004d58:	9203      	str	r2, [sp, #12]
 8004d5a:	9302      	str	r3, [sp, #8]
 8004d5c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004d60:	60b5      	str	r5, [r6, #8]
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	f8c9 4008 	str.w	r4, [r9, #8]
 8004d68:	68b2      	ldr	r2, [r6, #8]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	ed92 8a00 	vldr	s16, [r2]
 8004d70:	d940      	bls.n	8004df4 <forward_sm+0x114>
 8004d72:	9900      	ldr	r1, [sp, #0]
 8004d74:	1d13      	adds	r3, r2, #4
 8004d76:	1857      	adds	r7, r2, r1
 8004d78:	ecf3 7a01 	vldmia	r3!, {s15}
 8004d7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	bfb8      	it	lt
 8004d86:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004d8a:	429f      	cmp	r7, r3
 8004d8c:	d1f4      	bne.n	8004d78 <forward_sm+0x98>
 8004d8e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8004e08 <forward_sm+0x128>
 8004d92:	4692      	mov	sl, r2
 8004d94:	46a3      	mov	fp, r4
 8004d96:	46a0      	mov	r8, r4
 8004d98:	ecba 0a01 	vldmia	sl!, {s0}
 8004d9c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004da0:	f002 feda 	bl	8007b58 <expf>
 8004da4:	4557      	cmp	r7, sl
 8004da6:	eca8 0a01 	vstmia	r8!, {s0}
 8004daa:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004dae:	d1f3      	bne.n	8004d98 <forward_sm+0xb8>
 8004db0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004db4:	9b00      	ldr	r3, [sp, #0]
 8004db6:	18e2      	adds	r2, r4, r3
 8004db8:	eddb 7a00 	vldr	s15, [fp]
 8004dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc0:	eceb 7a01 	vstmia	fp!, {s15}
 8004dc4:	455a      	cmp	r2, fp
 8004dc6:	d1f7      	bne.n	8004db8 <forward_sm+0xd8>
 8004dc8:	9a02      	ldr	r2, [sp, #8]
 8004dca:	68f3      	ldr	r3, [r6, #12]
 8004dcc:	4415      	add	r5, r2
 8004dce:	9a03      	ldr	r2, [sp, #12]
 8004dd0:	429d      	cmp	r5, r3
 8004dd2:	4414      	add	r4, r2
 8004dd4:	d2c4      	bcs.n	8004d60 <forward_sm+0x80>
 8004dd6:	60b3      	str	r3, [r6, #8]
 8004dd8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004ddc:	f8c9 3008 	str.w	r3, [r9, #8]
 8004de0:	b005      	add	sp, #20
 8004de2:	ecbd 8b04 	vpop	{d8-d9}
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	deff      	udf	#255	; 0xff
 8004dee:	2300      	movs	r3, #0
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	deff      	udf	#255	; 0xff
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0e7      	beq.n	8004dc8 <forward_sm+0xe8>
 8004df8:	9b00      	ldr	r3, [sp, #0]
 8004dfa:	18d7      	adds	r7, r2, r3
 8004dfc:	e7c7      	b.n	8004d8e <forward_sm+0xae>
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	deff      	udf	#255	; 0xff
 8004e02:	2201      	movs	r2, #1
 8004e04:	e791      	b.n	8004d2a <forward_sm+0x4a>
 8004e06:	bf00      	nop
 8004e08:	00000000 	.word	0x00000000

08004e0c <ai_check_custom_types>:
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <ai_check_custom_types+0x50>)
 8004e0e:	b082      	sub	sp, #8
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	b118      	cbz	r0, 8004e1e <ai_check_custom_types+0x12>
 8004e16:	7803      	ldrb	r3, [r0, #0]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d002      	beq.n	8004e22 <ai_check_custom_types+0x16>
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	b002      	add	sp, #8
 8004e20:	4770      	bx	lr
 8004e22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <ai_check_custom_types+0x28>
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f080 0001 	eor.w	r0, r0, #1
 8004e30:	b002      	add	sp, #8
 8004e32:	4770      	bx	lr
 8004e34:	7842      	ldrb	r2, [r0, #1]
 8004e36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f100 0001 	add.w	r0, r0, #1
 8004e40:	d1f3      	bne.n	8004e2a <ai_check_custom_types+0x1e>
 8004e42:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d1ed      	bne.n	8004e2a <ai_check_custom_types+0x1e>
 8004e4e:	7842      	ldrb	r2, [r0, #1]
 8004e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1e8      	bne.n	8004e2a <ai_check_custom_types+0x1e>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e7e7      	b.n	8004e2c <ai_check_custom_types+0x20>
 8004e5c:	08007ecc 	.word	0x08007ecc

08004e60 <ai_layers_forward_all>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8004e64:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004e66:	4604      	mov	r4, r0
 8004e68:	b31e      	cbz	r6, 8004eb2 <ai_layers_forward_all+0x52>
 8004e6a:	b1cd      	cbz	r5, 8004ea0 <ai_layers_forward_all+0x40>
 8004e6c:	6545      	str	r5, [r0, #84]	; 0x54
 8004e6e:	4629      	mov	r1, r5
 8004e70:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004e72:	2001      	movs	r0, #1
 8004e74:	47b0      	blx	r6
 8004e76:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004e78:	2700      	movs	r7, #0
 8004e7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e7c:	2002      	movs	r0, #2
 8004e7e:	47b0      	blx	r6
 8004e80:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004e82:	692b      	ldr	r3, [r5, #16]
 8004e84:	4628      	mov	r0, r5
 8004e86:	4798      	blx	r3
 8004e88:	68eb      	ldr	r3, [r5, #12]
 8004e8a:	429d      	cmp	r5, r3
 8004e8c:	f04f 0003 	mov.w	r0, #3
 8004e90:	4619      	mov	r1, r3
 8004e92:	d006      	beq.n	8004ea2 <ai_layers_forward_all+0x42>
 8004e94:	6563      	str	r3, [r4, #84]	; 0x54
 8004e96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e98:	47b0      	blx	r6
 8004e9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	d1ec      	bne.n	8004e7a <ai_layers_forward_all+0x1a>
 8004ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6567      	str	r7, [r4, #84]	; 0x54
 8004ea6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ea8:	47b0      	blx	r6
 8004eaa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d1e4      	bne.n	8004e7a <ai_layers_forward_all+0x1a>
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	d0f4      	beq.n	8004ea0 <ai_layers_forward_all+0x40>
 8004eb6:	6545      	str	r5, [r0, #84]	; 0x54
 8004eb8:	692b      	ldr	r3, [r5, #16]
 8004eba:	4628      	mov	r0, r5
 8004ebc:	4798      	blx	r3
 8004ebe:	68eb      	ldr	r3, [r5, #12]
 8004ec0:	42ab      	cmp	r3, r5
 8004ec2:	d004      	beq.n	8004ece <ai_layers_forward_all+0x6e>
 8004ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8004ec6:	461d      	mov	r5, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f5      	bne.n	8004eb8 <ai_layers_forward_all+0x58>
 8004ecc:	e7e8      	b.n	8004ea0 <ai_layers_forward_all+0x40>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6563      	str	r3, [r4, #84]	; 0x54
 8004ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ed4 <ai_array_to_buffer_fmt>:
 8004ed4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d01f      	beq.n	8004f1c <ai_array_to_buffer_fmt+0x48>
 8004edc:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <ai_array_to_buffer_fmt+0x7c>)
 8004ede:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00a      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004ee6:	dc0d      	bgt.n	8004f04 <ai_array_to_buffer_fmt+0x30>
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <ai_array_to_buffer_fmt+0x80>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d006      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004eee:	dd1d      	ble.n	8004f2c <ai_array_to_buffer_fmt+0x58>
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <ai_array_to_buffer_fmt+0x84>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d002      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004ef6:	320f      	adds	r2, #15
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <ai_array_to_buffer_fmt+0x44>
 8004efc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004f00:	4318      	orrs	r0, r3
 8004f02:	4770      	bx	lr
 8004f04:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <ai_array_to_buffer_fmt+0x88>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d0f8      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f0a:	dd18      	ble.n	8004f3e <ai_array_to_buffer_fmt+0x6a>
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <ai_array_to_buffer_fmt+0x8c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d0f4      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f12:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <ai_array_to_buffer_fmt+0x90>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d0f1      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	e7ef      	b.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <ai_array_to_buffer_fmt+0x94>)
 8004f1e:	4003      	ands	r3, r0
 8004f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f24:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004f28:	4318      	orrs	r0, r3
 8004f2a:	4770      	bx	lr
 8004f2c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d0e3      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d0df      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f3c:	e7ec      	b.n	8004f18 <ai_array_to_buffer_fmt+0x44>
 8004f3e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d0da      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f46:	3207      	adds	r2, #7
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d0d7      	beq.n	8004efc <ai_array_to_buffer_fmt+0x28>
 8004f4c:	e7e4      	b.n	8004f18 <ai_array_to_buffer_fmt+0x44>
 8004f4e:	bf00      	nop
 8004f50:	00840040 	.word	0x00840040
 8004f54:	00040447 	.word	0x00040447
 8004f58:	00040840 	.word	0x00040840
 8004f5c:	00840840 	.word	0x00840840
 8004f60:	0084084f 	.word	0x0084084f
 8004f64:	01821040 	.word	0x01821040
 8004f68:	00803fff 	.word	0x00803fff

08004f6c <ai_array_get_byte_size>:
 8004f6c:	b1c1      	cbz	r1, 8004fa0 <ai_array_get_byte_size+0x34>
 8004f6e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8004f72:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004f76:	4413      	add	r3, r2
 8004f78:	fb01 f103 	mul.w	r1, r1, r3
 8004f7c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004f80:	3107      	adds	r1, #7
 8004f82:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8004f86:	f021 0107 	bic.w	r1, r1, #7
 8004f8a:	2804      	cmp	r0, #4
 8004f8c:	fa21 f102 	lsr.w	r1, r1, r2
 8004f90:	d008      	beq.n	8004fa4 <ai_array_get_byte_size+0x38>
 8004f92:	2808      	cmp	r0, #8
 8004f94:	d101      	bne.n	8004f9a <ai_array_get_byte_size+0x2e>
 8004f96:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004f9a:	3107      	adds	r1, #7
 8004f9c:	08c8      	lsrs	r0, r1, #3
 8004f9e:	4770      	bx	lr
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4770      	bx	lr
 8004fa4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004fa8:	3107      	adds	r1, #7
 8004faa:	08c8      	lsrs	r0, r1, #3
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	200006d4 	.word	0x200006d4

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4d0d      	ldr	r5, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4d0b      	ldr	r5, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f002 fef6 	bl	8007dc0 <_init>
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	0800846c 	.word	0x0800846c
 8004ff8:	0800846c 	.word	0x0800846c
 8004ffc:	0800846c 	.word	0x0800846c
 8005000:	08008470 	.word	0x08008470

08005004 <malloc>:
 8005004:	4b02      	ldr	r3, [pc, #8]	; (8005010 <malloc+0xc>)
 8005006:	4601      	mov	r1, r0
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f000 b885 	b.w	8005118 <_malloc_r>
 800500e:	bf00      	nop
 8005010:	200006d4 	.word	0x200006d4

08005014 <memcpy>:
 8005014:	440a      	add	r2, r1
 8005016:	4291      	cmp	r1, r2
 8005018:	f100 33ff 	add.w	r3, r0, #4294967295
 800501c:	d100      	bne.n	8005020 <memcpy+0xc>
 800501e:	4770      	bx	lr
 8005020:	b510      	push	{r4, lr}
 8005022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800502a:	4291      	cmp	r1, r2
 800502c:	d1f9      	bne.n	8005022 <memcpy+0xe>
 800502e:	bd10      	pop	{r4, pc}

08005030 <memset>:
 8005030:	4402      	add	r2, r0
 8005032:	4603      	mov	r3, r0
 8005034:	4293      	cmp	r3, r2
 8005036:	d100      	bne.n	800503a <memset+0xa>
 8005038:	4770      	bx	lr
 800503a:	f803 1b01 	strb.w	r1, [r3], #1
 800503e:	e7f9      	b.n	8005034 <memset+0x4>

08005040 <_free_r>:
 8005040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005042:	2900      	cmp	r1, #0
 8005044:	d044      	beq.n	80050d0 <_free_r+0x90>
 8005046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504a:	9001      	str	r0, [sp, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f1a1 0404 	sub.w	r4, r1, #4
 8005052:	bfb8      	it	lt
 8005054:	18e4      	addlt	r4, r4, r3
 8005056:	f001 ff39 	bl	8006ecc <__malloc_lock>
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <_free_r+0x94>)
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	6813      	ldr	r3, [r2, #0]
 8005060:	b933      	cbnz	r3, 8005070 <_free_r+0x30>
 8005062:	6063      	str	r3, [r4, #4]
 8005064:	6014      	str	r4, [r2, #0]
 8005066:	b003      	add	sp, #12
 8005068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506c:	f001 bf34 	b.w	8006ed8 <__malloc_unlock>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d908      	bls.n	8005086 <_free_r+0x46>
 8005074:	6825      	ldr	r5, [r4, #0]
 8005076:	1961      	adds	r1, r4, r5
 8005078:	428b      	cmp	r3, r1
 800507a:	bf01      	itttt	eq
 800507c:	6819      	ldreq	r1, [r3, #0]
 800507e:	685b      	ldreq	r3, [r3, #4]
 8005080:	1949      	addeq	r1, r1, r5
 8005082:	6021      	streq	r1, [r4, #0]
 8005084:	e7ed      	b.n	8005062 <_free_r+0x22>
 8005086:	461a      	mov	r2, r3
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b10b      	cbz	r3, 8005090 <_free_r+0x50>
 800508c:	42a3      	cmp	r3, r4
 800508e:	d9fa      	bls.n	8005086 <_free_r+0x46>
 8005090:	6811      	ldr	r1, [r2, #0]
 8005092:	1855      	adds	r5, r2, r1
 8005094:	42a5      	cmp	r5, r4
 8005096:	d10b      	bne.n	80050b0 <_free_r+0x70>
 8005098:	6824      	ldr	r4, [r4, #0]
 800509a:	4421      	add	r1, r4
 800509c:	1854      	adds	r4, r2, r1
 800509e:	42a3      	cmp	r3, r4
 80050a0:	6011      	str	r1, [r2, #0]
 80050a2:	d1e0      	bne.n	8005066 <_free_r+0x26>
 80050a4:	681c      	ldr	r4, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	6053      	str	r3, [r2, #4]
 80050aa:	4421      	add	r1, r4
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	e7da      	b.n	8005066 <_free_r+0x26>
 80050b0:	d902      	bls.n	80050b8 <_free_r+0x78>
 80050b2:	230c      	movs	r3, #12
 80050b4:	6003      	str	r3, [r0, #0]
 80050b6:	e7d6      	b.n	8005066 <_free_r+0x26>
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	428b      	cmp	r3, r1
 80050be:	bf04      	itt	eq
 80050c0:	6819      	ldreq	r1, [r3, #0]
 80050c2:	685b      	ldreq	r3, [r3, #4]
 80050c4:	6063      	str	r3, [r4, #4]
 80050c6:	bf04      	itt	eq
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	6054      	str	r4, [r2, #4]
 80050ce:	e7ca      	b.n	8005066 <_free_r+0x26>
 80050d0:	b003      	add	sp, #12
 80050d2:	bd30      	pop	{r4, r5, pc}
 80050d4:	200009ec 	.word	0x200009ec

080050d8 <sbrk_aligned>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0e      	ldr	r6, [pc, #56]	; (8005114 <sbrk_aligned+0x3c>)
 80050dc:	460c      	mov	r4, r1
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	b911      	cbnz	r1, 80050ea <sbrk_aligned+0x12>
 80050e4:	f000 fd84 	bl	8005bf0 <_sbrk_r>
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 fd7f 	bl	8005bf0 <_sbrk_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d00a      	beq.n	800510c <sbrk_aligned+0x34>
 80050f6:	1cc4      	adds	r4, r0, #3
 80050f8:	f024 0403 	bic.w	r4, r4, #3
 80050fc:	42a0      	cmp	r0, r4
 80050fe:	d007      	beq.n	8005110 <sbrk_aligned+0x38>
 8005100:	1a21      	subs	r1, r4, r0
 8005102:	4628      	mov	r0, r5
 8005104:	f000 fd74 	bl	8005bf0 <_sbrk_r>
 8005108:	3001      	adds	r0, #1
 800510a:	d101      	bne.n	8005110 <sbrk_aligned+0x38>
 800510c:	f04f 34ff 	mov.w	r4, #4294967295
 8005110:	4620      	mov	r0, r4
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	200009f0 	.word	0x200009f0

08005118 <_malloc_r>:
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	1ccd      	adds	r5, r1, #3
 800511e:	f025 0503 	bic.w	r5, r5, #3
 8005122:	3508      	adds	r5, #8
 8005124:	2d0c      	cmp	r5, #12
 8005126:	bf38      	it	cc
 8005128:	250c      	movcc	r5, #12
 800512a:	2d00      	cmp	r5, #0
 800512c:	4607      	mov	r7, r0
 800512e:	db01      	blt.n	8005134 <_malloc_r+0x1c>
 8005130:	42a9      	cmp	r1, r5
 8005132:	d905      	bls.n	8005140 <_malloc_r+0x28>
 8005134:	230c      	movs	r3, #12
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	2600      	movs	r6, #0
 800513a:	4630      	mov	r0, r6
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	4e2e      	ldr	r6, [pc, #184]	; (80051fc <_malloc_r+0xe4>)
 8005142:	f001 fec3 	bl	8006ecc <__malloc_lock>
 8005146:	6833      	ldr	r3, [r6, #0]
 8005148:	461c      	mov	r4, r3
 800514a:	bb34      	cbnz	r4, 800519a <_malloc_r+0x82>
 800514c:	4629      	mov	r1, r5
 800514e:	4638      	mov	r0, r7
 8005150:	f7ff ffc2 	bl	80050d8 <sbrk_aligned>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	4604      	mov	r4, r0
 8005158:	d14d      	bne.n	80051f6 <_malloc_r+0xde>
 800515a:	6834      	ldr	r4, [r6, #0]
 800515c:	4626      	mov	r6, r4
 800515e:	2e00      	cmp	r6, #0
 8005160:	d140      	bne.n	80051e4 <_malloc_r+0xcc>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	4631      	mov	r1, r6
 8005166:	4638      	mov	r0, r7
 8005168:	eb04 0803 	add.w	r8, r4, r3
 800516c:	f000 fd40 	bl	8005bf0 <_sbrk_r>
 8005170:	4580      	cmp	r8, r0
 8005172:	d13a      	bne.n	80051ea <_malloc_r+0xd2>
 8005174:	6821      	ldr	r1, [r4, #0]
 8005176:	3503      	adds	r5, #3
 8005178:	1a6d      	subs	r5, r5, r1
 800517a:	f025 0503 	bic.w	r5, r5, #3
 800517e:	3508      	adds	r5, #8
 8005180:	2d0c      	cmp	r5, #12
 8005182:	bf38      	it	cc
 8005184:	250c      	movcc	r5, #12
 8005186:	4629      	mov	r1, r5
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff ffa5 	bl	80050d8 <sbrk_aligned>
 800518e:	3001      	adds	r0, #1
 8005190:	d02b      	beq.n	80051ea <_malloc_r+0xd2>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	442b      	add	r3, r5
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	e00e      	b.n	80051b8 <_malloc_r+0xa0>
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	1b52      	subs	r2, r2, r5
 800519e:	d41e      	bmi.n	80051de <_malloc_r+0xc6>
 80051a0:	2a0b      	cmp	r2, #11
 80051a2:	d916      	bls.n	80051d2 <_malloc_r+0xba>
 80051a4:	1961      	adds	r1, r4, r5
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	6025      	str	r5, [r4, #0]
 80051aa:	bf18      	it	ne
 80051ac:	6059      	strne	r1, [r3, #4]
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	bf08      	it	eq
 80051b2:	6031      	streq	r1, [r6, #0]
 80051b4:	5162      	str	r2, [r4, r5]
 80051b6:	604b      	str	r3, [r1, #4]
 80051b8:	4638      	mov	r0, r7
 80051ba:	f104 060b 	add.w	r6, r4, #11
 80051be:	f001 fe8b 	bl	8006ed8 <__malloc_unlock>
 80051c2:	f026 0607 	bic.w	r6, r6, #7
 80051c6:	1d23      	adds	r3, r4, #4
 80051c8:	1af2      	subs	r2, r6, r3
 80051ca:	d0b6      	beq.n	800513a <_malloc_r+0x22>
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	50a3      	str	r3, [r4, r2]
 80051d0:	e7b3      	b.n	800513a <_malloc_r+0x22>
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	bf0c      	ite	eq
 80051d8:	6032      	streq	r2, [r6, #0]
 80051da:	605a      	strne	r2, [r3, #4]
 80051dc:	e7ec      	b.n	80051b8 <_malloc_r+0xa0>
 80051de:	4623      	mov	r3, r4
 80051e0:	6864      	ldr	r4, [r4, #4]
 80051e2:	e7b2      	b.n	800514a <_malloc_r+0x32>
 80051e4:	4634      	mov	r4, r6
 80051e6:	6876      	ldr	r6, [r6, #4]
 80051e8:	e7b9      	b.n	800515e <_malloc_r+0x46>
 80051ea:	230c      	movs	r3, #12
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4638      	mov	r0, r7
 80051f0:	f001 fe72 	bl	8006ed8 <__malloc_unlock>
 80051f4:	e7a1      	b.n	800513a <_malloc_r+0x22>
 80051f6:	6025      	str	r5, [r4, #0]
 80051f8:	e7de      	b.n	80051b8 <_malloc_r+0xa0>
 80051fa:	bf00      	nop
 80051fc:	200009ec 	.word	0x200009ec

08005200 <__cvt>:
 8005200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	ec55 4b10 	vmov	r4, r5, d0
 8005208:	2d00      	cmp	r5, #0
 800520a:	460e      	mov	r6, r1
 800520c:	4619      	mov	r1, r3
 800520e:	462b      	mov	r3, r5
 8005210:	bfbb      	ittet	lt
 8005212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005216:	461d      	movlt	r5, r3
 8005218:	2300      	movge	r3, #0
 800521a:	232d      	movlt	r3, #45	; 0x2d
 800521c:	700b      	strb	r3, [r1, #0]
 800521e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005220:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005224:	4691      	mov	r9, r2
 8005226:	f023 0820 	bic.w	r8, r3, #32
 800522a:	bfbc      	itt	lt
 800522c:	4622      	movlt	r2, r4
 800522e:	4614      	movlt	r4, r2
 8005230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005234:	d005      	beq.n	8005242 <__cvt+0x42>
 8005236:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800523a:	d100      	bne.n	800523e <__cvt+0x3e>
 800523c:	3601      	adds	r6, #1
 800523e:	2102      	movs	r1, #2
 8005240:	e000      	b.n	8005244 <__cvt+0x44>
 8005242:	2103      	movs	r1, #3
 8005244:	ab03      	add	r3, sp, #12
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	ab02      	add	r3, sp, #8
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	ec45 4b10 	vmov	d0, r4, r5
 8005250:	4653      	mov	r3, sl
 8005252:	4632      	mov	r2, r6
 8005254:	f000 fe28 	bl	8005ea8 <_dtoa_r>
 8005258:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800525c:	4607      	mov	r7, r0
 800525e:	d102      	bne.n	8005266 <__cvt+0x66>
 8005260:	f019 0f01 	tst.w	r9, #1
 8005264:	d022      	beq.n	80052ac <__cvt+0xac>
 8005266:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800526a:	eb07 0906 	add.w	r9, r7, r6
 800526e:	d110      	bne.n	8005292 <__cvt+0x92>
 8005270:	783b      	ldrb	r3, [r7, #0]
 8005272:	2b30      	cmp	r3, #48	; 0x30
 8005274:	d10a      	bne.n	800528c <__cvt+0x8c>
 8005276:	2200      	movs	r2, #0
 8005278:	2300      	movs	r3, #0
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fb fc53 	bl	8000b28 <__aeabi_dcmpeq>
 8005282:	b918      	cbnz	r0, 800528c <__cvt+0x8c>
 8005284:	f1c6 0601 	rsb	r6, r6, #1
 8005288:	f8ca 6000 	str.w	r6, [sl]
 800528c:	f8da 3000 	ldr.w	r3, [sl]
 8005290:	4499      	add	r9, r3
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fb fc45 	bl	8000b28 <__aeabi_dcmpeq>
 800529e:	b108      	cbz	r0, 80052a4 <__cvt+0xa4>
 80052a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80052a4:	2230      	movs	r2, #48	; 0x30
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	454b      	cmp	r3, r9
 80052aa:	d307      	bcc.n	80052bc <__cvt+0xbc>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b0:	1bdb      	subs	r3, r3, r7
 80052b2:	4638      	mov	r0, r7
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	b004      	add	sp, #16
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	1c59      	adds	r1, r3, #1
 80052be:	9103      	str	r1, [sp, #12]
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	e7f0      	b.n	80052a6 <__cvt+0xa6>

080052c4 <__exponent>:
 80052c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052c6:	4603      	mov	r3, r0
 80052c8:	2900      	cmp	r1, #0
 80052ca:	bfb8      	it	lt
 80052cc:	4249      	neglt	r1, r1
 80052ce:	f803 2b02 	strb.w	r2, [r3], #2
 80052d2:	bfb4      	ite	lt
 80052d4:	222d      	movlt	r2, #45	; 0x2d
 80052d6:	222b      	movge	r2, #43	; 0x2b
 80052d8:	2909      	cmp	r1, #9
 80052da:	7042      	strb	r2, [r0, #1]
 80052dc:	dd2a      	ble.n	8005334 <__exponent+0x70>
 80052de:	f10d 0407 	add.w	r4, sp, #7
 80052e2:	46a4      	mov	ip, r4
 80052e4:	270a      	movs	r7, #10
 80052e6:	46a6      	mov	lr, r4
 80052e8:	460a      	mov	r2, r1
 80052ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80052ee:	fb07 1516 	mls	r5, r7, r6, r1
 80052f2:	3530      	adds	r5, #48	; 0x30
 80052f4:	2a63      	cmp	r2, #99	; 0x63
 80052f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80052fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052fe:	4631      	mov	r1, r6
 8005300:	dcf1      	bgt.n	80052e6 <__exponent+0x22>
 8005302:	3130      	adds	r1, #48	; 0x30
 8005304:	f1ae 0502 	sub.w	r5, lr, #2
 8005308:	f804 1c01 	strb.w	r1, [r4, #-1]
 800530c:	1c44      	adds	r4, r0, #1
 800530e:	4629      	mov	r1, r5
 8005310:	4561      	cmp	r1, ip
 8005312:	d30a      	bcc.n	800532a <__exponent+0x66>
 8005314:	f10d 0209 	add.w	r2, sp, #9
 8005318:	eba2 020e 	sub.w	r2, r2, lr
 800531c:	4565      	cmp	r5, ip
 800531e:	bf88      	it	hi
 8005320:	2200      	movhi	r2, #0
 8005322:	4413      	add	r3, r2
 8005324:	1a18      	subs	r0, r3, r0
 8005326:	b003      	add	sp, #12
 8005328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800532e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005332:	e7ed      	b.n	8005310 <__exponent+0x4c>
 8005334:	2330      	movs	r3, #48	; 0x30
 8005336:	3130      	adds	r1, #48	; 0x30
 8005338:	7083      	strb	r3, [r0, #2]
 800533a:	70c1      	strb	r1, [r0, #3]
 800533c:	1d03      	adds	r3, r0, #4
 800533e:	e7f1      	b.n	8005324 <__exponent+0x60>

08005340 <_printf_float>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	ed2d 8b02 	vpush	{d8}
 8005348:	b08d      	sub	sp, #52	; 0x34
 800534a:	460c      	mov	r4, r1
 800534c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005350:	4616      	mov	r6, r2
 8005352:	461f      	mov	r7, r3
 8005354:	4605      	mov	r5, r0
 8005356:	f001 fd4d 	bl	8006df4 <_localeconv_r>
 800535a:	f8d0 a000 	ldr.w	sl, [r0]
 800535e:	4650      	mov	r0, sl
 8005360:	f7fa ff60 	bl	8000224 <strlen>
 8005364:	2300      	movs	r3, #0
 8005366:	930a      	str	r3, [sp, #40]	; 0x28
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	f8d8 3000 	ldr.w	r3, [r8]
 8005370:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005374:	3307      	adds	r3, #7
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	f8c8 2000 	str.w	r2, [r8]
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800538a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800538e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	f8cd 8018 	str.w	r8, [sp, #24]
 8005398:	ee08 0a10 	vmov	s16, r0
 800539c:	4b9f      	ldr	r3, [pc, #636]	; (800561c <_printf_float+0x2dc>)
 800539e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053a2:	f04f 32ff 	mov.w	r2, #4294967295
 80053a6:	f7fb fbf1 	bl	8000b8c <__aeabi_dcmpun>
 80053aa:	bb88      	cbnz	r0, 8005410 <_printf_float+0xd0>
 80053ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053b0:	4b9a      	ldr	r3, [pc, #616]	; (800561c <_printf_float+0x2dc>)
 80053b2:	f04f 32ff 	mov.w	r2, #4294967295
 80053b6:	f7fb fbcb 	bl	8000b50 <__aeabi_dcmple>
 80053ba:	bb48      	cbnz	r0, 8005410 <_printf_float+0xd0>
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fb fbba 	bl	8000b3c <__aeabi_dcmplt>
 80053c8:	b110      	cbz	r0, 80053d0 <_printf_float+0x90>
 80053ca:	232d      	movs	r3, #45	; 0x2d
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d0:	4b93      	ldr	r3, [pc, #588]	; (8005620 <_printf_float+0x2e0>)
 80053d2:	4894      	ldr	r0, [pc, #592]	; (8005624 <_printf_float+0x2e4>)
 80053d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053d8:	bf94      	ite	ls
 80053da:	4698      	movls	r8, r3
 80053dc:	4680      	movhi	r8, r0
 80053de:	2303      	movs	r3, #3
 80053e0:	6123      	str	r3, [r4, #16]
 80053e2:	9b05      	ldr	r3, [sp, #20]
 80053e4:	f023 0204 	bic.w	r2, r3, #4
 80053e8:	6022      	str	r2, [r4, #0]
 80053ea:	f04f 0900 	mov.w	r9, #0
 80053ee:	9700      	str	r7, [sp, #0]
 80053f0:	4633      	mov	r3, r6
 80053f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80053f4:	4621      	mov	r1, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 f9d8 	bl	80057ac <_printf_common>
 80053fc:	3001      	adds	r0, #1
 80053fe:	f040 8090 	bne.w	8005522 <_printf_float+0x1e2>
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	b00d      	add	sp, #52	; 0x34
 8005408:	ecbd 8b02 	vpop	{d8}
 800540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fb fbb8 	bl	8000b8c <__aeabi_dcmpun>
 800541c:	b140      	cbz	r0, 8005430 <_printf_float+0xf0>
 800541e:	464b      	mov	r3, r9
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfbc      	itt	lt
 8005424:	232d      	movlt	r3, #45	; 0x2d
 8005426:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800542a:	487f      	ldr	r0, [pc, #508]	; (8005628 <_printf_float+0x2e8>)
 800542c:	4b7f      	ldr	r3, [pc, #508]	; (800562c <_printf_float+0x2ec>)
 800542e:	e7d1      	b.n	80053d4 <_printf_float+0x94>
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005436:	9206      	str	r2, [sp, #24]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	d13f      	bne.n	80054bc <_printf_float+0x17c>
 800543c:	2306      	movs	r3, #6
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	9b05      	ldr	r3, [sp, #20]
 8005442:	6861      	ldr	r1, [r4, #4]
 8005444:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005448:	2300      	movs	r3, #0
 800544a:	9303      	str	r3, [sp, #12]
 800544c:	ab0a      	add	r3, sp, #40	; 0x28
 800544e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005452:	ab09      	add	r3, sp, #36	; 0x24
 8005454:	ec49 8b10 	vmov	d0, r8, r9
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	6022      	str	r2, [r4, #0]
 800545c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005460:	4628      	mov	r0, r5
 8005462:	f7ff fecd 	bl	8005200 <__cvt>
 8005466:	9b06      	ldr	r3, [sp, #24]
 8005468:	9909      	ldr	r1, [sp, #36]	; 0x24
 800546a:	2b47      	cmp	r3, #71	; 0x47
 800546c:	4680      	mov	r8, r0
 800546e:	d108      	bne.n	8005482 <_printf_float+0x142>
 8005470:	1cc8      	adds	r0, r1, #3
 8005472:	db02      	blt.n	800547a <_printf_float+0x13a>
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	4299      	cmp	r1, r3
 8005478:	dd41      	ble.n	80054fe <_printf_float+0x1be>
 800547a:	f1ab 0b02 	sub.w	fp, fp, #2
 800547e:	fa5f fb8b 	uxtb.w	fp, fp
 8005482:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005486:	d820      	bhi.n	80054ca <_printf_float+0x18a>
 8005488:	3901      	subs	r1, #1
 800548a:	465a      	mov	r2, fp
 800548c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005490:	9109      	str	r1, [sp, #36]	; 0x24
 8005492:	f7ff ff17 	bl	80052c4 <__exponent>
 8005496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005498:	1813      	adds	r3, r2, r0
 800549a:	2a01      	cmp	r2, #1
 800549c:	4681      	mov	r9, r0
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	dc02      	bgt.n	80054a8 <_printf_float+0x168>
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	07d2      	lsls	r2, r2, #31
 80054a6:	d501      	bpl.n	80054ac <_printf_float+0x16c>
 80054a8:	3301      	adds	r3, #1
 80054aa:	6123      	str	r3, [r4, #16]
 80054ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d09c      	beq.n	80053ee <_printf_float+0xae>
 80054b4:	232d      	movs	r3, #45	; 0x2d
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	e798      	b.n	80053ee <_printf_float+0xae>
 80054bc:	9a06      	ldr	r2, [sp, #24]
 80054be:	2a47      	cmp	r2, #71	; 0x47
 80054c0:	d1be      	bne.n	8005440 <_printf_float+0x100>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1bc      	bne.n	8005440 <_printf_float+0x100>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e7b9      	b.n	800543e <_printf_float+0xfe>
 80054ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054ce:	d118      	bne.n	8005502 <_printf_float+0x1c2>
 80054d0:	2900      	cmp	r1, #0
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	dd0b      	ble.n	80054ee <_printf_float+0x1ae>
 80054d6:	6121      	str	r1, [r4, #16]
 80054d8:	b913      	cbnz	r3, 80054e0 <_printf_float+0x1a0>
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	07d0      	lsls	r0, r2, #31
 80054de:	d502      	bpl.n	80054e6 <_printf_float+0x1a6>
 80054e0:	3301      	adds	r3, #1
 80054e2:	440b      	add	r3, r1
 80054e4:	6123      	str	r3, [r4, #16]
 80054e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80054e8:	f04f 0900 	mov.w	r9, #0
 80054ec:	e7de      	b.n	80054ac <_printf_float+0x16c>
 80054ee:	b913      	cbnz	r3, 80054f6 <_printf_float+0x1b6>
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	07d2      	lsls	r2, r2, #31
 80054f4:	d501      	bpl.n	80054fa <_printf_float+0x1ba>
 80054f6:	3302      	adds	r3, #2
 80054f8:	e7f4      	b.n	80054e4 <_printf_float+0x1a4>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7f2      	b.n	80054e4 <_printf_float+0x1a4>
 80054fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005504:	4299      	cmp	r1, r3
 8005506:	db05      	blt.n	8005514 <_printf_float+0x1d4>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	6121      	str	r1, [r4, #16]
 800550c:	07d8      	lsls	r0, r3, #31
 800550e:	d5ea      	bpl.n	80054e6 <_printf_float+0x1a6>
 8005510:	1c4b      	adds	r3, r1, #1
 8005512:	e7e7      	b.n	80054e4 <_printf_float+0x1a4>
 8005514:	2900      	cmp	r1, #0
 8005516:	bfd4      	ite	le
 8005518:	f1c1 0202 	rsble	r2, r1, #2
 800551c:	2201      	movgt	r2, #1
 800551e:	4413      	add	r3, r2
 8005520:	e7e0      	b.n	80054e4 <_printf_float+0x1a4>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	055a      	lsls	r2, r3, #21
 8005526:	d407      	bmi.n	8005538 <_printf_float+0x1f8>
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	4642      	mov	r2, r8
 800552c:	4631      	mov	r1, r6
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	d12c      	bne.n	8005590 <_printf_float+0x250>
 8005536:	e764      	b.n	8005402 <_printf_float+0xc2>
 8005538:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800553c:	f240 80e0 	bls.w	8005700 <_printf_float+0x3c0>
 8005540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005544:	2200      	movs	r2, #0
 8005546:	2300      	movs	r3, #0
 8005548:	f7fb faee 	bl	8000b28 <__aeabi_dcmpeq>
 800554c:	2800      	cmp	r0, #0
 800554e:	d034      	beq.n	80055ba <_printf_float+0x27a>
 8005550:	4a37      	ldr	r2, [pc, #220]	; (8005630 <_printf_float+0x2f0>)
 8005552:	2301      	movs	r3, #1
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af51 	beq.w	8005402 <_printf_float+0xc2>
 8005560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005564:	429a      	cmp	r2, r3
 8005566:	db02      	blt.n	800556e <_printf_float+0x22e>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	07d8      	lsls	r0, r3, #31
 800556c:	d510      	bpl.n	8005590 <_printf_float+0x250>
 800556e:	ee18 3a10 	vmov	r3, s16
 8005572:	4652      	mov	r2, sl
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	f43f af41 	beq.w	8005402 <_printf_float+0xc2>
 8005580:	f04f 0800 	mov.w	r8, #0
 8005584:	f104 091a 	add.w	r9, r4, #26
 8005588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558a:	3b01      	subs	r3, #1
 800558c:	4543      	cmp	r3, r8
 800558e:	dc09      	bgt.n	80055a4 <_printf_float+0x264>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	079b      	lsls	r3, r3, #30
 8005594:	f100 8105 	bmi.w	80057a2 <_printf_float+0x462>
 8005598:	68e0      	ldr	r0, [r4, #12]
 800559a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800559c:	4298      	cmp	r0, r3
 800559e:	bfb8      	it	lt
 80055a0:	4618      	movlt	r0, r3
 80055a2:	e730      	b.n	8005406 <_printf_float+0xc6>
 80055a4:	2301      	movs	r3, #1
 80055a6:	464a      	mov	r2, r9
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f af27 	beq.w	8005402 <_printf_float+0xc2>
 80055b4:	f108 0801 	add.w	r8, r8, #1
 80055b8:	e7e6      	b.n	8005588 <_printf_float+0x248>
 80055ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dc39      	bgt.n	8005634 <_printf_float+0x2f4>
 80055c0:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <_printf_float+0x2f0>)
 80055c2:	2301      	movs	r3, #1
 80055c4:	4631      	mov	r1, r6
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f af19 	beq.w	8005402 <_printf_float+0xc2>
 80055d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d102      	bne.n	80055de <_printf_float+0x29e>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	07d9      	lsls	r1, r3, #31
 80055dc:	d5d8      	bpl.n	8005590 <_printf_float+0x250>
 80055de:	ee18 3a10 	vmov	r3, s16
 80055e2:	4652      	mov	r2, sl
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af09 	beq.w	8005402 <_printf_float+0xc2>
 80055f0:	f04f 0900 	mov.w	r9, #0
 80055f4:	f104 0a1a 	add.w	sl, r4, #26
 80055f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fa:	425b      	negs	r3, r3
 80055fc:	454b      	cmp	r3, r9
 80055fe:	dc01      	bgt.n	8005604 <_printf_float+0x2c4>
 8005600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005602:	e792      	b.n	800552a <_printf_float+0x1ea>
 8005604:	2301      	movs	r3, #1
 8005606:	4652      	mov	r2, sl
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f aef7 	beq.w	8005402 <_printf_float+0xc2>
 8005614:	f109 0901 	add.w	r9, r9, #1
 8005618:	e7ee      	b.n	80055f8 <_printf_float+0x2b8>
 800561a:	bf00      	nop
 800561c:	7fefffff 	.word	0x7fefffff
 8005620:	08008078 	.word	0x08008078
 8005624:	0800807c 	.word	0x0800807c
 8005628:	08008084 	.word	0x08008084
 800562c:	08008080 	.word	0x08008080
 8005630:	08008088 	.word	0x08008088
 8005634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005636:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005638:	429a      	cmp	r2, r3
 800563a:	bfa8      	it	ge
 800563c:	461a      	movge	r2, r3
 800563e:	2a00      	cmp	r2, #0
 8005640:	4691      	mov	r9, r2
 8005642:	dc37      	bgt.n	80056b4 <_printf_float+0x374>
 8005644:	f04f 0b00 	mov.w	fp, #0
 8005648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800564c:	f104 021a 	add.w	r2, r4, #26
 8005650:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	eba3 0309 	sub.w	r3, r3, r9
 8005658:	455b      	cmp	r3, fp
 800565a:	dc33      	bgt.n	80056c4 <_printf_float+0x384>
 800565c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005660:	429a      	cmp	r2, r3
 8005662:	db3b      	blt.n	80056dc <_printf_float+0x39c>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	07da      	lsls	r2, r3, #31
 8005668:	d438      	bmi.n	80056dc <_printf_float+0x39c>
 800566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005670:	1a9a      	subs	r2, r3, r2
 8005672:	eba3 0901 	sub.w	r9, r3, r1
 8005676:	4591      	cmp	r9, r2
 8005678:	bfa8      	it	ge
 800567a:	4691      	movge	r9, r2
 800567c:	f1b9 0f00 	cmp.w	r9, #0
 8005680:	dc35      	bgt.n	80056ee <_printf_float+0x3ae>
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800568a:	f104 0a1a 	add.w	sl, r4, #26
 800568e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	eba3 0309 	sub.w	r3, r3, r9
 8005698:	4543      	cmp	r3, r8
 800569a:	f77f af79 	ble.w	8005590 <_printf_float+0x250>
 800569e:	2301      	movs	r3, #1
 80056a0:	4652      	mov	r2, sl
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	f43f aeaa 	beq.w	8005402 <_printf_float+0xc2>
 80056ae:	f108 0801 	add.w	r8, r8, #1
 80056b2:	e7ec      	b.n	800568e <_printf_float+0x34e>
 80056b4:	4613      	mov	r3, r2
 80056b6:	4631      	mov	r1, r6
 80056b8:	4642      	mov	r2, r8
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	d1c0      	bne.n	8005644 <_printf_float+0x304>
 80056c2:	e69e      	b.n	8005402 <_printf_float+0xc2>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	9205      	str	r2, [sp, #20]
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f ae97 	beq.w	8005402 <_printf_float+0xc2>
 80056d4:	9a05      	ldr	r2, [sp, #20]
 80056d6:	f10b 0b01 	add.w	fp, fp, #1
 80056da:	e7b9      	b.n	8005650 <_printf_float+0x310>
 80056dc:	ee18 3a10 	vmov	r3, s16
 80056e0:	4652      	mov	r2, sl
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	d1be      	bne.n	800566a <_printf_float+0x32a>
 80056ec:	e689      	b.n	8005402 <_printf_float+0xc2>
 80056ee:	9a05      	ldr	r2, [sp, #20]
 80056f0:	464b      	mov	r3, r9
 80056f2:	4442      	add	r2, r8
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	d1c1      	bne.n	8005682 <_printf_float+0x342>
 80056fe:	e680      	b.n	8005402 <_printf_float+0xc2>
 8005700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005702:	2a01      	cmp	r2, #1
 8005704:	dc01      	bgt.n	800570a <_printf_float+0x3ca>
 8005706:	07db      	lsls	r3, r3, #31
 8005708:	d538      	bpl.n	800577c <_printf_float+0x43c>
 800570a:	2301      	movs	r3, #1
 800570c:	4642      	mov	r2, r8
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	47b8      	blx	r7
 8005714:	3001      	adds	r0, #1
 8005716:	f43f ae74 	beq.w	8005402 <_printf_float+0xc2>
 800571a:	ee18 3a10 	vmov	r3, s16
 800571e:	4652      	mov	r2, sl
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f ae6b 	beq.w	8005402 <_printf_float+0xc2>
 800572c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005730:	2200      	movs	r2, #0
 8005732:	2300      	movs	r3, #0
 8005734:	f7fb f9f8 	bl	8000b28 <__aeabi_dcmpeq>
 8005738:	b9d8      	cbnz	r0, 8005772 <_printf_float+0x432>
 800573a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573c:	f108 0201 	add.w	r2, r8, #1
 8005740:	3b01      	subs	r3, #1
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	d10e      	bne.n	800576a <_printf_float+0x42a>
 800574c:	e659      	b.n	8005402 <_printf_float+0xc2>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f ae52 	beq.w	8005402 <_printf_float+0xc2>
 800575e:	f108 0801 	add.w	r8, r8, #1
 8005762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005764:	3b01      	subs	r3, #1
 8005766:	4543      	cmp	r3, r8
 8005768:	dcf1      	bgt.n	800574e <_printf_float+0x40e>
 800576a:	464b      	mov	r3, r9
 800576c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005770:	e6dc      	b.n	800552c <_printf_float+0x1ec>
 8005772:	f04f 0800 	mov.w	r8, #0
 8005776:	f104 0a1a 	add.w	sl, r4, #26
 800577a:	e7f2      	b.n	8005762 <_printf_float+0x422>
 800577c:	2301      	movs	r3, #1
 800577e:	4642      	mov	r2, r8
 8005780:	e7df      	b.n	8005742 <_printf_float+0x402>
 8005782:	2301      	movs	r3, #1
 8005784:	464a      	mov	r2, r9
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f ae38 	beq.w	8005402 <_printf_float+0xc2>
 8005792:	f108 0801 	add.w	r8, r8, #1
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800579a:	1a5b      	subs	r3, r3, r1
 800579c:	4543      	cmp	r3, r8
 800579e:	dcf0      	bgt.n	8005782 <_printf_float+0x442>
 80057a0:	e6fa      	b.n	8005598 <_printf_float+0x258>
 80057a2:	f04f 0800 	mov.w	r8, #0
 80057a6:	f104 0919 	add.w	r9, r4, #25
 80057aa:	e7f4      	b.n	8005796 <_printf_float+0x456>

080057ac <_printf_common>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	4616      	mov	r6, r2
 80057b2:	4699      	mov	r9, r3
 80057b4:	688a      	ldr	r2, [r1, #8]
 80057b6:	690b      	ldr	r3, [r1, #16]
 80057b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057bc:	4293      	cmp	r3, r2
 80057be:	bfb8      	it	lt
 80057c0:	4613      	movlt	r3, r2
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057c8:	4607      	mov	r7, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	b10a      	cbz	r2, 80057d2 <_printf_common+0x26>
 80057ce:	3301      	adds	r3, #1
 80057d0:	6033      	str	r3, [r6, #0]
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	0699      	lsls	r1, r3, #26
 80057d6:	bf42      	ittt	mi
 80057d8:	6833      	ldrmi	r3, [r6, #0]
 80057da:	3302      	addmi	r3, #2
 80057dc:	6033      	strmi	r3, [r6, #0]
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	f015 0506 	ands.w	r5, r5, #6
 80057e4:	d106      	bne.n	80057f4 <_printf_common+0x48>
 80057e6:	f104 0a19 	add.w	sl, r4, #25
 80057ea:	68e3      	ldr	r3, [r4, #12]
 80057ec:	6832      	ldr	r2, [r6, #0]
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	dc26      	bgt.n	8005842 <_printf_common+0x96>
 80057f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057f8:	1e13      	subs	r3, r2, #0
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	bf18      	it	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	0692      	lsls	r2, r2, #26
 8005802:	d42b      	bmi.n	800585c <_printf_common+0xb0>
 8005804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005808:	4649      	mov	r1, r9
 800580a:	4638      	mov	r0, r7
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d01e      	beq.n	8005850 <_printf_common+0xa4>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	68e5      	ldr	r5, [r4, #12]
 8005816:	6832      	ldr	r2, [r6, #0]
 8005818:	f003 0306 	and.w	r3, r3, #6
 800581c:	2b04      	cmp	r3, #4
 800581e:	bf08      	it	eq
 8005820:	1aad      	subeq	r5, r5, r2
 8005822:	68a3      	ldr	r3, [r4, #8]
 8005824:	6922      	ldr	r2, [r4, #16]
 8005826:	bf0c      	ite	eq
 8005828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800582c:	2500      	movne	r5, #0
 800582e:	4293      	cmp	r3, r2
 8005830:	bfc4      	itt	gt
 8005832:	1a9b      	subgt	r3, r3, r2
 8005834:	18ed      	addgt	r5, r5, r3
 8005836:	2600      	movs	r6, #0
 8005838:	341a      	adds	r4, #26
 800583a:	42b5      	cmp	r5, r6
 800583c:	d11a      	bne.n	8005874 <_printf_common+0xc8>
 800583e:	2000      	movs	r0, #0
 8005840:	e008      	b.n	8005854 <_printf_common+0xa8>
 8005842:	2301      	movs	r3, #1
 8005844:	4652      	mov	r2, sl
 8005846:	4649      	mov	r1, r9
 8005848:	4638      	mov	r0, r7
 800584a:	47c0      	blx	r8
 800584c:	3001      	adds	r0, #1
 800584e:	d103      	bne.n	8005858 <_printf_common+0xac>
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	3501      	adds	r5, #1
 800585a:	e7c6      	b.n	80057ea <_printf_common+0x3e>
 800585c:	18e1      	adds	r1, r4, r3
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	2030      	movs	r0, #48	; 0x30
 8005862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005866:	4422      	add	r2, r4
 8005868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800586c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005870:	3302      	adds	r3, #2
 8005872:	e7c7      	b.n	8005804 <_printf_common+0x58>
 8005874:	2301      	movs	r3, #1
 8005876:	4622      	mov	r2, r4
 8005878:	4649      	mov	r1, r9
 800587a:	4638      	mov	r0, r7
 800587c:	47c0      	blx	r8
 800587e:	3001      	adds	r0, #1
 8005880:	d0e6      	beq.n	8005850 <_printf_common+0xa4>
 8005882:	3601      	adds	r6, #1
 8005884:	e7d9      	b.n	800583a <_printf_common+0x8e>
	...

08005888 <_printf_i>:
 8005888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	7e0f      	ldrb	r7, [r1, #24]
 800588e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005890:	2f78      	cmp	r7, #120	; 0x78
 8005892:	4691      	mov	r9, r2
 8005894:	4680      	mov	r8, r0
 8005896:	460c      	mov	r4, r1
 8005898:	469a      	mov	sl, r3
 800589a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800589e:	d807      	bhi.n	80058b0 <_printf_i+0x28>
 80058a0:	2f62      	cmp	r7, #98	; 0x62
 80058a2:	d80a      	bhi.n	80058ba <_printf_i+0x32>
 80058a4:	2f00      	cmp	r7, #0
 80058a6:	f000 80d8 	beq.w	8005a5a <_printf_i+0x1d2>
 80058aa:	2f58      	cmp	r7, #88	; 0x58
 80058ac:	f000 80a3 	beq.w	80059f6 <_printf_i+0x16e>
 80058b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058b8:	e03a      	b.n	8005930 <_printf_i+0xa8>
 80058ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058be:	2b15      	cmp	r3, #21
 80058c0:	d8f6      	bhi.n	80058b0 <_printf_i+0x28>
 80058c2:	a101      	add	r1, pc, #4	; (adr r1, 80058c8 <_printf_i+0x40>)
 80058c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058c8:	08005921 	.word	0x08005921
 80058cc:	08005935 	.word	0x08005935
 80058d0:	080058b1 	.word	0x080058b1
 80058d4:	080058b1 	.word	0x080058b1
 80058d8:	080058b1 	.word	0x080058b1
 80058dc:	080058b1 	.word	0x080058b1
 80058e0:	08005935 	.word	0x08005935
 80058e4:	080058b1 	.word	0x080058b1
 80058e8:	080058b1 	.word	0x080058b1
 80058ec:	080058b1 	.word	0x080058b1
 80058f0:	080058b1 	.word	0x080058b1
 80058f4:	08005a41 	.word	0x08005a41
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005a23 	.word	0x08005a23
 8005900:	080058b1 	.word	0x080058b1
 8005904:	080058b1 	.word	0x080058b1
 8005908:	08005a63 	.word	0x08005a63
 800590c:	080058b1 	.word	0x080058b1
 8005910:	08005965 	.word	0x08005965
 8005914:	080058b1 	.word	0x080058b1
 8005918:	080058b1 	.word	0x080058b1
 800591c:	08005a2b 	.word	0x08005a2b
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	602a      	str	r2, [r5, #0]
 8005928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800592c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005930:	2301      	movs	r3, #1
 8005932:	e0a3      	b.n	8005a7c <_printf_i+0x1f4>
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	6829      	ldr	r1, [r5, #0]
 8005938:	0606      	lsls	r6, r0, #24
 800593a:	f101 0304 	add.w	r3, r1, #4
 800593e:	d50a      	bpl.n	8005956 <_printf_i+0xce>
 8005940:	680e      	ldr	r6, [r1, #0]
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	2e00      	cmp	r6, #0
 8005946:	da03      	bge.n	8005950 <_printf_i+0xc8>
 8005948:	232d      	movs	r3, #45	; 0x2d
 800594a:	4276      	negs	r6, r6
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005950:	485e      	ldr	r0, [pc, #376]	; (8005acc <_printf_i+0x244>)
 8005952:	230a      	movs	r3, #10
 8005954:	e019      	b.n	800598a <_printf_i+0x102>
 8005956:	680e      	ldr	r6, [r1, #0]
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800595e:	bf18      	it	ne
 8005960:	b236      	sxthne	r6, r6
 8005962:	e7ef      	b.n	8005944 <_printf_i+0xbc>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	1d19      	adds	r1, r3, #4
 800596a:	6029      	str	r1, [r5, #0]
 800596c:	0601      	lsls	r1, r0, #24
 800596e:	d501      	bpl.n	8005974 <_printf_i+0xec>
 8005970:	681e      	ldr	r6, [r3, #0]
 8005972:	e002      	b.n	800597a <_printf_i+0xf2>
 8005974:	0646      	lsls	r6, r0, #25
 8005976:	d5fb      	bpl.n	8005970 <_printf_i+0xe8>
 8005978:	881e      	ldrh	r6, [r3, #0]
 800597a:	4854      	ldr	r0, [pc, #336]	; (8005acc <_printf_i+0x244>)
 800597c:	2f6f      	cmp	r7, #111	; 0x6f
 800597e:	bf0c      	ite	eq
 8005980:	2308      	moveq	r3, #8
 8005982:	230a      	movne	r3, #10
 8005984:	2100      	movs	r1, #0
 8005986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800598a:	6865      	ldr	r5, [r4, #4]
 800598c:	60a5      	str	r5, [r4, #8]
 800598e:	2d00      	cmp	r5, #0
 8005990:	bfa2      	ittt	ge
 8005992:	6821      	ldrge	r1, [r4, #0]
 8005994:	f021 0104 	bicge.w	r1, r1, #4
 8005998:	6021      	strge	r1, [r4, #0]
 800599a:	b90e      	cbnz	r6, 80059a0 <_printf_i+0x118>
 800599c:	2d00      	cmp	r5, #0
 800599e:	d04d      	beq.n	8005a3c <_printf_i+0x1b4>
 80059a0:	4615      	mov	r5, r2
 80059a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059a6:	fb03 6711 	mls	r7, r3, r1, r6
 80059aa:	5dc7      	ldrb	r7, [r0, r7]
 80059ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b0:	4637      	mov	r7, r6
 80059b2:	42bb      	cmp	r3, r7
 80059b4:	460e      	mov	r6, r1
 80059b6:	d9f4      	bls.n	80059a2 <_printf_i+0x11a>
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d10b      	bne.n	80059d4 <_printf_i+0x14c>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07de      	lsls	r6, r3, #31
 80059c0:	d508      	bpl.n	80059d4 <_printf_i+0x14c>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	6861      	ldr	r1, [r4, #4]
 80059c6:	4299      	cmp	r1, r3
 80059c8:	bfde      	ittt	le
 80059ca:	2330      	movle	r3, #48	; 0x30
 80059cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059d4:	1b52      	subs	r2, r2, r5
 80059d6:	6122      	str	r2, [r4, #16]
 80059d8:	f8cd a000 	str.w	sl, [sp]
 80059dc:	464b      	mov	r3, r9
 80059de:	aa03      	add	r2, sp, #12
 80059e0:	4621      	mov	r1, r4
 80059e2:	4640      	mov	r0, r8
 80059e4:	f7ff fee2 	bl	80057ac <_printf_common>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d14c      	bne.n	8005a86 <_printf_i+0x1fe>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	b004      	add	sp, #16
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	4835      	ldr	r0, [pc, #212]	; (8005acc <_printf_i+0x244>)
 80059f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059fc:	6829      	ldr	r1, [r5, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a04:	6029      	str	r1, [r5, #0]
 8005a06:	061d      	lsls	r5, r3, #24
 8005a08:	d514      	bpl.n	8005a34 <_printf_i+0x1ac>
 8005a0a:	07df      	lsls	r7, r3, #31
 8005a0c:	bf44      	itt	mi
 8005a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a12:	6023      	strmi	r3, [r4, #0]
 8005a14:	b91e      	cbnz	r6, 8005a1e <_printf_i+0x196>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f023 0320 	bic.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	2310      	movs	r3, #16
 8005a20:	e7b0      	b.n	8005984 <_printf_i+0xfc>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	f043 0320 	orr.w	r3, r3, #32
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	2378      	movs	r3, #120	; 0x78
 8005a2c:	4828      	ldr	r0, [pc, #160]	; (8005ad0 <_printf_i+0x248>)
 8005a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a32:	e7e3      	b.n	80059fc <_printf_i+0x174>
 8005a34:	0659      	lsls	r1, r3, #25
 8005a36:	bf48      	it	mi
 8005a38:	b2b6      	uxthmi	r6, r6
 8005a3a:	e7e6      	b.n	8005a0a <_printf_i+0x182>
 8005a3c:	4615      	mov	r5, r2
 8005a3e:	e7bb      	b.n	80059b8 <_printf_i+0x130>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	6826      	ldr	r6, [r4, #0]
 8005a44:	6961      	ldr	r1, [r4, #20]
 8005a46:	1d18      	adds	r0, r3, #4
 8005a48:	6028      	str	r0, [r5, #0]
 8005a4a:	0635      	lsls	r5, r6, #24
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	d501      	bpl.n	8005a54 <_printf_i+0x1cc>
 8005a50:	6019      	str	r1, [r3, #0]
 8005a52:	e002      	b.n	8005a5a <_printf_i+0x1d2>
 8005a54:	0670      	lsls	r0, r6, #25
 8005a56:	d5fb      	bpl.n	8005a50 <_printf_i+0x1c8>
 8005a58:	8019      	strh	r1, [r3, #0]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	4615      	mov	r5, r2
 8005a60:	e7ba      	b.n	80059d8 <_printf_i+0x150>
 8005a62:	682b      	ldr	r3, [r5, #0]
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	602a      	str	r2, [r5, #0]
 8005a68:	681d      	ldr	r5, [r3, #0]
 8005a6a:	6862      	ldr	r2, [r4, #4]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f7fa fbe6 	bl	8000240 <memchr>
 8005a74:	b108      	cbz	r0, 8005a7a <_printf_i+0x1f2>
 8005a76:	1b40      	subs	r0, r0, r5
 8005a78:	6060      	str	r0, [r4, #4]
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a84:	e7a8      	b.n	80059d8 <_printf_i+0x150>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	47d0      	blx	sl
 8005a90:	3001      	adds	r0, #1
 8005a92:	d0ab      	beq.n	80059ec <_printf_i+0x164>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	079b      	lsls	r3, r3, #30
 8005a98:	d413      	bmi.n	8005ac2 <_printf_i+0x23a>
 8005a9a:	68e0      	ldr	r0, [r4, #12]
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	4298      	cmp	r0, r3
 8005aa0:	bfb8      	it	lt
 8005aa2:	4618      	movlt	r0, r3
 8005aa4:	e7a4      	b.n	80059f0 <_printf_i+0x168>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4649      	mov	r1, r9
 8005aac:	4640      	mov	r0, r8
 8005aae:	47d0      	blx	sl
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d09b      	beq.n	80059ec <_printf_i+0x164>
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	9903      	ldr	r1, [sp, #12]
 8005aba:	1a5b      	subs	r3, r3, r1
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dcf2      	bgt.n	8005aa6 <_printf_i+0x21e>
 8005ac0:	e7eb      	b.n	8005a9a <_printf_i+0x212>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	f104 0619 	add.w	r6, r4, #25
 8005ac8:	e7f5      	b.n	8005ab6 <_printf_i+0x22e>
 8005aca:	bf00      	nop
 8005acc:	0800808a 	.word	0x0800808a
 8005ad0:	0800809b 	.word	0x0800809b

08005ad4 <iprintf>:
 8005ad4:	b40f      	push	{r0, r1, r2, r3}
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <iprintf+0x2c>)
 8005ad8:	b513      	push	{r0, r1, r4, lr}
 8005ada:	681c      	ldr	r4, [r3, #0]
 8005adc:	b124      	cbz	r4, 8005ae8 <iprintf+0x14>
 8005ade:	69a3      	ldr	r3, [r4, #24]
 8005ae0:	b913      	cbnz	r3, 8005ae8 <iprintf+0x14>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f001 f8e8 	bl	8006cb8 <__sinit>
 8005ae8:	ab05      	add	r3, sp, #20
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	68a1      	ldr	r1, [r4, #8]
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f001 fdbb 	bl	800766c <_vfiprintf_r>
 8005af6:	b002      	add	sp, #8
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afc:	b004      	add	sp, #16
 8005afe:	4770      	bx	lr
 8005b00:	200006d4 	.word	0x200006d4

08005b04 <_puts_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	460e      	mov	r6, r1
 8005b08:	4605      	mov	r5, r0
 8005b0a:	b118      	cbz	r0, 8005b14 <_puts_r+0x10>
 8005b0c:	6983      	ldr	r3, [r0, #24]
 8005b0e:	b90b      	cbnz	r3, 8005b14 <_puts_r+0x10>
 8005b10:	f001 f8d2 	bl	8006cb8 <__sinit>
 8005b14:	69ab      	ldr	r3, [r5, #24]
 8005b16:	68ac      	ldr	r4, [r5, #8]
 8005b18:	b913      	cbnz	r3, 8005b20 <_puts_r+0x1c>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f001 f8cc 	bl	8006cb8 <__sinit>
 8005b20:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <_puts_r+0xd0>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d120      	bne.n	8005b68 <_puts_r+0x64>
 8005b26:	686c      	ldr	r4, [r5, #4]
 8005b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b2a:	07db      	lsls	r3, r3, #31
 8005b2c:	d405      	bmi.n	8005b3a <_puts_r+0x36>
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	0598      	lsls	r0, r3, #22
 8005b32:	d402      	bmi.n	8005b3a <_puts_r+0x36>
 8005b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b36:	f001 f962 	bl	8006dfe <__retarget_lock_acquire_recursive>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	0719      	lsls	r1, r3, #28
 8005b3e:	d51d      	bpl.n	8005b7c <_puts_r+0x78>
 8005b40:	6923      	ldr	r3, [r4, #16]
 8005b42:	b1db      	cbz	r3, 8005b7c <_puts_r+0x78>
 8005b44:	3e01      	subs	r6, #1
 8005b46:	68a3      	ldr	r3, [r4, #8]
 8005b48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	60a3      	str	r3, [r4, #8]
 8005b50:	bb39      	cbnz	r1, 8005ba2 <_puts_r+0x9e>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da38      	bge.n	8005bc8 <_puts_r+0xc4>
 8005b56:	4622      	mov	r2, r4
 8005b58:	210a      	movs	r1, #10
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f858 	bl	8005c10 <__swbuf_r>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d011      	beq.n	8005b88 <_puts_r+0x84>
 8005b64:	250a      	movs	r5, #10
 8005b66:	e011      	b.n	8005b8c <_puts_r+0x88>
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <_puts_r+0xd4>)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d101      	bne.n	8005b72 <_puts_r+0x6e>
 8005b6e:	68ac      	ldr	r4, [r5, #8]
 8005b70:	e7da      	b.n	8005b28 <_puts_r+0x24>
 8005b72:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <_puts_r+0xd8>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	bf08      	it	eq
 8005b78:	68ec      	ldreq	r4, [r5, #12]
 8005b7a:	e7d5      	b.n	8005b28 <_puts_r+0x24>
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 f898 	bl	8005cb4 <__swsetup_r>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d0dd      	beq.n	8005b44 <_puts_r+0x40>
 8005b88:	f04f 35ff 	mov.w	r5, #4294967295
 8005b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b8e:	07da      	lsls	r2, r3, #31
 8005b90:	d405      	bmi.n	8005b9e <_puts_r+0x9a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	059b      	lsls	r3, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_puts_r+0x9a>
 8005b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b9a:	f001 f931 	bl	8006e00 <__retarget_lock_release_recursive>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	bd70      	pop	{r4, r5, r6, pc}
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	da04      	bge.n	8005bb0 <_puts_r+0xac>
 8005ba6:	69a2      	ldr	r2, [r4, #24]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	dc06      	bgt.n	8005bba <_puts_r+0xb6>
 8005bac:	290a      	cmp	r1, #10
 8005bae:	d004      	beq.n	8005bba <_puts_r+0xb6>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	6022      	str	r2, [r4, #0]
 8005bb6:	7019      	strb	r1, [r3, #0]
 8005bb8:	e7c5      	b.n	8005b46 <_puts_r+0x42>
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 f827 	bl	8005c10 <__swbuf_r>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d1bf      	bne.n	8005b46 <_puts_r+0x42>
 8005bc6:	e7df      	b.n	8005b88 <_puts_r+0x84>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	250a      	movs	r5, #10
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	6022      	str	r2, [r4, #0]
 8005bd0:	701d      	strb	r5, [r3, #0]
 8005bd2:	e7db      	b.n	8005b8c <_puts_r+0x88>
 8005bd4:	0800815c 	.word	0x0800815c
 8005bd8:	0800817c 	.word	0x0800817c
 8005bdc:	0800813c 	.word	0x0800813c

08005be0 <puts>:
 8005be0:	4b02      	ldr	r3, [pc, #8]	; (8005bec <puts+0xc>)
 8005be2:	4601      	mov	r1, r0
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	f7ff bf8d 	b.w	8005b04 <_puts_r>
 8005bea:	bf00      	nop
 8005bec:	200006d4 	.word	0x200006d4

08005bf0 <_sbrk_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d06      	ldr	r5, [pc, #24]	; (8005c0c <_sbrk_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fb fd3e 	bl	800167c <_sbrk>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_sbrk_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_sbrk_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200009f8 	.word	0x200009f8

08005c10 <__swbuf_r>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	460e      	mov	r6, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	4605      	mov	r5, r0
 8005c18:	b118      	cbz	r0, 8005c22 <__swbuf_r+0x12>
 8005c1a:	6983      	ldr	r3, [r0, #24]
 8005c1c:	b90b      	cbnz	r3, 8005c22 <__swbuf_r+0x12>
 8005c1e:	f001 f84b 	bl	8006cb8 <__sinit>
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <__swbuf_r+0x98>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d12b      	bne.n	8005c80 <__swbuf_r+0x70>
 8005c28:	686c      	ldr	r4, [r5, #4]
 8005c2a:	69a3      	ldr	r3, [r4, #24]
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	071a      	lsls	r2, r3, #28
 8005c32:	d52f      	bpl.n	8005c94 <__swbuf_r+0x84>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	b36b      	cbz	r3, 8005c94 <__swbuf_r+0x84>
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	6820      	ldr	r0, [r4, #0]
 8005c3c:	1ac0      	subs	r0, r0, r3
 8005c3e:	6963      	ldr	r3, [r4, #20]
 8005c40:	b2f6      	uxtb	r6, r6
 8005c42:	4283      	cmp	r3, r0
 8005c44:	4637      	mov	r7, r6
 8005c46:	dc04      	bgt.n	8005c52 <__swbuf_r+0x42>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 ffa0 	bl	8006b90 <_fflush_r>
 8005c50:	bb30      	cbnz	r0, 8005ca0 <__swbuf_r+0x90>
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60a3      	str	r3, [r4, #8]
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	701e      	strb	r6, [r3, #0]
 8005c60:	6963      	ldr	r3, [r4, #20]
 8005c62:	3001      	adds	r0, #1
 8005c64:	4283      	cmp	r3, r0
 8005c66:	d004      	beq.n	8005c72 <__swbuf_r+0x62>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	07db      	lsls	r3, r3, #31
 8005c6c:	d506      	bpl.n	8005c7c <__swbuf_r+0x6c>
 8005c6e:	2e0a      	cmp	r6, #10
 8005c70:	d104      	bne.n	8005c7c <__swbuf_r+0x6c>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 ff8b 	bl	8006b90 <_fflush_r>
 8005c7a:	b988      	cbnz	r0, 8005ca0 <__swbuf_r+0x90>
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <__swbuf_r+0x9c>)
 8005c82:	429c      	cmp	r4, r3
 8005c84:	d101      	bne.n	8005c8a <__swbuf_r+0x7a>
 8005c86:	68ac      	ldr	r4, [r5, #8]
 8005c88:	e7cf      	b.n	8005c2a <__swbuf_r+0x1a>
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <__swbuf_r+0xa0>)
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	bf08      	it	eq
 8005c90:	68ec      	ldreq	r4, [r5, #12]
 8005c92:	e7ca      	b.n	8005c2a <__swbuf_r+0x1a>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f80c 	bl	8005cb4 <__swsetup_r>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d0cb      	beq.n	8005c38 <__swbuf_r+0x28>
 8005ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca4:	e7ea      	b.n	8005c7c <__swbuf_r+0x6c>
 8005ca6:	bf00      	nop
 8005ca8:	0800815c 	.word	0x0800815c
 8005cac:	0800817c 	.word	0x0800817c
 8005cb0:	0800813c 	.word	0x0800813c

08005cb4 <__swsetup_r>:
 8005cb4:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <__swsetup_r+0xcc>)
 8005cb6:	b570      	push	{r4, r5, r6, lr}
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	4606      	mov	r6, r0
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	b125      	cbz	r5, 8005cca <__swsetup_r+0x16>
 8005cc0:	69ab      	ldr	r3, [r5, #24]
 8005cc2:	b913      	cbnz	r3, 8005cca <__swsetup_r+0x16>
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 fff7 	bl	8006cb8 <__sinit>
 8005cca:	4b2e      	ldr	r3, [pc, #184]	; (8005d84 <__swsetup_r+0xd0>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	d10f      	bne.n	8005cf0 <__swsetup_r+0x3c>
 8005cd0:	686c      	ldr	r4, [r5, #4]
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cd8:	0719      	lsls	r1, r3, #28
 8005cda:	d42c      	bmi.n	8005d36 <__swsetup_r+0x82>
 8005cdc:	06dd      	lsls	r5, r3, #27
 8005cde:	d411      	bmi.n	8005d04 <__swsetup_r+0x50>
 8005ce0:	2309      	movs	r3, #9
 8005ce2:	6033      	str	r3, [r6, #0]
 8005ce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	f04f 30ff 	mov.w	r0, #4294967295
 8005cee:	e03e      	b.n	8005d6e <__swsetup_r+0xba>
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <__swsetup_r+0xd4>)
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	d101      	bne.n	8005cfa <__swsetup_r+0x46>
 8005cf6:	68ac      	ldr	r4, [r5, #8]
 8005cf8:	e7eb      	b.n	8005cd2 <__swsetup_r+0x1e>
 8005cfa:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <__swsetup_r+0xd8>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	bf08      	it	eq
 8005d00:	68ec      	ldreq	r4, [r5, #12]
 8005d02:	e7e6      	b.n	8005cd2 <__swsetup_r+0x1e>
 8005d04:	0758      	lsls	r0, r3, #29
 8005d06:	d512      	bpl.n	8005d2e <__swsetup_r+0x7a>
 8005d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0a:	b141      	cbz	r1, 8005d1e <__swsetup_r+0x6a>
 8005d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d10:	4299      	cmp	r1, r3
 8005d12:	d002      	beq.n	8005d1a <__swsetup_r+0x66>
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff f993 	bl	8005040 <_free_r>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	2300      	movs	r3, #0
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f043 0308 	orr.w	r3, r3, #8
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	b94b      	cbnz	r3, 8005d4e <__swsetup_r+0x9a>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d44:	d003      	beq.n	8005d4e <__swsetup_r+0x9a>
 8005d46:	4621      	mov	r1, r4
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f001 f87f 	bl	8006e4c <__smakebuf_r>
 8005d4e:	89a0      	ldrh	r0, [r4, #12]
 8005d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d54:	f010 0301 	ands.w	r3, r0, #1
 8005d58:	d00a      	beq.n	8005d70 <__swsetup_r+0xbc>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60a3      	str	r3, [r4, #8]
 8005d5e:	6963      	ldr	r3, [r4, #20]
 8005d60:	425b      	negs	r3, r3
 8005d62:	61a3      	str	r3, [r4, #24]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	b943      	cbnz	r3, 8005d7a <__swsetup_r+0xc6>
 8005d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d6c:	d1ba      	bne.n	8005ce4 <__swsetup_r+0x30>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	0781      	lsls	r1, r0, #30
 8005d72:	bf58      	it	pl
 8005d74:	6963      	ldrpl	r3, [r4, #20]
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	e7f4      	b.n	8005d64 <__swsetup_r+0xb0>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e7f7      	b.n	8005d6e <__swsetup_r+0xba>
 8005d7e:	bf00      	nop
 8005d80:	200006d4 	.word	0x200006d4
 8005d84:	0800815c 	.word	0x0800815c
 8005d88:	0800817c 	.word	0x0800817c
 8005d8c:	0800813c 	.word	0x0800813c

08005d90 <quorem>:
 8005d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	6903      	ldr	r3, [r0, #16]
 8005d96:	690c      	ldr	r4, [r1, #16]
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	f2c0 8081 	blt.w	8005ea2 <quorem+0x112>
 8005da0:	3c01      	subs	r4, #1
 8005da2:	f101 0814 	add.w	r8, r1, #20
 8005da6:	f100 0514 	add.w	r5, r0, #20
 8005daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db8:	3301      	adds	r3, #1
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc8:	d331      	bcc.n	8005e2e <quorem+0x9e>
 8005dca:	f04f 0e00 	mov.w	lr, #0
 8005dce:	4640      	mov	r0, r8
 8005dd0:	46ac      	mov	ip, r5
 8005dd2:	46f2      	mov	sl, lr
 8005dd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dd8:	b293      	uxth	r3, r2
 8005dda:	fb06 e303 	mla	r3, r6, r3, lr
 8005dde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ebaa 0303 	sub.w	r3, sl, r3
 8005de8:	f8dc a000 	ldr.w	sl, [ip]
 8005dec:	0c12      	lsrs	r2, r2, #16
 8005dee:	fa13 f38a 	uxtah	r3, r3, sl
 8005df2:	fb06 e202 	mla	r2, r6, r2, lr
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	9b00      	ldr	r3, [sp, #0]
 8005dfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e08:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e0c:	4581      	cmp	r9, r0
 8005e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e12:	f84c 3b04 	str.w	r3, [ip], #4
 8005e16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e1a:	d2db      	bcs.n	8005dd4 <quorem+0x44>
 8005e1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e20:	b92b      	cbnz	r3, 8005e2e <quorem+0x9e>
 8005e22:	9b01      	ldr	r3, [sp, #4]
 8005e24:	3b04      	subs	r3, #4
 8005e26:	429d      	cmp	r5, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	d32e      	bcc.n	8005e8a <quorem+0xfa>
 8005e2c:	613c      	str	r4, [r7, #16]
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f001 fada 	bl	80073e8 <__mcmp>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	db24      	blt.n	8005e82 <quorem+0xf2>
 8005e38:	3601      	adds	r6, #1
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f04f 0c00 	mov.w	ip, #0
 8005e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e44:	f8d0 e000 	ldr.w	lr, [r0]
 8005e48:	b293      	uxth	r3, r2
 8005e4a:	ebac 0303 	sub.w	r3, ip, r3
 8005e4e:	0c12      	lsrs	r2, r2, #16
 8005e50:	fa13 f38e 	uxtah	r3, r3, lr
 8005e54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e62:	45c1      	cmp	r9, r8
 8005e64:	f840 3b04 	str.w	r3, [r0], #4
 8005e68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e6c:	d2e8      	bcs.n	8005e40 <quorem+0xb0>
 8005e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e76:	b922      	cbnz	r2, 8005e82 <quorem+0xf2>
 8005e78:	3b04      	subs	r3, #4
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	d30a      	bcc.n	8005e96 <quorem+0x106>
 8005e80:	613c      	str	r4, [r7, #16]
 8005e82:	4630      	mov	r0, r6
 8005e84:	b003      	add	sp, #12
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	d1cc      	bne.n	8005e2c <quorem+0x9c>
 8005e92:	3c01      	subs	r4, #1
 8005e94:	e7c7      	b.n	8005e26 <quorem+0x96>
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	d1f0      	bne.n	8005e80 <quorem+0xf0>
 8005e9e:	3c01      	subs	r4, #1
 8005ea0:	e7eb      	b.n	8005e7a <quorem+0xea>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e7ee      	b.n	8005e84 <quorem+0xf4>
	...

08005ea8 <_dtoa_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ed2d 8b04 	vpush	{d8-d9}
 8005eb0:	ec57 6b10 	vmov	r6, r7, d0
 8005eb4:	b093      	sub	sp, #76	; 0x4c
 8005eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ebc:	9106      	str	r1, [sp, #24]
 8005ebe:	ee10 aa10 	vmov	sl, s0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec8:	46bb      	mov	fp, r7
 8005eca:	b975      	cbnz	r5, 8005eea <_dtoa_r+0x42>
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f7ff f899 	bl	8005004 <malloc>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ed6:	b920      	cbnz	r0, 8005ee2 <_dtoa_r+0x3a>
 8005ed8:	4ba7      	ldr	r3, [pc, #668]	; (8006178 <_dtoa_r+0x2d0>)
 8005eda:	21ea      	movs	r1, #234	; 0xea
 8005edc:	48a7      	ldr	r0, [pc, #668]	; (800617c <_dtoa_r+0x2d4>)
 8005ede:	f001 fd4b 	bl	8007978 <__assert_func>
 8005ee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ee6:	6005      	str	r5, [r0, #0]
 8005ee8:	60c5      	str	r5, [r0, #12]
 8005eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	b151      	cbz	r1, 8005f06 <_dtoa_r+0x5e>
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	604a      	str	r2, [r1, #4]
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4093      	lsls	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
 8005efa:	4620      	mov	r0, r4
 8005efc:	f001 f832 	bl	8006f64 <_Bfree>
 8005f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	1e3b      	subs	r3, r7, #0
 8005f08:	bfaa      	itet	ge
 8005f0a:	2300      	movge	r3, #0
 8005f0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f10:	f8c8 3000 	strge.w	r3, [r8]
 8005f14:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <_dtoa_r+0x2d8>)
 8005f16:	bfbc      	itt	lt
 8005f18:	2201      	movlt	r2, #1
 8005f1a:	f8c8 2000 	strlt.w	r2, [r8]
 8005f1e:	ea33 030b 	bics.w	r3, r3, fp
 8005f22:	d11b      	bne.n	8005f5c <_dtoa_r+0xb4>
 8005f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f26:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f30:	4333      	orrs	r3, r6
 8005f32:	f000 8592 	beq.w	8006a5a <_dtoa_r+0xbb2>
 8005f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f38:	b963      	cbnz	r3, 8005f54 <_dtoa_r+0xac>
 8005f3a:	4b92      	ldr	r3, [pc, #584]	; (8006184 <_dtoa_r+0x2dc>)
 8005f3c:	e022      	b.n	8005f84 <_dtoa_r+0xdc>
 8005f3e:	4b92      	ldr	r3, [pc, #584]	; (8006188 <_dtoa_r+0x2e0>)
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	3308      	adds	r3, #8
 8005f44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	9801      	ldr	r0, [sp, #4]
 8005f4a:	b013      	add	sp, #76	; 0x4c
 8005f4c:	ecbd 8b04 	vpop	{d8-d9}
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	4b8b      	ldr	r3, [pc, #556]	; (8006184 <_dtoa_r+0x2dc>)
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	e7f3      	b.n	8005f44 <_dtoa_r+0x9c>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4650      	mov	r0, sl
 8005f62:	4659      	mov	r1, fp
 8005f64:	f7fa fde0 	bl	8000b28 <__aeabi_dcmpeq>
 8005f68:	ec4b ab19 	vmov	d9, sl, fp
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	b158      	cbz	r0, 8005f88 <_dtoa_r+0xe0>
 8005f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f72:	2301      	movs	r3, #1
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 856b 	beq.w	8006a54 <_dtoa_r+0xbac>
 8005f7e:	4883      	ldr	r0, [pc, #524]	; (800618c <_dtoa_r+0x2e4>)
 8005f80:	6018      	str	r0, [r3, #0]
 8005f82:	1e43      	subs	r3, r0, #1
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	e7df      	b.n	8005f48 <_dtoa_r+0xa0>
 8005f88:	ec4b ab10 	vmov	d0, sl, fp
 8005f8c:	aa10      	add	r2, sp, #64	; 0x40
 8005f8e:	a911      	add	r1, sp, #68	; 0x44
 8005f90:	4620      	mov	r0, r4
 8005f92:	f001 facf 	bl	8007534 <__d2b>
 8005f96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f9a:	ee08 0a10 	vmov	s16, r0
 8005f9e:	2d00      	cmp	r5, #0
 8005fa0:	f000 8084 	beq.w	80060ac <_dtoa_r+0x204>
 8005fa4:	ee19 3a90 	vmov	r3, s19
 8005fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fb0:	4656      	mov	r6, sl
 8005fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fbe:	4b74      	ldr	r3, [pc, #464]	; (8006190 <_dtoa_r+0x2e8>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa f98f 	bl	80002e8 <__aeabi_dsub>
 8005fca:	a365      	add	r3, pc, #404	; (adr r3, 8006160 <_dtoa_r+0x2b8>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa fb42 	bl	8000658 <__aeabi_dmul>
 8005fd4:	a364      	add	r3, pc, #400	; (adr r3, 8006168 <_dtoa_r+0x2c0>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f7fa f987 	bl	80002ec <__adddf3>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	460f      	mov	r7, r1
 8005fe4:	f7fa face 	bl	8000584 <__aeabi_i2d>
 8005fe8:	a361      	add	r3, pc, #388	; (adr r3, 8006170 <_dtoa_r+0x2c8>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fb33 	bl	8000658 <__aeabi_dmul>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa f977 	bl	80002ec <__adddf3>
 8005ffe:	4606      	mov	r6, r0
 8006000:	460f      	mov	r7, r1
 8006002:	f7fa fdd9 	bl	8000bb8 <__aeabi_d2iz>
 8006006:	2200      	movs	r2, #0
 8006008:	9000      	str	r0, [sp, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa fd94 	bl	8000b3c <__aeabi_dcmplt>
 8006014:	b150      	cbz	r0, 800602c <_dtoa_r+0x184>
 8006016:	9800      	ldr	r0, [sp, #0]
 8006018:	f7fa fab4 	bl	8000584 <__aeabi_i2d>
 800601c:	4632      	mov	r2, r6
 800601e:	463b      	mov	r3, r7
 8006020:	f7fa fd82 	bl	8000b28 <__aeabi_dcmpeq>
 8006024:	b910      	cbnz	r0, 800602c <_dtoa_r+0x184>
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	3b01      	subs	r3, #1
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	9b00      	ldr	r3, [sp, #0]
 800602e:	2b16      	cmp	r3, #22
 8006030:	d85a      	bhi.n	80060e8 <_dtoa_r+0x240>
 8006032:	9a00      	ldr	r2, [sp, #0]
 8006034:	4b57      	ldr	r3, [pc, #348]	; (8006194 <_dtoa_r+0x2ec>)
 8006036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	ec51 0b19 	vmov	r0, r1, d9
 8006042:	f7fa fd7b 	bl	8000b3c <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	d050      	beq.n	80060ec <_dtoa_r+0x244>
 800604a:	9b00      	ldr	r3, [sp, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	2300      	movs	r3, #0
 8006052:	930b      	str	r3, [sp, #44]	; 0x2c
 8006054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006056:	1b5d      	subs	r5, r3, r5
 8006058:	1e6b      	subs	r3, r5, #1
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	bf45      	ittet	mi
 800605e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006062:	9304      	strmi	r3, [sp, #16]
 8006064:	2300      	movpl	r3, #0
 8006066:	2300      	movmi	r3, #0
 8006068:	bf4c      	ite	mi
 800606a:	9305      	strmi	r3, [sp, #20]
 800606c:	9304      	strpl	r3, [sp, #16]
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db3d      	blt.n	80060f0 <_dtoa_r+0x248>
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	9a00      	ldr	r2, [sp, #0]
 8006078:	920a      	str	r2, [sp, #40]	; 0x28
 800607a:	4413      	add	r3, r2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	2300      	movs	r3, #0
 8006080:	9307      	str	r3, [sp, #28]
 8006082:	9b06      	ldr	r3, [sp, #24]
 8006084:	2b09      	cmp	r3, #9
 8006086:	f200 8089 	bhi.w	800619c <_dtoa_r+0x2f4>
 800608a:	2b05      	cmp	r3, #5
 800608c:	bfc4      	itt	gt
 800608e:	3b04      	subgt	r3, #4
 8006090:	9306      	strgt	r3, [sp, #24]
 8006092:	9b06      	ldr	r3, [sp, #24]
 8006094:	f1a3 0302 	sub.w	r3, r3, #2
 8006098:	bfcc      	ite	gt
 800609a:	2500      	movgt	r5, #0
 800609c:	2501      	movle	r5, #1
 800609e:	2b03      	cmp	r3, #3
 80060a0:	f200 8087 	bhi.w	80061b2 <_dtoa_r+0x30a>
 80060a4:	e8df f003 	tbb	[pc, r3]
 80060a8:	59383a2d 	.word	0x59383a2d
 80060ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060b0:	441d      	add	r5, r3
 80060b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	bfc1      	itttt	gt
 80060ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80060c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060ca:	bfda      	itte	le
 80060cc:	f1c3 0320 	rsble	r3, r3, #32
 80060d0:	fa06 f003 	lslle.w	r0, r6, r3
 80060d4:	4318      	orrgt	r0, r3
 80060d6:	f7fa fa45 	bl	8000564 <__aeabi_ui2d>
 80060da:	2301      	movs	r3, #1
 80060dc:	4606      	mov	r6, r0
 80060de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060e2:	3d01      	subs	r5, #1
 80060e4:	930e      	str	r3, [sp, #56]	; 0x38
 80060e6:	e76a      	b.n	8005fbe <_dtoa_r+0x116>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e7b2      	b.n	8006052 <_dtoa_r+0x1aa>
 80060ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80060ee:	e7b1      	b.n	8006054 <_dtoa_r+0x1ac>
 80060f0:	9b04      	ldr	r3, [sp, #16]
 80060f2:	9a00      	ldr	r2, [sp, #0]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	9304      	str	r3, [sp, #16]
 80060f8:	4253      	negs	r3, r2
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	2300      	movs	r3, #0
 80060fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006100:	e7bf      	b.n	8006082 <_dtoa_r+0x1da>
 8006102:	2300      	movs	r3, #0
 8006104:	9308      	str	r3, [sp, #32]
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	dc55      	bgt.n	80061b8 <_dtoa_r+0x310>
 800610c:	2301      	movs	r3, #1
 800610e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006112:	461a      	mov	r2, r3
 8006114:	9209      	str	r2, [sp, #36]	; 0x24
 8006116:	e00c      	b.n	8006132 <_dtoa_r+0x28a>
 8006118:	2301      	movs	r3, #1
 800611a:	e7f3      	b.n	8006104 <_dtoa_r+0x25c>
 800611c:	2300      	movs	r3, #0
 800611e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	9b00      	ldr	r3, [sp, #0]
 8006124:	4413      	add	r3, r2
 8006126:	9302      	str	r3, [sp, #8]
 8006128:	3301      	adds	r3, #1
 800612a:	2b01      	cmp	r3, #1
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	bfb8      	it	lt
 8006130:	2301      	movlt	r3, #1
 8006132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006134:	2200      	movs	r2, #0
 8006136:	6042      	str	r2, [r0, #4]
 8006138:	2204      	movs	r2, #4
 800613a:	f102 0614 	add.w	r6, r2, #20
 800613e:	429e      	cmp	r6, r3
 8006140:	6841      	ldr	r1, [r0, #4]
 8006142:	d93d      	bls.n	80061c0 <_dtoa_r+0x318>
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fecd 	bl	8006ee4 <_Balloc>
 800614a:	9001      	str	r0, [sp, #4]
 800614c:	2800      	cmp	r0, #0
 800614e:	d13b      	bne.n	80061c8 <_dtoa_r+0x320>
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <_dtoa_r+0x2f0>)
 8006152:	4602      	mov	r2, r0
 8006154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006158:	e6c0      	b.n	8005edc <_dtoa_r+0x34>
 800615a:	2301      	movs	r3, #1
 800615c:	e7df      	b.n	800611e <_dtoa_r+0x276>
 800615e:	bf00      	nop
 8006160:	636f4361 	.word	0x636f4361
 8006164:	3fd287a7 	.word	0x3fd287a7
 8006168:	8b60c8b3 	.word	0x8b60c8b3
 800616c:	3fc68a28 	.word	0x3fc68a28
 8006170:	509f79fb 	.word	0x509f79fb
 8006174:	3fd34413 	.word	0x3fd34413
 8006178:	080080b9 	.word	0x080080b9
 800617c:	080080d0 	.word	0x080080d0
 8006180:	7ff00000 	.word	0x7ff00000
 8006184:	080080b5 	.word	0x080080b5
 8006188:	080080ac 	.word	0x080080ac
 800618c:	08008089 	.word	0x08008089
 8006190:	3ff80000 	.word	0x3ff80000
 8006194:	08008220 	.word	0x08008220
 8006198:	0800812b 	.word	0x0800812b
 800619c:	2501      	movs	r5, #1
 800619e:	2300      	movs	r3, #0
 80061a0:	9306      	str	r3, [sp, #24]
 80061a2:	9508      	str	r5, [sp, #32]
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2312      	movs	r3, #18
 80061b0:	e7b0      	b.n	8006114 <_dtoa_r+0x26c>
 80061b2:	2301      	movs	r3, #1
 80061b4:	9308      	str	r3, [sp, #32]
 80061b6:	e7f5      	b.n	80061a4 <_dtoa_r+0x2fc>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061be:	e7b8      	b.n	8006132 <_dtoa_r+0x28a>
 80061c0:	3101      	adds	r1, #1
 80061c2:	6041      	str	r1, [r0, #4]
 80061c4:	0052      	lsls	r2, r2, #1
 80061c6:	e7b8      	b.n	800613a <_dtoa_r+0x292>
 80061c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ca:	9a01      	ldr	r2, [sp, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	2b0e      	cmp	r3, #14
 80061d2:	f200 809d 	bhi.w	8006310 <_dtoa_r+0x468>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	f000 809a 	beq.w	8006310 <_dtoa_r+0x468>
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dd32      	ble.n	8006248 <_dtoa_r+0x3a0>
 80061e2:	4ab7      	ldr	r2, [pc, #732]	; (80064c0 <_dtoa_r+0x618>)
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	05d8      	lsls	r0, r3, #23
 80061f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061f8:	d516      	bpl.n	8006228 <_dtoa_r+0x380>
 80061fa:	4bb2      	ldr	r3, [pc, #712]	; (80064c4 <_dtoa_r+0x61c>)
 80061fc:	ec51 0b19 	vmov	r0, r1, d9
 8006200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006204:	f7fa fb52 	bl	80008ac <__aeabi_ddiv>
 8006208:	f007 070f 	and.w	r7, r7, #15
 800620c:	4682      	mov	sl, r0
 800620e:	468b      	mov	fp, r1
 8006210:	2503      	movs	r5, #3
 8006212:	4eac      	ldr	r6, [pc, #688]	; (80064c4 <_dtoa_r+0x61c>)
 8006214:	b957      	cbnz	r7, 800622c <_dtoa_r+0x384>
 8006216:	4642      	mov	r2, r8
 8006218:	464b      	mov	r3, r9
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa fb45 	bl	80008ac <__aeabi_ddiv>
 8006222:	4682      	mov	sl, r0
 8006224:	468b      	mov	fp, r1
 8006226:	e028      	b.n	800627a <_dtoa_r+0x3d2>
 8006228:	2502      	movs	r5, #2
 800622a:	e7f2      	b.n	8006212 <_dtoa_r+0x36a>
 800622c:	07f9      	lsls	r1, r7, #31
 800622e:	d508      	bpl.n	8006242 <_dtoa_r+0x39a>
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006238:	f7fa fa0e 	bl	8000658 <__aeabi_dmul>
 800623c:	3501      	adds	r5, #1
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	107f      	asrs	r7, r7, #1
 8006244:	3608      	adds	r6, #8
 8006246:	e7e5      	b.n	8006214 <_dtoa_r+0x36c>
 8006248:	f000 809b 	beq.w	8006382 <_dtoa_r+0x4da>
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	4f9d      	ldr	r7, [pc, #628]	; (80064c4 <_dtoa_r+0x61c>)
 8006250:	425e      	negs	r6, r3
 8006252:	4b9b      	ldr	r3, [pc, #620]	; (80064c0 <_dtoa_r+0x618>)
 8006254:	f006 020f 	and.w	r2, r6, #15
 8006258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	ec51 0b19 	vmov	r0, r1, d9
 8006264:	f7fa f9f8 	bl	8000658 <__aeabi_dmul>
 8006268:	1136      	asrs	r6, r6, #4
 800626a:	4682      	mov	sl, r0
 800626c:	468b      	mov	fp, r1
 800626e:	2300      	movs	r3, #0
 8006270:	2502      	movs	r5, #2
 8006272:	2e00      	cmp	r6, #0
 8006274:	d17a      	bne.n	800636c <_dtoa_r+0x4c4>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1d3      	bne.n	8006222 <_dtoa_r+0x37a>
 800627a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8082 	beq.w	8006386 <_dtoa_r+0x4de>
 8006282:	4b91      	ldr	r3, [pc, #580]	; (80064c8 <_dtoa_r+0x620>)
 8006284:	2200      	movs	r2, #0
 8006286:	4650      	mov	r0, sl
 8006288:	4659      	mov	r1, fp
 800628a:	f7fa fc57 	bl	8000b3c <__aeabi_dcmplt>
 800628e:	2800      	cmp	r0, #0
 8006290:	d079      	beq.n	8006386 <_dtoa_r+0x4de>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d076      	beq.n	8006386 <_dtoa_r+0x4de>
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	dd36      	ble.n	800630c <_dtoa_r+0x464>
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	4650      	mov	r0, sl
 80062a2:	4659      	mov	r1, fp
 80062a4:	1e5f      	subs	r7, r3, #1
 80062a6:	2200      	movs	r2, #0
 80062a8:	4b88      	ldr	r3, [pc, #544]	; (80064cc <_dtoa_r+0x624>)
 80062aa:	f7fa f9d5 	bl	8000658 <__aeabi_dmul>
 80062ae:	9e02      	ldr	r6, [sp, #8]
 80062b0:	4682      	mov	sl, r0
 80062b2:	468b      	mov	fp, r1
 80062b4:	3501      	adds	r5, #1
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7fa f964 	bl	8000584 <__aeabi_i2d>
 80062bc:	4652      	mov	r2, sl
 80062be:	465b      	mov	r3, fp
 80062c0:	f7fa f9ca 	bl	8000658 <__aeabi_dmul>
 80062c4:	4b82      	ldr	r3, [pc, #520]	; (80064d0 <_dtoa_r+0x628>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	f7fa f810 	bl	80002ec <__adddf3>
 80062cc:	46d0      	mov	r8, sl
 80062ce:	46d9      	mov	r9, fp
 80062d0:	4682      	mov	sl, r0
 80062d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d158      	bne.n	800638c <_dtoa_r+0x4e4>
 80062da:	4b7e      	ldr	r3, [pc, #504]	; (80064d4 <_dtoa_r+0x62c>)
 80062dc:	2200      	movs	r2, #0
 80062de:	4640      	mov	r0, r8
 80062e0:	4649      	mov	r1, r9
 80062e2:	f7fa f801 	bl	80002e8 <__aeabi_dsub>
 80062e6:	4652      	mov	r2, sl
 80062e8:	465b      	mov	r3, fp
 80062ea:	4680      	mov	r8, r0
 80062ec:	4689      	mov	r9, r1
 80062ee:	f7fa fc43 	bl	8000b78 <__aeabi_dcmpgt>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f040 8295 	bne.w	8006822 <_dtoa_r+0x97a>
 80062f8:	4652      	mov	r2, sl
 80062fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7fa fc1b 	bl	8000b3c <__aeabi_dcmplt>
 8006306:	2800      	cmp	r0, #0
 8006308:	f040 8289 	bne.w	800681e <_dtoa_r+0x976>
 800630c:	ec5b ab19 	vmov	sl, fp, d9
 8006310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006312:	2b00      	cmp	r3, #0
 8006314:	f2c0 8148 	blt.w	80065a8 <_dtoa_r+0x700>
 8006318:	9a00      	ldr	r2, [sp, #0]
 800631a:	2a0e      	cmp	r2, #14
 800631c:	f300 8144 	bgt.w	80065a8 <_dtoa_r+0x700>
 8006320:	4b67      	ldr	r3, [pc, #412]	; (80064c0 <_dtoa_r+0x618>)
 8006322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006326:	e9d3 8900 	ldrd	r8, r9, [r3]
 800632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	f280 80d5 	bge.w	80064dc <_dtoa_r+0x634>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f300 80d1 	bgt.w	80064dc <_dtoa_r+0x634>
 800633a:	f040 826f 	bne.w	800681c <_dtoa_r+0x974>
 800633e:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <_dtoa_r+0x62c>)
 8006340:	2200      	movs	r2, #0
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	f7fa f987 	bl	8000658 <__aeabi_dmul>
 800634a:	4652      	mov	r2, sl
 800634c:	465b      	mov	r3, fp
 800634e:	f7fa fc09 	bl	8000b64 <__aeabi_dcmpge>
 8006352:	9e03      	ldr	r6, [sp, #12]
 8006354:	4637      	mov	r7, r6
 8006356:	2800      	cmp	r0, #0
 8006358:	f040 8245 	bne.w	80067e6 <_dtoa_r+0x93e>
 800635c:	9d01      	ldr	r5, [sp, #4]
 800635e:	2331      	movs	r3, #49	; 0x31
 8006360:	f805 3b01 	strb.w	r3, [r5], #1
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	e240      	b.n	80067ee <_dtoa_r+0x946>
 800636c:	07f2      	lsls	r2, r6, #31
 800636e:	d505      	bpl.n	800637c <_dtoa_r+0x4d4>
 8006370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006374:	f7fa f970 	bl	8000658 <__aeabi_dmul>
 8006378:	3501      	adds	r5, #1
 800637a:	2301      	movs	r3, #1
 800637c:	1076      	asrs	r6, r6, #1
 800637e:	3708      	adds	r7, #8
 8006380:	e777      	b.n	8006272 <_dtoa_r+0x3ca>
 8006382:	2502      	movs	r5, #2
 8006384:	e779      	b.n	800627a <_dtoa_r+0x3d2>
 8006386:	9f00      	ldr	r7, [sp, #0]
 8006388:	9e03      	ldr	r6, [sp, #12]
 800638a:	e794      	b.n	80062b6 <_dtoa_r+0x40e>
 800638c:	9901      	ldr	r1, [sp, #4]
 800638e:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <_dtoa_r+0x618>)
 8006390:	4431      	add	r1, r6
 8006392:	910d      	str	r1, [sp, #52]	; 0x34
 8006394:	9908      	ldr	r1, [sp, #32]
 8006396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800639a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800639e:	2900      	cmp	r1, #0
 80063a0:	d043      	beq.n	800642a <_dtoa_r+0x582>
 80063a2:	494d      	ldr	r1, [pc, #308]	; (80064d8 <_dtoa_r+0x630>)
 80063a4:	2000      	movs	r0, #0
 80063a6:	f7fa fa81 	bl	80008ac <__aeabi_ddiv>
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	f7f9 ff9b 	bl	80002e8 <__aeabi_dsub>
 80063b2:	9d01      	ldr	r5, [sp, #4]
 80063b4:	4682      	mov	sl, r0
 80063b6:	468b      	mov	fp, r1
 80063b8:	4649      	mov	r1, r9
 80063ba:	4640      	mov	r0, r8
 80063bc:	f7fa fbfc 	bl	8000bb8 <__aeabi_d2iz>
 80063c0:	4606      	mov	r6, r0
 80063c2:	f7fa f8df 	bl	8000584 <__aeabi_i2d>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7f9 ff8b 	bl	80002e8 <__aeabi_dsub>
 80063d2:	3630      	adds	r6, #48	; 0x30
 80063d4:	f805 6b01 	strb.w	r6, [r5], #1
 80063d8:	4652      	mov	r2, sl
 80063da:	465b      	mov	r3, fp
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	f7fa fbac 	bl	8000b3c <__aeabi_dcmplt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d163      	bne.n	80064b0 <_dtoa_r+0x608>
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	4936      	ldr	r1, [pc, #216]	; (80064c8 <_dtoa_r+0x620>)
 80063ee:	2000      	movs	r0, #0
 80063f0:	f7f9 ff7a 	bl	80002e8 <__aeabi_dsub>
 80063f4:	4652      	mov	r2, sl
 80063f6:	465b      	mov	r3, fp
 80063f8:	f7fa fba0 	bl	8000b3c <__aeabi_dcmplt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f040 80b5 	bne.w	800656c <_dtoa_r+0x6c4>
 8006402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006404:	429d      	cmp	r5, r3
 8006406:	d081      	beq.n	800630c <_dtoa_r+0x464>
 8006408:	4b30      	ldr	r3, [pc, #192]	; (80064cc <_dtoa_r+0x624>)
 800640a:	2200      	movs	r2, #0
 800640c:	4650      	mov	r0, sl
 800640e:	4659      	mov	r1, fp
 8006410:	f7fa f922 	bl	8000658 <__aeabi_dmul>
 8006414:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <_dtoa_r+0x624>)
 8006416:	4682      	mov	sl, r0
 8006418:	468b      	mov	fp, r1
 800641a:	4640      	mov	r0, r8
 800641c:	4649      	mov	r1, r9
 800641e:	2200      	movs	r2, #0
 8006420:	f7fa f91a 	bl	8000658 <__aeabi_dmul>
 8006424:	4680      	mov	r8, r0
 8006426:	4689      	mov	r9, r1
 8006428:	e7c6      	b.n	80063b8 <_dtoa_r+0x510>
 800642a:	4650      	mov	r0, sl
 800642c:	4659      	mov	r1, fp
 800642e:	f7fa f913 	bl	8000658 <__aeabi_dmul>
 8006432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006434:	9d01      	ldr	r5, [sp, #4]
 8006436:	930f      	str	r3, [sp, #60]	; 0x3c
 8006438:	4682      	mov	sl, r0
 800643a:	468b      	mov	fp, r1
 800643c:	4649      	mov	r1, r9
 800643e:	4640      	mov	r0, r8
 8006440:	f7fa fbba 	bl	8000bb8 <__aeabi_d2iz>
 8006444:	4606      	mov	r6, r0
 8006446:	f7fa f89d 	bl	8000584 <__aeabi_i2d>
 800644a:	3630      	adds	r6, #48	; 0x30
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7f9 ff48 	bl	80002e8 <__aeabi_dsub>
 8006458:	f805 6b01 	strb.w	r6, [r5], #1
 800645c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800645e:	429d      	cmp	r5, r3
 8006460:	4680      	mov	r8, r0
 8006462:	4689      	mov	r9, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	d124      	bne.n	80064b4 <_dtoa_r+0x60c>
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <_dtoa_r+0x630>)
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	f7f9 ff3c 	bl	80002ec <__adddf3>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa fb7c 	bl	8000b78 <__aeabi_dcmpgt>
 8006480:	2800      	cmp	r0, #0
 8006482:	d173      	bne.n	800656c <_dtoa_r+0x6c4>
 8006484:	4652      	mov	r2, sl
 8006486:	465b      	mov	r3, fp
 8006488:	4913      	ldr	r1, [pc, #76]	; (80064d8 <_dtoa_r+0x630>)
 800648a:	2000      	movs	r0, #0
 800648c:	f7f9 ff2c 	bl	80002e8 <__aeabi_dsub>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4640      	mov	r0, r8
 8006496:	4649      	mov	r1, r9
 8006498:	f7fa fb50 	bl	8000b3c <__aeabi_dcmplt>
 800649c:	2800      	cmp	r0, #0
 800649e:	f43f af35 	beq.w	800630c <_dtoa_r+0x464>
 80064a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064a4:	1e6b      	subs	r3, r5, #1
 80064a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80064a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	d0f8      	beq.n	80064a2 <_dtoa_r+0x5fa>
 80064b0:	9700      	str	r7, [sp, #0]
 80064b2:	e049      	b.n	8006548 <_dtoa_r+0x6a0>
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <_dtoa_r+0x624>)
 80064b6:	f7fa f8cf 	bl	8000658 <__aeabi_dmul>
 80064ba:	4680      	mov	r8, r0
 80064bc:	4689      	mov	r9, r1
 80064be:	e7bd      	b.n	800643c <_dtoa_r+0x594>
 80064c0:	08008220 	.word	0x08008220
 80064c4:	080081f8 	.word	0x080081f8
 80064c8:	3ff00000 	.word	0x3ff00000
 80064cc:	40240000 	.word	0x40240000
 80064d0:	401c0000 	.word	0x401c0000
 80064d4:	40140000 	.word	0x40140000
 80064d8:	3fe00000 	.word	0x3fe00000
 80064dc:	9d01      	ldr	r5, [sp, #4]
 80064de:	4656      	mov	r6, sl
 80064e0:	465f      	mov	r7, fp
 80064e2:	4642      	mov	r2, r8
 80064e4:	464b      	mov	r3, r9
 80064e6:	4630      	mov	r0, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7fa f9df 	bl	80008ac <__aeabi_ddiv>
 80064ee:	f7fa fb63 	bl	8000bb8 <__aeabi_d2iz>
 80064f2:	4682      	mov	sl, r0
 80064f4:	f7fa f846 	bl	8000584 <__aeabi_i2d>
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	f7fa f8ac 	bl	8000658 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800650c:	f7f9 feec 	bl	80002e8 <__aeabi_dsub>
 8006510:	f805 6b01 	strb.w	r6, [r5], #1
 8006514:	9e01      	ldr	r6, [sp, #4]
 8006516:	9f03      	ldr	r7, [sp, #12]
 8006518:	1bae      	subs	r6, r5, r6
 800651a:	42b7      	cmp	r7, r6
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	d135      	bne.n	800658e <_dtoa_r+0x6e6>
 8006522:	f7f9 fee3 	bl	80002ec <__adddf3>
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	4606      	mov	r6, r0
 800652c:	460f      	mov	r7, r1
 800652e:	f7fa fb23 	bl	8000b78 <__aeabi_dcmpgt>
 8006532:	b9d0      	cbnz	r0, 800656a <_dtoa_r+0x6c2>
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa faf4 	bl	8000b28 <__aeabi_dcmpeq>
 8006540:	b110      	cbz	r0, 8006548 <_dtoa_r+0x6a0>
 8006542:	f01a 0f01 	tst.w	sl, #1
 8006546:	d110      	bne.n	800656a <_dtoa_r+0x6c2>
 8006548:	4620      	mov	r0, r4
 800654a:	ee18 1a10 	vmov	r1, s16
 800654e:	f000 fd09 	bl	8006f64 <_Bfree>
 8006552:	2300      	movs	r3, #0
 8006554:	9800      	ldr	r0, [sp, #0]
 8006556:	702b      	strb	r3, [r5, #0]
 8006558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800655a:	3001      	adds	r0, #1
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006560:	2b00      	cmp	r3, #0
 8006562:	f43f acf1 	beq.w	8005f48 <_dtoa_r+0xa0>
 8006566:	601d      	str	r5, [r3, #0]
 8006568:	e4ee      	b.n	8005f48 <_dtoa_r+0xa0>
 800656a:	9f00      	ldr	r7, [sp, #0]
 800656c:	462b      	mov	r3, r5
 800656e:	461d      	mov	r5, r3
 8006570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006574:	2a39      	cmp	r2, #57	; 0x39
 8006576:	d106      	bne.n	8006586 <_dtoa_r+0x6de>
 8006578:	9a01      	ldr	r2, [sp, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d1f7      	bne.n	800656e <_dtoa_r+0x6c6>
 800657e:	9901      	ldr	r1, [sp, #4]
 8006580:	2230      	movs	r2, #48	; 0x30
 8006582:	3701      	adds	r7, #1
 8006584:	700a      	strb	r2, [r1, #0]
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	3201      	adds	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e790      	b.n	80064b0 <_dtoa_r+0x608>
 800658e:	4ba6      	ldr	r3, [pc, #664]	; (8006828 <_dtoa_r+0x980>)
 8006590:	2200      	movs	r2, #0
 8006592:	f7fa f861 	bl	8000658 <__aeabi_dmul>
 8006596:	2200      	movs	r2, #0
 8006598:	2300      	movs	r3, #0
 800659a:	4606      	mov	r6, r0
 800659c:	460f      	mov	r7, r1
 800659e:	f7fa fac3 	bl	8000b28 <__aeabi_dcmpeq>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d09d      	beq.n	80064e2 <_dtoa_r+0x63a>
 80065a6:	e7cf      	b.n	8006548 <_dtoa_r+0x6a0>
 80065a8:	9a08      	ldr	r2, [sp, #32]
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	f000 80d7 	beq.w	800675e <_dtoa_r+0x8b6>
 80065b0:	9a06      	ldr	r2, [sp, #24]
 80065b2:	2a01      	cmp	r2, #1
 80065b4:	f300 80ba 	bgt.w	800672c <_dtoa_r+0x884>
 80065b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	f000 80b2 	beq.w	8006724 <_dtoa_r+0x87c>
 80065c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065c4:	9e07      	ldr	r6, [sp, #28]
 80065c6:	9d04      	ldr	r5, [sp, #16]
 80065c8:	9a04      	ldr	r2, [sp, #16]
 80065ca:	441a      	add	r2, r3
 80065cc:	9204      	str	r2, [sp, #16]
 80065ce:	9a05      	ldr	r2, [sp, #20]
 80065d0:	2101      	movs	r1, #1
 80065d2:	441a      	add	r2, r3
 80065d4:	4620      	mov	r0, r4
 80065d6:	9205      	str	r2, [sp, #20]
 80065d8:	f000 fd7c 	bl	80070d4 <__i2b>
 80065dc:	4607      	mov	r7, r0
 80065de:	2d00      	cmp	r5, #0
 80065e0:	dd0c      	ble.n	80065fc <_dtoa_r+0x754>
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dd09      	ble.n	80065fc <_dtoa_r+0x754>
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	bfa8      	it	ge
 80065ee:	462b      	movge	r3, r5
 80065f0:	1ad2      	subs	r2, r2, r3
 80065f2:	9204      	str	r2, [sp, #16]
 80065f4:	9a05      	ldr	r2, [sp, #20]
 80065f6:	1aed      	subs	r5, r5, r3
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	b31b      	cbz	r3, 8006648 <_dtoa_r+0x7a0>
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80af 	beq.w	8006766 <_dtoa_r+0x8be>
 8006608:	2e00      	cmp	r6, #0
 800660a:	dd13      	ble.n	8006634 <_dtoa_r+0x78c>
 800660c:	4639      	mov	r1, r7
 800660e:	4632      	mov	r2, r6
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fe1f 	bl	8007254 <__pow5mult>
 8006616:	ee18 2a10 	vmov	r2, s16
 800661a:	4601      	mov	r1, r0
 800661c:	4607      	mov	r7, r0
 800661e:	4620      	mov	r0, r4
 8006620:	f000 fd6e 	bl	8007100 <__multiply>
 8006624:	ee18 1a10 	vmov	r1, s16
 8006628:	4680      	mov	r8, r0
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fc9a 	bl	8006f64 <_Bfree>
 8006630:	ee08 8a10 	vmov	s16, r8
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	1b9a      	subs	r2, r3, r6
 8006638:	d006      	beq.n	8006648 <_dtoa_r+0x7a0>
 800663a:	ee18 1a10 	vmov	r1, s16
 800663e:	4620      	mov	r0, r4
 8006640:	f000 fe08 	bl	8007254 <__pow5mult>
 8006644:	ee08 0a10 	vmov	s16, r0
 8006648:	2101      	movs	r1, #1
 800664a:	4620      	mov	r0, r4
 800664c:	f000 fd42 	bl	80070d4 <__i2b>
 8006650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	4606      	mov	r6, r0
 8006656:	f340 8088 	ble.w	800676a <_dtoa_r+0x8c2>
 800665a:	461a      	mov	r2, r3
 800665c:	4601      	mov	r1, r0
 800665e:	4620      	mov	r0, r4
 8006660:	f000 fdf8 	bl	8007254 <__pow5mult>
 8006664:	9b06      	ldr	r3, [sp, #24]
 8006666:	2b01      	cmp	r3, #1
 8006668:	4606      	mov	r6, r0
 800666a:	f340 8081 	ble.w	8006770 <_dtoa_r+0x8c8>
 800666e:	f04f 0800 	mov.w	r8, #0
 8006672:	6933      	ldr	r3, [r6, #16]
 8006674:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006678:	6918      	ldr	r0, [r3, #16]
 800667a:	f000 fcdb 	bl	8007034 <__hi0bits>
 800667e:	f1c0 0020 	rsb	r0, r0, #32
 8006682:	9b05      	ldr	r3, [sp, #20]
 8006684:	4418      	add	r0, r3
 8006686:	f010 001f 	ands.w	r0, r0, #31
 800668a:	f000 8092 	beq.w	80067b2 <_dtoa_r+0x90a>
 800668e:	f1c0 0320 	rsb	r3, r0, #32
 8006692:	2b04      	cmp	r3, #4
 8006694:	f340 808a 	ble.w	80067ac <_dtoa_r+0x904>
 8006698:	f1c0 001c 	rsb	r0, r0, #28
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	4403      	add	r3, r0
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	9b05      	ldr	r3, [sp, #20]
 80066a4:	4403      	add	r3, r0
 80066a6:	4405      	add	r5, r0
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	9b04      	ldr	r3, [sp, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dd07      	ble.n	80066c0 <_dtoa_r+0x818>
 80066b0:	ee18 1a10 	vmov	r1, s16
 80066b4:	461a      	mov	r2, r3
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fe26 	bl	8007308 <__lshift>
 80066bc:	ee08 0a10 	vmov	s16, r0
 80066c0:	9b05      	ldr	r3, [sp, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd05      	ble.n	80066d2 <_dtoa_r+0x82a>
 80066c6:	4631      	mov	r1, r6
 80066c8:	461a      	mov	r2, r3
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fe1c 	bl	8007308 <__lshift>
 80066d0:	4606      	mov	r6, r0
 80066d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d06e      	beq.n	80067b6 <_dtoa_r+0x90e>
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	4631      	mov	r1, r6
 80066de:	f000 fe83 	bl	80073e8 <__mcmp>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	da67      	bge.n	80067b6 <_dtoa_r+0x90e>
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	ee18 1a10 	vmov	r1, s16
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	220a      	movs	r2, #10
 80066f2:	2300      	movs	r3, #0
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fc57 	bl	8006fa8 <__multadd>
 80066fa:	9b08      	ldr	r3, [sp, #32]
 80066fc:	ee08 0a10 	vmov	s16, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 81b1 	beq.w	8006a68 <_dtoa_r+0xbc0>
 8006706:	2300      	movs	r3, #0
 8006708:	4639      	mov	r1, r7
 800670a:	220a      	movs	r2, #10
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fc4b 	bl	8006fa8 <__multadd>
 8006712:	9b02      	ldr	r3, [sp, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	4607      	mov	r7, r0
 8006718:	f300 808e 	bgt.w	8006838 <_dtoa_r+0x990>
 800671c:	9b06      	ldr	r3, [sp, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	dc51      	bgt.n	80067c6 <_dtoa_r+0x91e>
 8006722:	e089      	b.n	8006838 <_dtoa_r+0x990>
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800672a:	e74b      	b.n	80065c4 <_dtoa_r+0x71c>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	1e5e      	subs	r6, r3, #1
 8006730:	9b07      	ldr	r3, [sp, #28]
 8006732:	42b3      	cmp	r3, r6
 8006734:	bfbf      	itttt	lt
 8006736:	9b07      	ldrlt	r3, [sp, #28]
 8006738:	9607      	strlt	r6, [sp, #28]
 800673a:	1af2      	sublt	r2, r6, r3
 800673c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800673e:	bfb6      	itet	lt
 8006740:	189b      	addlt	r3, r3, r2
 8006742:	1b9e      	subge	r6, r3, r6
 8006744:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	bfb8      	it	lt
 800674a:	2600      	movlt	r6, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfb7      	itett	lt
 8006750:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006754:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006758:	1a9d      	sublt	r5, r3, r2
 800675a:	2300      	movlt	r3, #0
 800675c:	e734      	b.n	80065c8 <_dtoa_r+0x720>
 800675e:	9e07      	ldr	r6, [sp, #28]
 8006760:	9d04      	ldr	r5, [sp, #16]
 8006762:	9f08      	ldr	r7, [sp, #32]
 8006764:	e73b      	b.n	80065de <_dtoa_r+0x736>
 8006766:	9a07      	ldr	r2, [sp, #28]
 8006768:	e767      	b.n	800663a <_dtoa_r+0x792>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	2b01      	cmp	r3, #1
 800676e:	dc18      	bgt.n	80067a2 <_dtoa_r+0x8fa>
 8006770:	f1ba 0f00 	cmp.w	sl, #0
 8006774:	d115      	bne.n	80067a2 <_dtoa_r+0x8fa>
 8006776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800677a:	b993      	cbnz	r3, 80067a2 <_dtoa_r+0x8fa>
 800677c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006780:	0d1b      	lsrs	r3, r3, #20
 8006782:	051b      	lsls	r3, r3, #20
 8006784:	b183      	cbz	r3, 80067a8 <_dtoa_r+0x900>
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	3301      	adds	r3, #1
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	3301      	adds	r3, #1
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	f04f 0801 	mov.w	r8, #1
 8006796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	f47f af6a 	bne.w	8006672 <_dtoa_r+0x7ca>
 800679e:	2001      	movs	r0, #1
 80067a0:	e76f      	b.n	8006682 <_dtoa_r+0x7da>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	e7f6      	b.n	8006796 <_dtoa_r+0x8ee>
 80067a8:	4698      	mov	r8, r3
 80067aa:	e7f4      	b.n	8006796 <_dtoa_r+0x8ee>
 80067ac:	f43f af7d 	beq.w	80066aa <_dtoa_r+0x802>
 80067b0:	4618      	mov	r0, r3
 80067b2:	301c      	adds	r0, #28
 80067b4:	e772      	b.n	800669c <_dtoa_r+0x7f4>
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dc37      	bgt.n	800682c <_dtoa_r+0x984>
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	dd34      	ble.n	800682c <_dtoa_r+0x984>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	9302      	str	r3, [sp, #8]
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	b96b      	cbnz	r3, 80067e6 <_dtoa_r+0x93e>
 80067ca:	4631      	mov	r1, r6
 80067cc:	2205      	movs	r2, #5
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fbea 	bl	8006fa8 <__multadd>
 80067d4:	4601      	mov	r1, r0
 80067d6:	4606      	mov	r6, r0
 80067d8:	ee18 0a10 	vmov	r0, s16
 80067dc:	f000 fe04 	bl	80073e8 <__mcmp>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f73f adbb 	bgt.w	800635c <_dtoa_r+0x4b4>
 80067e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e8:	9d01      	ldr	r5, [sp, #4]
 80067ea:	43db      	mvns	r3, r3
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	4631      	mov	r1, r6
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fbb5 	bl	8006f64 <_Bfree>
 80067fa:	2f00      	cmp	r7, #0
 80067fc:	f43f aea4 	beq.w	8006548 <_dtoa_r+0x6a0>
 8006800:	f1b8 0f00 	cmp.w	r8, #0
 8006804:	d005      	beq.n	8006812 <_dtoa_r+0x96a>
 8006806:	45b8      	cmp	r8, r7
 8006808:	d003      	beq.n	8006812 <_dtoa_r+0x96a>
 800680a:	4641      	mov	r1, r8
 800680c:	4620      	mov	r0, r4
 800680e:	f000 fba9 	bl	8006f64 <_Bfree>
 8006812:	4639      	mov	r1, r7
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fba5 	bl	8006f64 <_Bfree>
 800681a:	e695      	b.n	8006548 <_dtoa_r+0x6a0>
 800681c:	2600      	movs	r6, #0
 800681e:	4637      	mov	r7, r6
 8006820:	e7e1      	b.n	80067e6 <_dtoa_r+0x93e>
 8006822:	9700      	str	r7, [sp, #0]
 8006824:	4637      	mov	r7, r6
 8006826:	e599      	b.n	800635c <_dtoa_r+0x4b4>
 8006828:	40240000 	.word	0x40240000
 800682c:	9b08      	ldr	r3, [sp, #32]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80ca 	beq.w	80069c8 <_dtoa_r+0xb20>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	9302      	str	r3, [sp, #8]
 8006838:	2d00      	cmp	r5, #0
 800683a:	dd05      	ble.n	8006848 <_dtoa_r+0x9a0>
 800683c:	4639      	mov	r1, r7
 800683e:	462a      	mov	r2, r5
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fd61 	bl	8007308 <__lshift>
 8006846:	4607      	mov	r7, r0
 8006848:	f1b8 0f00 	cmp.w	r8, #0
 800684c:	d05b      	beq.n	8006906 <_dtoa_r+0xa5e>
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fb47 	bl	8006ee4 <_Balloc>
 8006856:	4605      	mov	r5, r0
 8006858:	b928      	cbnz	r0, 8006866 <_dtoa_r+0x9be>
 800685a:	4b87      	ldr	r3, [pc, #540]	; (8006a78 <_dtoa_r+0xbd0>)
 800685c:	4602      	mov	r2, r0
 800685e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006862:	f7ff bb3b 	b.w	8005edc <_dtoa_r+0x34>
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	3202      	adds	r2, #2
 800686a:	0092      	lsls	r2, r2, #2
 800686c:	f107 010c 	add.w	r1, r7, #12
 8006870:	300c      	adds	r0, #12
 8006872:	f7fe fbcf 	bl	8005014 <memcpy>
 8006876:	2201      	movs	r2, #1
 8006878:	4629      	mov	r1, r5
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fd44 	bl	8007308 <__lshift>
 8006880:	9b01      	ldr	r3, [sp, #4]
 8006882:	f103 0901 	add.w	r9, r3, #1
 8006886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800688a:	4413      	add	r3, r2
 800688c:	9305      	str	r3, [sp, #20]
 800688e:	f00a 0301 	and.w	r3, sl, #1
 8006892:	46b8      	mov	r8, r7
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	4607      	mov	r7, r0
 8006898:	4631      	mov	r1, r6
 800689a:	ee18 0a10 	vmov	r0, s16
 800689e:	f7ff fa77 	bl	8005d90 <quorem>
 80068a2:	4641      	mov	r1, r8
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068aa:	ee18 0a10 	vmov	r0, s16
 80068ae:	f000 fd9b 	bl	80073e8 <__mcmp>
 80068b2:	463a      	mov	r2, r7
 80068b4:	9003      	str	r0, [sp, #12]
 80068b6:	4631      	mov	r1, r6
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fdb1 	bl	8007420 <__mdiff>
 80068be:	68c2      	ldr	r2, [r0, #12]
 80068c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80068c4:	4605      	mov	r5, r0
 80068c6:	bb02      	cbnz	r2, 800690a <_dtoa_r+0xa62>
 80068c8:	4601      	mov	r1, r0
 80068ca:	ee18 0a10 	vmov	r0, s16
 80068ce:	f000 fd8b 	bl	80073e8 <__mcmp>
 80068d2:	4602      	mov	r2, r0
 80068d4:	4629      	mov	r1, r5
 80068d6:	4620      	mov	r0, r4
 80068d8:	9207      	str	r2, [sp, #28]
 80068da:	f000 fb43 	bl	8006f64 <_Bfree>
 80068de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068e2:	ea43 0102 	orr.w	r1, r3, r2
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	430b      	orrs	r3, r1
 80068ea:	464d      	mov	r5, r9
 80068ec:	d10f      	bne.n	800690e <_dtoa_r+0xa66>
 80068ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068f2:	d02a      	beq.n	800694a <_dtoa_r+0xaa2>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dd02      	ble.n	8006900 <_dtoa_r+0xa58>
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006900:	f88b a000 	strb.w	sl, [fp]
 8006904:	e775      	b.n	80067f2 <_dtoa_r+0x94a>
 8006906:	4638      	mov	r0, r7
 8006908:	e7ba      	b.n	8006880 <_dtoa_r+0x9d8>
 800690a:	2201      	movs	r2, #1
 800690c:	e7e2      	b.n	80068d4 <_dtoa_r+0xa2c>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	db04      	blt.n	800691e <_dtoa_r+0xa76>
 8006914:	9906      	ldr	r1, [sp, #24]
 8006916:	430b      	orrs	r3, r1
 8006918:	9904      	ldr	r1, [sp, #16]
 800691a:	430b      	orrs	r3, r1
 800691c:	d122      	bne.n	8006964 <_dtoa_r+0xabc>
 800691e:	2a00      	cmp	r2, #0
 8006920:	ddee      	ble.n	8006900 <_dtoa_r+0xa58>
 8006922:	ee18 1a10 	vmov	r1, s16
 8006926:	2201      	movs	r2, #1
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fced 	bl	8007308 <__lshift>
 800692e:	4631      	mov	r1, r6
 8006930:	ee08 0a10 	vmov	s16, r0
 8006934:	f000 fd58 	bl	80073e8 <__mcmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	dc03      	bgt.n	8006944 <_dtoa_r+0xa9c>
 800693c:	d1e0      	bne.n	8006900 <_dtoa_r+0xa58>
 800693e:	f01a 0f01 	tst.w	sl, #1
 8006942:	d0dd      	beq.n	8006900 <_dtoa_r+0xa58>
 8006944:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006948:	d1d7      	bne.n	80068fa <_dtoa_r+0xa52>
 800694a:	2339      	movs	r3, #57	; 0x39
 800694c:	f88b 3000 	strb.w	r3, [fp]
 8006950:	462b      	mov	r3, r5
 8006952:	461d      	mov	r5, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800695a:	2a39      	cmp	r2, #57	; 0x39
 800695c:	d071      	beq.n	8006a42 <_dtoa_r+0xb9a>
 800695e:	3201      	adds	r2, #1
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e746      	b.n	80067f2 <_dtoa_r+0x94a>
 8006964:	2a00      	cmp	r2, #0
 8006966:	dd07      	ble.n	8006978 <_dtoa_r+0xad0>
 8006968:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800696c:	d0ed      	beq.n	800694a <_dtoa_r+0xaa2>
 800696e:	f10a 0301 	add.w	r3, sl, #1
 8006972:	f88b 3000 	strb.w	r3, [fp]
 8006976:	e73c      	b.n	80067f2 <_dtoa_r+0x94a>
 8006978:	9b05      	ldr	r3, [sp, #20]
 800697a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800697e:	4599      	cmp	r9, r3
 8006980:	d047      	beq.n	8006a12 <_dtoa_r+0xb6a>
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	2300      	movs	r3, #0
 8006988:	220a      	movs	r2, #10
 800698a:	4620      	mov	r0, r4
 800698c:	f000 fb0c 	bl	8006fa8 <__multadd>
 8006990:	45b8      	cmp	r8, r7
 8006992:	ee08 0a10 	vmov	s16, r0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	f04f 020a 	mov.w	r2, #10
 800699e:	4641      	mov	r1, r8
 80069a0:	4620      	mov	r0, r4
 80069a2:	d106      	bne.n	80069b2 <_dtoa_r+0xb0a>
 80069a4:	f000 fb00 	bl	8006fa8 <__multadd>
 80069a8:	4680      	mov	r8, r0
 80069aa:	4607      	mov	r7, r0
 80069ac:	f109 0901 	add.w	r9, r9, #1
 80069b0:	e772      	b.n	8006898 <_dtoa_r+0x9f0>
 80069b2:	f000 faf9 	bl	8006fa8 <__multadd>
 80069b6:	4639      	mov	r1, r7
 80069b8:	4680      	mov	r8, r0
 80069ba:	2300      	movs	r3, #0
 80069bc:	220a      	movs	r2, #10
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 faf2 	bl	8006fa8 <__multadd>
 80069c4:	4607      	mov	r7, r0
 80069c6:	e7f1      	b.n	80069ac <_dtoa_r+0xb04>
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	9d01      	ldr	r5, [sp, #4]
 80069ce:	ee18 0a10 	vmov	r0, s16
 80069d2:	4631      	mov	r1, r6
 80069d4:	f7ff f9dc 	bl	8005d90 <quorem>
 80069d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	f805 ab01 	strb.w	sl, [r5], #1
 80069e2:	1aea      	subs	r2, r5, r3
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	dd09      	ble.n	80069fe <_dtoa_r+0xb56>
 80069ea:	ee18 1a10 	vmov	r1, s16
 80069ee:	2300      	movs	r3, #0
 80069f0:	220a      	movs	r2, #10
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 fad8 	bl	8006fa8 <__multadd>
 80069f8:	ee08 0a10 	vmov	s16, r0
 80069fc:	e7e7      	b.n	80069ce <_dtoa_r+0xb26>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfc8      	it	gt
 8006a04:	461d      	movgt	r5, r3
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	bfd8      	it	le
 8006a0a:	2501      	movle	r5, #1
 8006a0c:	441d      	add	r5, r3
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	ee18 1a10 	vmov	r1, s16
 8006a16:	2201      	movs	r2, #1
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fc75 	bl	8007308 <__lshift>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	ee08 0a10 	vmov	s16, r0
 8006a24:	f000 fce0 	bl	80073e8 <__mcmp>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	dc91      	bgt.n	8006950 <_dtoa_r+0xaa8>
 8006a2c:	d102      	bne.n	8006a34 <_dtoa_r+0xb8c>
 8006a2e:	f01a 0f01 	tst.w	sl, #1
 8006a32:	d18d      	bne.n	8006950 <_dtoa_r+0xaa8>
 8006a34:	462b      	mov	r3, r5
 8006a36:	461d      	mov	r5, r3
 8006a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3c:	2a30      	cmp	r2, #48	; 0x30
 8006a3e:	d0fa      	beq.n	8006a36 <_dtoa_r+0xb8e>
 8006a40:	e6d7      	b.n	80067f2 <_dtoa_r+0x94a>
 8006a42:	9a01      	ldr	r2, [sp, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d184      	bne.n	8006952 <_dtoa_r+0xaaa>
 8006a48:	9b00      	ldr	r3, [sp, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	2331      	movs	r3, #49	; 0x31
 8006a50:	7013      	strb	r3, [r2, #0]
 8006a52:	e6ce      	b.n	80067f2 <_dtoa_r+0x94a>
 8006a54:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <_dtoa_r+0xbd4>)
 8006a56:	f7ff ba95 	b.w	8005f84 <_dtoa_r+0xdc>
 8006a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f aa6e 	bne.w	8005f3e <_dtoa_r+0x96>
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <_dtoa_r+0xbd8>)
 8006a64:	f7ff ba8e 	b.w	8005f84 <_dtoa_r+0xdc>
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dcae      	bgt.n	80069cc <_dtoa_r+0xb24>
 8006a6e:	9b06      	ldr	r3, [sp, #24]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	f73f aea8 	bgt.w	80067c6 <_dtoa_r+0x91e>
 8006a76:	e7a9      	b.n	80069cc <_dtoa_r+0xb24>
 8006a78:	0800812b 	.word	0x0800812b
 8006a7c:	08008088 	.word	0x08008088
 8006a80:	080080ac 	.word	0x080080ac

08006a84 <__sflush_r>:
 8006a84:	898a      	ldrh	r2, [r1, #12]
 8006a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	0710      	lsls	r0, r2, #28
 8006a8e:	460c      	mov	r4, r1
 8006a90:	d458      	bmi.n	8006b44 <__sflush_r+0xc0>
 8006a92:	684b      	ldr	r3, [r1, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dc05      	bgt.n	8006aa4 <__sflush_r+0x20>
 8006a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dc02      	bgt.n	8006aa4 <__sflush_r+0x20>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	d0f9      	beq.n	8006a9e <__sflush_r+0x1a>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ab0:	682f      	ldr	r7, [r5, #0]
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	d032      	beq.n	8006b1c <__sflush_r+0x98>
 8006ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	075a      	lsls	r2, r3, #29
 8006abc:	d505      	bpl.n	8006aca <__sflush_r+0x46>
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	1ac0      	subs	r0, r0, r3
 8006ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac4:	b10b      	cbz	r3, 8006aca <__sflush_r+0x46>
 8006ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac8:	1ac0      	subs	r0, r0, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	4602      	mov	r2, r0
 8006ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ad0:	6a21      	ldr	r1, [r4, #32]
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b0      	blx	r6
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	d106      	bne.n	8006aea <__sflush_r+0x66>
 8006adc:	6829      	ldr	r1, [r5, #0]
 8006ade:	291d      	cmp	r1, #29
 8006ae0:	d82c      	bhi.n	8006b3c <__sflush_r+0xb8>
 8006ae2:	4a2a      	ldr	r2, [pc, #168]	; (8006b8c <__sflush_r+0x108>)
 8006ae4:	40ca      	lsrs	r2, r1
 8006ae6:	07d6      	lsls	r6, r2, #31
 8006ae8:	d528      	bpl.n	8006b3c <__sflush_r+0xb8>
 8006aea:	2200      	movs	r2, #0
 8006aec:	6062      	str	r2, [r4, #4]
 8006aee:	04d9      	lsls	r1, r3, #19
 8006af0:	6922      	ldr	r2, [r4, #16]
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	d504      	bpl.n	8006b00 <__sflush_r+0x7c>
 8006af6:	1c42      	adds	r2, r0, #1
 8006af8:	d101      	bne.n	8006afe <__sflush_r+0x7a>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	b903      	cbnz	r3, 8006b00 <__sflush_r+0x7c>
 8006afe:	6560      	str	r0, [r4, #84]	; 0x54
 8006b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b02:	602f      	str	r7, [r5, #0]
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d0ca      	beq.n	8006a9e <__sflush_r+0x1a>
 8006b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <__sflush_r+0x92>
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7fe fa95 	bl	8005040 <_free_r>
 8006b16:	2000      	movs	r0, #0
 8006b18:	6360      	str	r0, [r4, #52]	; 0x34
 8006b1a:	e7c1      	b.n	8006aa0 <__sflush_r+0x1c>
 8006b1c:	6a21      	ldr	r1, [r4, #32]
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b0      	blx	r6
 8006b24:	1c41      	adds	r1, r0, #1
 8006b26:	d1c7      	bne.n	8006ab8 <__sflush_r+0x34>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c4      	beq.n	8006ab8 <__sflush_r+0x34>
 8006b2e:	2b1d      	cmp	r3, #29
 8006b30:	d001      	beq.n	8006b36 <__sflush_r+0xb2>
 8006b32:	2b16      	cmp	r3, #22
 8006b34:	d101      	bne.n	8006b3a <__sflush_r+0xb6>
 8006b36:	602f      	str	r7, [r5, #0]
 8006b38:	e7b1      	b.n	8006a9e <__sflush_r+0x1a>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	e7ad      	b.n	8006aa0 <__sflush_r+0x1c>
 8006b44:	690f      	ldr	r7, [r1, #16]
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	d0a9      	beq.n	8006a9e <__sflush_r+0x1a>
 8006b4a:	0793      	lsls	r3, r2, #30
 8006b4c:	680e      	ldr	r6, [r1, #0]
 8006b4e:	bf08      	it	eq
 8006b50:	694b      	ldreq	r3, [r1, #20]
 8006b52:	600f      	str	r7, [r1, #0]
 8006b54:	bf18      	it	ne
 8006b56:	2300      	movne	r3, #0
 8006b58:	eba6 0807 	sub.w	r8, r6, r7
 8006b5c:	608b      	str	r3, [r1, #8]
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	dd9c      	ble.n	8006a9e <__sflush_r+0x1a>
 8006b64:	6a21      	ldr	r1, [r4, #32]
 8006b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b68:	4643      	mov	r3, r8
 8006b6a:	463a      	mov	r2, r7
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b0      	blx	r6
 8006b70:	2800      	cmp	r0, #0
 8006b72:	dc06      	bgt.n	8006b82 <__sflush_r+0xfe>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	e78e      	b.n	8006aa0 <__sflush_r+0x1c>
 8006b82:	4407      	add	r7, r0
 8006b84:	eba8 0800 	sub.w	r8, r8, r0
 8006b88:	e7e9      	b.n	8006b5e <__sflush_r+0xda>
 8006b8a:	bf00      	nop
 8006b8c:	20400001 	.word	0x20400001

08006b90 <_fflush_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	690b      	ldr	r3, [r1, #16]
 8006b94:	4605      	mov	r5, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	b913      	cbnz	r3, 8006ba0 <_fflush_r+0x10>
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	b118      	cbz	r0, 8006baa <_fflush_r+0x1a>
 8006ba2:	6983      	ldr	r3, [r0, #24]
 8006ba4:	b90b      	cbnz	r3, 8006baa <_fflush_r+0x1a>
 8006ba6:	f000 f887 	bl	8006cb8 <__sinit>
 8006baa:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <_fflush_r+0x6c>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d11b      	bne.n	8006be8 <_fflush_r+0x58>
 8006bb0:	686c      	ldr	r4, [r5, #4]
 8006bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0ef      	beq.n	8006b9a <_fflush_r+0xa>
 8006bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bbc:	07d0      	lsls	r0, r2, #31
 8006bbe:	d404      	bmi.n	8006bca <_fflush_r+0x3a>
 8006bc0:	0599      	lsls	r1, r3, #22
 8006bc2:	d402      	bmi.n	8006bca <_fflush_r+0x3a>
 8006bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc6:	f000 f91a 	bl	8006dfe <__retarget_lock_acquire_recursive>
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4621      	mov	r1, r4
 8006bce:	f7ff ff59 	bl	8006a84 <__sflush_r>
 8006bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd4:	07da      	lsls	r2, r3, #31
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	d4e0      	bmi.n	8006b9c <_fflush_r+0xc>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	059b      	lsls	r3, r3, #22
 8006bde:	d4dd      	bmi.n	8006b9c <_fflush_r+0xc>
 8006be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be2:	f000 f90d 	bl	8006e00 <__retarget_lock_release_recursive>
 8006be6:	e7d9      	b.n	8006b9c <_fflush_r+0xc>
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <_fflush_r+0x70>)
 8006bea:	429c      	cmp	r4, r3
 8006bec:	d101      	bne.n	8006bf2 <_fflush_r+0x62>
 8006bee:	68ac      	ldr	r4, [r5, #8]
 8006bf0:	e7df      	b.n	8006bb2 <_fflush_r+0x22>
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <_fflush_r+0x74>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	bf08      	it	eq
 8006bf8:	68ec      	ldreq	r4, [r5, #12]
 8006bfa:	e7da      	b.n	8006bb2 <_fflush_r+0x22>
 8006bfc:	0800815c 	.word	0x0800815c
 8006c00:	0800817c 	.word	0x0800817c
 8006c04:	0800813c 	.word	0x0800813c

08006c08 <std>:
 8006c08:	2300      	movs	r3, #0
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c16:	6083      	str	r3, [r0, #8]
 8006c18:	8181      	strh	r1, [r0, #12]
 8006c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c1c:	81c2      	strh	r2, [r0, #14]
 8006c1e:	6183      	str	r3, [r0, #24]
 8006c20:	4619      	mov	r1, r3
 8006c22:	2208      	movs	r2, #8
 8006c24:	305c      	adds	r0, #92	; 0x5c
 8006c26:	f7fe fa03 	bl	8005030 <memset>
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <std+0x38>)
 8006c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <std+0x3c>)
 8006c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <std+0x40>)
 8006c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <std+0x44>)
 8006c38:	6224      	str	r4, [r4, #32]
 8006c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c3c:	bd10      	pop	{r4, pc}
 8006c3e:	bf00      	nop
 8006c40:	080078cd 	.word	0x080078cd
 8006c44:	080078ef 	.word	0x080078ef
 8006c48:	08007927 	.word	0x08007927
 8006c4c:	0800794b 	.word	0x0800794b

08006c50 <_cleanup_r>:
 8006c50:	4901      	ldr	r1, [pc, #4]	; (8006c58 <_cleanup_r+0x8>)
 8006c52:	f000 b8af 	b.w	8006db4 <_fwalk_reent>
 8006c56:	bf00      	nop
 8006c58:	08006b91 	.word	0x08006b91

08006c5c <__sfmoreglue>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	2268      	movs	r2, #104	; 0x68
 8006c60:	1e4d      	subs	r5, r1, #1
 8006c62:	4355      	muls	r5, r2
 8006c64:	460e      	mov	r6, r1
 8006c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c6a:	f7fe fa55 	bl	8005118 <_malloc_r>
 8006c6e:	4604      	mov	r4, r0
 8006c70:	b140      	cbz	r0, 8006c84 <__sfmoreglue+0x28>
 8006c72:	2100      	movs	r1, #0
 8006c74:	e9c0 1600 	strd	r1, r6, [r0]
 8006c78:	300c      	adds	r0, #12
 8006c7a:	60a0      	str	r0, [r4, #8]
 8006c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c80:	f7fe f9d6 	bl	8005030 <memset>
 8006c84:	4620      	mov	r0, r4
 8006c86:	bd70      	pop	{r4, r5, r6, pc}

08006c88 <__sfp_lock_acquire>:
 8006c88:	4801      	ldr	r0, [pc, #4]	; (8006c90 <__sfp_lock_acquire+0x8>)
 8006c8a:	f000 b8b8 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8006c8e:	bf00      	nop
 8006c90:	200009f5 	.word	0x200009f5

08006c94 <__sfp_lock_release>:
 8006c94:	4801      	ldr	r0, [pc, #4]	; (8006c9c <__sfp_lock_release+0x8>)
 8006c96:	f000 b8b3 	b.w	8006e00 <__retarget_lock_release_recursive>
 8006c9a:	bf00      	nop
 8006c9c:	200009f5 	.word	0x200009f5

08006ca0 <__sinit_lock_acquire>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	; (8006ca8 <__sinit_lock_acquire+0x8>)
 8006ca2:	f000 b8ac 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	200009f6 	.word	0x200009f6

08006cac <__sinit_lock_release>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__sinit_lock_release+0x8>)
 8006cae:	f000 b8a7 	b.w	8006e00 <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	200009f6 	.word	0x200009f6

08006cb8 <__sinit>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4604      	mov	r4, r0
 8006cbc:	f7ff fff0 	bl	8006ca0 <__sinit_lock_acquire>
 8006cc0:	69a3      	ldr	r3, [r4, #24]
 8006cc2:	b11b      	cbz	r3, 8006ccc <__sinit+0x14>
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f7ff bff0 	b.w	8006cac <__sinit_lock_release>
 8006ccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cd0:	6523      	str	r3, [r4, #80]	; 0x50
 8006cd2:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <__sinit+0x68>)
 8006cd4:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <__sinit+0x6c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	bf04      	itt	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	61a3      	streq	r3, [r4, #24]
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 f820 	bl	8006d28 <__sfp>
 8006ce8:	6060      	str	r0, [r4, #4]
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 f81c 	bl	8006d28 <__sfp>
 8006cf0:	60a0      	str	r0, [r4, #8]
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f818 	bl	8006d28 <__sfp>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	60e0      	str	r0, [r4, #12]
 8006cfc:	2104      	movs	r1, #4
 8006cfe:	6860      	ldr	r0, [r4, #4]
 8006d00:	f7ff ff82 	bl	8006c08 <std>
 8006d04:	68a0      	ldr	r0, [r4, #8]
 8006d06:	2201      	movs	r2, #1
 8006d08:	2109      	movs	r1, #9
 8006d0a:	f7ff ff7d 	bl	8006c08 <std>
 8006d0e:	68e0      	ldr	r0, [r4, #12]
 8006d10:	2202      	movs	r2, #2
 8006d12:	2112      	movs	r1, #18
 8006d14:	f7ff ff78 	bl	8006c08 <std>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	61a3      	str	r3, [r4, #24]
 8006d1c:	e7d2      	b.n	8006cc4 <__sinit+0xc>
 8006d1e:	bf00      	nop
 8006d20:	08008074 	.word	0x08008074
 8006d24:	08006c51 	.word	0x08006c51

08006d28 <__sfp>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	f7ff ffac 	bl	8006c88 <__sfp_lock_acquire>
 8006d30:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <__sfp+0x84>)
 8006d32:	681e      	ldr	r6, [r3, #0]
 8006d34:	69b3      	ldr	r3, [r6, #24]
 8006d36:	b913      	cbnz	r3, 8006d3e <__sfp+0x16>
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7ff ffbd 	bl	8006cb8 <__sinit>
 8006d3e:	3648      	adds	r6, #72	; 0x48
 8006d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	d503      	bpl.n	8006d50 <__sfp+0x28>
 8006d48:	6833      	ldr	r3, [r6, #0]
 8006d4a:	b30b      	cbz	r3, 8006d90 <__sfp+0x68>
 8006d4c:	6836      	ldr	r6, [r6, #0]
 8006d4e:	e7f7      	b.n	8006d40 <__sfp+0x18>
 8006d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d54:	b9d5      	cbnz	r5, 8006d8c <__sfp+0x64>
 8006d56:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <__sfp+0x88>)
 8006d58:	60e3      	str	r3, [r4, #12]
 8006d5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d5e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d60:	f000 f84c 	bl	8006dfc <__retarget_lock_init_recursive>
 8006d64:	f7ff ff96 	bl	8006c94 <__sfp_lock_release>
 8006d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d70:	6025      	str	r5, [r4, #0]
 8006d72:	61a5      	str	r5, [r4, #24]
 8006d74:	2208      	movs	r2, #8
 8006d76:	4629      	mov	r1, r5
 8006d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d7c:	f7fe f958 	bl	8005030 <memset>
 8006d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d88:	4620      	mov	r0, r4
 8006d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8c:	3468      	adds	r4, #104	; 0x68
 8006d8e:	e7d9      	b.n	8006d44 <__sfp+0x1c>
 8006d90:	2104      	movs	r1, #4
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff ff62 	bl	8006c5c <__sfmoreglue>
 8006d98:	4604      	mov	r4, r0
 8006d9a:	6030      	str	r0, [r6, #0]
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1d5      	bne.n	8006d4c <__sfp+0x24>
 8006da0:	f7ff ff78 	bl	8006c94 <__sfp_lock_release>
 8006da4:	230c      	movs	r3, #12
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	e7ee      	b.n	8006d88 <__sfp+0x60>
 8006daa:	bf00      	nop
 8006dac:	08008074 	.word	0x08008074
 8006db0:	ffff0001 	.word	0xffff0001

08006db4 <_fwalk_reent>:
 8006db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	4606      	mov	r6, r0
 8006dba:	4688      	mov	r8, r1
 8006dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dc0:	2700      	movs	r7, #0
 8006dc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc6:	f1b9 0901 	subs.w	r9, r9, #1
 8006dca:	d505      	bpl.n	8006dd8 <_fwalk_reent+0x24>
 8006dcc:	6824      	ldr	r4, [r4, #0]
 8006dce:	2c00      	cmp	r4, #0
 8006dd0:	d1f7      	bne.n	8006dc2 <_fwalk_reent+0xe>
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd8:	89ab      	ldrh	r3, [r5, #12]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d907      	bls.n	8006dee <_fwalk_reent+0x3a>
 8006dde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006de2:	3301      	adds	r3, #1
 8006de4:	d003      	beq.n	8006dee <_fwalk_reent+0x3a>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	47c0      	blx	r8
 8006dec:	4307      	orrs	r7, r0
 8006dee:	3568      	adds	r5, #104	; 0x68
 8006df0:	e7e9      	b.n	8006dc6 <_fwalk_reent+0x12>
	...

08006df4 <_localeconv_r>:
 8006df4:	4800      	ldr	r0, [pc, #0]	; (8006df8 <_localeconv_r+0x4>)
 8006df6:	4770      	bx	lr
 8006df8:	20000828 	.word	0x20000828

08006dfc <__retarget_lock_init_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <__retarget_lock_acquire_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <__retarget_lock_release_recursive>:
 8006e00:	4770      	bx	lr

08006e02 <__swhatbuf_r>:
 8006e02:	b570      	push	{r4, r5, r6, lr}
 8006e04:	460e      	mov	r6, r1
 8006e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	b096      	sub	sp, #88	; 0x58
 8006e0e:	4614      	mov	r4, r2
 8006e10:	461d      	mov	r5, r3
 8006e12:	da08      	bge.n	8006e26 <__swhatbuf_r+0x24>
 8006e14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	602a      	str	r2, [r5, #0]
 8006e1c:	061a      	lsls	r2, r3, #24
 8006e1e:	d410      	bmi.n	8006e42 <__swhatbuf_r+0x40>
 8006e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e24:	e00e      	b.n	8006e44 <__swhatbuf_r+0x42>
 8006e26:	466a      	mov	r2, sp
 8006e28:	f000 fde6 	bl	80079f8 <_fstat_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	dbf1      	blt.n	8006e14 <__swhatbuf_r+0x12>
 8006e30:	9a01      	ldr	r2, [sp, #4]
 8006e32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e3a:	425a      	negs	r2, r3
 8006e3c:	415a      	adcs	r2, r3
 8006e3e:	602a      	str	r2, [r5, #0]
 8006e40:	e7ee      	b.n	8006e20 <__swhatbuf_r+0x1e>
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	2000      	movs	r0, #0
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	b016      	add	sp, #88	; 0x58
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}

08006e4c <__smakebuf_r>:
 8006e4c:	898b      	ldrh	r3, [r1, #12]
 8006e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e50:	079d      	lsls	r5, r3, #30
 8006e52:	4606      	mov	r6, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	d507      	bpl.n	8006e68 <__smakebuf_r+0x1c>
 8006e58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	2301      	movs	r3, #1
 8006e62:	6163      	str	r3, [r4, #20]
 8006e64:	b002      	add	sp, #8
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	ab01      	add	r3, sp, #4
 8006e6a:	466a      	mov	r2, sp
 8006e6c:	f7ff ffc9 	bl	8006e02 <__swhatbuf_r>
 8006e70:	9900      	ldr	r1, [sp, #0]
 8006e72:	4605      	mov	r5, r0
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7fe f94f 	bl	8005118 <_malloc_r>
 8006e7a:	b948      	cbnz	r0, 8006e90 <__smakebuf_r+0x44>
 8006e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e80:	059a      	lsls	r2, r3, #22
 8006e82:	d4ef      	bmi.n	8006e64 <__smakebuf_r+0x18>
 8006e84:	f023 0303 	bic.w	r3, r3, #3
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	81a3      	strh	r3, [r4, #12]
 8006e8e:	e7e3      	b.n	8006e58 <__smakebuf_r+0xc>
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <__smakebuf_r+0x7c>)
 8006e92:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	6020      	str	r0, [r4, #0]
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	9b00      	ldr	r3, [sp, #0]
 8006ea0:	6163      	str	r3, [r4, #20]
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	6120      	str	r0, [r4, #16]
 8006ea6:	b15b      	cbz	r3, 8006ec0 <__smakebuf_r+0x74>
 8006ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 fdb5 	bl	8007a1c <_isatty_r>
 8006eb2:	b128      	cbz	r0, 8006ec0 <__smakebuf_r+0x74>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	89a0      	ldrh	r0, [r4, #12]
 8006ec2:	4305      	orrs	r5, r0
 8006ec4:	81a5      	strh	r5, [r4, #12]
 8006ec6:	e7cd      	b.n	8006e64 <__smakebuf_r+0x18>
 8006ec8:	08006c51 	.word	0x08006c51

08006ecc <__malloc_lock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_lock+0x8>)
 8006ece:	f7ff bf96 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200009f4 	.word	0x200009f4

08006ed8 <__malloc_unlock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__malloc_unlock+0x8>)
 8006eda:	f7ff bf91 	b.w	8006e00 <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	200009f4 	.word	0x200009f4

08006ee4 <_Balloc>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ee8:	4604      	mov	r4, r0
 8006eea:	460d      	mov	r5, r1
 8006eec:	b976      	cbnz	r6, 8006f0c <_Balloc+0x28>
 8006eee:	2010      	movs	r0, #16
 8006ef0:	f7fe f888 	bl	8005004 <malloc>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ef8:	b920      	cbnz	r0, 8006f04 <_Balloc+0x20>
 8006efa:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <_Balloc+0x78>)
 8006efc:	4818      	ldr	r0, [pc, #96]	; (8006f60 <_Balloc+0x7c>)
 8006efe:	2166      	movs	r1, #102	; 0x66
 8006f00:	f000 fd3a 	bl	8007978 <__assert_func>
 8006f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f08:	6006      	str	r6, [r0, #0]
 8006f0a:	60c6      	str	r6, [r0, #12]
 8006f0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f0e:	68f3      	ldr	r3, [r6, #12]
 8006f10:	b183      	cbz	r3, 8006f34 <_Balloc+0x50>
 8006f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f1a:	b9b8      	cbnz	r0, 8006f4c <_Balloc+0x68>
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f22:	1d72      	adds	r2, r6, #5
 8006f24:	0092      	lsls	r2, r2, #2
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 fb60 	bl	80075ec <_calloc_r>
 8006f2c:	b160      	cbz	r0, 8006f48 <_Balloc+0x64>
 8006f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f32:	e00e      	b.n	8006f52 <_Balloc+0x6e>
 8006f34:	2221      	movs	r2, #33	; 0x21
 8006f36:	2104      	movs	r1, #4
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fb57 	bl	80075ec <_calloc_r>
 8006f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f40:	60f0      	str	r0, [r6, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <_Balloc+0x2e>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	6802      	ldr	r2, [r0, #0]
 8006f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f52:	2300      	movs	r3, #0
 8006f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f58:	e7f7      	b.n	8006f4a <_Balloc+0x66>
 8006f5a:	bf00      	nop
 8006f5c:	080080b9 	.word	0x080080b9
 8006f60:	0800819c 	.word	0x0800819c

08006f64 <_Bfree>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f68:	4605      	mov	r5, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b976      	cbnz	r6, 8006f8c <_Bfree+0x28>
 8006f6e:	2010      	movs	r0, #16
 8006f70:	f7fe f848 	bl	8005004 <malloc>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6268      	str	r0, [r5, #36]	; 0x24
 8006f78:	b920      	cbnz	r0, 8006f84 <_Bfree+0x20>
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <_Bfree+0x3c>)
 8006f7c:	4809      	ldr	r0, [pc, #36]	; (8006fa4 <_Bfree+0x40>)
 8006f7e:	218a      	movs	r1, #138	; 0x8a
 8006f80:	f000 fcfa 	bl	8007978 <__assert_func>
 8006f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f88:	6006      	str	r6, [r0, #0]
 8006f8a:	60c6      	str	r6, [r0, #12]
 8006f8c:	b13c      	cbz	r4, 8006f9e <_Bfree+0x3a>
 8006f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f90:	6862      	ldr	r2, [r4, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f98:	6021      	str	r1, [r4, #0]
 8006f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	080080b9 	.word	0x080080b9
 8006fa4:	0800819c 	.word	0x0800819c

08006fa8 <__multadd>:
 8006fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fac:	690d      	ldr	r5, [r1, #16]
 8006fae:	4607      	mov	r7, r0
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	461e      	mov	r6, r3
 8006fb4:	f101 0c14 	add.w	ip, r1, #20
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f8dc 3000 	ldr.w	r3, [ip]
 8006fbe:	b299      	uxth	r1, r3
 8006fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8006fc4:	0c1e      	lsrs	r6, r3, #16
 8006fc6:	0c0b      	lsrs	r3, r1, #16
 8006fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8006fcc:	b289      	uxth	r1, r1
 8006fce:	3001      	adds	r0, #1
 8006fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fd4:	4285      	cmp	r5, r0
 8006fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8006fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fde:	dcec      	bgt.n	8006fba <__multadd+0x12>
 8006fe0:	b30e      	cbz	r6, 8007026 <__multadd+0x7e>
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	dc19      	bgt.n	800701c <__multadd+0x74>
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	4638      	mov	r0, r7
 8006fec:	3101      	adds	r1, #1
 8006fee:	f7ff ff79 	bl	8006ee4 <_Balloc>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	b928      	cbnz	r0, 8007002 <__multadd+0x5a>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <__multadd+0x84>)
 8006ffa:	480d      	ldr	r0, [pc, #52]	; (8007030 <__multadd+0x88>)
 8006ffc:	21b5      	movs	r1, #181	; 0xb5
 8006ffe:	f000 fcbb 	bl	8007978 <__assert_func>
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	3202      	adds	r2, #2
 8007006:	f104 010c 	add.w	r1, r4, #12
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	300c      	adds	r0, #12
 800700e:	f7fe f801 	bl	8005014 <memcpy>
 8007012:	4621      	mov	r1, r4
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff ffa5 	bl	8006f64 <_Bfree>
 800701a:	4644      	mov	r4, r8
 800701c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007020:	3501      	adds	r5, #1
 8007022:	615e      	str	r6, [r3, #20]
 8007024:	6125      	str	r5, [r4, #16]
 8007026:	4620      	mov	r0, r4
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	0800812b 	.word	0x0800812b
 8007030:	0800819c 	.word	0x0800819c

08007034 <__hi0bits>:
 8007034:	0c03      	lsrs	r3, r0, #16
 8007036:	041b      	lsls	r3, r3, #16
 8007038:	b9d3      	cbnz	r3, 8007070 <__hi0bits+0x3c>
 800703a:	0400      	lsls	r0, r0, #16
 800703c:	2310      	movs	r3, #16
 800703e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007042:	bf04      	itt	eq
 8007044:	0200      	lsleq	r0, r0, #8
 8007046:	3308      	addeq	r3, #8
 8007048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800704c:	bf04      	itt	eq
 800704e:	0100      	lsleq	r0, r0, #4
 8007050:	3304      	addeq	r3, #4
 8007052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007056:	bf04      	itt	eq
 8007058:	0080      	lsleq	r0, r0, #2
 800705a:	3302      	addeq	r3, #2
 800705c:	2800      	cmp	r0, #0
 800705e:	db05      	blt.n	800706c <__hi0bits+0x38>
 8007060:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007064:	f103 0301 	add.w	r3, r3, #1
 8007068:	bf08      	it	eq
 800706a:	2320      	moveq	r3, #32
 800706c:	4618      	mov	r0, r3
 800706e:	4770      	bx	lr
 8007070:	2300      	movs	r3, #0
 8007072:	e7e4      	b.n	800703e <__hi0bits+0xa>

08007074 <__lo0bits>:
 8007074:	6803      	ldr	r3, [r0, #0]
 8007076:	f013 0207 	ands.w	r2, r3, #7
 800707a:	4601      	mov	r1, r0
 800707c:	d00b      	beq.n	8007096 <__lo0bits+0x22>
 800707e:	07da      	lsls	r2, r3, #31
 8007080:	d423      	bmi.n	80070ca <__lo0bits+0x56>
 8007082:	0798      	lsls	r0, r3, #30
 8007084:	bf49      	itett	mi
 8007086:	085b      	lsrmi	r3, r3, #1
 8007088:	089b      	lsrpl	r3, r3, #2
 800708a:	2001      	movmi	r0, #1
 800708c:	600b      	strmi	r3, [r1, #0]
 800708e:	bf5c      	itt	pl
 8007090:	600b      	strpl	r3, [r1, #0]
 8007092:	2002      	movpl	r0, #2
 8007094:	4770      	bx	lr
 8007096:	b298      	uxth	r0, r3
 8007098:	b9a8      	cbnz	r0, 80070c6 <__lo0bits+0x52>
 800709a:	0c1b      	lsrs	r3, r3, #16
 800709c:	2010      	movs	r0, #16
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	b90a      	cbnz	r2, 80070a6 <__lo0bits+0x32>
 80070a2:	3008      	adds	r0, #8
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	071a      	lsls	r2, r3, #28
 80070a8:	bf04      	itt	eq
 80070aa:	091b      	lsreq	r3, r3, #4
 80070ac:	3004      	addeq	r0, #4
 80070ae:	079a      	lsls	r2, r3, #30
 80070b0:	bf04      	itt	eq
 80070b2:	089b      	lsreq	r3, r3, #2
 80070b4:	3002      	addeq	r0, #2
 80070b6:	07da      	lsls	r2, r3, #31
 80070b8:	d403      	bmi.n	80070c2 <__lo0bits+0x4e>
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	f100 0001 	add.w	r0, r0, #1
 80070c0:	d005      	beq.n	80070ce <__lo0bits+0x5a>
 80070c2:	600b      	str	r3, [r1, #0]
 80070c4:	4770      	bx	lr
 80070c6:	4610      	mov	r0, r2
 80070c8:	e7e9      	b.n	800709e <__lo0bits+0x2a>
 80070ca:	2000      	movs	r0, #0
 80070cc:	4770      	bx	lr
 80070ce:	2020      	movs	r0, #32
 80070d0:	4770      	bx	lr
	...

080070d4 <__i2b>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	460c      	mov	r4, r1
 80070d8:	2101      	movs	r1, #1
 80070da:	f7ff ff03 	bl	8006ee4 <_Balloc>
 80070de:	4602      	mov	r2, r0
 80070e0:	b928      	cbnz	r0, 80070ee <__i2b+0x1a>
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <__i2b+0x24>)
 80070e4:	4805      	ldr	r0, [pc, #20]	; (80070fc <__i2b+0x28>)
 80070e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070ea:	f000 fc45 	bl	8007978 <__assert_func>
 80070ee:	2301      	movs	r3, #1
 80070f0:	6144      	str	r4, [r0, #20]
 80070f2:	6103      	str	r3, [r0, #16]
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	bf00      	nop
 80070f8:	0800812b 	.word	0x0800812b
 80070fc:	0800819c 	.word	0x0800819c

08007100 <__multiply>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	4691      	mov	r9, r2
 8007106:	690a      	ldr	r2, [r1, #16]
 8007108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800710c:	429a      	cmp	r2, r3
 800710e:	bfb8      	it	lt
 8007110:	460b      	movlt	r3, r1
 8007112:	460c      	mov	r4, r1
 8007114:	bfbc      	itt	lt
 8007116:	464c      	movlt	r4, r9
 8007118:	4699      	movlt	r9, r3
 800711a:	6927      	ldr	r7, [r4, #16]
 800711c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007120:	68a3      	ldr	r3, [r4, #8]
 8007122:	6861      	ldr	r1, [r4, #4]
 8007124:	eb07 060a 	add.w	r6, r7, sl
 8007128:	42b3      	cmp	r3, r6
 800712a:	b085      	sub	sp, #20
 800712c:	bfb8      	it	lt
 800712e:	3101      	addlt	r1, #1
 8007130:	f7ff fed8 	bl	8006ee4 <_Balloc>
 8007134:	b930      	cbnz	r0, 8007144 <__multiply+0x44>
 8007136:	4602      	mov	r2, r0
 8007138:	4b44      	ldr	r3, [pc, #272]	; (800724c <__multiply+0x14c>)
 800713a:	4845      	ldr	r0, [pc, #276]	; (8007250 <__multiply+0x150>)
 800713c:	f240 115d 	movw	r1, #349	; 0x15d
 8007140:	f000 fc1a 	bl	8007978 <__assert_func>
 8007144:	f100 0514 	add.w	r5, r0, #20
 8007148:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800714c:	462b      	mov	r3, r5
 800714e:	2200      	movs	r2, #0
 8007150:	4543      	cmp	r3, r8
 8007152:	d321      	bcc.n	8007198 <__multiply+0x98>
 8007154:	f104 0314 	add.w	r3, r4, #20
 8007158:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800715c:	f109 0314 	add.w	r3, r9, #20
 8007160:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007164:	9202      	str	r2, [sp, #8]
 8007166:	1b3a      	subs	r2, r7, r4
 8007168:	3a15      	subs	r2, #21
 800716a:	f022 0203 	bic.w	r2, r2, #3
 800716e:	3204      	adds	r2, #4
 8007170:	f104 0115 	add.w	r1, r4, #21
 8007174:	428f      	cmp	r7, r1
 8007176:	bf38      	it	cc
 8007178:	2204      	movcc	r2, #4
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	9a02      	ldr	r2, [sp, #8]
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	429a      	cmp	r2, r3
 8007182:	d80c      	bhi.n	800719e <__multiply+0x9e>
 8007184:	2e00      	cmp	r6, #0
 8007186:	dd03      	ble.n	8007190 <__multiply+0x90>
 8007188:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800718c:	2b00      	cmp	r3, #0
 800718e:	d05a      	beq.n	8007246 <__multiply+0x146>
 8007190:	6106      	str	r6, [r0, #16]
 8007192:	b005      	add	sp, #20
 8007194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007198:	f843 2b04 	str.w	r2, [r3], #4
 800719c:	e7d8      	b.n	8007150 <__multiply+0x50>
 800719e:	f8b3 a000 	ldrh.w	sl, [r3]
 80071a2:	f1ba 0f00 	cmp.w	sl, #0
 80071a6:	d024      	beq.n	80071f2 <__multiply+0xf2>
 80071a8:	f104 0e14 	add.w	lr, r4, #20
 80071ac:	46a9      	mov	r9, r5
 80071ae:	f04f 0c00 	mov.w	ip, #0
 80071b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071b6:	f8d9 1000 	ldr.w	r1, [r9]
 80071ba:	fa1f fb82 	uxth.w	fp, r2
 80071be:	b289      	uxth	r1, r1
 80071c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80071c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071c8:	f8d9 2000 	ldr.w	r2, [r9]
 80071cc:	4461      	add	r1, ip
 80071ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80071d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071da:	b289      	uxth	r1, r1
 80071dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071e0:	4577      	cmp	r7, lr
 80071e2:	f849 1b04 	str.w	r1, [r9], #4
 80071e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071ea:	d8e2      	bhi.n	80071b2 <__multiply+0xb2>
 80071ec:	9a01      	ldr	r2, [sp, #4]
 80071ee:	f845 c002 	str.w	ip, [r5, r2]
 80071f2:	9a03      	ldr	r2, [sp, #12]
 80071f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071f8:	3304      	adds	r3, #4
 80071fa:	f1b9 0f00 	cmp.w	r9, #0
 80071fe:	d020      	beq.n	8007242 <__multiply+0x142>
 8007200:	6829      	ldr	r1, [r5, #0]
 8007202:	f104 0c14 	add.w	ip, r4, #20
 8007206:	46ae      	mov	lr, r5
 8007208:	f04f 0a00 	mov.w	sl, #0
 800720c:	f8bc b000 	ldrh.w	fp, [ip]
 8007210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007214:	fb09 220b 	mla	r2, r9, fp, r2
 8007218:	4492      	add	sl, r2
 800721a:	b289      	uxth	r1, r1
 800721c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007220:	f84e 1b04 	str.w	r1, [lr], #4
 8007224:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007228:	f8be 1000 	ldrh.w	r1, [lr]
 800722c:	0c12      	lsrs	r2, r2, #16
 800722e:	fb09 1102 	mla	r1, r9, r2, r1
 8007232:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007236:	4567      	cmp	r7, ip
 8007238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800723c:	d8e6      	bhi.n	800720c <__multiply+0x10c>
 800723e:	9a01      	ldr	r2, [sp, #4]
 8007240:	50a9      	str	r1, [r5, r2]
 8007242:	3504      	adds	r5, #4
 8007244:	e79a      	b.n	800717c <__multiply+0x7c>
 8007246:	3e01      	subs	r6, #1
 8007248:	e79c      	b.n	8007184 <__multiply+0x84>
 800724a:	bf00      	nop
 800724c:	0800812b 	.word	0x0800812b
 8007250:	0800819c 	.word	0x0800819c

08007254 <__pow5mult>:
 8007254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007258:	4615      	mov	r5, r2
 800725a:	f012 0203 	ands.w	r2, r2, #3
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	d007      	beq.n	8007274 <__pow5mult+0x20>
 8007264:	4c25      	ldr	r4, [pc, #148]	; (80072fc <__pow5mult+0xa8>)
 8007266:	3a01      	subs	r2, #1
 8007268:	2300      	movs	r3, #0
 800726a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800726e:	f7ff fe9b 	bl	8006fa8 <__multadd>
 8007272:	4607      	mov	r7, r0
 8007274:	10ad      	asrs	r5, r5, #2
 8007276:	d03d      	beq.n	80072f4 <__pow5mult+0xa0>
 8007278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800727a:	b97c      	cbnz	r4, 800729c <__pow5mult+0x48>
 800727c:	2010      	movs	r0, #16
 800727e:	f7fd fec1 	bl	8005004 <malloc>
 8007282:	4602      	mov	r2, r0
 8007284:	6270      	str	r0, [r6, #36]	; 0x24
 8007286:	b928      	cbnz	r0, 8007294 <__pow5mult+0x40>
 8007288:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <__pow5mult+0xac>)
 800728a:	481e      	ldr	r0, [pc, #120]	; (8007304 <__pow5mult+0xb0>)
 800728c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007290:	f000 fb72 	bl	8007978 <__assert_func>
 8007294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007298:	6004      	str	r4, [r0, #0]
 800729a:	60c4      	str	r4, [r0, #12]
 800729c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a4:	b94c      	cbnz	r4, 80072ba <__pow5mult+0x66>
 80072a6:	f240 2171 	movw	r1, #625	; 0x271
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff ff12 	bl	80070d4 <__i2b>
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80072b6:	4604      	mov	r4, r0
 80072b8:	6003      	str	r3, [r0, #0]
 80072ba:	f04f 0900 	mov.w	r9, #0
 80072be:	07eb      	lsls	r3, r5, #31
 80072c0:	d50a      	bpl.n	80072d8 <__pow5mult+0x84>
 80072c2:	4639      	mov	r1, r7
 80072c4:	4622      	mov	r2, r4
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff ff1a 	bl	8007100 <__multiply>
 80072cc:	4639      	mov	r1, r7
 80072ce:	4680      	mov	r8, r0
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff fe47 	bl	8006f64 <_Bfree>
 80072d6:	4647      	mov	r7, r8
 80072d8:	106d      	asrs	r5, r5, #1
 80072da:	d00b      	beq.n	80072f4 <__pow5mult+0xa0>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	b938      	cbnz	r0, 80072f0 <__pow5mult+0x9c>
 80072e0:	4622      	mov	r2, r4
 80072e2:	4621      	mov	r1, r4
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff ff0b 	bl	8007100 <__multiply>
 80072ea:	6020      	str	r0, [r4, #0]
 80072ec:	f8c0 9000 	str.w	r9, [r0]
 80072f0:	4604      	mov	r4, r0
 80072f2:	e7e4      	b.n	80072be <__pow5mult+0x6a>
 80072f4:	4638      	mov	r0, r7
 80072f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fa:	bf00      	nop
 80072fc:	080082e8 	.word	0x080082e8
 8007300:	080080b9 	.word	0x080080b9
 8007304:	0800819c 	.word	0x0800819c

08007308 <__lshift>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	460c      	mov	r4, r1
 800730e:	6849      	ldr	r1, [r1, #4]
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	4607      	mov	r7, r0
 800731a:	4691      	mov	r9, r2
 800731c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007320:	f108 0601 	add.w	r6, r8, #1
 8007324:	42b3      	cmp	r3, r6
 8007326:	db0b      	blt.n	8007340 <__lshift+0x38>
 8007328:	4638      	mov	r0, r7
 800732a:	f7ff fddb 	bl	8006ee4 <_Balloc>
 800732e:	4605      	mov	r5, r0
 8007330:	b948      	cbnz	r0, 8007346 <__lshift+0x3e>
 8007332:	4602      	mov	r2, r0
 8007334:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <__lshift+0xd8>)
 8007336:	482b      	ldr	r0, [pc, #172]	; (80073e4 <__lshift+0xdc>)
 8007338:	f240 11d9 	movw	r1, #473	; 0x1d9
 800733c:	f000 fb1c 	bl	8007978 <__assert_func>
 8007340:	3101      	adds	r1, #1
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	e7ee      	b.n	8007324 <__lshift+0x1c>
 8007346:	2300      	movs	r3, #0
 8007348:	f100 0114 	add.w	r1, r0, #20
 800734c:	f100 0210 	add.w	r2, r0, #16
 8007350:	4618      	mov	r0, r3
 8007352:	4553      	cmp	r3, sl
 8007354:	db37      	blt.n	80073c6 <__lshift+0xbe>
 8007356:	6920      	ldr	r0, [r4, #16]
 8007358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800735c:	f104 0314 	add.w	r3, r4, #20
 8007360:	f019 091f 	ands.w	r9, r9, #31
 8007364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800736c:	d02f      	beq.n	80073ce <__lshift+0xc6>
 800736e:	f1c9 0e20 	rsb	lr, r9, #32
 8007372:	468a      	mov	sl, r1
 8007374:	f04f 0c00 	mov.w	ip, #0
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	fa02 f209 	lsl.w	r2, r2, r9
 800737e:	ea42 020c 	orr.w	r2, r2, ip
 8007382:	f84a 2b04 	str.w	r2, [sl], #4
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	4298      	cmp	r0, r3
 800738c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007390:	d8f2      	bhi.n	8007378 <__lshift+0x70>
 8007392:	1b03      	subs	r3, r0, r4
 8007394:	3b15      	subs	r3, #21
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	3304      	adds	r3, #4
 800739c:	f104 0215 	add.w	r2, r4, #21
 80073a0:	4290      	cmp	r0, r2
 80073a2:	bf38      	it	cc
 80073a4:	2304      	movcc	r3, #4
 80073a6:	f841 c003 	str.w	ip, [r1, r3]
 80073aa:	f1bc 0f00 	cmp.w	ip, #0
 80073ae:	d001      	beq.n	80073b4 <__lshift+0xac>
 80073b0:	f108 0602 	add.w	r6, r8, #2
 80073b4:	3e01      	subs	r6, #1
 80073b6:	4638      	mov	r0, r7
 80073b8:	612e      	str	r6, [r5, #16]
 80073ba:	4621      	mov	r1, r4
 80073bc:	f7ff fdd2 	bl	8006f64 <_Bfree>
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ca:	3301      	adds	r3, #1
 80073cc:	e7c1      	b.n	8007352 <__lshift+0x4a>
 80073ce:	3904      	subs	r1, #4
 80073d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073d8:	4298      	cmp	r0, r3
 80073da:	d8f9      	bhi.n	80073d0 <__lshift+0xc8>
 80073dc:	e7ea      	b.n	80073b4 <__lshift+0xac>
 80073de:	bf00      	nop
 80073e0:	0800812b 	.word	0x0800812b
 80073e4:	0800819c 	.word	0x0800819c

080073e8 <__mcmp>:
 80073e8:	b530      	push	{r4, r5, lr}
 80073ea:	6902      	ldr	r2, [r0, #16]
 80073ec:	690c      	ldr	r4, [r1, #16]
 80073ee:	1b12      	subs	r2, r2, r4
 80073f0:	d10e      	bne.n	8007410 <__mcmp+0x28>
 80073f2:	f100 0314 	add.w	r3, r0, #20
 80073f6:	3114      	adds	r1, #20
 80073f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007400:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007404:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007408:	42a5      	cmp	r5, r4
 800740a:	d003      	beq.n	8007414 <__mcmp+0x2c>
 800740c:	d305      	bcc.n	800741a <__mcmp+0x32>
 800740e:	2201      	movs	r2, #1
 8007410:	4610      	mov	r0, r2
 8007412:	bd30      	pop	{r4, r5, pc}
 8007414:	4283      	cmp	r3, r0
 8007416:	d3f3      	bcc.n	8007400 <__mcmp+0x18>
 8007418:	e7fa      	b.n	8007410 <__mcmp+0x28>
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	e7f7      	b.n	8007410 <__mcmp+0x28>

08007420 <__mdiff>:
 8007420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	4606      	mov	r6, r0
 8007428:	4611      	mov	r1, r2
 800742a:	4620      	mov	r0, r4
 800742c:	4690      	mov	r8, r2
 800742e:	f7ff ffdb 	bl	80073e8 <__mcmp>
 8007432:	1e05      	subs	r5, r0, #0
 8007434:	d110      	bne.n	8007458 <__mdiff+0x38>
 8007436:	4629      	mov	r1, r5
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff fd53 	bl	8006ee4 <_Balloc>
 800743e:	b930      	cbnz	r0, 800744e <__mdiff+0x2e>
 8007440:	4b3a      	ldr	r3, [pc, #232]	; (800752c <__mdiff+0x10c>)
 8007442:	4602      	mov	r2, r0
 8007444:	f240 2132 	movw	r1, #562	; 0x232
 8007448:	4839      	ldr	r0, [pc, #228]	; (8007530 <__mdiff+0x110>)
 800744a:	f000 fa95 	bl	8007978 <__assert_func>
 800744e:	2301      	movs	r3, #1
 8007450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	bfa4      	itt	ge
 800745a:	4643      	movge	r3, r8
 800745c:	46a0      	movge	r8, r4
 800745e:	4630      	mov	r0, r6
 8007460:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007464:	bfa6      	itte	ge
 8007466:	461c      	movge	r4, r3
 8007468:	2500      	movge	r5, #0
 800746a:	2501      	movlt	r5, #1
 800746c:	f7ff fd3a 	bl	8006ee4 <_Balloc>
 8007470:	b920      	cbnz	r0, 800747c <__mdiff+0x5c>
 8007472:	4b2e      	ldr	r3, [pc, #184]	; (800752c <__mdiff+0x10c>)
 8007474:	4602      	mov	r2, r0
 8007476:	f44f 7110 	mov.w	r1, #576	; 0x240
 800747a:	e7e5      	b.n	8007448 <__mdiff+0x28>
 800747c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007480:	6926      	ldr	r6, [r4, #16]
 8007482:	60c5      	str	r5, [r0, #12]
 8007484:	f104 0914 	add.w	r9, r4, #20
 8007488:	f108 0514 	add.w	r5, r8, #20
 800748c:	f100 0e14 	add.w	lr, r0, #20
 8007490:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007498:	f108 0210 	add.w	r2, r8, #16
 800749c:	46f2      	mov	sl, lr
 800749e:	2100      	movs	r1, #0
 80074a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80074a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074a8:	fa1f f883 	uxth.w	r8, r3
 80074ac:	fa11 f18b 	uxtah	r1, r1, fp
 80074b0:	0c1b      	lsrs	r3, r3, #16
 80074b2:	eba1 0808 	sub.w	r8, r1, r8
 80074b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074be:	fa1f f888 	uxth.w	r8, r8
 80074c2:	1419      	asrs	r1, r3, #16
 80074c4:	454e      	cmp	r6, r9
 80074c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074ca:	f84a 3b04 	str.w	r3, [sl], #4
 80074ce:	d8e7      	bhi.n	80074a0 <__mdiff+0x80>
 80074d0:	1b33      	subs	r3, r6, r4
 80074d2:	3b15      	subs	r3, #21
 80074d4:	f023 0303 	bic.w	r3, r3, #3
 80074d8:	3304      	adds	r3, #4
 80074da:	3415      	adds	r4, #21
 80074dc:	42a6      	cmp	r6, r4
 80074de:	bf38      	it	cc
 80074e0:	2304      	movcc	r3, #4
 80074e2:	441d      	add	r5, r3
 80074e4:	4473      	add	r3, lr
 80074e6:	469e      	mov	lr, r3
 80074e8:	462e      	mov	r6, r5
 80074ea:	4566      	cmp	r6, ip
 80074ec:	d30e      	bcc.n	800750c <__mdiff+0xec>
 80074ee:	f10c 0203 	add.w	r2, ip, #3
 80074f2:	1b52      	subs	r2, r2, r5
 80074f4:	f022 0203 	bic.w	r2, r2, #3
 80074f8:	3d03      	subs	r5, #3
 80074fa:	45ac      	cmp	ip, r5
 80074fc:	bf38      	it	cc
 80074fe:	2200      	movcc	r2, #0
 8007500:	441a      	add	r2, r3
 8007502:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007506:	b17b      	cbz	r3, 8007528 <__mdiff+0x108>
 8007508:	6107      	str	r7, [r0, #16]
 800750a:	e7a3      	b.n	8007454 <__mdiff+0x34>
 800750c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007510:	fa11 f288 	uxtah	r2, r1, r8
 8007514:	1414      	asrs	r4, r2, #16
 8007516:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800751a:	b292      	uxth	r2, r2
 800751c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007520:	f84e 2b04 	str.w	r2, [lr], #4
 8007524:	1421      	asrs	r1, r4, #16
 8007526:	e7e0      	b.n	80074ea <__mdiff+0xca>
 8007528:	3f01      	subs	r7, #1
 800752a:	e7ea      	b.n	8007502 <__mdiff+0xe2>
 800752c:	0800812b 	.word	0x0800812b
 8007530:	0800819c 	.word	0x0800819c

08007534 <__d2b>:
 8007534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007538:	4689      	mov	r9, r1
 800753a:	2101      	movs	r1, #1
 800753c:	ec57 6b10 	vmov	r6, r7, d0
 8007540:	4690      	mov	r8, r2
 8007542:	f7ff fccf 	bl	8006ee4 <_Balloc>
 8007546:	4604      	mov	r4, r0
 8007548:	b930      	cbnz	r0, 8007558 <__d2b+0x24>
 800754a:	4602      	mov	r2, r0
 800754c:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <__d2b+0xb0>)
 800754e:	4826      	ldr	r0, [pc, #152]	; (80075e8 <__d2b+0xb4>)
 8007550:	f240 310a 	movw	r1, #778	; 0x30a
 8007554:	f000 fa10 	bl	8007978 <__assert_func>
 8007558:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800755c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007560:	bb35      	cbnz	r5, 80075b0 <__d2b+0x7c>
 8007562:	2e00      	cmp	r6, #0
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	d028      	beq.n	80075ba <__d2b+0x86>
 8007568:	4668      	mov	r0, sp
 800756a:	9600      	str	r6, [sp, #0]
 800756c:	f7ff fd82 	bl	8007074 <__lo0bits>
 8007570:	9900      	ldr	r1, [sp, #0]
 8007572:	b300      	cbz	r0, 80075b6 <__d2b+0x82>
 8007574:	9a01      	ldr	r2, [sp, #4]
 8007576:	f1c0 0320 	rsb	r3, r0, #32
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	430b      	orrs	r3, r1
 8007580:	40c2      	lsrs	r2, r0
 8007582:	6163      	str	r3, [r4, #20]
 8007584:	9201      	str	r2, [sp, #4]
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	61a3      	str	r3, [r4, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	bf14      	ite	ne
 800758e:	2202      	movne	r2, #2
 8007590:	2201      	moveq	r2, #1
 8007592:	6122      	str	r2, [r4, #16]
 8007594:	b1d5      	cbz	r5, 80075cc <__d2b+0x98>
 8007596:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800759a:	4405      	add	r5, r0
 800759c:	f8c9 5000 	str.w	r5, [r9]
 80075a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075a4:	f8c8 0000 	str.w	r0, [r8]
 80075a8:	4620      	mov	r0, r4
 80075aa:	b003      	add	sp, #12
 80075ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b4:	e7d5      	b.n	8007562 <__d2b+0x2e>
 80075b6:	6161      	str	r1, [r4, #20]
 80075b8:	e7e5      	b.n	8007586 <__d2b+0x52>
 80075ba:	a801      	add	r0, sp, #4
 80075bc:	f7ff fd5a 	bl	8007074 <__lo0bits>
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	6163      	str	r3, [r4, #20]
 80075c4:	2201      	movs	r2, #1
 80075c6:	6122      	str	r2, [r4, #16]
 80075c8:	3020      	adds	r0, #32
 80075ca:	e7e3      	b.n	8007594 <__d2b+0x60>
 80075cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075d4:	f8c9 0000 	str.w	r0, [r9]
 80075d8:	6918      	ldr	r0, [r3, #16]
 80075da:	f7ff fd2b 	bl	8007034 <__hi0bits>
 80075de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075e2:	e7df      	b.n	80075a4 <__d2b+0x70>
 80075e4:	0800812b 	.word	0x0800812b
 80075e8:	0800819c 	.word	0x0800819c

080075ec <_calloc_r>:
 80075ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ee:	fba1 2402 	umull	r2, r4, r1, r2
 80075f2:	b94c      	cbnz	r4, 8007608 <_calloc_r+0x1c>
 80075f4:	4611      	mov	r1, r2
 80075f6:	9201      	str	r2, [sp, #4]
 80075f8:	f7fd fd8e 	bl	8005118 <_malloc_r>
 80075fc:	9a01      	ldr	r2, [sp, #4]
 80075fe:	4605      	mov	r5, r0
 8007600:	b930      	cbnz	r0, 8007610 <_calloc_r+0x24>
 8007602:	4628      	mov	r0, r5
 8007604:	b003      	add	sp, #12
 8007606:	bd30      	pop	{r4, r5, pc}
 8007608:	220c      	movs	r2, #12
 800760a:	6002      	str	r2, [r0, #0]
 800760c:	2500      	movs	r5, #0
 800760e:	e7f8      	b.n	8007602 <_calloc_r+0x16>
 8007610:	4621      	mov	r1, r4
 8007612:	f7fd fd0d 	bl	8005030 <memset>
 8007616:	e7f4      	b.n	8007602 <_calloc_r+0x16>

08007618 <__sfputc_r>:
 8007618:	6893      	ldr	r3, [r2, #8]
 800761a:	3b01      	subs	r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	b410      	push	{r4}
 8007620:	6093      	str	r3, [r2, #8]
 8007622:	da08      	bge.n	8007636 <__sfputc_r+0x1e>
 8007624:	6994      	ldr	r4, [r2, #24]
 8007626:	42a3      	cmp	r3, r4
 8007628:	db01      	blt.n	800762e <__sfputc_r+0x16>
 800762a:	290a      	cmp	r1, #10
 800762c:	d103      	bne.n	8007636 <__sfputc_r+0x1e>
 800762e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007632:	f7fe baed 	b.w	8005c10 <__swbuf_r>
 8007636:	6813      	ldr	r3, [r2, #0]
 8007638:	1c58      	adds	r0, r3, #1
 800763a:	6010      	str	r0, [r2, #0]
 800763c:	7019      	strb	r1, [r3, #0]
 800763e:	4608      	mov	r0, r1
 8007640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007644:	4770      	bx	lr

08007646 <__sfputs_r>:
 8007646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007648:	4606      	mov	r6, r0
 800764a:	460f      	mov	r7, r1
 800764c:	4614      	mov	r4, r2
 800764e:	18d5      	adds	r5, r2, r3
 8007650:	42ac      	cmp	r4, r5
 8007652:	d101      	bne.n	8007658 <__sfputs_r+0x12>
 8007654:	2000      	movs	r0, #0
 8007656:	e007      	b.n	8007668 <__sfputs_r+0x22>
 8007658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765c:	463a      	mov	r2, r7
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff ffda 	bl	8007618 <__sfputc_r>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d1f3      	bne.n	8007650 <__sfputs_r+0xa>
 8007668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800766c <_vfiprintf_r>:
 800766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007670:	460d      	mov	r5, r1
 8007672:	b09d      	sub	sp, #116	; 0x74
 8007674:	4614      	mov	r4, r2
 8007676:	4698      	mov	r8, r3
 8007678:	4606      	mov	r6, r0
 800767a:	b118      	cbz	r0, 8007684 <_vfiprintf_r+0x18>
 800767c:	6983      	ldr	r3, [r0, #24]
 800767e:	b90b      	cbnz	r3, 8007684 <_vfiprintf_r+0x18>
 8007680:	f7ff fb1a 	bl	8006cb8 <__sinit>
 8007684:	4b89      	ldr	r3, [pc, #548]	; (80078ac <_vfiprintf_r+0x240>)
 8007686:	429d      	cmp	r5, r3
 8007688:	d11b      	bne.n	80076c2 <_vfiprintf_r+0x56>
 800768a:	6875      	ldr	r5, [r6, #4]
 800768c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800768e:	07d9      	lsls	r1, r3, #31
 8007690:	d405      	bmi.n	800769e <_vfiprintf_r+0x32>
 8007692:	89ab      	ldrh	r3, [r5, #12]
 8007694:	059a      	lsls	r2, r3, #22
 8007696:	d402      	bmi.n	800769e <_vfiprintf_r+0x32>
 8007698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800769a:	f7ff fbb0 	bl	8006dfe <__retarget_lock_acquire_recursive>
 800769e:	89ab      	ldrh	r3, [r5, #12]
 80076a0:	071b      	lsls	r3, r3, #28
 80076a2:	d501      	bpl.n	80076a8 <_vfiprintf_r+0x3c>
 80076a4:	692b      	ldr	r3, [r5, #16]
 80076a6:	b9eb      	cbnz	r3, 80076e4 <_vfiprintf_r+0x78>
 80076a8:	4629      	mov	r1, r5
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7fe fb02 	bl	8005cb4 <__swsetup_r>
 80076b0:	b1c0      	cbz	r0, 80076e4 <_vfiprintf_r+0x78>
 80076b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076b4:	07dc      	lsls	r4, r3, #31
 80076b6:	d50e      	bpl.n	80076d6 <_vfiprintf_r+0x6a>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	b01d      	add	sp, #116	; 0x74
 80076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c2:	4b7b      	ldr	r3, [pc, #492]	; (80078b0 <_vfiprintf_r+0x244>)
 80076c4:	429d      	cmp	r5, r3
 80076c6:	d101      	bne.n	80076cc <_vfiprintf_r+0x60>
 80076c8:	68b5      	ldr	r5, [r6, #8]
 80076ca:	e7df      	b.n	800768c <_vfiprintf_r+0x20>
 80076cc:	4b79      	ldr	r3, [pc, #484]	; (80078b4 <_vfiprintf_r+0x248>)
 80076ce:	429d      	cmp	r5, r3
 80076d0:	bf08      	it	eq
 80076d2:	68f5      	ldreq	r5, [r6, #12]
 80076d4:	e7da      	b.n	800768c <_vfiprintf_r+0x20>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	0598      	lsls	r0, r3, #22
 80076da:	d4ed      	bmi.n	80076b8 <_vfiprintf_r+0x4c>
 80076dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076de:	f7ff fb8f 	bl	8006e00 <__retarget_lock_release_recursive>
 80076e2:	e7e9      	b.n	80076b8 <_vfiprintf_r+0x4c>
 80076e4:	2300      	movs	r3, #0
 80076e6:	9309      	str	r3, [sp, #36]	; 0x24
 80076e8:	2320      	movs	r3, #32
 80076ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80076f2:	2330      	movs	r3, #48	; 0x30
 80076f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078b8 <_vfiprintf_r+0x24c>
 80076f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076fc:	f04f 0901 	mov.w	r9, #1
 8007700:	4623      	mov	r3, r4
 8007702:	469a      	mov	sl, r3
 8007704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007708:	b10a      	cbz	r2, 800770e <_vfiprintf_r+0xa2>
 800770a:	2a25      	cmp	r2, #37	; 0x25
 800770c:	d1f9      	bne.n	8007702 <_vfiprintf_r+0x96>
 800770e:	ebba 0b04 	subs.w	fp, sl, r4
 8007712:	d00b      	beq.n	800772c <_vfiprintf_r+0xc0>
 8007714:	465b      	mov	r3, fp
 8007716:	4622      	mov	r2, r4
 8007718:	4629      	mov	r1, r5
 800771a:	4630      	mov	r0, r6
 800771c:	f7ff ff93 	bl	8007646 <__sfputs_r>
 8007720:	3001      	adds	r0, #1
 8007722:	f000 80aa 	beq.w	800787a <_vfiprintf_r+0x20e>
 8007726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007728:	445a      	add	r2, fp
 800772a:	9209      	str	r2, [sp, #36]	; 0x24
 800772c:	f89a 3000 	ldrb.w	r3, [sl]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80a2 	beq.w	800787a <_vfiprintf_r+0x20e>
 8007736:	2300      	movs	r3, #0
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007740:	f10a 0a01 	add.w	sl, sl, #1
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	9307      	str	r3, [sp, #28]
 8007748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800774c:	931a      	str	r3, [sp, #104]	; 0x68
 800774e:	4654      	mov	r4, sl
 8007750:	2205      	movs	r2, #5
 8007752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007756:	4858      	ldr	r0, [pc, #352]	; (80078b8 <_vfiprintf_r+0x24c>)
 8007758:	f7f8 fd72 	bl	8000240 <memchr>
 800775c:	9a04      	ldr	r2, [sp, #16]
 800775e:	b9d8      	cbnz	r0, 8007798 <_vfiprintf_r+0x12c>
 8007760:	06d1      	lsls	r1, r2, #27
 8007762:	bf44      	itt	mi
 8007764:	2320      	movmi	r3, #32
 8007766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800776a:	0713      	lsls	r3, r2, #28
 800776c:	bf44      	itt	mi
 800776e:	232b      	movmi	r3, #43	; 0x2b
 8007770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007774:	f89a 3000 	ldrb.w	r3, [sl]
 8007778:	2b2a      	cmp	r3, #42	; 0x2a
 800777a:	d015      	beq.n	80077a8 <_vfiprintf_r+0x13c>
 800777c:	9a07      	ldr	r2, [sp, #28]
 800777e:	4654      	mov	r4, sl
 8007780:	2000      	movs	r0, #0
 8007782:	f04f 0c0a 	mov.w	ip, #10
 8007786:	4621      	mov	r1, r4
 8007788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800778c:	3b30      	subs	r3, #48	; 0x30
 800778e:	2b09      	cmp	r3, #9
 8007790:	d94e      	bls.n	8007830 <_vfiprintf_r+0x1c4>
 8007792:	b1b0      	cbz	r0, 80077c2 <_vfiprintf_r+0x156>
 8007794:	9207      	str	r2, [sp, #28]
 8007796:	e014      	b.n	80077c2 <_vfiprintf_r+0x156>
 8007798:	eba0 0308 	sub.w	r3, r0, r8
 800779c:	fa09 f303 	lsl.w	r3, r9, r3
 80077a0:	4313      	orrs	r3, r2
 80077a2:	9304      	str	r3, [sp, #16]
 80077a4:	46a2      	mov	sl, r4
 80077a6:	e7d2      	b.n	800774e <_vfiprintf_r+0xe2>
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	1d19      	adds	r1, r3, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	9103      	str	r1, [sp, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfbb      	ittet	lt
 80077b4:	425b      	neglt	r3, r3
 80077b6:	f042 0202 	orrlt.w	r2, r2, #2
 80077ba:	9307      	strge	r3, [sp, #28]
 80077bc:	9307      	strlt	r3, [sp, #28]
 80077be:	bfb8      	it	lt
 80077c0:	9204      	strlt	r2, [sp, #16]
 80077c2:	7823      	ldrb	r3, [r4, #0]
 80077c4:	2b2e      	cmp	r3, #46	; 0x2e
 80077c6:	d10c      	bne.n	80077e2 <_vfiprintf_r+0x176>
 80077c8:	7863      	ldrb	r3, [r4, #1]
 80077ca:	2b2a      	cmp	r3, #42	; 0x2a
 80077cc:	d135      	bne.n	800783a <_vfiprintf_r+0x1ce>
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	1d1a      	adds	r2, r3, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	9203      	str	r2, [sp, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bfb8      	it	lt
 80077da:	f04f 33ff 	movlt.w	r3, #4294967295
 80077de:	3402      	adds	r4, #2
 80077e0:	9305      	str	r3, [sp, #20]
 80077e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078c8 <_vfiprintf_r+0x25c>
 80077e6:	7821      	ldrb	r1, [r4, #0]
 80077e8:	2203      	movs	r2, #3
 80077ea:	4650      	mov	r0, sl
 80077ec:	f7f8 fd28 	bl	8000240 <memchr>
 80077f0:	b140      	cbz	r0, 8007804 <_vfiprintf_r+0x198>
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	eba0 000a 	sub.w	r0, r0, sl
 80077f8:	fa03 f000 	lsl.w	r0, r3, r0
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	4303      	orrs	r3, r0
 8007800:	3401      	adds	r4, #1
 8007802:	9304      	str	r3, [sp, #16]
 8007804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007808:	482c      	ldr	r0, [pc, #176]	; (80078bc <_vfiprintf_r+0x250>)
 800780a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800780e:	2206      	movs	r2, #6
 8007810:	f7f8 fd16 	bl	8000240 <memchr>
 8007814:	2800      	cmp	r0, #0
 8007816:	d03f      	beq.n	8007898 <_vfiprintf_r+0x22c>
 8007818:	4b29      	ldr	r3, [pc, #164]	; (80078c0 <_vfiprintf_r+0x254>)
 800781a:	bb1b      	cbnz	r3, 8007864 <_vfiprintf_r+0x1f8>
 800781c:	9b03      	ldr	r3, [sp, #12]
 800781e:	3307      	adds	r3, #7
 8007820:	f023 0307 	bic.w	r3, r3, #7
 8007824:	3308      	adds	r3, #8
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782a:	443b      	add	r3, r7
 800782c:	9309      	str	r3, [sp, #36]	; 0x24
 800782e:	e767      	b.n	8007700 <_vfiprintf_r+0x94>
 8007830:	fb0c 3202 	mla	r2, ip, r2, r3
 8007834:	460c      	mov	r4, r1
 8007836:	2001      	movs	r0, #1
 8007838:	e7a5      	b.n	8007786 <_vfiprintf_r+0x11a>
 800783a:	2300      	movs	r3, #0
 800783c:	3401      	adds	r4, #1
 800783e:	9305      	str	r3, [sp, #20]
 8007840:	4619      	mov	r1, r3
 8007842:	f04f 0c0a 	mov.w	ip, #10
 8007846:	4620      	mov	r0, r4
 8007848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800784c:	3a30      	subs	r2, #48	; 0x30
 800784e:	2a09      	cmp	r2, #9
 8007850:	d903      	bls.n	800785a <_vfiprintf_r+0x1ee>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0c5      	beq.n	80077e2 <_vfiprintf_r+0x176>
 8007856:	9105      	str	r1, [sp, #20]
 8007858:	e7c3      	b.n	80077e2 <_vfiprintf_r+0x176>
 800785a:	fb0c 2101 	mla	r1, ip, r1, r2
 800785e:	4604      	mov	r4, r0
 8007860:	2301      	movs	r3, #1
 8007862:	e7f0      	b.n	8007846 <_vfiprintf_r+0x1da>
 8007864:	ab03      	add	r3, sp, #12
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	462a      	mov	r2, r5
 800786a:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <_vfiprintf_r+0x258>)
 800786c:	a904      	add	r1, sp, #16
 800786e:	4630      	mov	r0, r6
 8007870:	f7fd fd66 	bl	8005340 <_printf_float>
 8007874:	4607      	mov	r7, r0
 8007876:	1c78      	adds	r0, r7, #1
 8007878:	d1d6      	bne.n	8007828 <_vfiprintf_r+0x1bc>
 800787a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800787c:	07d9      	lsls	r1, r3, #31
 800787e:	d405      	bmi.n	800788c <_vfiprintf_r+0x220>
 8007880:	89ab      	ldrh	r3, [r5, #12]
 8007882:	059a      	lsls	r2, r3, #22
 8007884:	d402      	bmi.n	800788c <_vfiprintf_r+0x220>
 8007886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007888:	f7ff faba 	bl	8006e00 <__retarget_lock_release_recursive>
 800788c:	89ab      	ldrh	r3, [r5, #12]
 800788e:	065b      	lsls	r3, r3, #25
 8007890:	f53f af12 	bmi.w	80076b8 <_vfiprintf_r+0x4c>
 8007894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007896:	e711      	b.n	80076bc <_vfiprintf_r+0x50>
 8007898:	ab03      	add	r3, sp, #12
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	462a      	mov	r2, r5
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <_vfiprintf_r+0x258>)
 80078a0:	a904      	add	r1, sp, #16
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7fd fff0 	bl	8005888 <_printf_i>
 80078a8:	e7e4      	b.n	8007874 <_vfiprintf_r+0x208>
 80078aa:	bf00      	nop
 80078ac:	0800815c 	.word	0x0800815c
 80078b0:	0800817c 	.word	0x0800817c
 80078b4:	0800813c 	.word	0x0800813c
 80078b8:	080082f4 	.word	0x080082f4
 80078bc:	080082fe 	.word	0x080082fe
 80078c0:	08005341 	.word	0x08005341
 80078c4:	08007647 	.word	0x08007647
 80078c8:	080082fa 	.word	0x080082fa

080078cc <__sread>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	460c      	mov	r4, r1
 80078d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d4:	f000 f8d6 	bl	8007a84 <_read_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	bfab      	itete	ge
 80078dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078de:	89a3      	ldrhlt	r3, [r4, #12]
 80078e0:	181b      	addge	r3, r3, r0
 80078e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078e6:	bfac      	ite	ge
 80078e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80078ea:	81a3      	strhlt	r3, [r4, #12]
 80078ec:	bd10      	pop	{r4, pc}

080078ee <__swrite>:
 80078ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f2:	461f      	mov	r7, r3
 80078f4:	898b      	ldrh	r3, [r1, #12]
 80078f6:	05db      	lsls	r3, r3, #23
 80078f8:	4605      	mov	r5, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	4616      	mov	r6, r2
 80078fe:	d505      	bpl.n	800790c <__swrite+0x1e>
 8007900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007904:	2302      	movs	r3, #2
 8007906:	2200      	movs	r2, #0
 8007908:	f000 f898 	bl	8007a3c <_lseek_r>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	4632      	mov	r2, r6
 800791a:	463b      	mov	r3, r7
 800791c:	4628      	mov	r0, r5
 800791e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007922:	f000 b817 	b.w	8007954 <_write_r>

08007926 <__sseek>:
 8007926:	b510      	push	{r4, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792e:	f000 f885 	bl	8007a3c <_lseek_r>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	bf15      	itete	ne
 8007938:	6560      	strne	r0, [r4, #84]	; 0x54
 800793a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800793e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007942:	81a3      	strheq	r3, [r4, #12]
 8007944:	bf18      	it	ne
 8007946:	81a3      	strhne	r3, [r4, #12]
 8007948:	bd10      	pop	{r4, pc}

0800794a <__sclose>:
 800794a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794e:	f000 b831 	b.w	80079b4 <_close_r>
	...

08007954 <_write_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d07      	ldr	r5, [pc, #28]	; (8007974 <_write_r+0x20>)
 8007958:	4604      	mov	r4, r0
 800795a:	4608      	mov	r0, r1
 800795c:	4611      	mov	r1, r2
 800795e:	2200      	movs	r2, #0
 8007960:	602a      	str	r2, [r5, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	f7f9 fe39 	bl	80015da <_write>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_write_r+0x1e>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	b103      	cbz	r3, 8007972 <_write_r+0x1e>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	200009f8 	.word	0x200009f8

08007978 <__assert_func>:
 8007978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800797a:	4614      	mov	r4, r2
 800797c:	461a      	mov	r2, r3
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <__assert_func+0x2c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4605      	mov	r5, r0
 8007984:	68d8      	ldr	r0, [r3, #12]
 8007986:	b14c      	cbz	r4, 800799c <__assert_func+0x24>
 8007988:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <__assert_func+0x30>)
 800798a:	9100      	str	r1, [sp, #0]
 800798c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007990:	4906      	ldr	r1, [pc, #24]	; (80079ac <__assert_func+0x34>)
 8007992:	462b      	mov	r3, r5
 8007994:	f000 f81e 	bl	80079d4 <fiprintf>
 8007998:	f000 f893 	bl	8007ac2 <abort>
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <__assert_func+0x38>)
 800799e:	461c      	mov	r4, r3
 80079a0:	e7f3      	b.n	800798a <__assert_func+0x12>
 80079a2:	bf00      	nop
 80079a4:	200006d4 	.word	0x200006d4
 80079a8:	08008305 	.word	0x08008305
 80079ac:	08008312 	.word	0x08008312
 80079b0:	08008340 	.word	0x08008340

080079b4 <_close_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	; (80079d0 <_close_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7f9 fe27 	bl	8001612 <_close>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_close_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_close_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	200009f8 	.word	0x200009f8

080079d4 <fiprintf>:
 80079d4:	b40e      	push	{r1, r2, r3}
 80079d6:	b503      	push	{r0, r1, lr}
 80079d8:	4601      	mov	r1, r0
 80079da:	ab03      	add	r3, sp, #12
 80079dc:	4805      	ldr	r0, [pc, #20]	; (80079f4 <fiprintf+0x20>)
 80079de:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e2:	6800      	ldr	r0, [r0, #0]
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	f7ff fe41 	bl	800766c <_vfiprintf_r>
 80079ea:	b002      	add	sp, #8
 80079ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80079f0:	b003      	add	sp, #12
 80079f2:	4770      	bx	lr
 80079f4:	200006d4 	.word	0x200006d4

080079f8 <_fstat_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d07      	ldr	r5, [pc, #28]	; (8007a18 <_fstat_r+0x20>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	f7f9 fe10 	bl	800162a <_fstat>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	d102      	bne.n	8007a14 <_fstat_r+0x1c>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b103      	cbz	r3, 8007a14 <_fstat_r+0x1c>
 8007a12:	6023      	str	r3, [r4, #0]
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	200009f8 	.word	0x200009f8

08007a1c <_isatty_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d06      	ldr	r5, [pc, #24]	; (8007a38 <_isatty_r+0x1c>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7f9 fe0f 	bl	800164a <_isatty>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_isatty_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_isatty_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200009f8 	.word	0x200009f8

08007a3c <_lseek_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	; (8007a5c <_lseek_r+0x20>)
 8007a40:	4604      	mov	r4, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	602a      	str	r2, [r5, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f7f9 fe08 	bl	8001660 <_lseek>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_lseek_r+0x1e>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_lseek_r+0x1e>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200009f8 	.word	0x200009f8

08007a60 <__ascii_mbtowc>:
 8007a60:	b082      	sub	sp, #8
 8007a62:	b901      	cbnz	r1, 8007a66 <__ascii_mbtowc+0x6>
 8007a64:	a901      	add	r1, sp, #4
 8007a66:	b142      	cbz	r2, 8007a7a <__ascii_mbtowc+0x1a>
 8007a68:	b14b      	cbz	r3, 8007a7e <__ascii_mbtowc+0x1e>
 8007a6a:	7813      	ldrb	r3, [r2, #0]
 8007a6c:	600b      	str	r3, [r1, #0]
 8007a6e:	7812      	ldrb	r2, [r2, #0]
 8007a70:	1e10      	subs	r0, r2, #0
 8007a72:	bf18      	it	ne
 8007a74:	2001      	movne	r0, #1
 8007a76:	b002      	add	sp, #8
 8007a78:	4770      	bx	lr
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	e7fb      	b.n	8007a76 <__ascii_mbtowc+0x16>
 8007a7e:	f06f 0001 	mvn.w	r0, #1
 8007a82:	e7f8      	b.n	8007a76 <__ascii_mbtowc+0x16>

08007a84 <_read_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	; (8007aa4 <_read_r+0x20>)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7f9 fd84 	bl	80015a0 <_read>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_read_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_read_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	200009f8 	.word	0x200009f8

08007aa8 <__ascii_wctomb>:
 8007aa8:	b149      	cbz	r1, 8007abe <__ascii_wctomb+0x16>
 8007aaa:	2aff      	cmp	r2, #255	; 0xff
 8007aac:	bf85      	ittet	hi
 8007aae:	238a      	movhi	r3, #138	; 0x8a
 8007ab0:	6003      	strhi	r3, [r0, #0]
 8007ab2:	700a      	strbls	r2, [r1, #0]
 8007ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ab8:	bf98      	it	ls
 8007aba:	2001      	movls	r0, #1
 8007abc:	4770      	bx	lr
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4770      	bx	lr

08007ac2 <abort>:
 8007ac2:	b508      	push	{r3, lr}
 8007ac4:	2006      	movs	r0, #6
 8007ac6:	f000 f82b 	bl	8007b20 <raise>
 8007aca:	2001      	movs	r0, #1
 8007acc:	f7f9 fd5e 	bl	800158c <_exit>

08007ad0 <_raise_r>:
 8007ad0:	291f      	cmp	r1, #31
 8007ad2:	b538      	push	{r3, r4, r5, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	d904      	bls.n	8007ae4 <_raise_r+0x14>
 8007ada:	2316      	movs	r3, #22
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ae6:	b112      	cbz	r2, 8007aee <_raise_r+0x1e>
 8007ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aec:	b94b      	cbnz	r3, 8007b02 <_raise_r+0x32>
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f830 	bl	8007b54 <_getpid_r>
 8007af4:	462a      	mov	r2, r5
 8007af6:	4601      	mov	r1, r0
 8007af8:	4620      	mov	r0, r4
 8007afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007afe:	f000 b817 	b.w	8007b30 <_kill_r>
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d00a      	beq.n	8007b1c <_raise_r+0x4c>
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	d103      	bne.n	8007b12 <_raise_r+0x42>
 8007b0a:	2316      	movs	r3, #22
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	2001      	movs	r0, #1
 8007b10:	e7e7      	b.n	8007ae2 <_raise_r+0x12>
 8007b12:	2400      	movs	r4, #0
 8007b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b18:	4628      	mov	r0, r5
 8007b1a:	4798      	blx	r3
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e7e0      	b.n	8007ae2 <_raise_r+0x12>

08007b20 <raise>:
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <raise+0xc>)
 8007b22:	4601      	mov	r1, r0
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f7ff bfd3 	b.w	8007ad0 <_raise_r>
 8007b2a:	bf00      	nop
 8007b2c:	200006d4 	.word	0x200006d4

08007b30 <_kill_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	; (8007b50 <_kill_r+0x20>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f7f9 fd15 	bl	800156c <_kill>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_kill_r+0x1c>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_kill_r+0x1c>
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	200009f8 	.word	0x200009f8

08007b54 <_getpid_r>:
 8007b54:	f7f9 bd02 	b.w	800155c <_getpid>

08007b58 <expf>:
 8007b58:	b508      	push	{r3, lr}
 8007b5a:	ed2d 8b02 	vpush	{d8}
 8007b5e:	eef0 8a40 	vmov.f32	s17, s0
 8007b62:	f000 f82f 	bl	8007bc4 <__ieee754_expf>
 8007b66:	eeb0 8a40 	vmov.f32	s16, s0
 8007b6a:	eeb0 0a68 	vmov.f32	s0, s17
 8007b6e:	f000 f919 	bl	8007da4 <finitef>
 8007b72:	b160      	cbz	r0, 8007b8e <expf+0x36>
 8007b74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007bb4 <expf+0x5c>
 8007b78:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	dd0a      	ble.n	8007b98 <expf+0x40>
 8007b82:	f7fd fa15 	bl	8004fb0 <__errno>
 8007b86:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007bb8 <expf+0x60>
 8007b8a:	2322      	movs	r3, #34	; 0x22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	eeb0 0a48 	vmov.f32	s0, s16
 8007b92:	ecbd 8b02 	vpop	{d8}
 8007b96:	bd08      	pop	{r3, pc}
 8007b98:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007bbc <expf+0x64>
 8007b9c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba4:	d5f3      	bpl.n	8007b8e <expf+0x36>
 8007ba6:	f7fd fa03 	bl	8004fb0 <__errno>
 8007baa:	2322      	movs	r3, #34	; 0x22
 8007bac:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007bc0 <expf+0x68>
 8007bb0:	6003      	str	r3, [r0, #0]
 8007bb2:	e7ec      	b.n	8007b8e <expf+0x36>
 8007bb4:	42b17180 	.word	0x42b17180
 8007bb8:	7f800000 	.word	0x7f800000
 8007bbc:	c2cff1b5 	.word	0xc2cff1b5
 8007bc0:	00000000 	.word	0x00000000

08007bc4 <__ieee754_expf>:
 8007bc4:	ee10 2a10 	vmov	r2, s0
 8007bc8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007bcc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007bd0:	d902      	bls.n	8007bd8 <__ieee754_expf+0x14>
 8007bd2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bd6:	4770      	bx	lr
 8007bd8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007bdc:	d106      	bne.n	8007bec <__ieee754_expf+0x28>
 8007bde:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007d18 <__ieee754_expf+0x154>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf18      	it	ne
 8007be6:	eeb0 0a67 	vmovne.f32	s0, s15
 8007bea:	4770      	bx	lr
 8007bec:	484b      	ldr	r0, [pc, #300]	; (8007d1c <__ieee754_expf+0x158>)
 8007bee:	4282      	cmp	r2, r0
 8007bf0:	dd02      	ble.n	8007bf8 <__ieee754_expf+0x34>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f000 b8d0 	b.w	8007d98 <__math_oflowf>
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	da05      	bge.n	8007c08 <__ieee754_expf+0x44>
 8007bfc:	4a48      	ldr	r2, [pc, #288]	; (8007d20 <__ieee754_expf+0x15c>)
 8007bfe:	4291      	cmp	r1, r2
 8007c00:	d902      	bls.n	8007c08 <__ieee754_expf+0x44>
 8007c02:	2000      	movs	r0, #0
 8007c04:	f000 b8c2 	b.w	8007d8c <__math_uflowf>
 8007c08:	4a46      	ldr	r2, [pc, #280]	; (8007d24 <__ieee754_expf+0x160>)
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007c10:	d952      	bls.n	8007cb8 <__ieee754_expf+0xf4>
 8007c12:	4a45      	ldr	r2, [pc, #276]	; (8007d28 <__ieee754_expf+0x164>)
 8007c14:	4291      	cmp	r1, r2
 8007c16:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007c1a:	d834      	bhi.n	8007c86 <__ieee754_expf+0xc2>
 8007c1c:	4943      	ldr	r1, [pc, #268]	; (8007d2c <__ieee754_expf+0x168>)
 8007c1e:	4411      	add	r1, r2
 8007c20:	ed91 7a00 	vldr	s14, [r1]
 8007c24:	4942      	ldr	r1, [pc, #264]	; (8007d30 <__ieee754_expf+0x16c>)
 8007c26:	440a      	add	r2, r1
 8007c28:	edd2 7a00 	vldr	s15, [r2]
 8007c2c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007c30:	f1c3 0201 	rsb	r2, r3, #1
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007c3a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007c3e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007d34 <__ieee754_expf+0x170>
 8007c42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d38 <__ieee754_expf+0x174>
 8007c46:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007c4a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007d3c <__ieee754_expf+0x178>
 8007c4e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007c52:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007d40 <__ieee754_expf+0x17c>
 8007c56:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007c5a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007d44 <__ieee754_expf+0x180>
 8007c5e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007c62:	eef0 6a40 	vmov.f32	s13, s0
 8007c66:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007c6a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007c6e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007c72:	bb92      	cbnz	r2, 8007cda <__ieee754_expf+0x116>
 8007c74:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007c78:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007c7c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007c80:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007c84:	4770      	bx	lr
 8007c86:	4b30      	ldr	r3, [pc, #192]	; (8007d48 <__ieee754_expf+0x184>)
 8007c88:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007d4c <__ieee754_expf+0x188>
 8007c8c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007d50 <__ieee754_expf+0x18c>
 8007c90:	4413      	add	r3, r2
 8007c92:	edd3 7a00 	vldr	s15, [r3]
 8007c96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8007c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ca2:	ee17 2a90 	vmov	r2, s15
 8007ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007caa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007cae:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007d54 <__ieee754_expf+0x190>
 8007cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007cb6:	e7be      	b.n	8007c36 <__ieee754_expf+0x72>
 8007cb8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8007cbc:	d20b      	bcs.n	8007cd6 <__ieee754_expf+0x112>
 8007cbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007d58 <__ieee754_expf+0x194>
 8007cc2:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007cc6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cce:	dd02      	ble.n	8007cd6 <__ieee754_expf+0x112>
 8007cd0:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007cd4:	4770      	bx	lr
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	e7af      	b.n	8007c3a <__ieee754_expf+0x76>
 8007cda:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007cde:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007ce2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007ce6:	bfb8      	it	lt
 8007ce8:	3264      	addlt	r2, #100	; 0x64
 8007cea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007cee:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007cf2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8007cf6:	ee17 3a90 	vmov	r3, s15
 8007cfa:	bfab      	itete	ge
 8007cfc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007d00:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007d04:	ee00 3a10 	vmovge	s0, r3
 8007d08:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007d5c <__ieee754_expf+0x198>
 8007d0c:	bfbc      	itt	lt
 8007d0e:	ee00 3a10 	vmovlt	s0, r3
 8007d12:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007d16:	4770      	bx	lr
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	42b17217 	.word	0x42b17217
 8007d20:	42cff1b5 	.word	0x42cff1b5
 8007d24:	3eb17218 	.word	0x3eb17218
 8007d28:	3f851591 	.word	0x3f851591
 8007d2c:	08008454 	.word	0x08008454
 8007d30:	0800845c 	.word	0x0800845c
 8007d34:	3331bb4c 	.word	0x3331bb4c
 8007d38:	b5ddea0e 	.word	0xb5ddea0e
 8007d3c:	388ab355 	.word	0x388ab355
 8007d40:	bb360b61 	.word	0xbb360b61
 8007d44:	3e2aaaab 	.word	0x3e2aaaab
 8007d48:	0800844c 	.word	0x0800844c
 8007d4c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007d50:	3f317180 	.word	0x3f317180
 8007d54:	3717f7d1 	.word	0x3717f7d1
 8007d58:	7149f2ca 	.word	0x7149f2ca
 8007d5c:	0d800000 	.word	0x0d800000

08007d60 <with_errnof>:
 8007d60:	b513      	push	{r0, r1, r4, lr}
 8007d62:	4604      	mov	r4, r0
 8007d64:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007d68:	f7fd f922 	bl	8004fb0 <__errno>
 8007d6c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007d70:	6004      	str	r4, [r0, #0]
 8007d72:	b002      	add	sp, #8
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <xflowf>:
 8007d76:	b130      	cbz	r0, 8007d86 <xflowf+0x10>
 8007d78:	eef1 7a40 	vneg.f32	s15, s0
 8007d7c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007d80:	2022      	movs	r0, #34	; 0x22
 8007d82:	f7ff bfed 	b.w	8007d60 <with_errnof>
 8007d86:	eef0 7a40 	vmov.f32	s15, s0
 8007d8a:	e7f7      	b.n	8007d7c <xflowf+0x6>

08007d8c <__math_uflowf>:
 8007d8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d94 <__math_uflowf+0x8>
 8007d90:	f7ff bff1 	b.w	8007d76 <xflowf>
 8007d94:	10000000 	.word	0x10000000

08007d98 <__math_oflowf>:
 8007d98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007da0 <__math_oflowf+0x8>
 8007d9c:	f7ff bfeb 	b.w	8007d76 <xflowf>
 8007da0:	70000000 	.word	0x70000000

08007da4 <finitef>:
 8007da4:	b082      	sub	sp, #8
 8007da6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007daa:	9801      	ldr	r0, [sp, #4]
 8007dac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007db0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007db4:	bfac      	ite	ge
 8007db6:	2000      	movge	r0, #0
 8007db8:	2001      	movlt	r0, #1
 8007dba:	b002      	add	sp, #8
 8007dbc:	4770      	bx	lr
	...

08007dc0 <_init>:
 8007dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc2:	bf00      	nop
 8007dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc6:	bc08      	pop	{r3}
 8007dc8:	469e      	mov	lr, r3
 8007dca:	4770      	bx	lr

08007dcc <_fini>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr
