
Fire_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08007db0  08007db0  00017db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008424  08008424  000208a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008424  08008424  00018424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800842c  0800842c  000208a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008a4  20000000  08008434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200008a4  08008cd8  000208a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200009fc  08008cd8  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb4f  00000000  00000000  000208d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221a  00000000  00000000  0002d423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025149  00000000  00000000  00030d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e149  00000000  00000000  00055eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0278  00000000  00000000  00063ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00144272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  00144340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200008a4 	.word	0x200008a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d98 	.word	0x08007d98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200008a8 	.word	0x200008a8
 800020c:	08007d98 	.word	0x08007d98

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <USART2_Init>:
static void MX_TIM14_Init(void);


USART_Handle_t usart2_handle;

void USART2_Init(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <USART2_Init+0x3c>)
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <USART2_Init+0x40>)
 8000f14:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <USART2_Init+0x3c>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <USART2_Init+0x3c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <USART2_Init+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <USART2_Init+0x3c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <USART2_Init+0x3c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <USART2_Init+0x3c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART2_Init+0x3c>)
 8000f3e:	f001 fb5f 	bl	8002600 <USART_Init>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000914 	.word	0x20000914
 8000f4c:	40004400 	.word	0x40004400

08000f50 <USART2_GPIOInit>:

void USART2_GPIOInit(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <USART2_GPIOInit+0x40>)
 8000f58:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f62:	2301      	movs	r3, #1
 8000f64:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f66:	2303      	movs	r3, #3
 8000f68:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fde1 	bl	8001b3c <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fddb 	bl	8001b3c <GPIO_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020000 	.word	0x40020000
 8000f94:	00000000 	.word	0x00000000

08000f98 <main>:

int main(void){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b0b4      	sub	sp, #208	; 0xd0
 8000f9c:	af02      	add	r7, sp, #8
  HAL_Init();
 8000f9e:	f001 fc9f 	bl	80028e0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f969 	bl	8001278 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8000fa6:	f000 f9d3 	bl	8001350 <MX_CRC_Init>
  MX_TIM14_Init();
 8000faa:	f000 f9e5 	bl	8001378 <MX_TIM14_Init>

  color_handle_t current_RGB;

  APDS9960_RGB_INIT();
 8000fae:	f000 fbcd 	bl	800174c <APDS9960_RGB_INIT>

  USART2_GPIOInit();
 8000fb2:	f7ff ffcd 	bl	8000f50 <USART2_GPIOInit>
  USART2_Init();
 8000fb6:	f7ff ffa9 	bl	8000f0c <USART2_Init>
  USART_PeripheralControl(USART2,ENABLE);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4898      	ldr	r0, [pc, #608]	; (8001220 <main+0x288>)
 8000fbe:	f001 fba2 	bl	8002706 <USART_PeripheralControl>
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_FIRE_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_FIRE_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle fire_model = AI_HANDLE_NULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_FIRE_IN_NUM] = AI_FIRE_IN;
 8000fc6:	4b97      	ldr	r3, [pc, #604]	; (8001224 <main+0x28c>)
 8000fc8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000fcc:	461d      	mov	r5, r3
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fd6:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_FIRE_OUT_NUM] = AI_FIRE_OUT;
 8000fda:	4b93      	ldr	r3, [pc, #588]	; (8001228 <main+0x290>)
 8000fdc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fea:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {AI_FIRE_DATA_WEIGHTS(ai_fire_data_weights_get()),
 8000fee:	4b8f      	ldr	r3, [pc, #572]	; (800122c <main+0x294>)
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	80bb      	strh	r3, [r7, #4]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	813b      	strh	r3, [r7, #8]
 8000ffe:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	f002 fe38 	bl	8003c78 <ai_fire_data_weights_get>
 8001008:	4603      	mov	r3, r0
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	4b87      	ldr	r3, [pc, #540]	; (8001230 <main+0x298>)
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	2301      	movs	r3, #1
 8001016:	83bb      	strh	r3, [r7, #28]
 8001018:	2301      	movs	r3, #1
 800101a:	83fb      	strh	r3, [r7, #30]
 800101c:	2301      	movs	r3, #1
 800101e:	843b      	strh	r3, [r7, #32]
 8001020:	2334      	movs	r3, #52	; 0x34
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
 8001024:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  					  AI_FIRE_DATA_ACTIVATIONS(activations)
  					  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001034:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001038:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	86bb      	strh	r3, [r7, #52]	; 0x34
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800103e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001042:	643b      	str	r3, [r7, #64]	; 0x40

  // Start timer/counter
  HAL_TIM_Base_Start(&htim14);
 8001044:	487b      	ldr	r0, [pc, #492]	; (8001234 <main+0x29c>)
 8001046:	f002 fbe7 	bl	8003818 <HAL_TIM_Base_Start>

  // Greetings!
  printf("\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800104a:	487b      	ldr	r0, [pc, #492]	; (8001238 <main+0x2a0>)
 800104c:	f004 fdb4 	bl	8005bb8 <puts>

  // Create instance of neural network
  ai_err = ai_fire_create(&fire_model, AI_FIRE_DATA_CONFIG);
 8001050:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fda8 	bl	8003bac <ai_fire_create>
 800105c:	4603      	mov	r3, r0
 800105e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (ai_err.type != AI_ERROR_NONE){
 8001062:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <main+0xda>
	  printf("Error: could not create NN instance\r\n");
 800106a:	4874      	ldr	r0, [pc, #464]	; (800123c <main+0x2a4>)
 800106c:	f004 fda4 	bl	8005bb8 <puts>
	  while(1);
 8001070:	e7fe      	b.n	8001070 <main+0xd8>
  }

  // Initialize neural network
  if (!ai_fire_init(fire_model, &ai_params)){
 8001072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001074:	463a      	mov	r2, r7
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fdad 	bl	8003bd8 <ai_fire_init>
 800107e:	4603      	mov	r3, r0
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <main+0xfa>
	  printf("Error: could not initialize NN\r\n");
 800108a:	486d      	ldr	r0, [pc, #436]	; (8001240 <main+0x2a8>)
 800108c:	f004 fd94 	bl	8005bb8 <puts>
	  while(1);
 8001090:	e7fe      	b.n	8001090 <main+0xf8>
  }

  while (1){
	  APDS9960_RGB_value(&current_RGB);
 8001092:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fc60 	bl	800195c <APDS9960_RGB_value>

	  // Fill input buffer (use test value)
	  uint16_t total_rgb = current_RGB.Colour_Red + current_RGB.Colour_Green + current_RGB.Colour_Blue;
 800109c:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80010a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80010a4:	4413      	add	r3, r2
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80010ac:	4413      	add	r3, r2
 80010ae:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	  ((ai_float *)in_data)[0] = current_RGB.Colour_Red / total_rgb;
 80010b2:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80010b6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	edc3 7a00 	vstr	s15, [r3]
	  ((ai_float *)in_data)[1] = current_RGB.Colour_Green / total_rgb;
 80010d0:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80010d4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010e6:	3304      	adds	r3, #4
 80010e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ec:	edc3 7a00 	vstr	s15, [r3]
	  ((ai_float *)in_data)[2] = current_RGB.Colour_Blue / total_rgb;
 80010f0:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80010f4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001106:	3308      	adds	r3, #8
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	edc3 7a00 	vstr	s15, [r3]
//	  ((ai_float *)in_data)[0] = 0.34;
//	  ((ai_float *)in_data)[1] = 0.32;
//	  ((ai_float *)in_data)[2] = 0.32;

	  // Fire
	  ((ai_float *)in_data)[0] = 0.54;
 8001110:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <main+0x2ac>)
 8001116:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[1] = 0.28;
 8001118:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800111c:	3304      	adds	r3, #4
 800111e:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <main+0x2b0>)
 8001120:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[2] = 0.18;
 8001122:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001126:	3308      	adds	r3, #8
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <main+0x2b4>)
 800112a:	601a      	str	r2, [r3, #0]


	  // Get current timestamp
	  timestamp = htim14.Instance->CNT;
 800112c:	4b41      	ldr	r3, [pc, #260]	; (8001234 <main+0x29c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	  // Perform inference
	  nbatch = ai_fire_run(fire_model, &ai_input[0], &ai_output[0]);
 8001136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001138:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800113c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fd88 	bl	8003c56 <ai_fire_run>
 8001146:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	  if (nbatch != 1) {
 800114a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800114e:	2b01      	cmp	r3, #1
 8001150:	d002      	beq.n	8001158 <main+0x1c0>
		printf("Error: could not run inference\r\n");
 8001152:	483f      	ldr	r0, [pc, #252]	; (8001250 <main+0x2b8>)
 8001154:	f004 fd30 	bl	8005bb8 <puts>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 8001158:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  // Print output of neural network along with inference time (microseconds)
	  printf("Output: %f | Duration: %lu\r\n", y_val,
 8001162:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001166:	f7ff fa1f 	bl	80005a8 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
			  		  htim14.Instance->CNT - timestamp);
 800116e:	4931      	ldr	r1, [pc, #196]	; (8001234 <main+0x29c>)
 8001170:	6809      	ldr	r1, [r1, #0]
 8001172:	6a48      	ldr	r0, [r1, #36]	; 0x24
	  printf("Output: %f | Duration: %lu\r\n", y_val,
 8001174:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001178:	1a41      	subs	r1, r0, r1
 800117a:	9100      	str	r1, [sp, #0]
 800117c:	4835      	ldr	r0, [pc, #212]	; (8001254 <main+0x2bc>)
 800117e:	f004 fc95 	bl	8005aac <iprintf>

	  if(y_val > 0.9){
 8001182:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001186:	f7ff fa0f 	bl	80005a8 <__aeabi_f2d>
 800118a:	a323      	add	r3, pc, #140	; (adr r3, 8001218 <main+0x280>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fcf2 	bl	8000b78 <__aeabi_dcmpgt>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d03d      	beq.n	8001216 <main+0x27e>
		  USART_SendData(&usart2_handle,(uint8_t*)Test,strlen(Test));
 800119a:	482f      	ldr	r0, [pc, #188]	; (8001258 <main+0x2c0>)
 800119c:	f7ff f842 	bl	8000224 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	492c      	ldr	r1, [pc, #176]	; (8001258 <main+0x2c0>)
 80011a6:	482d      	ldr	r0, [pc, #180]	; (800125c <main+0x2c4>)
 80011a8:	f001 fb23 	bl	80027f2 <USART_SendData>
		  USART_ReceiveDataIT(&usart2_handle,(uint8_t *)Reply, 2);
 80011ac:	2202      	movs	r2, #2
 80011ae:	492c      	ldr	r1, [pc, #176]	; (8001260 <main+0x2c8>)
 80011b0:	482a      	ldr	r0, [pc, #168]	; (800125c <main+0x2c4>)
 80011b2:	f001 fb6c 	bl	800288e <USART_ReceiveDataIT>
		  if (strcmp(Reply, "OK")){
 80011b6:	492b      	ldr	r1, [pc, #172]	; (8001264 <main+0x2cc>)
 80011b8:	4829      	ldr	r0, [pc, #164]	; (8001260 <main+0x2c8>)
 80011ba:	f7ff f829 	bl	8000210 <strcmp>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f43f af66 	beq.w	8001092 <main+0xfa>
			  USART_SendData(&usart2_handle, (uint8_t *)Stext, strlen(Stext));
 80011c6:	4828      	ldr	r0, [pc, #160]	; (8001268 <main+0x2d0>)
 80011c8:	f7ff f82c 	bl	8000224 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4925      	ldr	r1, [pc, #148]	; (8001268 <main+0x2d0>)
 80011d2:	4822      	ldr	r0, [pc, #136]	; (800125c <main+0x2c4>)
 80011d4:	f001 fb0d 	bl	80027f2 <USART_SendData>
			  USART_SendData(&usart2_handle, (uint8_t *)Cnum, strlen(Cnum));
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <main+0x2d4>)
 80011da:	f7ff f823 	bl	8000224 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4922      	ldr	r1, [pc, #136]	; (800126c <main+0x2d4>)
 80011e4:	481d      	ldr	r0, [pc, #116]	; (800125c <main+0x2c4>)
 80011e6:	f001 fb04 	bl	80027f2 <USART_SendData>
			  USART_SendData(&usart2_handle, (uint8_t *)Msg, strlen(Msg));
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <main+0x2d8>)
 80011ec:	f7ff f81a 	bl	8000224 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	491e      	ldr	r1, [pc, #120]	; (8001270 <main+0x2d8>)
 80011f6:	4819      	ldr	r0, [pc, #100]	; (800125c <main+0x2c4>)
 80011f8:	f001 fafb 	bl	80027f2 <USART_SendData>
			  USART_SendData(&usart2_handle, (uint8_t *)End, strlen(End));
 80011fc:	481d      	ldr	r0, [pc, #116]	; (8001274 <main+0x2dc>)
 80011fe:	f7ff f811 	bl	8000224 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	491b      	ldr	r1, [pc, #108]	; (8001274 <main+0x2dc>)
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <main+0x2c4>)
 800120a:	f001 faf2 	bl	80027f2 <USART_SendData>
			  HAL_Delay(1000);
 800120e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001212:	f001 fbd7 	bl	80029c4 <HAL_Delay>
  while (1){
 8001216:	e73c      	b.n	8001092 <main+0xfa>
 8001218:	cccccccd 	.word	0xcccccccd
 800121c:	3feccccc 	.word	0x3feccccc
 8001220:	40004400 	.word	0x40004400
 8001224:	08007e58 	.word	0x08007e58
 8001228:	08007e70 	.word	0x08007e70
 800122c:	40040440 	.word	0x40040440
 8001230:	00040440 	.word	0x00040440
 8001234:	200008c4 	.word	0x200008c4
 8001238:	08007db0 	.word	0x08007db0
 800123c:	08007dcc 	.word	0x08007dcc
 8001240:	08007df4 	.word	0x08007df4
 8001244:	3f0a3d71 	.word	0x3f0a3d71
 8001248:	3e8f5c29 	.word	0x3e8f5c29
 800124c:	3e3851ec 	.word	0x3e3851ec
 8001250:	08007e14 	.word	0x08007e14
 8001254:	08007e34 	.word	0x08007e34
 8001258:	20000000 	.word	0x20000000
 800125c:	20000914 	.word	0x20000914
 8001260:	200008c0 	.word	0x200008c0
 8001264:	08007e54 	.word	0x08007e54
 8001268:	20000004 	.word	0x20000004
 800126c:	20000010 	.word	0x20000010
 8001270:	2000002c 	.word	0x2000002c
 8001274:	20000038 	.word	0x20000038

08001278 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2234      	movs	r2, #52	; 0x34
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f003 febe 	bl	8005008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SystemClock_Config+0xd0>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <SystemClock_Config+0xd0>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <SystemClock_Config+0xd0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <SystemClock_Config+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <SystemClock_Config+0xd4>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ec:	2308      	movs	r3, #8
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80012f0:	2350      	movs	r3, #80	; 0x50
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4618      	mov	r0, r3
 8001306:	f001 ff99 	bl	800323c <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001310:	f000 f856 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	230f      	movs	r3, #15
 8001316:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001318:	2302      	movs	r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2102      	movs	r1, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fc6d 	bl	8002c10 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800133c:	f000 f840 	bl	80013c0 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	; 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_CRC_Init>:
/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_CRC_Init+0x20>)
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <MX_CRC_Init+0x24>)
 8001358:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_CRC_Init+0x20>)
 800135c:	f001 fc3b 	bl	8002bd6 <HAL_CRC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001366:	f000 f82b 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000090c 	.word	0x2000090c
 8001374:	40023000 	.word	0x40023000

08001378 <MX_TIM14_Init>:
/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_TIM14_Init+0x40>)
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <MX_TIM14_Init+0x44>)
 8001380:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <MX_TIM14_Init+0x40>)
 8001384:	224f      	movs	r2, #79	; 0x4f
 8001386:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_TIM14_Init+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65534;
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_TIM14_Init+0x40>)
 8001390:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001394:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_TIM14_Init+0x40>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_TIM14_Init+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM14_Init+0x40>)
 80013a4:	f002 f9e8 	bl	8003778 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80013ae:	f000 f807 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200008c4 	.word	0x200008c4
 80013bc:	40002000 	.word	0x40002000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140a:	2007      	movs	r0, #7
 800140c:	f001 fbb0 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_CRC_MspInit+0x3c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10d      	bne.n	800144a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_CRC_MspInit+0x40>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_CRC_MspInit+0x40>)
 8001438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_CRC_MspInit+0x40>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023000 	.word	0x40023000
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_TIM_Base_MspInit+0x3c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_TIM_Base_MspInit+0x40>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_Base_MspInit+0x40>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_TIM_Base_MspInit+0x40>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40002000 	.word	0x40002000
 80014a0:	40023800 	.word	0x40023800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f001 fa48 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <ITM_SendChar+0x48>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <ITM_SendChar+0x48>)
 8001508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <ITM_SendChar+0x4c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <ITM_SendChar+0x4c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800151a:	bf00      	nop
 800151c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f8      	beq.n	800151c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800152a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000edfc 	.word	0xe000edfc
 8001544:	e0000e00 	.word	0xe0000e00

08001548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	return 1;
 800154c:	2301      	movs	r3, #1
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_kill>:

int _kill(int pid, int sig)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001562:	f003 fd11 	bl	8004f88 <__errno>
 8001566:	4603      	mov	r3, r0
 8001568:	2216      	movs	r2, #22
 800156a:	601a      	str	r2, [r3, #0]
	return -1;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_exit>:

void _exit (int status)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ffe7 	bl	8001558 <_kill>
	while (1) {}		/* Make sure we hang here */
 800158a:	e7fe      	b.n	800158a <_exit+0x12>

0800158c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e00a      	b.n	80015b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800159e:	f3af 8000 	nop.w
 80015a2:	4601      	mov	r1, r0
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	b2ca      	uxtb	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf0      	blt.n	800159e <_read+0x12>
	}

return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e009      	b.n	80015ec <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff89 	bl	80014f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf1      	blt.n	80015d8 <_write+0x12>
	}
	return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001626:	605a      	str	r2, [r3, #4]
	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
	return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f003 fc76 	bl	8004f88 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20020000 	.word	0x20020000
 80016c8:	00000800 	.word	0x00000800
 80016cc:	20000938 	.word	0x20000938
 80016d0:	20000a00 	.word	0x20000a00

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001714:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001722:	f7ff ffd7 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001726:	f003 fc35 	bl	8004f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7ff fc35 	bl	8000f98 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	200008a4 	.word	0x200008a4
  ldr r2, =_sidata
 800173c:	08008434 	.word	0x08008434
  ldr r2, =_sbss
 8001740:	200008a4 	.word	0x200008a4
  ldr r4, =_ebss
 8001744:	200009fc 	.word	0x200009fc

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <APDS9960_RGB_INIT>:

I2C_Handle_t g_apds9960_I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t APDS9960_RGB_INIT(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

	//1. init the i2c pins

	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	220c      	movs	r2, #12
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fc54 	bl	8005008 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8001760:	463b      	mov	r3, r7
 8001762:	220c      	movs	r2, #12
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fc4e 	bl	8005008 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = APDS9960_I2C_GPIO_PORT;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <APDS9960_RGB_INIT+0xac>)
 800176e:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001774:	2302      	movs	r3, #2
 8001776:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = APDS9960_I2C_SDA_PIN;
 8001778:	2307      	movs	r3, #7
 800177a:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800177c:	2301      	movs	r3, #1
 800177e:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = APDS9960_I2C_PUPD;
 8001780:	2301      	movs	r3, #1
 8001782:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001784:	2303      	movs	r3, #3
 8001786:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f9d5 	bl	8001b3c <GPIO_Init>

	i2c_scl.pGPIOx = APDS9960_I2C_GPIO_PORT;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <APDS9960_RGB_INIT+0xac>)
 8001794:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001796:	2304      	movs	r3, #4
 8001798:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800179a:	2302      	movs	r3, #2
 800179c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = APDS9960_I2C_SCL_PIN;
 800179e:	2306      	movs	r3, #6
 80017a0:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80017a2:	2301      	movs	r3, #1
 80017a4:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = APDS9960_I2C_PUPD;
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80017aa:	2303      	movs	r3, #3
 80017ac:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 80017ae:	463b      	mov	r3, r7
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f9c3 	bl	8001b3c <GPIO_Init>

	//2. initialize the i2c peripheral
	g_apds9960_I2cHandle.pI2Cx = APDS9960_I2C;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <APDS9960_RGB_INIT+0xb0>)
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <APDS9960_RGB_INIT+0xb4>)
 80017ba:	601a      	str	r2, [r3, #0]
	g_apds9960_I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <APDS9960_RGB_INIT+0xb0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	725a      	strb	r2, [r3, #9]
	g_apds9960_I2cHandle.I2C_Config.I2C_SCLSpeed = APDS9960_I2C_SPEED;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <APDS9960_RGB_INIT+0xb0>)
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <APDS9960_RGB_INIT+0xb8>)
 80017c6:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_apds9960_I2cHandle);
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <APDS9960_RGB_INIT+0xb0>)
 80017ca:	f000 fc1f 	bl	800200c <I2C_Init>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(APDS9960_I2C, ENABLE);
 80017ce:	2101      	movs	r1, #1
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <APDS9960_RGB_INIT+0xb4>)
 80017d2:	f000 fbc6 	bl	8001f62 <I2C_PeripheralControl>

	// Determine the ATIME register. By default, when the module starts, the ATIME register is set to 0xFF
	// and if nothing is changed, this will affect the sensitivity of the sensor - the sensitivity will be low.
	APDS9960_write(DEFAULT_ATIME, APDS9960_ATIME);
 80017d6:	2181      	movs	r1, #129	; 0x81
 80017d8:	20db      	movs	r0, #219	; 0xdb
 80017da:	f000 f815 	bl	8001808 <APDS9960_write>

	// the next step is to set the AGAIN parameter field (ALS and Color Gain Control)
	// of the Control Register One register (0x8F) to the value corresponding to the gain equal to x4
	// (DEFAULT_AGAIN equal to AGAIN_4X)
	APDS9960_write(DEFAULT_AGAIN, APDS9960_CONTROL);
 80017de:	218f      	movs	r1, #143	; 0x8f
 80017e0:	2001      	movs	r0, #1
 80017e2:	f000 f811 	bl	8001808 <APDS9960_write>

	// enable the ALS option by setting the AEN bit of the Enable Register register (0x80)
	// turn on the module power supply by setting the PON bit of the same register
	APDS9960_write((APDS9960_PON | APDS9960_AEN), APDS9960_ENABLE);
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f80d 	bl	8001808 <APDS9960_write>
//	//5. Read back clock halt bit
//	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
//
//	return ((clock_state >> 7 ) & 0x1);

}
 80017ee:	bf00      	nop
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020400 	.word	0x40020400
 80017fc:	2000093c 	.word	0x2000093c
 8001800:	40005400 	.word	0x40005400
 8001804:	000186a0 	.word	0x000186a0

08001808 <APDS9960_write>:

void APDS9960_write(uint8_t value, uint8_t reg_addr){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_apds9960_I2cHandle, tx, 2, APDS9960_I2C_ADDR, 0);
 8001820:	f107 010c 	add.w	r1, r7, #12
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2339      	movs	r3, #57	; 0x39
 800182a:	2202      	movs	r2, #2
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <APDS9960_write+0x34>)
 800182e:	f000 fcb3 	bl	8002198 <I2C_MasterSendData>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000093c 	.word	0x2000093c

08001840 <APDS9960_read>:

uint8_t APDS9960_read(uint8_t reg_addr){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_apds9960_I2cHandle, &reg_addr, 1, APDS9960_I2C_ADDR, 0);
 800184a:	1df9      	adds	r1, r7, #7
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2339      	movs	r3, #57	; 0x39
 8001852:	2201      	movs	r2, #1
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <APDS9960_read+0x38>)
 8001856:	f000 fc9f 	bl	8002198 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_apds9960_I2cHandle, &data, 1, APDS9960_I2C_ADDR, 0);
 800185a:	f107 010f 	add.w	r1, r7, #15
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2339      	movs	r3, #57	; 0x39
 8001864:	2201      	movs	r2, #1
 8001866:	4804      	ldr	r0, [pc, #16]	; (8001878 <APDS9960_read+0x38>)
 8001868:	f000 fcf9 	bl	800225e <I2C_MasterReceiveData>

    return data;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000093c 	.word	0x2000093c

0800187c <APDS9960_readAmbientLight>:

uint16_t APDS9960_readAmbientLight(){
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_CDATAH );
 8001882:	2095      	movs	r0, #149	; 0x95
 8001884:	f7ff ffdc 	bl	8001840 <APDS9960_read>
 8001888:	4603      	mov	r3, r0
 800188a:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_CDATAL );
 800188c:	2094      	movs	r0, #148	; 0x94
 800188e:	f7ff ffd7 	bl	8001840 <APDS9960_read>
 8001892:	4603      	mov	r3, r0
 8001894:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 8001896:	793b      	ldrb	r3, [r7, #4]
 8001898:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]

    return result;
 80018aa:	88fb      	ldrh	r3, [r7, #6]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <APDS9960_readRedLight>:

/* Read RED light data function */
uint16_t APDS9960_readRedLight(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_RDATAH );
 80018ba:	2097      	movs	r0, #151	; 0x97
 80018bc:	f7ff ffc0 	bl	8001840 <APDS9960_read>
 80018c0:	4603      	mov	r3, r0
 80018c2:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_RDATAL );
 80018c4:	2096      	movs	r0, #150	; 0x96
 80018c6:	f7ff ffbb 	bl	8001840 <APDS9960_read>
 80018ca:	4603      	mov	r3, r0
 80018cc:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 80018ce:	793b      	ldrb	r3, [r7, #4]
 80018d0:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 80018d8:	797b      	ldrb	r3, [r7, #5]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4313      	orrs	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]

    return result;
 80018e2:	88fb      	ldrh	r3, [r7, #6]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <APDS9960_readGreenLight>:

/* Read GREEN light data function */
uint16_t APDS9960_readGreenLight(){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_GDATAH );
 80018f2:	2099      	movs	r0, #153	; 0x99
 80018f4:	f7ff ffa4 	bl	8001840 <APDS9960_read>
 80018f8:	4603      	mov	r3, r0
 80018fa:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_GDATAL );
 80018fc:	2098      	movs	r0, #152	; 0x98
 80018fe:	f7ff ff9f 	bl	8001840 <APDS9960_read>
 8001902:	4603      	mov	r3, r0
 8001904:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 8001906:	793b      	ldrb	r3, [r7, #4]
 8001908:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 8001910:	797b      	ldrb	r3, [r7, #5]
 8001912:	b29a      	uxth	r2, r3
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	4313      	orrs	r3, r2
 8001918:	80fb      	strh	r3, [r7, #6]

    return result;
 800191a:	88fb      	ldrh	r3, [r7, #6]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <APDS9960_readBlueLight>:

/* Read BLUE light data function */
uint16_t APDS9960_readBlueLight(){
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
    uint8_t buffer[ 2 ];
    uint16_t result;

    buffer[ 0 ] = APDS9960_read( APDS9960_BDATAH );
 800192a:	209b      	movs	r0, #155	; 0x9b
 800192c:	f7ff ff88 	bl	8001840 <APDS9960_read>
 8001930:	4603      	mov	r3, r0
 8001932:	713b      	strb	r3, [r7, #4]
    buffer[ 1 ] = APDS9960_read( APDS9960_BDATAL );
 8001934:	209a      	movs	r0, #154	; 0x9a
 8001936:	f7ff ff83 	bl	8001840 <APDS9960_read>
 800193a:	4603      	mov	r3, r0
 800193c:	717b      	strb	r3, [r7, #5]

    result = buffer[ 0 ];
 800193e:	793b      	ldrb	r3, [r7, #4]
 8001940:	80fb      	strh	r3, [r7, #6]
    result <<= 8;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	80fb      	strh	r3, [r7, #6]
    result |= buffer[ 1 ];
 8001948:	797b      	ldrb	r3, [r7, #5]
 800194a:	b29a      	uxth	r2, r3
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4313      	orrs	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]

    return result;
 8001952:	88fb      	ldrh	r3, [r7, #6]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <APDS9960_RGB_value>:

void APDS9960_RGB_value(color_handle_t *rgb_c_data){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	rgb_c_data->Colour_Clear =  APDS9960_readAmbientLight();
 8001964:	f7ff ff8a 	bl	800187c <APDS9960_readAmbientLight>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	801a      	strh	r2, [r3, #0]
	rgb_c_data->Colour_Red =  APDS9960_readRedLight();
 8001970:	f7ff ffa0 	bl	80018b4 <APDS9960_readRedLight>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	805a      	strh	r2, [r3, #2]
	rgb_c_data->Colour_Green =  APDS9960_readGreenLight();
 800197c:	f7ff ffb6 	bl	80018ec <APDS9960_readGreenLight>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	809a      	strh	r2, [r3, #4]
	rgb_c_data->Colour_Blue =  APDS9960_readBlueLight();
 8001988:	f7ff ffcc 	bl	8001924 <APDS9960_readBlueLight>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	80da      	strh	r2, [r3, #6]
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <GPIO_PeriClockControl>:
 *
 * @return          - none
 *
 * @Note            - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d157      	bne.n	8001a5e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a59      	ldr	r2, [pc, #356]	; (8001b18 <GPIO_PeriClockControl+0x17c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d106      	bne.n	80019c4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		}else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80019c2:	e0a3      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a56      	ldr	r2, [pc, #344]	; (8001b20 <GPIO_PeriClockControl+0x184>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d106      	bne.n	80019da <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80019d8:	e098      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a51      	ldr	r2, [pc, #324]	; (8001b24 <GPIO_PeriClockControl+0x188>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d106      	bne.n	80019f0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80019ee:	e08d      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <GPIO_PeriClockControl+0x18c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d106      	bne.n	8001a06 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80019f8:	4b48      	ldr	r3, [pc, #288]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a47      	ldr	r2, [pc, #284]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a04:	e082      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a48      	ldr	r2, [pc, #288]	; (8001b2c <GPIO_PeriClockControl+0x190>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d106      	bne.n	8001a1c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a14:	f043 0310 	orr.w	r3, r3, #16
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a1a:	e077      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <GPIO_PeriClockControl+0x194>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d106      	bne.n	8001a32 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001a24:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a3c      	ldr	r2, [pc, #240]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a30:	e06c      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <GPIO_PeriClockControl+0x198>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d106      	bne.n	8001a48 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a37      	ldr	r2, [pc, #220]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a46:	e061      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <GPIO_PeriClockControl+0x19c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d15d      	bne.n	8001b0c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a5c:	e056      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <GPIO_PeriClockControl+0x17c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d106      	bne.n	8001a74 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a72:	e04b      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB){
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a2a      	ldr	r2, [pc, #168]	; (8001b20 <GPIO_PeriClockControl+0x184>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d106      	bne.n	8001a8a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a82:	f023 0302 	bic.w	r3, r3, #2
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a88:	e040      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC){
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <GPIO_PeriClockControl+0x188>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d106      	bne.n	8001aa0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a9e:	e035      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <GPIO_PeriClockControl+0x18c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d106      	bne.n	8001ab6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001aae:	f023 0308 	bic.w	r3, r3, #8
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ab4:	e02a      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE){
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <GPIO_PeriClockControl+0x190>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d106      	bne.n	8001acc <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001ac4:	f023 0310 	bic.w	r3, r3, #16
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001aca:	e01f      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF){
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <GPIO_PeriClockControl+0x194>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d106      	bne.n	8001ae2 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001ada:	f023 0320 	bic.w	r3, r3, #32
 8001ade:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ae0:	e014      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG){
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <GPIO_PeriClockControl+0x198>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d106      	bne.n	8001af8 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001af6:	e009      	b.n	8001b0c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <GPIO_PeriClockControl+0x19c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d105      	bne.n	8001b0c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <GPIO_PeriClockControl+0x180>)
 8001b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021c00 	.word	0x40021c00

08001b3c <GPIO_Init>:
 *
 * @return          - none
 *
 * @Note            - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff24 	bl	800199c <GPIO_PeriClockControl>

	// 1. configure the mode of GPIO pin
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	795b      	ldrb	r3, [r3, #5]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d821      	bhi.n	8001ba0 <GPIO_Init+0x64>
		// the non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	795b      	ldrb	r3, [r3, #5]
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);   // Clearing
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	791b      	ldrb	r3, [r3, #4]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	408b      	lsls	r3, r1
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	400a      	ands	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;                                                   // Setting
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
		temp = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e0b8      	b.n	8001d12 <GPIO_Init+0x1d6>
	}else{
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	795b      	ldrb	r3, [r3, #5]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d117      	bne.n	8001bd8 <GPIO_Init+0x9c>
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001ba8:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <GPIO_Init+0x18c>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	7912      	ldrb	r2, [r2, #4]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	408a      	lsls	r2, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <GPIO_Init+0x18c>)
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTST BIT
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <GPIO_Init+0x18c>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	7912      	ldrb	r2, [r2, #4]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	2201      	movs	r2, #1
 8001bca:	408a      	lsls	r2, r1
 8001bcc:	43d2      	mvns	r2, r2
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <GPIO_Init+0x18c>)
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	6093      	str	r3, [r2, #8]
 8001bd6:	e035      	b.n	8001c44 <GPIO_Init+0x108>
		}else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	795b      	ldrb	r3, [r3, #5]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d117      	bne.n	8001c10 <GPIO_Init+0xd4>
			// 1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <GPIO_Init+0x18c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	7912      	ldrb	r2, [r2, #4]
 8001be8:	4611      	mov	r1, r2
 8001bea:	2201      	movs	r2, #1
 8001bec:	408a      	lsls	r2, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4a35      	ldr	r2, [pc, #212]	; (8001cc8 <GPIO_Init+0x18c>)
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTST BIT
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <GPIO_Init+0x18c>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	7912      	ldrb	r2, [r2, #4]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	2201      	movs	r2, #1
 8001c02:	408a      	lsls	r2, r1
 8001c04:	43d2      	mvns	r2, r2
 8001c06:	4611      	mov	r1, r2
 8001c08:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <GPIO_Init+0x18c>)
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	60d3      	str	r3, [r2, #12]
 8001c0e:	e019      	b.n	8001c44 <GPIO_Init+0x108>
		}else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	795b      	ldrb	r3, [r3, #5]
 8001c14:	2b06      	cmp	r3, #6
 8001c16:	d115      	bne.n	8001c44 <GPIO_Init+0x108>
			// 1. Configure both the FTSR and the RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <GPIO_Init+0x18c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	7912      	ldrb	r2, [r2, #4]
 8001c20:	4611      	mov	r1, r2
 8001c22:	2201      	movs	r2, #1
 8001c24:	408a      	lsls	r2, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <GPIO_Init+0x18c>)
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <GPIO_Init+0x18c>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	7912      	ldrb	r2, [r2, #4]
 8001c36:	4611      	mov	r1, r2
 8001c38:	2201      	movs	r2, #1
 8001c3a:	408a      	lsls	r2, r1
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <GPIO_Init+0x18c>)
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6093      	str	r3, [r2, #8]
		}
		// 2. Configure the GPIO port selection in the SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	791b      	ldrb	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <GPIO_Init+0x190>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d03b      	beq.n	8001cd8 <GPIO_Init+0x19c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <GPIO_Init+0x194>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d02b      	beq.n	8001cc2 <GPIO_Init+0x186>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <GPIO_Init+0x198>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d024      	beq.n	8001cbe <GPIO_Init+0x182>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <GPIO_Init+0x194>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <GPIO_Init+0x17e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <GPIO_Init+0x190>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d016      	beq.n	8001cb6 <GPIO_Init+0x17a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <GPIO_Init+0x194>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00f      	beq.n	8001cb2 <GPIO_Init+0x176>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <GPIO_Init+0x190>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d008      	beq.n	8001cae <GPIO_Init+0x172>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <GPIO_Init+0x194>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <GPIO_Init+0x16e>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e017      	b.n	8001cda <GPIO_Init+0x19e>
 8001caa:	2300      	movs	r3, #0
 8001cac:	e015      	b.n	8001cda <GPIO_Init+0x19e>
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e013      	b.n	8001cda <GPIO_Init+0x19e>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e011      	b.n	8001cda <GPIO_Init+0x19e>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e00f      	b.n	8001cda <GPIO_Init+0x19e>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e00d      	b.n	8001cda <GPIO_Init+0x19e>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00b      	b.n	8001cda <GPIO_Init+0x19e>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e009      	b.n	8001cda <GPIO_Init+0x19e>
 8001cc6:	bf00      	nop
 8001cc8:	40013c00 	.word	0x40013c00
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	2300      	movs	r3, #0
 8001cda:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();
 8001cdc:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <GPIO_Init+0x314>)
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	4a5b      	ldr	r2, [pc, #364]	; (8001e50 <GPIO_Init+0x314>)
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001ce8:	7c7a      	ldrb	r2, [r7, #17]
 8001cea:	7cbb      	ldrb	r3, [r7, #18]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	fa02 f103 	lsl.w	r1, r2, r3
 8001cf2:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <GPIO_Init+0x318>)
 8001cf4:	7cfb      	ldrb	r3, [r7, #19]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001cfc:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <GPIO_Init+0x31c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	7912      	ldrb	r2, [r2, #4]
 8001d04:	4611      	mov	r1, r2
 8001d06:	2201      	movs	r2, #1
 8001d08:	408a      	lsls	r2, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <GPIO_Init+0x31c>)
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	799b      	ldrb	r3, [r3, #6]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	791b      	ldrb	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	791b      	ldrb	r3, [r3, #4]
 8001d32:	4619      	mov	r1, r3
 8001d34:	2303      	movs	r3, #3
 8001d36:	408b      	lsls	r3, r1
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	400a      	ands	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
	temp = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

	// 3. configure the pupd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	79db      	ldrb	r3, [r3, #7]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	2303      	movs	r3, #3
 8001d78:	408b      	lsls	r3, r1
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	400a      	ands	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68d9      	ldr	r1, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7a1b      	ldrb	r3, [r3, #8]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	791b      	ldrb	r3, [r3, #4]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	4619      	mov	r1, r3
 8001db6:	2301      	movs	r3, #1
 8001db8:	408b      	lsls	r3, r1
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
	temp = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	795b      	ldrb	r3, [r3, #5]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d131      	bne.n	8001e46 <GPIO_Init+0x30a>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	7c3a      	ldrb	r2, [r7, #16]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	7c3a      	ldrb	r2, [r7, #16]
 8001e14:	4001      	ands	r1, r0
 8001e16:	3208      	adds	r2, #8
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  (4 * temp2));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	7c3a      	ldrb	r2, [r7, #16]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7a5b      	ldrb	r3, [r3, #9]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	7c3a      	ldrb	r2, [r7, #16]
 8001e3e:	4301      	orrs	r1, r0
 8001e40:	3208      	adds	r2, #8
 8001e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/w bit=0
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	611a      	str	r2, [r3, #16]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	611a      	str	r2, [r3, #16]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)){
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01f      	beq.n	8001f2a <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7f1b      	ldrb	r3, [r3, #28]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d112      	bne.n	8001f18 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1){
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d11f      	bne.n	8001f3a <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fa3e 	bl	8002382 <I2C_ManageAcking>
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001f16:	e010      	b.n	8001f3a <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]
}
 8001f28:	e007      	b.n	8001f3a <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	60fb      	str	r3, [r7, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <I2C_GenerateStopCondition>:

 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <I2C_PeripheralControl>:
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }
 }

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d106      	bne.n	8001f82 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	}else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8001f80:	e005      	b.n	8001f8e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0201 	bic.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d11f      	bne.n	8001fee <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1){
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <I2C_PeriClockControl+0x60>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d106      	bne.n	8001fc4 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <I2C_PeriClockControl+0x64>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <I2C_PeriClockControl+0x64>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	else{
		//TODO
	}
}
 8001fc2:	e014      	b.n	8001fee <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <I2C_PeriClockControl+0x68>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d106      	bne.n	8001fda <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <I2C_PeriClockControl+0x64>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <I2C_PeriClockControl+0x64>)
 8001fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001fd8:	e009      	b.n	8001fee <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <I2C_PeriClockControl+0x6c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d105      	bne.n	8001fee <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <I2C_PeriClockControl+0x64>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a06      	ldr	r2, [pc, #24]	; (8002000 <I2C_PeriClockControl+0x64>)
 8001fe8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40005400 	.word	0x40005400
 8002000:	40023800 	.word	0x40023800
 8002004:	40005800 	.word	0x40005800
 8002008:	40005c00 	.word	0x40005c00

0800200c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ffbc 	bl	8001f9c <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7a5b      	ldrb	r3, [r3, #9]
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 800203e:	f000 f9bd 	bl	80023bc <RCC_GetPCLK1Value>
 8002042:	4603      	mov	r3, r0
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <I2C_Init+0x158>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800205c:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7a1b      	ldrb	r3, [r3, #8]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a36      	ldr	r2, [pc, #216]	; (8002168 <I2C_Init+0x15c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d80f      	bhi.n	80020b2 <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8002092:	f000 f993 	bl	80023bc <RCC_GetPCLK1Value>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80020a4:	897b      	ldrh	r3, [r7, #10]
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e02d      	b.n	800210e <I2C_Init+0x102>
	}else{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7a9b      	ldrb	r3, [r3, #10]
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	461a      	mov	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7a9b      	ldrb	r3, [r3, #10]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10b      	bne.n	80020e8 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80020d0:	f000 f974 	bl	80023bc <RCC_GetPCLK1Value>
 80020d4:	4601      	mov	r1, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e4:	817b      	strh	r3, [r7, #10]
 80020e6:	e00c      	b.n	8002102 <I2C_Init+0xf6>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80020e8:	f000 f968 	bl	80023bc <RCC_GetPCLK1Value>
 80020ec:	4601      	mov	r1, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	009a      	lsls	r2, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002100:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <I2C_Init+0x15c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d809      	bhi.n	8002134 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8002120:	f000 f94c 	bl	80023bc <RCC_GetPCLK1Value>
 8002124:	4603      	mov	r3, r0
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <I2C_Init+0x158>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e00d      	b.n	8002150 <I2C_Init+0x144>
	}else{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8002134:	f000 f942 	bl	80023bc <RCC_GetPCLK1Value>
 8002138:	4603      	mov	r3, r0
 800213a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	0a5b      	lsrs	r3, r3, #9
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <I2C_Init+0x160>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	09db      	lsrs	r3, r3, #7
 800214c:	3301      	adds	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800215a:	621a      	str	r2, [r3, #32]
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	431bde83 	.word	0x431bde83
 8002168:	000186a0 	.word	0x000186a0
 800216c:	00044b83 	.word	0x00044b83

08002170 <I2C_GetFlagStatus>:

void I2C_DeInit(I2C_RegDef_t *pI2Cx){

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fe56 	bl	8001e5c <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 80021b0:	bf00      	nop
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ffd9 	bl	8002170 <I2C_GetFlagStatus>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f6      	beq.n	80021b2 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fe55 	bl	8001e7c <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 80021d2:	bf00      	nop
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ffc8 	bl	8002170 <I2C_GetFlagStatus>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f6      	beq.n	80021d4 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff fe74 	bl	8001ed4 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0
	while(Len > 0){
 80021ec:	e014      	b.n	8002218 <I2C_MasterSendData+0x80>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80021ee:	bf00      	nop
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffba 	bl	8002170 <I2C_GetFlagStatus>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f6      	beq.n	80021f0 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	3301      	adds	r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
		Len--;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3b01      	subs	r3, #1
 8002216:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e7      	bne.n	80021ee <I2C_MasterSendData+0x56>
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 800221e:	bf00      	nop
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ffa2 	bl	8002170 <I2C_GetFlagStatus>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f6      	beq.n	8002220 <I2C_MasterSendData+0x88>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8002232:	bf00      	nop
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2104      	movs	r1, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff98 	bl	8002170 <I2C_GetFlagStatus>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f6      	beq.n	8002234 <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8002246:	7e3b      	ldrb	r3, [r7, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe76 	bl	8001f42 <I2C_GenerateStopCondition>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr){
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	4611      	mov	r1, r2
 800226a:	461a      	mov	r2, r3
 800226c:	460b      	mov	r3, r1
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	4613      	mov	r3, r2
 8002272:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fdef 	bl	8001e5c <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 800227e:	bf00      	nop
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff72 	bl	8002170 <I2C_GetFlagStatus>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f6      	beq.n	8002280 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	79ba      	ldrb	r2, [r7, #6]
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fe04 	bl	8001ea8 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80022a0:	bf00      	nop
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff61 	bl	8002170 <I2C_GetFlagStatus>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f6      	beq.n	80022a2 <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len == 1){
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d121      	bne.n	80022fe <I2C_MasterReceiveData+0xa0>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f85e 	bl	8002382 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fe04 	bl	8001ed4 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80022cc:	bf00      	nop
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff4b 	bl	8002170 <I2C_GetFlagStatus>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f6      	beq.n	80022ce <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80022e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe28 	bl	8001f42 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	701a      	strb	r2, [r3, #0]
	}
    //procedure to read data from slave when Len > 1
	if(Len > 1){
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d930      	bls.n	8002366 <I2C_MasterReceiveData+0x108>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fde5 	bl	8001ed4 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--){
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e027      	b.n	8002360 <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8002310:	bf00      	nop
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff29 	bl	8002170 <I2C_GetFlagStatus>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f6      	beq.n	8002312 <I2C_MasterReceiveData+0xb4>
			//if last 2 bytes are remaining
			if(i == 2){
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d10e      	bne.n	8002348 <I2C_MasterReceiveData+0xea>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f826 	bl	8002382 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8002336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fdfd 	bl	8001f42 <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--){
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3b01      	subs	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1d4      	bne.n	8002310 <I2C_MasterReceiveData+0xb2>
		}
	}
	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)	{
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	7a5b      	ldrb	r3, [r3, #9]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f804 	bl	8002382 <I2C_ManageAcking>
	}
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
	}else{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80023a0:	e005      	b.n	80023ae <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <RCC_GetPCLK1Value>:
#include "rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <RCC_GetPCLK1Value+0x9c>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 ){
 80023d0:	7a7b      	ldrb	r3, [r7, #9]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <RCC_GetPCLK1Value+0xa0>)
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e00b      	b.n	80023f4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 80023dc:	7a7b      	ldrb	r3, [r7, #9]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <RCC_GetPCLK1Value+0xa4>)
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	e005      	b.n	80023f4 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2){
 80023e8:	7a7b      	ldrb	r3, [r7, #9]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d102      	bne.n	80023f4 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80023ee:	f000 f88d 	bl	800250c <RCC_GetPLLOutputClock>
 80023f2:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <RCC_GetPCLK1Value+0x9c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8002402:	7a3b      	ldrb	r3, [r7, #8]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d802      	bhi.n	800240e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8002408:	2301      	movs	r3, #1
 800240a:	72fb      	strb	r3, [r7, #11]
 800240c:	e005      	b.n	800241a <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp-8];
 800240e:	7a3b      	ldrb	r3, [r7, #8]
 8002410:	3b08      	subs	r3, #8
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <RCC_GetPCLK1Value+0xa8>)
 8002414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002418:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <RCC_GetPCLK1Value+0x9c>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8002428:	7a3b      	ldrb	r3, [r7, #8]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d802      	bhi.n	8002434 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	72bb      	strb	r3, [r7, #10]
 8002432:	e004      	b.n	800243e <RCC_GetPCLK1Value+0x82>
	}else{
		apb1p = APB1_PreScaler[temp-4];
 8002434:	7a3b      	ldrb	r3, [r7, #8]
 8002436:	3b04      	subs	r3, #4
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <RCC_GetPCLK1Value+0xac>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	fbb2 f2f3 	udiv	r2, r2, r3
 8002446:	7abb      	ldrb	r3, [r7, #10]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800244e:	687b      	ldr	r3, [r7, #4]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200
 8002464:	20000040 	.word	0x20000040
 8002468:	20000050 	.word	0x20000050

0800246c <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void){
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <RCC_GetPCLK2Value+0x8c>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0){
 8002484:	7a7b      	ldrb	r3, [r7, #9]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <RCC_GetPCLK2Value+0x24>
		SystemClock = 16000000;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <RCC_GetPCLK2Value+0x90>)
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e001      	b.n	8002494 <RCC_GetPCLK2Value+0x28>
	}else{
		SystemClock = 8000000;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <RCC_GetPCLK2Value+0x94>)
 8002492:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <RCC_GetPCLK2Value+0x8c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b07      	cmp	r3, #7
 80024a4:	d802      	bhi.n	80024ac <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	72fb      	strb	r3, [r7, #11]
 80024aa:	e005      	b.n	80024b8 <RCC_GetPCLK2Value+0x4c>
	}else{
       ahbp = AHB_PreScaler[tmp-8];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b08      	subs	r3, #8
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <RCC_GetPCLK2Value+0x98>)
 80024b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b6:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <RCC_GetPCLK2Value+0x8c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	0b5b      	lsrs	r3, r3, #13
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d802      	bhi.n	80024d0 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	72bb      	strb	r3, [r7, #10]
 80024ce:	e004      	b.n	80024da <RCC_GetPCLK2Value+0x6e>
	}else{
		apb2p = APB1_PreScaler[tmp-4];
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b04      	subs	r3, #4
 80024d4:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <RCC_GetPCLK2Value+0x9c>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e2:	7abb      	ldrb	r3, [r7, #10]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	603b      	str	r3, [r7, #0]

	return pclk2;
 80024ea:	683b      	ldr	r3, [r7, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40023800 	.word	0x40023800
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200
 8002504:	20000040 	.word	0x20000040
 8002508:	20000050 	.word	0x20000050

0800250c <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock(){
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <USART_SetBaudRate>:
 *      Author: SOUMYA
 */

#include "uart_driver.h"

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;
	uint32_t tempreg=0;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]

 	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <USART_SetBaudRate+0xd8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <USART_SetBaudRate+0x1e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <USART_SetBaudRate+0xdc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d103      	bne.n	8002542 <USART_SetBaudRate+0x26>
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 800253a:	f7ff ff97 	bl	800246c <RCC_GetPCLK2Value>
 800253e:	61f8      	str	r0, [r7, #28]
 8002540:	e002      	b.n	8002548 <USART_SetBaudRate+0x2c>
	}else{
		PCLKx = RCC_GetPCLK1Value();
 8002542:	f7ff ff3b 	bl	80023bc <RCC_GetPCLK1Value>
 8002546:	61f8      	str	r0, [r7, #28]
	}
		//Check for OVER8 configuration bit
		if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <USART_SetBaudRate+0x50>
			//OVER8 = 1 , over sampling by 8
			usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009a      	lsls	r2, r3, #2
 800255e:	441a      	add	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	e00a      	b.n	8002582 <USART_SetBaudRate+0x66>
	}else{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009a      	lsls	r2, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	61bb      	str	r3, [r7, #24]
	}

	 //Calculate the Mantissa part
	 M_part = usartdiv/100;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <USART_SetBaudRate+0xe0>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	60fb      	str	r3, [r7, #12]
		  //Place the Mantissa part in appropriate bit position . refer USART_BRR
	 tempreg |= M_part << 4;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

	 //Extract the fraction part
	 F_part = (usartdiv - (M_part * 100));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2264      	movs	r2, #100	; 0x64
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]

	 //Calculate the final fractional
     if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)){
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <USART_SetBaudRate+0xac>
    	 //OVER8 = 1 , over sampling by 8
    	 F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	3332      	adds	r3, #50	; 0x32
 80025b8:	4a10      	ldr	r2, [pc, #64]	; (80025fc <USART_SetBaudRate+0xe0>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e009      	b.n	80025dc <USART_SetBaudRate+0xc0>
     }else{
    	 //over sampling by 16
    	 F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	3332      	adds	r3, #50	; 0x32
 80025ce:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <USART_SetBaudRate+0xe0>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	617b      	str	r3, [r7, #20]
     }

     //Place the fractional part in appropriate bit position . refer USART_BRR
     tempreg |= F_part;
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

     //copy the value of tempreg in to BRR register
     pUSARTx->BRR = tempreg;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	609a      	str	r2, [r3, #8]
 }
 80025ea:	bf00      	nop
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40011400 	.word	0x40011400
 80025fc:	51eb851f 	.word	0x51eb851f

08002600 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle){
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

     /******************************** Configuration of CR1*********************/
	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f894 	bl	8002740 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	791b      	ldrb	r3, [r3, #4]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d104      	bne.n	800262a <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e010      	b.n	800264c <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d104      	bne.n	800263c <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e007      	b.n	800264c <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d103      	bne.n	800264c <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f043 030c 	orr.w	r3, r3, #12
 800264a:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7b5b      	ldrb	r3, [r3, #13]
 8002650:	031b      	lsls	r3, r3, #12
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7b9b      	ldrb	r3, [r3, #14]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d104      	bne.n	800266c <USART_Init+0x6c>
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e00b      	b.n	8002684 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD ){
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7b9b      	ldrb	r3, [r3, #14]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d107      	bne.n	8002684 <USART_Init+0x84>
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002682:	60fb      	str	r3, [r7, #12]

	}

    //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	60da      	str	r2, [r3, #12]

    /******************************** Configuration of CR2******************************************/

	tempreg=0;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7b1b      	ldrb	r3, [r3, #12]
 8002694:	031b      	lsls	r3, r3, #12
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7bdb      	ldrb	r3, [r3, #15]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d104      	bne.n	80026bc <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e014      	b.n	80026e6 <USART_Init+0xe6>
	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7bdb      	ldrb	r3, [r3, #15]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d104      	bne.n	80026ce <USART_Init+0xce>
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e00b      	b.n	80026e6 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7bdb      	ldrb	r3, [r3, #15]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d107      	bne.n	80026e6 <USART_Init+0xe6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026dc:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	60fb      	str	r3, [r7, #12]
	}
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	615a      	str	r2, [r3, #20]

    /******************************** Configuration of BRR(Baudrate register)******************************************/
	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7ff ff0f 	bl	800251c <USART_SetBaudRate>
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd){
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE){
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << 13);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 8002724:	e005      	b.n	8002732 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60da      	str	r2, [r3, #12]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <USART_PeriClockControl>:

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d12a      	bne.n	80027a8 <USART_PeriClockControl+0x68>
		if(pUSARTx == USART1){
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <USART_PeriClockControl+0x74>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d106      	bne.n	8002768 <USART_PeriClockControl+0x28>
			USART1_PCCK_EN();
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <USART_PeriClockControl+0x78>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <USART_PeriClockControl+0x78>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
		}
	}
	else{
		//TODO
	}
}
 8002766:	e01f      	b.n	80027a8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2){
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <USART_PeriClockControl+0x7c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d106      	bne.n	800277e <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <USART_PeriClockControl+0x78>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <USART_PeriClockControl+0x78>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800277c:	e014      	b.n	80027a8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3){
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <USART_PeriClockControl+0x80>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d106      	bne.n	8002794 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <USART_PeriClockControl+0x78>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <USART_PeriClockControl+0x78>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002792:	e009      	b.n	80027a8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == UART4){
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <USART_PeriClockControl+0x84>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d105      	bne.n	80027a8 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <USART_PeriClockControl+0x78>)
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <USART_PeriClockControl+0x78>)
 80027a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027a6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40004400 	.word	0x40004400
 80027c0:	40004800 	.word	0x40004800
 80027c4:	40004c00 	.word	0x40004c00

080027c8 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName){
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName){
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <USART_GetFlagStatus+0x1c>
    	return SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <USART_GetFlagStatus+0x1e>
    }
   return RESET;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <USART_SendData>:

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++){
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e031      	b.n	8002868 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8002804:	bf00      	nop
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ffdb 	bl	80027c8 <USART_GetFlagStatus>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f6      	beq.n	8002806 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	7b5b      	ldrb	r3, [r3, #13]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d118      	bne.n	8002852 <USART_SendData+0x60>
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002832:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	7b9b      	ldrb	r3, [r3, #14]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <USART_SendData+0x58>
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3301      	adds	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e00b      	b.n	8002862 <USART_SendData+0x70>
			}else{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	e007      	b.n	8002862 <USART_SendData+0x70>
			}
		}else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++){
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3301      	adds	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3c9      	bcc.n	8002804 <USART_SendData+0x12>
		}
	}
	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8002870:	bf00      	nop
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ffa5 	bl	80027c8 <USART_GetFlagStatus>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f6      	beq.n	8002872 <USART_SendData+0x80>
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <USART_ReceiveDataIT>:
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_TCIE);
	}
	return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len){
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a0:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX){
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d014      	beq.n	80028d2 <USART_ReceiveDataIT+0x44>
		pUSARTHandle->RxLen = Len;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <HAL_Init+0x40>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_Init+0x40>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_Init+0x40>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 f931 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7fe fd5a 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f93b 	bl	8002bbe <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f000 f911 	bl	8002b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	2000003c 	.word	0x2000003c
 800297c:	20000058 	.word	0x20000058
 8002980:	20000054 	.word	0x20000054

08002984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000058 	.word	0x20000058
 80029a8:	20000964 	.word	0x20000964

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000964 	.word	0x20000964

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000058 	.word	0x20000058

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff47 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b98:	f7ff ff5c 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff ff8e 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff5d 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffb0 	bl	8002b2c <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00e      	b.n	8002c06 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	795b      	ldrb	r3, [r3, #5]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fe fc0f 	bl	800141c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cc      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90c      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d044      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4934      	ldr	r1, [pc, #208]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7ff fe54 	bl	80029ac <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7ff fe50 	bl	80029ac <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d20c      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f821 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490a      	ldr	r1, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fdb4 	bl	8002924 <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08007e8c 	.word	0x08007e8c
 8002dd4:	2000003c 	.word	0x2000003c
 8002dd8:	20000054 	.word	0x20000054

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b0ae      	sub	sp, #184	; 0xb8
 8002de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e02:	4bcb      	ldr	r3, [pc, #812]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	f200 8206 	bhi.w	800321c <HAL_RCC_GetSysClockFreq+0x440>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	0800321d 	.word	0x0800321d
 8002e20:	0800321d 	.word	0x0800321d
 8002e24:	0800321d 	.word	0x0800321d
 8002e28:	08002e55 	.word	0x08002e55
 8002e2c:	0800321d 	.word	0x0800321d
 8002e30:	0800321d 	.word	0x0800321d
 8002e34:	0800321d 	.word	0x0800321d
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	0800321d 	.word	0x0800321d
 8002e40:	0800321d 	.word	0x0800321d
 8002e44:	0800321d 	.word	0x0800321d
 8002e48:	0800304d 	.word	0x0800304d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4bb9      	ldr	r3, [pc, #740]	; (8003134 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e52:	e1e7      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e54:	4bb8      	ldr	r3, [pc, #736]	; (8003138 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e5a:	e1e3      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e5c:	4bb4      	ldr	r3, [pc, #720]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e68:	4bb1      	ldr	r3, [pc, #708]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d071      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e74:	4bae      	ldr	r3, [pc, #696]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e80:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eac:	0150      	lsls	r0, r2, #5
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	1a51      	subs	r1, r2, r1
 8002eb6:	6439      	str	r1, [r7, #64]	; 0x40
 8002eb8:	4629      	mov	r1, r5
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ecc:	4649      	mov	r1, r9
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	018a      	lsls	r2, r1, #6
 8002eda:	4641      	mov	r1, r8
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	00cb      	lsls	r3, r1, #3
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002efe:	4641      	mov	r1, r8
 8002f00:	00ca      	lsls	r2, r1, #3
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	4622      	mov	r2, r4
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f0e:	462b      	mov	r3, r5
 8002f10:	460a      	mov	r2, r1
 8002f12:	eb42 0303 	adc.w	r3, r2, r3
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f24:	4629      	mov	r1, r5
 8002f26:	024b      	lsls	r3, r1, #9
 8002f28:	4621      	mov	r1, r4
 8002f2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2e:	4621      	mov	r1, r4
 8002f30:	024a      	lsls	r2, r1, #9
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f48:	f7fd fe5e 	bl	8000c08 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f56:	e067      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f58:	4b75      	ldr	r3, [pc, #468]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f64:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f70:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f72:	2300      	movs	r3, #0
 8002f74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	f04f 0000 	mov.w	r0, #0
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8c:	0150      	lsls	r0, r2, #5
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4621      	mov	r1, r4
 8002f94:	1a51      	subs	r1, r2, r1
 8002f96:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f98:	4629      	mov	r1, r5
 8002f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fac:	4649      	mov	r1, r9
 8002fae:	018b      	lsls	r3, r1, #6
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	018a      	lsls	r2, r1, #6
 8002fba:	4641      	mov	r1, r8
 8002fbc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fda:	4692      	mov	sl, r2
 8002fdc:	469b      	mov	fp, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	eb1a 0303 	adds.w	r3, sl, r3
 8002fe4:	623b      	str	r3, [r7, #32]
 8002fe6:	462b      	mov	r3, r5
 8002fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	028b      	lsls	r3, r1, #10
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003004:	4621      	mov	r1, r4
 8003006:	028a      	lsls	r2, r1, #10
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003010:	2200      	movs	r2, #0
 8003012:	673b      	str	r3, [r7, #112]	; 0x70
 8003014:	677a      	str	r2, [r7, #116]	; 0x74
 8003016:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800301a:	f7fd fdf5 	bl	8000c08 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4613      	mov	r3, r2
 8003024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003028:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800303a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800303e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800304a:	e0eb      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800304c:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003058:	4b35      	ldr	r3, [pc, #212]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d06b      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <HAL_RCC_GetSysClockFreq+0x354>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	2200      	movs	r2, #0
 800306c:	66bb      	str	r3, [r7, #104]	; 0x68
 800306e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	663b      	str	r3, [r7, #96]	; 0x60
 8003078:	2300      	movs	r3, #0
 800307a:	667b      	str	r3, [r7, #100]	; 0x64
 800307c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003080:	4622      	mov	r2, r4
 8003082:	462b      	mov	r3, r5
 8003084:	f04f 0000 	mov.w	r0, #0
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	0159      	lsls	r1, r3, #5
 800308e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003092:	0150      	lsls	r0, r2, #5
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4621      	mov	r1, r4
 800309a:	1a51      	subs	r1, r2, r1
 800309c:	61b9      	str	r1, [r7, #24]
 800309e:	4629      	mov	r1, r5
 80030a0:	eb63 0301 	sbc.w	r3, r3, r1
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030b2:	4659      	mov	r1, fp
 80030b4:	018b      	lsls	r3, r1, #6
 80030b6:	4651      	mov	r1, sl
 80030b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030bc:	4651      	mov	r1, sl
 80030be:	018a      	lsls	r2, r1, #6
 80030c0:	4651      	mov	r1, sl
 80030c2:	ebb2 0801 	subs.w	r8, r2, r1
 80030c6:	4659      	mov	r1, fp
 80030c8:	eb63 0901 	sbc.w	r9, r3, r1
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e0:	4690      	mov	r8, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	eb18 0303 	adds.w	r3, r8, r3
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	462b      	mov	r3, r5
 80030ee:	eb49 0303 	adc.w	r3, r9, r3
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003100:	4629      	mov	r1, r5
 8003102:	024b      	lsls	r3, r1, #9
 8003104:	4621      	mov	r1, r4
 8003106:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800310a:	4621      	mov	r1, r4
 800310c:	024a      	lsls	r2, r1, #9
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003116:	2200      	movs	r2, #0
 8003118:	65bb      	str	r3, [r7, #88]	; 0x58
 800311a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800311c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003120:	f7fd fd72 	bl	8000c08 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800312e:	e065      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x420>
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313c:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <HAL_RCC_GetSysClockFreq+0x458>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	2200      	movs	r2, #0
 8003144:	4618      	mov	r0, r3
 8003146:	4611      	mov	r1, r2
 8003148:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800314c:	653b      	str	r3, [r7, #80]	; 0x50
 800314e:	2300      	movs	r3, #0
 8003150:	657b      	str	r3, [r7, #84]	; 0x54
 8003152:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003156:	4642      	mov	r2, r8
 8003158:	464b      	mov	r3, r9
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4641      	mov	r1, r8
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	4649      	mov	r1, r9
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	1a54      	subs	r4, r2, r1
 800319a:	4659      	mov	r1, fp
 800319c:	eb63 0501 	sbc.w	r5, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	00eb      	lsls	r3, r5, #3
 80031aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ae:	00e2      	lsls	r2, r4, #3
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	4643      	mov	r3, r8
 80031b6:	18e3      	adds	r3, r4, r3
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	464b      	mov	r3, r9
 80031bc:	eb45 0303 	adc.w	r3, r5, r3
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ce:	4629      	mov	r1, r5
 80031d0:	028b      	lsls	r3, r1, #10
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d8:	4621      	mov	r1, r4
 80031da:	028a      	lsls	r2, r1, #10
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e4:	2200      	movs	r2, #0
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031ee:	f7fd fd0b 	bl	8000c08 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4613      	mov	r3, r2
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_RCC_GetSysClockFreq+0x458>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0f1b      	lsrs	r3, r3, #28
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800320a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800320e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800321a:	e003      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetSysClockFreq+0x45c>)
 800321e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003222:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003228:	4618      	mov	r0, r3
 800322a:	37b8      	adds	r7, #184	; 0xb8
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400

0800323c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e28d      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8083 	beq.w	8003362 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800325c:	4b94      	ldr	r3, [pc, #592]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b04      	cmp	r3, #4
 8003266:	d019      	beq.n	800329c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003268:	4b91      	ldr	r3, [pc, #580]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003270:	2b08      	cmp	r3, #8
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003274:	4b8e      	ldr	r3, [pc, #568]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b8b      	ldr	r3, [pc, #556]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x124>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e25a      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x90>
 80032be:	4b7c      	ldr	r3, [pc, #496]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7b      	ldr	r2, [pc, #492]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xcc>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xb4>
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a75      	ldr	r2, [pc, #468]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a72      	ldr	r2, [pc, #456]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xcc>
 80032f0:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6e      	ldr	r2, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6b      	ldr	r2, [pc, #428]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff fb4c 	bl	80029ac <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff fb48 	bl	80029ac <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e21f      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xdc>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7ff fb38 	bl	80029ac <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff fb34 	bl	80029ac <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e20b      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x104>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d06f      	beq.n	800344e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800336e:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d017      	beq.n	80033aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800337a:	4b4d      	ldr	r3, [pc, #308]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d105      	bne.n	8003392 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800339a:	2b0c      	cmp	r3, #12
 800339c:	d11c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339e:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d116      	bne.n	80033d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_RCC_OscConfig+0x186>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1d3      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4937      	ldr	r1, [pc, #220]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	e03a      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e0:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <HAL_RCC_OscConfig+0x278>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7ff fae1 	bl	80029ac <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ee:	f7ff fadd 	bl	80029ac <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1b4      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4925      	ldr	r1, [pc, #148]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
 8003420:	e015      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_OscConfig+0x278>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7ff fac0 	bl	80029ac <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003430:	f7ff fabc 	bl	80029ac <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e193      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d036      	beq.n	80034c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff faa0 	bl	80029ac <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003470:	f7ff fa9c 	bl	80029ac <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e173      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_OscConfig+0x274>)
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x234>
 800348e:	e01b      	b.n	80034c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7ff fa89 	bl	80029ac <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	e00e      	b.n	80034bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349e:	f7ff fa85 	bl	80029ac <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d907      	bls.n	80034bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e15c      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	42470000 	.word	0x42470000
 80034b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	4b8a      	ldr	r3, [pc, #552]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ea      	bne.n	800349e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8097 	beq.w	8003604 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b83      	ldr	r3, [pc, #524]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a7e      	ldr	r2, [pc, #504]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b7c      	ldr	r3, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	4b79      	ldr	r3, [pc, #484]	; (80036ec <HAL_RCC_OscConfig+0x4b0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d118      	bne.n	8003544 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <HAL_RCC_OscConfig+0x4b0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a75      	ldr	r2, [pc, #468]	; (80036ec <HAL_RCC_OscConfig+0x4b0>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351e:	f7ff fa45 	bl	80029ac <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7ff fa41 	bl	80029ac <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e118      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCC_OscConfig+0x4b0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x31e>
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	e01c      	b.n	8003594 <HAL_RCC_OscConfig+0x358>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b05      	cmp	r3, #5
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x340>
 8003562:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	4a60      	ldr	r2, [pc, #384]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	6713      	str	r3, [r2, #112]	; 0x70
 800356e:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a5d      	ldr	r2, [pc, #372]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0x358>
 800357c:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a59      	ldr	r2, [pc, #356]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	4b57      	ldr	r3, [pc, #348]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a56      	ldr	r2, [pc, #344]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 800358e:	f023 0304 	bic.w	r3, r3, #4
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7ff fa06 	bl	80029ac <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7ff fa02 	bl	80029ac <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0d7      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ee      	beq.n	80035a4 <HAL_RCC_OscConfig+0x368>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7ff f9f0 	bl	80029ac <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7ff f9ec 	bl	80029ac <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0c1      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e6:	4b40      	ldr	r3, [pc, #256]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1ee      	bne.n	80035d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ad 	beq.w	8003768 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b08      	cmp	r3, #8
 8003618:	d060      	beq.n	80036dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d145      	bne.n	80036ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <HAL_RCC_OscConfig+0x4b4>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7ff f9c0 	bl	80029ac <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7ff f9bc 	bl	80029ac <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e093      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	3b01      	subs	r3, #1
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	071b      	lsls	r3, r3, #28
 800367a:	491b      	ldr	r1, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x4b4>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7ff f991 	bl	80029ac <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368e:	f7ff f98d 	bl	80029ac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e064      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x452>
 80036ac:	e05c      	b.n	8003768 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCC_OscConfig+0x4b4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7ff f97a 	bl	80029ac <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7ff f976 	bl	80029ac <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04d      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x480>
 80036da:	e045      	b.n	8003768 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e040      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036f4:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <HAL_RCC_OscConfig+0x538>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d030      	beq.n	8003764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d129      	bne.n	8003764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d122      	bne.n	8003764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800372a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372c:	4293      	cmp	r3, r2
 800372e:	d119      	bne.n	8003764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	3b01      	subs	r3, #1
 800373e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d10f      	bne.n	8003764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d107      	bne.n	8003764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fe5e 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 f896 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e046      	b.n	80038be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a23      	ldr	r2, [pc, #140]	; (80038cc <HAL_TIM_Base_Start+0xb4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384a:	d01d      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_TIM_Base_Start+0xb8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_TIM_Base_Start+0xbc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_TIM_Base_Start+0xc0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <HAL_TIM_Base_Start+0xc4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_TIM_Base_Start+0xc8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_TIM_Base_Start+0x70>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_TIM_Base_Start+0xcc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b06      	cmp	r3, #6
 8003898:	d010      	beq.n	80038bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	e007      	b.n	80038bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40010400 	.word	0x40010400
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40001800 	.word	0x40001800

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <TIM_Base_SetConfig+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d027      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d023      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0x134>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <TIM_Base_SetConfig+0x138>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <TIM_Base_SetConfig+0x13c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000

08003a28 <fire_configure_activations>:


AI_DECLARE_STATIC
ai_bool fire_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_FIRE_ACTIVATIONS_ALIGNMENT));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	3303      	adds	r3, #3
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <fire_configure_activations+0x80>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <fire_configure_activations+0x80>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8003a4a:	4a18      	ldr	r2, [pc, #96]	; (8003aac <fire_configure_activations+0x84>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8003a50:	4a16      	ldr	r2, [pc, #88]	; (8003aac <fire_configure_activations+0x84>)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <fire_configure_activations+0x88>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <fire_configure_activations+0x88>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 32);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3320      	adds	r3, #32
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <fire_configure_activations+0x8c>)
 8003a68:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 32);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <fire_configure_activations+0x8c>)
 8003a70:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 8003a72:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <fire_configure_activations+0x90>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8003a78:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <fire_configure_activations+0x90>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 20);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3314      	adds	r3, #20
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <fire_configure_activations+0x94>)
 8003a84:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 20);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <fire_configure_activations+0x94>)
 8003a8c:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <fire_configure_activations+0x98>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <fire_configure_activations+0x98>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	2000011c 	.word	0x2000011c
 8003aac:	2000012c 	.word	0x2000012c
 8003ab0:	2000013c 	.word	0x2000013c
 8003ab4:	2000014c 	.word	0x2000014c
 8003ab8:	2000015c 	.word	0x2000015c
 8003abc:	2000016c 	.word	0x2000016c
 8003ac0:	2000017c 	.word	0x2000017c

08003ac4 <fire_configure_weights>:


AI_DECLARE_STATIC
ai_bool fire_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <fire_configure_weights+0xd0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003adc:	4a2d      	ldr	r2, [pc, #180]	; (8003b94 <fire_configure_weights+0xd0>)
 8003ade:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 348);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <fire_configure_weights+0xd0>)
 8003ae8:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 348);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8003af0:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <fire_configure_weights+0xd0>)
 8003af2:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <fire_configure_weights+0xd4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <fire_configure_weights+0xd4>)
 8003afe:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 308);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003b06:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <fire_configure_weights+0xd4>)
 8003b08:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 308);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <fire_configure_weights+0xd4>)
 8003b12:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003b14:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <fire_configure_weights+0xd8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <fire_configure_weights+0xd8>)
 8003b1e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 288);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <fire_configure_weights+0xd8>)
 8003b28:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 288);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b30:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <fire_configure_weights+0xd8>)
 8003b32:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <fire_configure_weights+0xdc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <fire_configure_weights+0xdc>)
 8003b3e:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3380      	adds	r3, #128	; 0x80
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <fire_configure_weights+0xdc>)
 8003b46:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3380      	adds	r3, #128	; 0x80
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <fire_configure_weights+0xdc>)
 8003b4e:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <fire_configure_weights+0xe0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <fire_configure_weights+0xe0>)
 8003b5a:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 96);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3360      	adds	r3, #96	; 0x60
 8003b60:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <fire_configure_weights+0xe0>)
 8003b62:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 96);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3360      	adds	r3, #96	; 0x60
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <fire_configure_weights+0xe0>)
 8003b6a:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <fire_configure_weights+0xe4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <fire_configure_weights+0xe4>)
 8003b76:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <fire_configure_weights+0xe4>)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <fire_configure_weights+0xe4>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8003b84:	2301      	movs	r3, #1
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	200000bc 	.word	0x200000bc
 8003b98:	200000cc 	.word	0x200000cc
 8003b9c:	200000dc 	.word	0x200000dc
 8003ba0:	200000ec 	.word	0x200000ec
 8003ba4:	200000fc 	.word	0x200000fc
 8003ba8:	2000010c 	.word	0x2000010c

08003bac <ai_fire_create>:
}

AI_API_ENTRY
ai_error ai_fire_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2303      	movs	r3, #3
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <ai_fire_create+0x28>)
 8003bc2:	6839      	ldr	r1, [r7, #0]
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f881 	bl	8003ccc <ai_platform_network_create>
 8003bca:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2000005c 	.word	0x2000005c

08003bd8 <ai_fire_init>:
}

AI_API_ENTRY
ai_bool ai_fire_init(
  ai_handle network, const ai_network_params* params)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003be2:	6839      	ldr	r1, [r7, #0]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f8c9 	bl	8003d7c <ai_platform_network_init>
 8003bea:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <ai_fire_init+0x1e>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e02b      	b.n	8003c4e <ai_fire_init+0x76>

  ai_bool ok = true;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_weights(net_ctx, &params->params);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff ff60 	bl	8003ac4 <fire_configure_weights>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_activations(net_ctx, &params->activations);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff ff03 	bl	8003a28 <fire_configure_activations>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f91f 	bl	8003e78 <ai_platform_network_post_init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	7afb      	ldrb	r3, [r7, #11]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <ai_fire_run>:


AI_API_ENTRY
ai_i32 ai_fire_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f94e 	bl	8003f08 <ai_platform_network_process>
 8003c6c:	4603      	mov	r3, r0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <ai_fire_data_weights_get>:
#include "fire_data.h"

ai_handle ai_fire_data_weights_get(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
    0x92, 0xe6, 0x3f, 0x10, 0x57, 0x49, 0xbf, 0x93, 0xd9,
    0x7a, 0x3f, 0x86, 0xfd, 0xd0, 0xbf, 0xfd, 0x48, 0x0e,
    0xbf, 0xdb, 0xbb, 0x2b, 0x3d, 0xdb, 0xbb, 0x2b, 0xbd
  };

  return AI_HANDLE_PTR(s_fire_weights);
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <ai_fire_data_weights_get+0x10>)

}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	08007ecc 	.word	0x08007ecc

08003c8c <_platform_network_state_setup.isra.1>:
 8003c8c:	b430      	push	{r4, r5}
 8003c8e:	68dd      	ldr	r5, [r3, #12]
 8003c90:	695c      	ldr	r4, [r3, #20]
 8003c92:	68ed      	ldr	r5, [r5, #12]
 8003c94:	68e4      	ldr	r4, [r4, #12]
 8003c96:	fb04 f405 	mul.w	r4, r4, r5
 8003c9a:	6084      	str	r4, [r0, #8]
 8003c9c:	8809      	ldrh	r1, [r1, #0]
 8003c9e:	fb04 f401 	mul.w	r4, r4, r1
 8003ca2:	60c4      	str	r4, [r0, #12]
 8003ca4:	6811      	ldr	r1, [r2, #0]
 8003ca6:	6041      	str	r1, [r0, #4]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	4414      	add	r4, r2
 8003cac:	6004      	str	r4, [r0, #0]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	6814      	ldr	r4, [r2, #0]
 8003cb2:	00a4      	lsls	r4, r4, #2
 8003cb4:	d407      	bmi.n	8003cc6 <_platform_network_state_setup.isra.1+0x3a>
 8003cb6:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8003cba:	1b64      	subs	r4, r4, r5
 8003cbc:	4421      	add	r1, r4
 8003cbe:	6091      	str	r1, [r2, #8]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	6842      	ldr	r2, [r0, #4]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	bc30      	pop	{r4, r5}
 8003cc8:	4770      	bx	lr
	...

08003ccc <ai_platform_network_create>:
 8003ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd0:	4e23      	ldr	r6, [pc, #140]	; (8003d60 <ai_platform_network_create+0x94>)
 8003cd2:	4924      	ldr	r1, [pc, #144]	; (8003d64 <ai_platform_network_create+0x98>)
 8003cd4:	6835      	ldr	r5, [r6, #0]
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	f025 0501 	bic.w	r5, r5, #1
 8003cdc:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8003ce0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003ce4:	6035      	str	r5, [r6, #0]
 8003ce6:	2501      	movs	r5, #1
 8003ce8:	600d      	str	r5, [r1, #0]
 8003cea:	680d      	ldr	r5, [r1, #0]
 8003cec:	2d00      	cmp	r5, #0
 8003cee:	d1fc      	bne.n	8003cea <ai_platform_network_create+0x1e>
 8003cf0:	491d      	ldr	r1, [pc, #116]	; (8003d68 <ai_platform_network_create+0x9c>)
 8003cf2:	4e1e      	ldr	r6, [pc, #120]	; (8003d6c <ai_platform_network_create+0xa0>)
 8003cf4:	600e      	str	r6, [r1, #0]
 8003cf6:	680e      	ldr	r6, [r1, #0]
 8003cf8:	491d      	ldr	r1, [pc, #116]	; (8003d70 <ai_platform_network_create+0xa4>)
 8003cfa:	428e      	cmp	r6, r1
 8003cfc:	d000      	beq.n	8003d00 <ai_platform_network_create+0x34>
 8003cfe:	e7fe      	b.n	8003cfe <ai_platform_network_create+0x32>
 8003d00:	b1d0      	cbz	r0, 8003d38 <ai_platform_network_create+0x6c>
 8003d02:	4698      	mov	r8, r3
 8003d04:	4613      	mov	r3, r2
 8003d06:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <ai_platform_network_create+0xa8>)
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	6003      	str	r3, [r0, #0]
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	f000 fb05 	bl	800431c <core_init>
 8003d12:	b1b0      	cbz	r0, 8003d42 <ai_platform_network_create+0x76>
 8003d14:	0223      	lsls	r3, r4, #8
 8003d16:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003d1a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8003d1e:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8003d22:	d910      	bls.n	8003d46 <ai_platform_network_create+0x7a>
 8003d24:	2201      	movs	r2, #1
 8003d26:	2300      	movs	r3, #0
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f362 0007 	bfi	r0, r2, #0, #8
 8003d32:	f363 201f 	bfi	r0, r3, #8, #24
 8003d36:	e001      	b.n	8003d3c <ai_platform_network_create+0x70>
 8003d38:	f241 0010 	movw	r0, #4112	; 0x1010
 8003d3c:	b002      	add	sp, #8
 8003d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d42:	2230      	movs	r2, #48	; 0x30
 8003d44:	e7ef      	b.n	8003d26 <ai_platform_network_create+0x5a>
 8003d46:	a802      	add	r0, sp, #8
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <ai_platform_network_create+0xac>)
 8003d4a:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003d4e:	f001 f849 	bl	8004de4 <ai_check_custom_types>
 8003d52:	b110      	cbz	r0, 8003d5a <ai_platform_network_create+0x8e>
 8003d54:	462b      	mov	r3, r5
 8003d56:	462a      	mov	r2, r5
 8003d58:	e7e8      	b.n	8003d2c <ai_platform_network_create+0x60>
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	e7e3      	b.n	8003d26 <ai_platform_network_create+0x5a>
 8003d5e:	bf00      	nop
 8003d60:	e0002000 	.word	0xe0002000
 8003d64:	40023008 	.word	0x40023008
 8003d68:	40023000 	.word	0x40023000
 8003d6c:	f407a5c2 	.word	0xf407a5c2
 8003d70:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d74:	a1c00100 	.word	0xa1c00100
 8003d78:	84048403 	.word	0x84048403

08003d7c <ai_platform_network_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	460c      	mov	r4, r1
 8003d80:	4605      	mov	r5, r0
 8003d82:	b120      	cbz	r0, 8003d8e <ai_platform_network_init+0x12>
 8003d84:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <ai_platform_network_init+0xe4>)
 8003d86:	6802      	ldr	r2, [r0, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	bf18      	it	ne
 8003d8c:	2500      	movne	r5, #0
 8003d8e:	4935      	ldr	r1, [pc, #212]	; (8003e64 <ai_platform_network_init+0xe8>)
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <ai_platform_network_init+0xec>)
 8003d92:	680b      	ldr	r3, [r1, #0]
 8003d94:	2001      	movs	r0, #1
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	6010      	str	r0, [r2, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d1fc      	bne.n	8003da0 <ai_platform_network_init+0x24>
 8003da6:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <ai_platform_network_init+0xf0>)
 8003da8:	4a31      	ldr	r2, [pc, #196]	; (8003e70 <ai_platform_network_init+0xf4>)
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <ai_platform_network_init+0xf8>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d000      	beq.n	8003db6 <ai_platform_network_init+0x3a>
 8003db4:	e7fe      	b.n	8003db4 <ai_platform_network_init+0x38>
 8003db6:	b33d      	cbz	r5, 8003e08 <ai_platform_network_init+0x8c>
 8003db8:	b344      	cbz	r4, 8003e0c <ai_platform_network_init+0x90>
 8003dba:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003dbc:	6926      	ldr	r6, [r4, #16]
 8003dbe:	2f00      	cmp	r7, #0
 8003dc0:	d03d      	beq.n	8003e3e <ai_platform_network_init+0xc2>
 8003dc2:	b35e      	cbz	r6, 8003e1c <ai_platform_network_init+0xa0>
 8003dc4:	4627      	mov	r7, r4
 8003dc6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003dc8:	f105 0618 	add.w	r6, r5, #24
 8003dcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dce:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003dd2:	e886 0003 	stmia.w	r6, {r0, r1}
 8003dd6:	3418      	adds	r4, #24
 8003dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dda:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8003dde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003de4:	e886 0003 	stmia.w	r6, {r0, r1}
 8003de8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003dea:	2303      	movs	r3, #3
 8003dec:	60eb      	str	r3, [r5, #12]
 8003dee:	b15a      	cbz	r2, 8003e08 <ai_platform_network_init+0x8c>
 8003df0:	68d3      	ldr	r3, [r2, #12]
 8003df2:	6095      	str	r5, [r2, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d007      	beq.n	8003e08 <ai_platform_network_init+0x8c>
 8003df8:	b133      	cbz	r3, 8003e08 <ai_platform_network_init+0x8c>
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	609d      	str	r5, [r3, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d002      	beq.n	8003e08 <ai_platform_network_init+0x8c>
 8003e02:	4613      	mov	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f8      	bne.n	8003dfa <ai_platform_network_init+0x7e>
 8003e08:	4628      	mov	r0, r5
 8003e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0c:	f105 0010 	add.w	r0, r5, #16
 8003e10:	2211      	movs	r2, #17
 8003e12:	2110      	movs	r1, #16
 8003e14:	f000 fa84 	bl	8004320 <core_set_error>
 8003e18:	4625      	mov	r5, r4
 8003e1a:	e7f5      	b.n	8003e08 <ai_platform_network_init+0x8c>
 8003e1c:	8921      	ldrh	r1, [r4, #8]
 8003e1e:	88e2      	ldrh	r2, [r4, #6]
 8003e20:	68e3      	ldr	r3, [r4, #12]
 8003e22:	fb02 f201 	mul.w	r2, r2, r1
 8003e26:	fb03 f302 	mul.w	r3, r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ca      	beq.n	8003dc4 <ai_platform_network_init+0x48>
 8003e2e:	f105 0010 	add.w	r0, r5, #16
 8003e32:	2212      	movs	r2, #18
 8003e34:	2110      	movs	r1, #16
 8003e36:	f000 fa73 	bl	8004320 <core_set_error>
 8003e3a:	4635      	mov	r5, r6
 8003e3c:	e7e4      	b.n	8003e08 <ai_platform_network_init+0x8c>
 8003e3e:	8c21      	ldrh	r1, [r4, #32]
 8003e40:	8be2      	ldrh	r2, [r4, #30]
 8003e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e44:	fb02 f201 	mul.w	r2, r2, r1
 8003e48:	fb03 f302 	mul.w	r3, r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0b8      	beq.n	8003dc2 <ai_platform_network_init+0x46>
 8003e50:	f105 0010 	add.w	r0, r5, #16
 8003e54:	2213      	movs	r2, #19
 8003e56:	2110      	movs	r1, #16
 8003e58:	f000 fa62 	bl	8004320 <core_set_error>
 8003e5c:	463d      	mov	r5, r7
 8003e5e:	e7d3      	b.n	8003e08 <ai_platform_network_init+0x8c>
 8003e60:	a1c00100 	.word	0xa1c00100
 8003e64:	e0002000 	.word	0xe0002000
 8003e68:	40023008 	.word	0x40023008
 8003e6c:	40023000 	.word	0x40023000
 8003e70:	f407a5c2 	.word	0xf407a5c2
 8003e74:	b5e8b5cd 	.word	0xb5e8b5cd

08003e78 <ai_platform_network_post_init>:
 8003e78:	b538      	push	{r3, r4, r5, lr}
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	b120      	cbz	r0, 8003e88 <ai_platform_network_post_init+0x10>
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <ai_platform_network_post_init+0x78>)
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	bf18      	it	ne
 8003e86:	2400      	movne	r4, #0
 8003e88:	491a      	ldr	r1, [pc, #104]	; (8003ef4 <ai_platform_network_post_init+0x7c>)
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <ai_platform_network_post_init+0x80>)
 8003e8c:	680b      	ldr	r3, [r1, #0]
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	600b      	str	r3, [r1, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	6010      	str	r0, [r2, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2a00      	cmp	r2, #0
 8003e9e:	d1fc      	bne.n	8003e9a <ai_platform_network_post_init+0x22>
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <ai_platform_network_post_init+0x84>)
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <ai_platform_network_post_init+0x88>)
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <ai_platform_network_post_init+0x8c>)
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d000      	beq.n	8003eb0 <ai_platform_network_post_init+0x38>
 8003eae:	e7fe      	b.n	8003eae <ai_platform_network_post_init+0x36>
 8003eb0:	b1a4      	cbz	r4, 8003edc <ai_platform_network_post_init+0x64>
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	f013 0502 	ands.w	r5, r3, #2
 8003eb8:	d012      	beq.n	8003ee0 <ai_platform_network_post_init+0x68>
 8003eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ebc:	b163      	cbz	r3, 8003ed8 <ai_platform_network_post_init+0x60>
 8003ebe:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003ec0:	b91d      	cbnz	r5, 8003eca <ai_platform_network_post_init+0x52>
 8003ec2:	e009      	b.n	8003ed8 <ai_platform_network_post_init+0x60>
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	b13b      	cbz	r3, 8003ed8 <ai_platform_network_post_init+0x60>
 8003ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003eca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ecc:	4629      	mov	r1, r5
 8003ece:	2000      	movs	r0, #0
 8003ed0:	4798      	blx	r3
 8003ed2:	68eb      	ldr	r3, [r5, #12]
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	d1f5      	bne.n	8003ec4 <ai_platform_network_post_init+0x4c>
 8003ed8:	2001      	movs	r0, #1
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
 8003edc:	4620      	mov	r0, r4
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	f104 0010 	add.w	r0, r4, #16
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	2111      	movs	r1, #17
 8003ee8:	f000 fa1a 	bl	8004320 <core_set_error>
 8003eec:	4628      	mov	r0, r5
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	a1c00100 	.word	0xa1c00100
 8003ef4:	e0002000 	.word	0xe0002000
 8003ef8:	40023008 	.word	0x40023008
 8003efc:	40023000 	.word	0x40023000
 8003f00:	f407a5c2 	.word	0xf407a5c2
 8003f04:	b5e8b5cd 	.word	0xb5e8b5cd

08003f08 <ai_platform_network_process>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	4604      	mov	r4, r0
 8003f10:	9201      	str	r2, [sp, #4]
 8003f12:	b120      	cbz	r0, 8003f1e <ai_platform_network_process+0x16>
 8003f14:	4ba5      	ldr	r3, [pc, #660]	; (80041ac <ai_platform_network_process+0x2a4>)
 8003f16:	6802      	ldr	r2, [r0, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	bf18      	it	ne
 8003f1c:	2400      	movne	r4, #0
 8003f1e:	48a4      	ldr	r0, [pc, #656]	; (80041b0 <ai_platform_network_process+0x2a8>)
 8003f20:	4ba4      	ldr	r3, [pc, #656]	; (80041b4 <ai_platform_network_process+0x2ac>)
 8003f22:	6802      	ldr	r2, [r0, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	6002      	str	r2, [r0, #0]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2a00      	cmp	r2, #0
 8003f32:	d1fc      	bne.n	8003f2e <ai_platform_network_process+0x26>
 8003f34:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <ai_platform_network_process+0x2b0>)
 8003f36:	4aa1      	ldr	r2, [pc, #644]	; (80041bc <ai_platform_network_process+0x2b4>)
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <ai_platform_network_process+0x2b8>)
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d000      	beq.n	8003f44 <ai_platform_network_process+0x3c>
 8003f42:	e7fe      	b.n	8003f42 <ai_platform_network_process+0x3a>
 8003f44:	2c00      	cmp	r4, #0
 8003f46:	d066      	beq.n	8004016 <ai_platform_network_process+0x10e>
 8003f48:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8003f4c:	b107      	cbz	r7, 8003f50 <ai_platform_network_process+0x48>
 8003f4e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8003f50:	68e3      	ldr	r3, [r4, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2600      	movs	r6, #0
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	6166      	str	r6, [r4, #20]
 8003f5c:	f040 80fe 	bne.w	800415c <ai_platform_network_process+0x254>
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d07f      	beq.n	8004064 <ai_platform_network_process+0x15c>
 8003f64:	2f00      	cmp	r7, #0
 8003f66:	d07d      	beq.n	8004064 <ai_platform_network_process+0x15c>
 8003f68:	883b      	ldrh	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d07a      	beq.n	8004064 <ai_platform_network_process+0x15c>
 8003f6e:	460d      	mov	r5, r1
 8003f70:	46a0      	mov	r8, r4
 8003f72:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8003f76:	429e      	cmp	r6, r3
 8003f78:	d27d      	bcs.n	8004076 <ai_platform_network_process+0x16e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d07a      	beq.n	8004076 <ai_platform_network_process+0x16e>
 8003f80:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8003f84:	2c00      	cmp	r4, #0
 8003f86:	d076      	beq.n	8004076 <ai_platform_network_process+0x16e>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8003f90:	d067      	beq.n	8004062 <ai_platform_network_process+0x15a>
 8003f92:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8003f96:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8003f9a:	69a0      	ldr	r0, [r4, #24]
 8003f9c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8003fa0:	6841      	ldr	r1, [r0, #4]
 8003fa2:	fb0b f30e 	mul.w	r3, fp, lr
 8003fa6:	fb0c f303 	mul.w	r3, ip, r3
 8003faa:	4299      	cmp	r1, r3
 8003fac:	d350      	bcc.n	8004050 <ai_platform_network_process+0x148>
 8003fae:	68e3      	ldr	r3, [r4, #12]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	455a      	cmp	r2, fp
 8003fb4:	d14c      	bne.n	8004050 <ai_platform_network_process+0x148>
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	4572      	cmp	r2, lr
 8003fba:	d149      	bne.n	8004050 <ai_platform_network_process+0x148>
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	459c      	cmp	ip, r3
 8003fc0:	d146      	bne.n	8004050 <ai_platform_network_process+0x148>
 8003fc2:	6800      	ldr	r0, [r0, #0]
 8003fc4:	f000 ffbe 	bl	8004f44 <ai_array_get_byte_size>
 8003fc8:	68e2      	ldr	r2, [r4, #12]
 8003fca:	6963      	ldr	r3, [r4, #20]
 8003fcc:	68d2      	ldr	r2, [r2, #12]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	fb03 f302 	mul.w	r3, r3, r2
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	d33b      	bcc.n	8004050 <ai_platform_network_process+0x148>
 8003fd8:	69a3      	ldr	r3, [r4, #24]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	f000 ff66 	bl	8004eac <ai_array_to_buffer_fmt>
 8003fe0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003fe4:	4043      	eors	r3, r0
 8003fe6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003fea:	d128      	bne.n	800403e <ai_platform_network_process+0x136>
 8003fec:	68eb      	ldr	r3, [r5, #12]
 8003fee:	b1f3      	cbz	r3, 800402e <ai_platform_network_process+0x126>
 8003ff0:	f8b5 b000 	ldrh.w	fp, [r5]
 8003ff4:	f1bb 0f00 	cmp.w	fp, #0
 8003ff8:	d012      	beq.n	8004020 <ai_platform_network_process+0x118>
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	f105 020c 	add.w	r2, r5, #12
 8004000:	4629      	mov	r1, r5
 8004002:	4650      	mov	r0, sl
 8004004:	f7ff fe42 	bl	8003c8c <_platform_network_state_setup.isra.1>
 8004008:	45d9      	cmp	r9, fp
 800400a:	883b      	ldrh	r3, [r7, #0]
 800400c:	bf38      	it	cc
 800400e:	46d9      	movcc	r9, fp
 8004010:	3601      	adds	r6, #1
 8004012:	3518      	adds	r5, #24
 8004014:	e7af      	b.n	8003f76 <ai_platform_network_process+0x6e>
 8004016:	46a3      	mov	fp, r4
 8004018:	4658      	mov	r0, fp
 800401a:	b003      	add	sp, #12
 800401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004020:	f108 0010 	add.w	r0, r8, #16
 8004024:	2221      	movs	r2, #33	; 0x21
 8004026:	2112      	movs	r1, #18
 8004028:	f000 f97a 	bl	8004320 <core_set_error>
 800402c:	e7f4      	b.n	8004018 <ai_platform_network_process+0x110>
 800402e:	f108 0010 	add.w	r0, r8, #16
 8004032:	2217      	movs	r2, #23
 8004034:	2112      	movs	r1, #18
 8004036:	469b      	mov	fp, r3
 8004038:	f000 f972 	bl	8004320 <core_set_error>
 800403c:	e7ec      	b.n	8004018 <ai_platform_network_process+0x110>
 800403e:	f108 0010 	add.w	r0, r8, #16
 8004042:	2219      	movs	r2, #25
 8004044:	2112      	movs	r1, #18
 8004046:	f000 f96b 	bl	8004320 <core_set_error>
 800404a:	f04f 0b00 	mov.w	fp, #0
 800404e:	e7e3      	b.n	8004018 <ai_platform_network_process+0x110>
 8004050:	f108 0010 	add.w	r0, r8, #16
 8004054:	2218      	movs	r2, #24
 8004056:	2112      	movs	r1, #18
 8004058:	f000 f962 	bl	8004320 <core_set_error>
 800405c:	f04f 0b00 	mov.w	fp, #0
 8004060:	e7da      	b.n	8004018 <ai_platform_network_process+0x110>
 8004062:	4644      	mov	r4, r8
 8004064:	f104 0010 	add.w	r0, r4, #16
 8004068:	2217      	movs	r2, #23
 800406a:	2112      	movs	r1, #18
 800406c:	f000 f958 	bl	8004320 <core_set_error>
 8004070:	f04f 0b00 	mov.w	fp, #0
 8004074:	e7d0      	b.n	8004018 <ai_platform_network_process+0x110>
 8004076:	9a01      	ldr	r2, [sp, #4]
 8004078:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 800407c:	4644      	mov	r4, r8
 800407e:	2a00      	cmp	r2, #0
 8004080:	f000 80a4 	beq.w	80041cc <ai_platform_network_process+0x2c4>
 8004084:	2b01      	cmp	r3, #1
 8004086:	f240 8140 	bls.w	800430a <ai_platform_network_process+0x402>
 800408a:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800408e:	f118 0f0c 	cmn.w	r8, #12
 8004092:	f000 813a 	beq.w	800430a <ai_platform_network_process+0x402>
 8004096:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8135 	beq.w	800430a <ai_platform_network_process+0x402>
 80040a0:	3204      	adds	r2, #4
 80040a2:	4615      	mov	r5, r2
 80040a4:	2700      	movs	r7, #0
 80040a6:	429f      	cmp	r7, r3
 80040a8:	f080 808c 	bcs.w	80041c4 <ai_platform_network_process+0x2bc>
 80040ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8087 	beq.w	80041c4 <ai_platform_network_process+0x2bc>
 80040b6:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80040ba:	2e00      	cmp	r6, #0
 80040bc:	f000 8082 	beq.w	80041c4 <ai_platform_network_process+0x2bc>
 80040c0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80040ca:	d067      	beq.n	800419c <ai_platform_network_process+0x294>
 80040cc:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80040d0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80040d4:	69b0      	ldr	r0, [r6, #24]
 80040d6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80040da:	6841      	ldr	r1, [r0, #4]
 80040dc:	fb0b f30e 	mul.w	r3, fp, lr
 80040e0:	fb0c f303 	mul.w	r3, ip, r3
 80040e4:	4299      	cmp	r1, r3
 80040e6:	f0c0 8110 	bcc.w	800430a <ai_platform_network_process+0x402>
 80040ea:	68f3      	ldr	r3, [r6, #12]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	455a      	cmp	r2, fp
 80040f0:	f040 810b 	bne.w	800430a <ai_platform_network_process+0x402>
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	4572      	cmp	r2, lr
 80040f8:	f040 8107 	bne.w	800430a <ai_platform_network_process+0x402>
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	459c      	cmp	ip, r3
 8004100:	f040 8103 	bne.w	800430a <ai_platform_network_process+0x402>
 8004104:	6800      	ldr	r0, [r0, #0]
 8004106:	f000 ff1d 	bl	8004f44 <ai_array_get_byte_size>
 800410a:	68f2      	ldr	r2, [r6, #12]
 800410c:	6973      	ldr	r3, [r6, #20]
 800410e:	68d2      	ldr	r2, [r2, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	fb03 f302 	mul.w	r3, r3, r2
 8004116:	4298      	cmp	r0, r3
 8004118:	f0c0 80f7 	bcc.w	800430a <ai_platform_network_process+0x402>
 800411c:	69b3      	ldr	r3, [r6, #24]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	f000 fec4 	bl	8004eac <ai_array_to_buffer_fmt>
 8004124:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004128:	4043      	eors	r3, r0
 800412a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800412e:	d12c      	bne.n	800418a <ai_platform_network_process+0x282>
 8004130:	68eb      	ldr	r3, [r5, #12]
 8004132:	b313      	cbz	r3, 800417a <ai_platform_network_process+0x272>
 8004134:	f8b5 b000 	ldrh.w	fp, [r5]
 8004138:	f1bb 0f00 	cmp.w	fp, #0
 800413c:	d016      	beq.n	800416c <ai_platform_network_process+0x264>
 800413e:	4633      	mov	r3, r6
 8004140:	f105 020c 	add.w	r2, r5, #12
 8004144:	4629      	mov	r1, r5
 8004146:	4650      	mov	r0, sl
 8004148:	f7ff fda0 	bl	8003c8c <_platform_network_state_setup.isra.1>
 800414c:	45d9      	cmp	r9, fp
 800414e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004152:	bf38      	it	cc
 8004154:	46d9      	movcc	r9, fp
 8004156:	3701      	adds	r7, #1
 8004158:	3518      	adds	r5, #24
 800415a:	e7a4      	b.n	80040a6 <ai_platform_network_process+0x19e>
 800415c:	f104 0010 	add.w	r0, r4, #16
 8004160:	2230      	movs	r2, #48	; 0x30
 8004162:	2111      	movs	r1, #17
 8004164:	f000 f8dc 	bl	8004320 <core_set_error>
 8004168:	46b3      	mov	fp, r6
 800416a:	e755      	b.n	8004018 <ai_platform_network_process+0x110>
 800416c:	f104 0010 	add.w	r0, r4, #16
 8004170:	2221      	movs	r2, #33	; 0x21
 8004172:	2113      	movs	r1, #19
 8004174:	f000 f8d4 	bl	8004320 <core_set_error>
 8004178:	e74e      	b.n	8004018 <ai_platform_network_process+0x110>
 800417a:	f104 0010 	add.w	r0, r4, #16
 800417e:	2217      	movs	r2, #23
 8004180:	2113      	movs	r1, #19
 8004182:	469b      	mov	fp, r3
 8004184:	f000 f8cc 	bl	8004320 <core_set_error>
 8004188:	e746      	b.n	8004018 <ai_platform_network_process+0x110>
 800418a:	f104 0010 	add.w	r0, r4, #16
 800418e:	2219      	movs	r2, #25
 8004190:	2113      	movs	r1, #19
 8004192:	f000 f8c5 	bl	8004320 <core_set_error>
 8004196:	f04f 0b00 	mov.w	fp, #0
 800419a:	e73d      	b.n	8004018 <ai_platform_network_process+0x110>
 800419c:	f104 0010 	add.w	r0, r4, #16
 80041a0:	2217      	movs	r2, #23
 80041a2:	2113      	movs	r1, #19
 80041a4:	f000 f8bc 	bl	8004320 <core_set_error>
 80041a8:	46d3      	mov	fp, sl
 80041aa:	e735      	b.n	8004018 <ai_platform_network_process+0x110>
 80041ac:	a1c00100 	.word	0xa1c00100
 80041b0:	e0002000 	.word	0xe0002000
 80041b4:	40023008 	.word	0x40023008
 80041b8:	40023000 	.word	0x40023000
 80041bc:	f407a5c2 	.word	0xf407a5c2
 80041c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80041c4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80041c8:	f8a4 9014 	strh.w	r9, [r4, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8099 	beq.w	8004304 <ai_platform_network_process+0x3fc>
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80041d6:	f240 8093 	bls.w	8004300 <ai_platform_network_process+0x3f8>
 80041da:	f105 070c 	add.w	r7, r5, #12
 80041de:	8ae0      	ldrh	r0, [r4, #22]
 80041e0:	8aa3      	ldrh	r3, [r4, #20]
 80041e2:	4283      	cmp	r3, r0
 80041e4:	d977      	bls.n	80042d6 <ai_platform_network_process+0x3ce>
 80041e6:	46a3      	mov	fp, r4
 80041e8:	2d00      	cmp	r5, #0
 80041ea:	d032      	beq.n	8004252 <ai_platform_network_process+0x34a>
 80041ec:	882b      	ldrh	r3, [r5, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02f      	beq.n	8004252 <ai_platform_network_process+0x34a>
 80041f2:	686b      	ldr	r3, [r5, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02c      	beq.n	8004252 <ai_platform_network_process+0x34a>
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f04f 0800 	mov.w	r8, #0
 80041fe:	b343      	cbz	r3, 8004252 <ai_platform_network_process+0x34a>
 8004200:	68a9      	ldr	r1, [r5, #8]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	f8d1 a000 	ldr.w	sl, [r1]
 8004208:	6814      	ldr	r4, [r2, #0]
 800420a:	6890      	ldr	r0, [r2, #8]
 800420c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004210:	eb0a 0609 	add.w	r6, sl, r9
 8004214:	00a4      	lsls	r4, r4, #2
 8004216:	6871      	ldr	r1, [r6, #4]
 8004218:	d45f      	bmi.n	80042da <ai_platform_network_process+0x3d2>
 800421a:	68d4      	ldr	r4, [r2, #12]
 800421c:	1b00      	subs	r0, r0, r4
 800421e:	4401      	add	r1, r0
 8004220:	6091      	str	r1, [r2, #8]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	6872      	ldr	r2, [r6, #4]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800422c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004230:	440b      	add	r3, r1
 8004232:	4293      	cmp	r3, r2
 8004234:	bf24      	itt	cs
 8004236:	68f3      	ldrcs	r3, [r6, #12]
 8004238:	1ad3      	subcs	r3, r2, r3
 800423a:	6073      	str	r3, [r6, #4]
 800423c:	882b      	ldrh	r3, [r5, #0]
 800423e:	f108 0801 	add.w	r8, r8, #1
 8004242:	4598      	cmp	r8, r3
 8004244:	d205      	bcs.n	8004252 <ai_platform_network_process+0x34a>
 8004246:	686b      	ldr	r3, [r5, #4]
 8004248:	b11b      	cbz	r3, 8004252 <ai_platform_network_process+0x34a>
 800424a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1d6      	bne.n	8004200 <ai_platform_network_process+0x2f8>
 8004252:	4658      	mov	r0, fp
 8004254:	f000 fdf0 	bl	8004e38 <ai_layers_forward_all>
 8004258:	2f00      	cmp	r7, #0
 800425a:	d032      	beq.n	80042c2 <ai_platform_network_process+0x3ba>
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02f      	beq.n	80042c2 <ai_platform_network_process+0x3ba>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	b36b      	cbz	r3, 80042c2 <ai_platform_network_process+0x3ba>
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	b358      	cbz	r0, 80042c2 <ai_platform_network_process+0x3ba>
 800426a:	f04f 0800 	mov.w	r8, #0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6981      	ldr	r1, [r0, #24]
 8004272:	f8d3 a000 	ldr.w	sl, [r3]
 8004276:	680c      	ldr	r4, [r1, #0]
 8004278:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800427c:	eb0a 0609 	add.w	r6, sl, r9
 8004280:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8004284:	00a4      	lsls	r4, r4, #2
 8004286:	eb0c 0302 	add.w	r3, ip, r2
 800428a:	d42a      	bmi.n	80042e2 <ai_platform_network_process+0x3da>
 800428c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004290:	4293      	cmp	r3, r2
 8004292:	bf24      	itt	cs
 8004294:	68f3      	ldrcs	r3, [r6, #12]
 8004296:	1ad3      	subcs	r3, r2, r3
 8004298:	6073      	str	r3, [r6, #4]
 800429a:	6981      	ldr	r1, [r0, #24]
 800429c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80042a0:	1b12      	subs	r2, r2, r4
 80042a2:	4413      	add	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	6983      	ldr	r3, [r0, #24]
 80042a8:	6872      	ldr	r2, [r6, #4]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	883b      	ldrh	r3, [r7, #0]
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	4598      	cmp	r8, r3
 80042b4:	d205      	bcs.n	80042c2 <ai_platform_network_process+0x3ba>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	b11b      	cbz	r3, 80042c2 <ai_platform_network_process+0x3ba>
 80042ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80042be:	2800      	cmp	r0, #0
 80042c0:	d1d5      	bne.n	800426e <ai_platform_network_process+0x366>
 80042c2:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80042c6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80042ca:	3001      	adds	r0, #1
 80042cc:	b280      	uxth	r0, r0
 80042ce:	4283      	cmp	r3, r0
 80042d0:	f8ab 0016 	strh.w	r0, [fp, #22]
 80042d4:	d888      	bhi.n	80041e8 <ai_platform_network_process+0x2e0>
 80042d6:	4683      	mov	fp, r0
 80042d8:	e69e      	b.n	8004018 <ai_platform_network_process+0x110>
 80042da:	68b2      	ldr	r2, [r6, #8]
 80042dc:	f000 fe86 	bl	8004fec <memcpy>
 80042e0:	e7a2      	b.n	8004228 <ai_platform_network_process+0x320>
 80042e2:	6889      	ldr	r1, [r1, #8]
 80042e4:	4660      	mov	r0, ip
 80042e6:	f000 fe81 	bl	8004fec <memcpy>
 80042ea:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80042ee:	f85a 2009 	ldr.w	r2, [sl, r9]
 80042f2:	440b      	add	r3, r1
 80042f4:	4293      	cmp	r3, r2
 80042f6:	bf24      	itt	cs
 80042f8:	68f3      	ldrcs	r3, [r6, #12]
 80042fa:	1ad3      	subcs	r3, r2, r3
 80042fc:	6073      	str	r3, [r6, #4]
 80042fe:	e7d5      	b.n	80042ac <ai_platform_network_process+0x3a4>
 8004300:	2700      	movs	r7, #0
 8004302:	e76c      	b.n	80041de <ai_platform_network_process+0x2d6>
 8004304:	461d      	mov	r5, r3
 8004306:	461f      	mov	r7, r3
 8004308:	e769      	b.n	80041de <ai_platform_network_process+0x2d6>
 800430a:	f104 0010 	add.w	r0, r4, #16
 800430e:	2218      	movs	r2, #24
 8004310:	2113      	movs	r1, #19
 8004312:	f000 f805 	bl	8004320 <core_set_error>
 8004316:	f04f 0b00 	mov.w	fp, #0
 800431a:	e67d      	b.n	8004018 <ai_platform_network_process+0x110>

0800431c <core_init>:
 800431c:	2001      	movs	r0, #1
 800431e:	4770      	bx	lr

08004320 <core_set_error>:
 8004320:	7803      	ldrb	r3, [r0, #0]
 8004322:	b933      	cbnz	r3, 8004332 <core_set_error+0x12>
 8004324:	7001      	strb	r1, [r0, #0]
 8004326:	6803      	ldr	r3, [r0, #0]
 8004328:	f362 231f 	bfi	r3, r2, #8, #24
 800432c:	6003      	str	r3, [r0, #0]
 800432e:	2001      	movs	r0, #1
 8004330:	4770      	bx	lr
 8004332:	2000      	movs	r0, #0
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop

08004338 <ai_dict8_dot_array_f32>:
 8004338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800433c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004340:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8004344:	f000 80c0 	beq.w	80044c8 <ai_dict8_dot_array_f32+0x190>
 8004348:	f101 0408 	add.w	r4, r1, #8
 800434c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004350:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80044d0 <ai_dict8_dot_array_f32+0x198>
 8004354:	eb04 0e09 	add.w	lr, r4, r9
 8004358:	f103 0520 	add.w	r5, r3, #32
 800435c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004360:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8004364:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8004368:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800436c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004370:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8004374:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8004378:	ed55 3a04 	vldr	s7, [r5, #-16]
 800437c:	ed55 4a03 	vldr	s9, [r5, #-12]
 8004380:	ed55 5a02 	vldr	s11, [r5, #-8]
 8004384:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004388:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800438c:	edd6 7a00 	vldr	s15, [r6]
 8004390:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8004394:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004398:	ee67 7a83 	vmul.f32	s15, s15, s6
 800439c:	ed9a 3a00 	vldr	s6, [sl]
 80043a0:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80043a4:	eee3 7a05 	vfma.f32	s15, s6, s10
 80043a8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80043ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80043b0:	ed97 3a00 	vldr	s6, [r7]
 80043b4:	ed96 5a00 	vldr	s10, [r6]
 80043b8:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80043bc:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80043c0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80043c4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80043c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80043cc:	ed9a 3a00 	vldr	s6, [sl]
 80043d0:	ed96 4a00 	vldr	s8, [r6]
 80043d4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80043d8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80043dc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80043e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80043e4:	ed97 5a00 	vldr	s10, [r7]
 80043e8:	ed96 6a00 	vldr	s12, [r6]
 80043ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 80043f0:	3408      	adds	r4, #8
 80043f2:	45a6      	cmp	lr, r4
 80043f4:	f105 0520 	add.w	r5, r5, #32
 80043f8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80043fc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004400:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004408:	d1a8      	bne.n	800435c <ai_dict8_dot_array_f32+0x24>
 800440a:	4449      	add	r1, r9
 800440c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004410:	f01c 0c07 	ands.w	ip, ip, #7
 8004414:	d050      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 8004416:	780c      	ldrb	r4, [r1, #0]
 8004418:	edd3 6a00 	vldr	s13, [r3]
 800441c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004420:	edd4 7a00 	vldr	s15, [r4]
 8004424:	f1bc 0f01 	cmp.w	ip, #1
 8004428:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800442c:	d044      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 800442e:	784c      	ldrb	r4, [r1, #1]
 8004430:	edd3 6a01 	vldr	s13, [r3, #4]
 8004434:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004438:	edd4 7a00 	vldr	s15, [r4]
 800443c:	f1bc 0f02 	cmp.w	ip, #2
 8004440:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004444:	d038      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 8004446:	788c      	ldrb	r4, [r1, #2]
 8004448:	edd3 6a02 	vldr	s13, [r3, #8]
 800444c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004450:	edd4 7a00 	vldr	s15, [r4]
 8004454:	f1bc 0f03 	cmp.w	ip, #3
 8004458:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800445c:	d02c      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 800445e:	78cc      	ldrb	r4, [r1, #3]
 8004460:	edd3 6a03 	vldr	s13, [r3, #12]
 8004464:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004468:	edd4 7a00 	vldr	s15, [r4]
 800446c:	f1bc 0f04 	cmp.w	ip, #4
 8004470:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004474:	d020      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 8004476:	790c      	ldrb	r4, [r1, #4]
 8004478:	edd3 6a04 	vldr	s13, [r3, #16]
 800447c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004480:	edd4 7a00 	vldr	s15, [r4]
 8004484:	f1bc 0f05 	cmp.w	ip, #5
 8004488:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800448c:	d014      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 800448e:	794c      	ldrb	r4, [r1, #5]
 8004490:	edd3 6a05 	vldr	s13, [r3, #20]
 8004494:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004498:	edd4 7a00 	vldr	s15, [r4]
 800449c:	f1bc 0f06 	cmp.w	ip, #6
 80044a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044a4:	d008      	beq.n	80044b8 <ai_dict8_dot_array_f32+0x180>
 80044a6:	7989      	ldrb	r1, [r1, #6]
 80044a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80044ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80044b0:	edd2 6a00 	vldr	s13, [r2]
 80044b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80044b8:	edd0 7a00 	vldr	s15, [r0]
 80044bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c0:	ed80 7a00 	vstr	s14, [r0]
 80044c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80044d0 <ai_dict8_dot_array_f32+0x198>
 80044cc:	e7a0      	b.n	8004410 <ai_dict8_dot_array_f32+0xd8>
 80044ce:	bf00      	nop
 80044d0:	00000000 	.word	0x00000000

080044d4 <ai_dict4_dot_array_f32>:
 80044d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80044da:	f027 0c01 	bic.w	ip, r7, #1
 80044de:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80044e2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80044e6:	f000 80ae 	beq.w	8004646 <ai_dict4_dot_array_f32+0x172>
 80044ea:	1d0d      	adds	r5, r1, #4
 80044ec:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80044f0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800464c <ai_dict4_dot_array_f32+0x178>
 80044f4:	eb05 0e09 	add.w	lr, r5, r9
 80044f8:	f103 0420 	add.w	r4, r3, #32
 80044fc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004500:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8004504:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8004508:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800450c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004510:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8004514:	ed14 5a04 	vldr	s10, [r4, #-16]
 8004518:	ed54 5a03 	vldr	s11, [r4, #-12]
 800451c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004520:	ed54 6a01 	vldr	s13, [r4, #-4]
 8004524:	f006 0a0f 	and.w	sl, r6, #15
 8004528:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800452c:	edda 7a00 	vldr	s15, [sl]
 8004530:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8004534:	0936      	lsrs	r6, r6, #4
 8004536:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800453a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800453e:	ed96 3a00 	vldr	s6, [r6]
 8004542:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8004546:	eee3 7a23 	vfma.f32	s15, s6, s7
 800454a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800454e:	f00b 0b0f 	and.w	fp, fp, #15
 8004552:	edd6 3a00 	vldr	s7, [r6]
 8004556:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800455a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800455e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004562:	3504      	adds	r5, #4
 8004564:	ed9b 4a00 	vldr	s8, [fp]
 8004568:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800456c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004570:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004574:	f00a 0a0f 	and.w	sl, sl, #15
 8004578:	eddb 4a00 	vldr	s9, [fp]
 800457c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004580:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004584:	45ae      	cmp	lr, r5
 8004586:	ed9a 5a00 	vldr	s10, [sl]
 800458a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800458e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004592:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004596:	f006 060f 	and.w	r6, r6, #15
 800459a:	edda 5a00 	vldr	s11, [sl]
 800459e:	eee5 7a86 	vfma.f32	s15, s11, s12
 80045a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80045a6:	f104 0420 	add.w	r4, r4, #32
 80045aa:	ed96 6a00 	vldr	s12, [r6]
 80045ae:	eee6 7a26 	vfma.f32	s15, s12, s13
 80045b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045b6:	d1a1      	bne.n	80044fc <ai_dict4_dot_array_f32+0x28>
 80045b8:	4449      	add	r1, r9
 80045ba:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80045be:	459c      	cmp	ip, r3
 80045c0:	d92d      	bls.n	800461e <ai_dict4_dot_array_f32+0x14a>
 80045c2:	f10c 0c07 	add.w	ip, ip, #7
 80045c6:	f103 0508 	add.w	r5, r3, #8
 80045ca:	ebac 0c05 	sub.w	ip, ip, r5
 80045ce:	f02c 0407 	bic.w	r4, ip, #7
 80045d2:	f103 0810 	add.w	r8, r3, #16
 80045d6:	44a0      	add	r8, r4
 80045d8:	f101 3eff 	add.w	lr, r1, #4294967295
 80045dc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80045e0:	ed15 6a01 	vldr	s12, [r5, #-4]
 80045e4:	ed55 6a02 	vldr	s13, [r5, #-8]
 80045e8:	f004 060f 	and.w	r6, r4, #15
 80045ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80045f0:	0924      	lsrs	r4, r4, #4
 80045f2:	edd6 7a00 	vldr	s15, [r6]
 80045f6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80045fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045fe:	ed94 6a00 	vldr	s12, [r4]
 8004602:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004606:	3508      	adds	r5, #8
 8004608:	45a8      	cmp	r8, r5
 800460a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800460e:	d1e5      	bne.n	80045dc <ai_dict4_dot_array_f32+0x108>
 8004610:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004614:	f10c 0c01 	add.w	ip, ip, #1
 8004618:	4461      	add	r1, ip
 800461a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800461e:	07fc      	lsls	r4, r7, #31
 8004620:	d509      	bpl.n	8004636 <ai_dict4_dot_array_f32+0x162>
 8004622:	7809      	ldrb	r1, [r1, #0]
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	090b      	lsrs	r3, r1, #4
 800462a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800462e:	edd2 6a00 	vldr	s13, [r2]
 8004632:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004636:	edd0 7a00 	vldr	s15, [r0]
 800463a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800463e:	ed80 7a00 	vstr	s14, [r0]
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004646:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800464c <ai_dict4_dot_array_f32+0x178>
 800464a:	e7b8      	b.n	80045be <ai_dict4_dot_array_f32+0xea>
 800464c:	00000000 	.word	0x00000000

08004650 <forward_dense>:
 8004650:	6942      	ldr	r2, [r0, #20]
 8004652:	8813      	ldrh	r3, [r2, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 81ca 	beq.w	80049ee <forward_dense+0x39e>
 800465a:	6852      	ldr	r2, [r2, #4]
 800465c:	6850      	ldr	r0, [r2, #4]
 800465e:	b100      	cbz	r0, 8004662 <forward_dense+0x12>
 8004660:	6800      	ldr	r0, [r0, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f240 81c0 	bls.w	80049e8 <forward_dense+0x398>
 8004668:	6911      	ldr	r1, [r2, #16]
 800466a:	b101      	cbz	r1, 800466e <forward_dense+0x1e>
 800466c:	6809      	ldr	r1, [r1, #0]
 800466e:	2b02      	cmp	r3, #2
 8004670:	f000 81bf 	beq.w	80049f2 <forward_dense+0x3a2>
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	ed2d 8b10 	vpush	{d8-d15}
 800467c:	69d3      	ldr	r3, [r2, #28]
 800467e:	b091      	sub	sp, #68	; 0x44
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 820b 	beq.w	8004a9c <forward_dense+0x44c>
 8004686:	681c      	ldr	r4, [r3, #0]
 8004688:	9408      	str	r4, [sp, #32]
 800468a:	f112 0418 	adds.w	r4, r2, #24
 800468e:	f000 81df 	beq.w	8004a50 <forward_dense+0x400>
 8004692:	8b12      	ldrh	r2, [r2, #24]
 8004694:	2a01      	cmp	r2, #1
 8004696:	f240 81fe 	bls.w	8004a96 <forward_dense+0x446>
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 81da 	beq.w	8004a54 <forward_dense+0x404>
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	9306      	str	r3, [sp, #24]
 80046a4:	9b08      	ldr	r3, [sp, #32]
 80046a6:	68cc      	ldr	r4, [r1, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	68c5      	ldr	r5, [r0, #12]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80046b2:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80046b6:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80046ba:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80046be:	fa4c f505 	asr.w	r5, ip, r5
 80046c2:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80046c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80046c8:	2a04      	cmp	r2, #4
 80046ca:	fb07 f506 	mul.w	r5, r7, r6
 80046ce:	6864      	ldr	r4, [r4, #4]
 80046d0:	9507      	str	r5, [sp, #28]
 80046d2:	f000 81dd 	beq.w	8004a90 <forward_dense+0x440>
 80046d6:	2a08      	cmp	r2, #8
 80046d8:	f000 81da 	beq.w	8004a90 <forward_dense+0x440>
 80046dc:	f04f 0a00 	mov.w	sl, #0
 80046e0:	698a      	ldr	r2, [r1, #24]
 80046e2:	6981      	ldr	r1, [r0, #24]
 80046e4:	6890      	ldr	r0, [r2, #8]
 80046e6:	9a08      	ldr	r2, [sp, #32]
 80046e8:	9004      	str	r0, [sp, #16]
 80046ea:	6952      	ldr	r2, [r2, #20]
 80046ec:	688f      	ldr	r7, [r1, #8]
 80046ee:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80046f2:	00a2      	lsls	r2, r4, #2
 80046f4:	9209      	str	r2, [sp, #36]	; 0x24
 80046f6:	1886      	adds	r6, r0, r2
 80046f8:	9a07      	ldr	r2, [sp, #28]
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	f000 81c3 	beq.w	8004a86 <forward_dense+0x436>
 8004700:	f1a8 0210 	sub.w	r2, r8, #16
 8004704:	0912      	lsrs	r2, r2, #4
 8004706:	3201      	adds	r2, #1
 8004708:	0192      	lsls	r2, r2, #6
 800470a:	920c      	str	r2, [sp, #48]	; 0x30
 800470c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004710:	920a      	str	r2, [sp, #40]	; 0x28
 8004712:	689d      	ldr	r5, [r3, #8]
 8004714:	9b06      	ldr	r3, [sp, #24]
 8004716:	eddf aad0 	vldr	s21, [pc, #832]	; 8004a58 <forward_dense+0x408>
 800471a:	2200      	movs	r2, #0
 800471c:	9205      	str	r2, [sp, #20]
 800471e:	f008 020f 	and.w	r2, r8, #15
 8004722:	920d      	str	r2, [sp, #52]	; 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d043      	beq.n	80047b0 <forward_dense+0x160>
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	689c      	ldr	r4, [r3, #8]
 800472c:	9b04      	ldr	r3, [sp, #16]
 800472e:	f1ba 0f00 	cmp.w	sl, #0
 8004732:	d042      	beq.n	80047ba <forward_dense+0x16a>
 8004734:	42b3      	cmp	r3, r6
 8004736:	d22a      	bcs.n	800478e <forward_dense+0x13e>
 8004738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800473a:	469b      	mov	fp, r3
 800473c:	ab0f      	add	r3, sp, #60	; 0x3c
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	2a04      	cmp	r2, #4
 8004742:	4633      	mov	r3, r6
 8004744:	4646      	mov	r6, r8
 8004746:	4698      	mov	r8, r3
 8004748:	f000 8156 	beq.w	80049f8 <forward_dense+0x3a8>
 800474c:	2c00      	cmp	r4, #0
 800474e:	f000 8185 	beq.w	8004a5c <forward_dense+0x40c>
 8004752:	f8d4 c000 	ldr.w	ip, [r4]
 8004756:	9803      	ldr	r0, [sp, #12]
 8004758:	9600      	str	r6, [sp, #0]
 800475a:	463b      	mov	r3, r7
 800475c:	4629      	mov	r1, r5
 800475e:	4652      	mov	r2, sl
 8004760:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004764:	f7ff fde8 	bl	8004338 <ai_dict8_dot_array_f32>
 8004768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800476a:	f84b 3b04 	str.w	r3, [fp], #4
 800476e:	45c3      	cmp	fp, r8
 8004770:	f104 0404 	add.w	r4, r4, #4
 8004774:	444d      	add	r5, r9
 8004776:	d3e9      	bcc.n	800474c <forward_dense+0xfc>
 8004778:	4643      	mov	r3, r8
 800477a:	46b0      	mov	r8, r6
 800477c:	461e      	mov	r6, r3
 800477e:	9a04      	ldr	r2, [sp, #16]
 8004780:	43d3      	mvns	r3, r2
 8004782:	4433      	add	r3, r6
 8004784:	f023 0303 	bic.w	r3, r3, #3
 8004788:	3304      	adds	r3, #4
 800478a:	18d3      	adds	r3, r2, r3
 800478c:	9304      	str	r3, [sp, #16]
 800478e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004790:	9b05      	ldr	r3, [sp, #20]
 8004792:	4417      	add	r7, r2
 8004794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004796:	4416      	add	r6, r2
 8004798:	9a07      	ldr	r2, [sp, #28]
 800479a:	3301      	adds	r3, #1
 800479c:	4293      	cmp	r3, r2
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	f000 8171 	beq.w	8004a86 <forward_dense+0x436>
 80047a4:	9b08      	ldr	r3, [sp, #32]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	689d      	ldr	r5, [r3, #8]
 80047aa:	9b06      	ldr	r3, [sp, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1bb      	bne.n	8004728 <forward_dense+0xd8>
 80047b0:	461c      	mov	r4, r3
 80047b2:	9b04      	ldr	r3, [sp, #16]
 80047b4:	f1ba 0f00 	cmp.w	sl, #0
 80047b8:	d1bc      	bne.n	8004734 <forward_dense+0xe4>
 80047ba:	42b3      	cmp	r3, r6
 80047bc:	d2e7      	bcs.n	800478e <forward_dense+0x13e>
 80047be:	4618      	mov	r0, r3
 80047c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047c2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80047c6:	eb07 0c03 	add.w	ip, r7, r3
 80047ca:	469e      	mov	lr, r3
 80047cc:	2c00      	cmp	r4, #0
 80047ce:	f000 80ff 	beq.w	80049d0 <forward_dense+0x380>
 80047d2:	f1b8 0f0f 	cmp.w	r8, #15
 80047d6:	edd4 fa00 	vldr	s31, [r4]
 80047da:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8004a58 <forward_dense+0x408>
 80047de:	f104 0404 	add.w	r4, r4, #4
 80047e2:	f240 80fd 	bls.w	80049e0 <forward_dense+0x390>
 80047e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80047ee:	4641      	mov	r1, r8
 80047f0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80047f4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80047f8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80047fc:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004800:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004804:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004808:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800480c:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004810:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004814:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004818:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800481c:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004820:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004824:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004828:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800482c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004830:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004834:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004838:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800483c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004840:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004844:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004848:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800484c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004850:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004854:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004858:	ed53 5a03 	vldr	s11, [r3, #-12]
 800485c:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004860:	ed13 7a02 	vldr	s14, [r3, #-8]
 8004864:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004868:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800486c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004870:	3910      	subs	r1, #16
 8004872:	290f      	cmp	r1, #15
 8004874:	ed53 ea01 	vldr	s29, [r3, #-4]
 8004878:	ed12 ea01 	vldr	s28, [r2, #-4]
 800487c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8004880:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004884:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004888:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800488c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8004890:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8004894:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004898:	eee8 7a88 	vfma.f32	s15, s17, s16
 800489c:	eee0 7a20 	vfma.f32	s15, s0, s1
 80048a0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80048a4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80048a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80048ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80048b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80048b8:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80048bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048c0:	d896      	bhi.n	80047f0 <forward_dense+0x1a0>
 80048c2:	eb05 010e 	add.w	r1, r5, lr
 80048c6:	465b      	mov	r3, fp
 80048c8:	4662      	mov	r2, ip
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d075      	beq.n	80049ba <forward_dense+0x36a>
 80048ce:	ed91 7a00 	vldr	s14, [r1]
 80048d2:	edd2 7a00 	vldr	s15, [r2]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80048dc:	d06d      	beq.n	80049ba <forward_dense+0x36a>
 80048de:	ed91 7a01 	vldr	s14, [r1, #4]
 80048e2:	edd2 7a01 	vldr	s15, [r2, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80048ec:	d065      	beq.n	80049ba <forward_dense+0x36a>
 80048ee:	ed91 7a02 	vldr	s14, [r1, #8]
 80048f2:	edd2 7a02 	vldr	s15, [r2, #8]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80048fc:	d05d      	beq.n	80049ba <forward_dense+0x36a>
 80048fe:	ed91 7a03 	vldr	s14, [r1, #12]
 8004902:	edd2 7a03 	vldr	s15, [r2, #12]
 8004906:	2b04      	cmp	r3, #4
 8004908:	eee7 6a27 	vfma.f32	s13, s14, s15
 800490c:	d055      	beq.n	80049ba <forward_dense+0x36a>
 800490e:	ed91 7a04 	vldr	s14, [r1, #16]
 8004912:	edd2 7a04 	vldr	s15, [r2, #16]
 8004916:	2b05      	cmp	r3, #5
 8004918:	eee7 6a27 	vfma.f32	s13, s14, s15
 800491c:	d04d      	beq.n	80049ba <forward_dense+0x36a>
 800491e:	ed91 7a05 	vldr	s14, [r1, #20]
 8004922:	edd2 7a05 	vldr	s15, [r2, #20]
 8004926:	2b06      	cmp	r3, #6
 8004928:	eee7 6a27 	vfma.f32	s13, s14, s15
 800492c:	d045      	beq.n	80049ba <forward_dense+0x36a>
 800492e:	ed91 7a06 	vldr	s14, [r1, #24]
 8004932:	edd2 7a06 	vldr	s15, [r2, #24]
 8004936:	2b07      	cmp	r3, #7
 8004938:	eee7 6a27 	vfma.f32	s13, s14, s15
 800493c:	d03d      	beq.n	80049ba <forward_dense+0x36a>
 800493e:	ed91 7a07 	vldr	s14, [r1, #28]
 8004942:	edd2 7a07 	vldr	s15, [r2, #28]
 8004946:	2b08      	cmp	r3, #8
 8004948:	eee7 6a27 	vfma.f32	s13, s14, s15
 800494c:	d035      	beq.n	80049ba <forward_dense+0x36a>
 800494e:	ed91 7a08 	vldr	s14, [r1, #32]
 8004952:	edd2 7a08 	vldr	s15, [r2, #32]
 8004956:	2b09      	cmp	r3, #9
 8004958:	eee7 6a27 	vfma.f32	s13, s14, s15
 800495c:	d02d      	beq.n	80049ba <forward_dense+0x36a>
 800495e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004962:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004966:	2b0a      	cmp	r3, #10
 8004968:	eee7 6a27 	vfma.f32	s13, s14, s15
 800496c:	d025      	beq.n	80049ba <forward_dense+0x36a>
 800496e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8004972:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004976:	2b0b      	cmp	r3, #11
 8004978:	eee7 6a27 	vfma.f32	s13, s14, s15
 800497c:	d01d      	beq.n	80049ba <forward_dense+0x36a>
 800497e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8004982:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004986:	2b0c      	cmp	r3, #12
 8004988:	eee7 6a27 	vfma.f32	s13, s14, s15
 800498c:	d015      	beq.n	80049ba <forward_dense+0x36a>
 800498e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8004992:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004996:	2b0d      	cmp	r3, #13
 8004998:	eee7 6a27 	vfma.f32	s13, s14, s15
 800499c:	d00d      	beq.n	80049ba <forward_dense+0x36a>
 800499e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80049a2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80049a6:	2b0e      	cmp	r3, #14
 80049a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049ac:	d005      	beq.n	80049ba <forward_dense+0x36a>
 80049ae:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80049b2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80049b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80049ba:	444d      	add	r5, r9
 80049bc:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80049c0:	ece0 6a01 	vstmia	r0!, {s13}
 80049c4:	42b0      	cmp	r0, r6
 80049c6:	f4bf aeda 	bcs.w	800477e <forward_dense+0x12e>
 80049ca:	2c00      	cmp	r4, #0
 80049cc:	f47f af01 	bne.w	80047d2 <forward_dense+0x182>
 80049d0:	f1b8 0f0f 	cmp.w	r8, #15
 80049d4:	eef0 fa6a 	vmov.f32	s31, s21
 80049d8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004a58 <forward_dense+0x408>
 80049dc:	f63f af03 	bhi.w	80047e6 <forward_dense+0x196>
 80049e0:	4643      	mov	r3, r8
 80049e2:	4629      	mov	r1, r5
 80049e4:	463a      	mov	r2, r7
 80049e6:	e770      	b.n	80048ca <forward_dense+0x27a>
 80049e8:	2300      	movs	r3, #0
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	deff      	udf	#255	; 0xff
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	deff      	udf	#255	; 0xff
 80049f2:	2300      	movs	r3, #0
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	deff      	udf	#255	; 0xff
 80049f8:	b1ac      	cbz	r4, 8004a26 <forward_dense+0x3d6>
 80049fa:	f8d4 c000 	ldr.w	ip, [r4]
 80049fe:	9803      	ldr	r0, [sp, #12]
 8004a00:	9600      	str	r6, [sp, #0]
 8004a02:	463b      	mov	r3, r7
 8004a04:	4629      	mov	r1, r5
 8004a06:	4652      	mov	r2, sl
 8004a08:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004a0c:	f7ff fd62 	bl	80044d4 <ai_dict4_dot_array_f32>
 8004a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a12:	f84b 3b04 	str.w	r3, [fp], #4
 8004a16:	45c3      	cmp	fp, r8
 8004a18:	f104 0404 	add.w	r4, r4, #4
 8004a1c:	444d      	add	r5, r9
 8004a1e:	f4bf aeab 	bcs.w	8004778 <forward_dense+0x128>
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	d1e9      	bne.n	80049fa <forward_dense+0x3aa>
 8004a26:	4634      	mov	r4, r6
 8004a28:	4646      	mov	r6, r8
 8004a2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a2e:	9400      	str	r4, [sp, #0]
 8004a30:	463b      	mov	r3, r7
 8004a32:	4629      	mov	r1, r5
 8004a34:	4652      	mov	r2, sl
 8004a36:	4640      	mov	r0, r8
 8004a38:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004a3c:	f7ff fd4a 	bl	80044d4 <ai_dict4_dot_array_f32>
 8004a40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a42:	f84b 3b04 	str.w	r3, [fp], #4
 8004a46:	45b3      	cmp	fp, r6
 8004a48:	444d      	add	r5, r9
 8004a4a:	d3f0      	bcc.n	8004a2e <forward_dense+0x3de>
 8004a4c:	46a0      	mov	r8, r4
 8004a4e:	e696      	b.n	800477e <forward_dense+0x12e>
 8004a50:	9406      	str	r4, [sp, #24]
 8004a52:	e627      	b.n	80046a4 <forward_dense+0x54>
 8004a54:	9306      	str	r3, [sp, #24]
 8004a56:	e625      	b.n	80046a4 <forward_dense+0x54>
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	4634      	mov	r4, r6
 8004a5e:	4646      	mov	r6, r8
 8004a60:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a64:	9400      	str	r4, [sp, #0]
 8004a66:	463b      	mov	r3, r7
 8004a68:	4629      	mov	r1, r5
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004a72:	f7ff fc61 	bl	8004338 <ai_dict8_dot_array_f32>
 8004a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a78:	f84b 3b04 	str.w	r3, [fp], #4
 8004a7c:	45b3      	cmp	fp, r6
 8004a7e:	444d      	add	r5, r9
 8004a80:	d3f0      	bcc.n	8004a64 <forward_dense+0x414>
 8004a82:	46a0      	mov	r8, r4
 8004a84:	e67b      	b.n	800477e <forward_dense+0x12e>
 8004a86:	b011      	add	sp, #68	; 0x44
 8004a88:	ecbd 8b10 	vpop	{d8-d15}
 8004a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a90:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8004a94:	e624      	b.n	80046e0 <forward_dense+0x90>
 8004a96:	2300      	movs	r3, #0
 8004a98:	9306      	str	r3, [sp, #24]
 8004a9a:	e603      	b.n	80046a4 <forward_dense+0x54>
 8004a9c:	9308      	str	r3, [sp, #32]
 8004a9e:	e5f4      	b.n	800468a <forward_dense+0x3a>

08004aa0 <nl_func_relu_generic_array_f32>:
 8004aa0:	b430      	push	{r4, r5}
 8004aa2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aa6:	6880      	ldr	r0, [r0, #8]
 8004aa8:	688c      	ldr	r4, [r1, #8]
 8004aaa:	ed93 7a00 	vldr	s14, [r3]
 8004aae:	ed93 6a01 	vldr	s12, [r3, #4]
 8004ab2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004abc:	0092      	lsls	r2, r2, #2
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	4410      	add	r0, r2
 8004ac4:	4422      	add	r2, r4
 8004ac6:	d421      	bmi.n	8004b0c <nl_func_relu_generic_array_f32+0x6c>
 8004ac8:	42a2      	cmp	r2, r4
 8004aca:	d33d      	bcc.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004acc:	1d13      	adds	r3, r2, #4
 8004ace:	1d02      	adds	r2, r0, #4
 8004ad0:	e010      	b.n	8004af4 <nl_func_relu_generic_array_f32+0x54>
 8004ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004ade:	dd01      	ble.n	8004ae4 <nl_func_relu_generic_array_f32+0x44>
 8004ae0:	ee65 7a86 	vmul.f32	s15, s11, s12
 8004ae4:	ed62 7a01 	vstmdb	r2!, {s15}
 8004ae8:	6888      	ldr	r0, [r1, #8]
 8004aea:	f1a3 0408 	sub.w	r4, r3, #8
 8004aee:	4284      	cmp	r4, r0
 8004af0:	462b      	mov	r3, r5
 8004af2:	d329      	bcc.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004af4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004af8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	f1a3 0504 	sub.w	r5, r3, #4
 8004b04:	dce5      	bgt.n	8004ad2 <nl_func_relu_generic_array_f32+0x32>
 8004b06:	eef0 7a66 	vmov.f32	s15, s13
 8004b0a:	e7eb      	b.n	8004ae4 <nl_func_relu_generic_array_f32+0x44>
 8004b0c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	d01a      	beq.n	8004b4c <nl_func_relu_generic_array_f32+0xac>
 8004b16:	42a2      	cmp	r2, r4
 8004b18:	d316      	bcc.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004b1a:	1d13      	adds	r3, r2, #4
 8004b1c:	1d02      	adds	r2, r0, #4
 8004b1e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004b22:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2a:	f1a3 0408 	sub.w	r4, r3, #8
 8004b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b32:	f1a3 0004 	sub.w	r0, r3, #4
 8004b36:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	d51e      	bpl.n	8004b7c <nl_func_relu_generic_array_f32+0xdc>
 8004b3e:	ed62 6a01 	vstmdb	r2!, {s13}
 8004b42:	688b      	ldr	r3, [r1, #8]
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d91e      	bls.n	8004b86 <nl_func_relu_generic_array_f32+0xe6>
 8004b48:	bc30      	pop	{r4, r5}
 8004b4a:	4770      	bx	lr
 8004b4c:	42a2      	cmp	r2, r4
 8004b4e:	d3fb      	bcc.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004b50:	1d13      	adds	r3, r2, #4
 8004b52:	2500      	movs	r5, #0
 8004b54:	1d02      	adds	r2, r0, #4
 8004b56:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b5e:	f1a3 0408 	sub.w	r4, r3, #8
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b66:	f1a3 0004 	sub.w	r0, r3, #4
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	d80d      	bhi.n	8004b8a <nl_func_relu_generic_array_f32+0xea>
 8004b6e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004b72:	688b      	ldr	r3, [r1, #8]
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d8e7      	bhi.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	e7ec      	b.n	8004b56 <nl_func_relu_generic_array_f32+0xb6>
 8004b7c:	ed62 7a01 	vstmdb	r2!, {s15}
 8004b80:	688c      	ldr	r4, [r1, #8]
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d8e0      	bhi.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004b86:	4603      	mov	r3, r0
 8004b88:	e7c9      	b.n	8004b1e <nl_func_relu_generic_array_f32+0x7e>
 8004b8a:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004b8e:	688c      	ldr	r4, [r1, #8]
 8004b90:	429c      	cmp	r4, r3
 8004b92:	d8d9      	bhi.n	8004b48 <nl_func_relu_generic_array_f32+0xa8>
 8004b94:	4603      	mov	r3, r0
 8004b96:	e7de      	b.n	8004b56 <nl_func_relu_generic_array_f32+0xb6>

08004b98 <forward_relu>:
 8004b98:	6942      	ldr	r2, [r0, #20]
 8004b9a:	8813      	ldrh	r3, [r2, #0]
 8004b9c:	b33b      	cbz	r3, 8004bee <forward_relu+0x56>
 8004b9e:	b470      	push	{r4, r5, r6}
 8004ba0:	6852      	ldr	r2, [r2, #4]
 8004ba2:	6856      	ldr	r6, [r2, #4]
 8004ba4:	b106      	cbz	r6, 8004ba8 <forward_relu+0x10>
 8004ba6:	6836      	ldr	r6, [r6, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d91d      	bls.n	8004be8 <forward_relu+0x50>
 8004bac:	6913      	ldr	r3, [r2, #16]
 8004bae:	b103      	cbz	r3, 8004bb2 <forward_relu+0x1a>
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6982      	ldr	r2, [r0, #24]
 8004bb4:	68b4      	ldr	r4, [r6, #8]
 8004bb6:	6998      	ldr	r0, [r3, #24]
 8004bb8:	69b1      	ldr	r1, [r6, #24]
 8004bba:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d041      	beq.n	8004c46 <forward_relu+0xae>
 8004bc2:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8004bc6:	2d01      	cmp	r5, #1
 8004bc8:	d013      	beq.n	8004bf2 <forward_relu+0x5a>
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d06f      	beq.n	8004cae <forward_relu+0x116>
 8004bce:	68f6      	ldr	r6, [r6, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004bd6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	fb05 f202 	mul.w	r2, r5, r2
 8004be0:	d1f9      	bne.n	8004bd6 <forward_relu+0x3e>
 8004be2:	bc70      	pop	{r4, r5, r6}
 8004be4:	f7ff bf5c 	b.w	8004aa0 <nl_func_relu_generic_array_f32>
 8004be8:	2300      	movs	r3, #0
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	deff      	udf	#255	; 0xff
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	deff      	udf	#255	; 0xff
 8004bf2:	6880      	ldr	r0, [r0, #8]
 8004bf4:	688a      	ldr	r2, [r1, #8]
 8004bf6:	ed93 7a00 	vldr	s14, [r3]
 8004bfa:	b184      	cbz	r4, 8004c1e <forward_relu+0x86>
 8004bfc:	68f6      	ldr	r6, [r6, #12]
 8004bfe:	462b      	mov	r3, r5
 8004c00:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004c04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	fb05 f303 	mul.w	r3, r5, r3
 8004c0e:	d1f9      	bne.n	8004c04 <forward_relu+0x6c>
 8004c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c14:	3b01      	subs	r3, #1
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	18d2      	adds	r2, r2, r3
 8004c1a:	4418      	add	r0, r3
 8004c1c:	d23d      	bcs.n	8004c9a <forward_relu+0x102>
 8004c1e:	1d13      	adds	r3, r2, #4
 8004c20:	2500      	movs	r5, #0
 8004c22:	1d02      	adds	r2, r0, #4
 8004c24:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c30:	f1a3 0004 	sub.w	r0, r3, #4
 8004c34:	d833      	bhi.n	8004c9e <forward_relu+0x106>
 8004c36:	ed62 7a01 	vstmdb	r2!, {s15}
 8004c3a:	688c      	ldr	r4, [r1, #8]
 8004c3c:	3b08      	subs	r3, #8
 8004c3e:	429c      	cmp	r4, r3
 8004c40:	d82b      	bhi.n	8004c9a <forward_relu+0x102>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e7ee      	b.n	8004c24 <forward_relu+0x8c>
 8004c46:	6880      	ldr	r0, [r0, #8]
 8004c48:	688b      	ldr	r3, [r1, #8]
 8004c4a:	b184      	cbz	r4, 8004c6e <forward_relu+0xd6>
 8004c4c:	68f6      	ldr	r6, [r6, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004c54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	fb05 f202 	mul.w	r2, r5, r2
 8004c5e:	d1f9      	bne.n	8004c54 <forward_relu+0xbc>
 8004c60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c64:	3a01      	subs	r2, #1
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	4410      	add	r0, r2
 8004c6c:	d215      	bcs.n	8004c9a <forward_relu+0x102>
 8004c6e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004cb4 <forward_relu+0x11c>
 8004c72:	3304      	adds	r3, #4
 8004c74:	3004      	adds	r0, #4
 8004c76:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004c7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c82:	bfb8      	it	lt
 8004c84:	eef0 7a47 	vmovlt.f32	s15, s14
 8004c88:	ed60 7a01 	vstmdb	r0!, {s15}
 8004c8c:	688c      	ldr	r4, [r1, #8]
 8004c8e:	f1a3 0208 	sub.w	r2, r3, #8
 8004c92:	4294      	cmp	r4, r2
 8004c94:	f1a3 0304 	sub.w	r3, r3, #4
 8004c98:	d9ed      	bls.n	8004c76 <forward_relu+0xde>
 8004c9a:	bc70      	pop	{r4, r5, r6}
 8004c9c:	4770      	bx	lr
 8004c9e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004ca2:	688c      	ldr	r4, [r1, #8]
 8004ca4:	3b08      	subs	r3, #8
 8004ca6:	429c      	cmp	r4, r3
 8004ca8:	d8f7      	bhi.n	8004c9a <forward_relu+0x102>
 8004caa:	4603      	mov	r3, r0
 8004cac:	e7ba      	b.n	8004c24 <forward_relu+0x8c>
 8004cae:	2201      	movs	r2, #1
 8004cb0:	e797      	b.n	8004be2 <forward_relu+0x4a>
 8004cb2:	bf00      	nop
 8004cb4:	00000000 	.word	0x00000000

08004cb8 <forward_sm>:
 8004cb8:	6942      	ldr	r2, [r0, #20]
 8004cba:	8813      	ldrh	r3, [r2, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 808a 	beq.w	8004dd6 <forward_sm+0x11e>
 8004cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc6:	ed2d 8b04 	vpush	{d8-d9}
 8004cca:	6852      	ldr	r2, [r2, #4]
 8004ccc:	6855      	ldr	r5, [r2, #4]
 8004cce:	b085      	sub	sp, #20
 8004cd0:	b105      	cbz	r5, 8004cd4 <forward_sm+0x1c>
 8004cd2:	682d      	ldr	r5, [r5, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d976      	bls.n	8004dc6 <forward_sm+0x10e>
 8004cd8:	6913      	ldr	r3, [r2, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d071      	beq.n	8004dc2 <forward_sm+0x10a>
 8004cde:	681f      	ldr	r7, [r3, #0]
 8004ce0:	68ec      	ldr	r4, [r5, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	68ab      	ldr	r3, [r5, #8]
 8004ce6:	6850      	ldr	r0, [r2, #4]
 8004ce8:	6862      	ldr	r2, [r4, #4]
 8004cea:	9201      	str	r2, [sp, #4]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	d074      	beq.n	8004dda <forward_sm+0x122>
 8004cf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004cfa:	429c      	cmp	r4, r3
 8004cfc:	fb01 f202 	mul.w	r2, r1, r2
 8004d00:	d1f9      	bne.n	8004cf6 <forward_sm+0x3e>
 8004d02:	69ae      	ldr	r6, [r5, #24]
 8004d04:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8004d08:	9f01      	ldr	r7, [sp, #4]
 8004d0a:	68b5      	ldr	r5, [r6, #8]
 8004d0c:	68f3      	ldr	r3, [r6, #12]
 8004d0e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8004d12:	1bd1      	subs	r1, r2, r7
 8004d14:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8004d18:	1a12      	subs	r2, r2, r0
 8004d1a:	429d      	cmp	r5, r3
 8004d1c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8004d20:	d345      	bcc.n	8004dae <forward_sm+0xf6>
 8004d22:	00bb      	lsls	r3, r7, #2
 8004d24:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	f1c8 0200 	rsb	r2, r8, #0
 8004d2e:	425b      	negs	r3, r3
 8004d30:	9203      	str	r2, [sp, #12]
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004d38:	60b5      	str	r5, [r6, #8]
 8004d3a:	9b01      	ldr	r3, [sp, #4]
 8004d3c:	f8c9 4008 	str.w	r4, [r9, #8]
 8004d40:	68b2      	ldr	r2, [r6, #8]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	ed92 8a00 	vldr	s16, [r2]
 8004d48:	d940      	bls.n	8004dcc <forward_sm+0x114>
 8004d4a:	9900      	ldr	r1, [sp, #0]
 8004d4c:	1d13      	adds	r3, r2, #4
 8004d4e:	1857      	adds	r7, r2, r1
 8004d50:	ecf3 7a01 	vldmia	r3!, {s15}
 8004d54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	bfb8      	it	lt
 8004d5e:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004d62:	429f      	cmp	r7, r3
 8004d64:	d1f4      	bne.n	8004d50 <forward_sm+0x98>
 8004d66:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8004de0 <forward_sm+0x128>
 8004d6a:	4692      	mov	sl, r2
 8004d6c:	46a3      	mov	fp, r4
 8004d6e:	46a0      	mov	r8, r4
 8004d70:	ecba 0a01 	vldmia	sl!, {s0}
 8004d74:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004d78:	f002 feda 	bl	8007b30 <expf>
 8004d7c:	4557      	cmp	r7, sl
 8004d7e:	eca8 0a01 	vstmia	r8!, {s0}
 8004d82:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004d86:	d1f3      	bne.n	8004d70 <forward_sm+0xb8>
 8004d88:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004d8c:	9b00      	ldr	r3, [sp, #0]
 8004d8e:	18e2      	adds	r2, r4, r3
 8004d90:	eddb 7a00 	vldr	s15, [fp]
 8004d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d98:	eceb 7a01 	vstmia	fp!, {s15}
 8004d9c:	455a      	cmp	r2, fp
 8004d9e:	d1f7      	bne.n	8004d90 <forward_sm+0xd8>
 8004da0:	9a02      	ldr	r2, [sp, #8]
 8004da2:	68f3      	ldr	r3, [r6, #12]
 8004da4:	4415      	add	r5, r2
 8004da6:	9a03      	ldr	r2, [sp, #12]
 8004da8:	429d      	cmp	r5, r3
 8004daa:	4414      	add	r4, r2
 8004dac:	d2c4      	bcs.n	8004d38 <forward_sm+0x80>
 8004dae:	60b3      	str	r3, [r6, #8]
 8004db0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004db4:	f8c9 3008 	str.w	r3, [r9, #8]
 8004db8:	b005      	add	sp, #20
 8004dba:	ecbd 8b04 	vpop	{d8-d9}
 8004dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	deff      	udf	#255	; 0xff
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	deff      	udf	#255	; 0xff
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0e7      	beq.n	8004da0 <forward_sm+0xe8>
 8004dd0:	9b00      	ldr	r3, [sp, #0]
 8004dd2:	18d7      	adds	r7, r2, r3
 8004dd4:	e7c7      	b.n	8004d66 <forward_sm+0xae>
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	deff      	udf	#255	; 0xff
 8004dda:	2201      	movs	r2, #1
 8004ddc:	e791      	b.n	8004d02 <forward_sm+0x4a>
 8004dde:	bf00      	nop
 8004de0:	00000000 	.word	0x00000000

08004de4 <ai_check_custom_types>:
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <ai_check_custom_types+0x50>)
 8004de6:	b082      	sub	sp, #8
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	b118      	cbz	r0, 8004df6 <ai_check_custom_types+0x12>
 8004dee:	7803      	ldrb	r3, [r0, #0]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d002      	beq.n	8004dfa <ai_check_custom_types+0x16>
 8004df4:	2000      	movs	r0, #0
 8004df6:	b002      	add	sp, #8
 8004df8:	4770      	bx	lr
 8004dfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <ai_check_custom_types+0x28>
 8004e02:	2001      	movs	r0, #1
 8004e04:	f080 0001 	eor.w	r0, r0, #1
 8004e08:	b002      	add	sp, #8
 8004e0a:	4770      	bx	lr
 8004e0c:	7842      	ldrb	r2, [r0, #1]
 8004e0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f100 0001 	add.w	r0, r0, #1
 8004e18:	d1f3      	bne.n	8004e02 <ai_check_custom_types+0x1e>
 8004e1a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004e1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d1ed      	bne.n	8004e02 <ai_check_custom_types+0x1e>
 8004e26:	7842      	ldrb	r2, [r0, #1]
 8004e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1e8      	bne.n	8004e02 <ai_check_custom_types+0x1e>
 8004e30:	2000      	movs	r0, #0
 8004e32:	e7e7      	b.n	8004e04 <ai_check_custom_types+0x20>
 8004e34:	08007e88 	.word	0x08007e88

08004e38 <ai_layers_forward_all>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8004e3c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8004e3e:	4604      	mov	r4, r0
 8004e40:	b31e      	cbz	r6, 8004e8a <ai_layers_forward_all+0x52>
 8004e42:	b1cd      	cbz	r5, 8004e78 <ai_layers_forward_all+0x40>
 8004e44:	6545      	str	r5, [r0, #84]	; 0x54
 8004e46:	4629      	mov	r1, r5
 8004e48:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	47b0      	blx	r6
 8004e4e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004e50:	2700      	movs	r7, #0
 8004e52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e54:	2002      	movs	r0, #2
 8004e56:	47b0      	blx	r6
 8004e58:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004e5a:	692b      	ldr	r3, [r5, #16]
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	4798      	blx	r3
 8004e60:	68eb      	ldr	r3, [r5, #12]
 8004e62:	429d      	cmp	r5, r3
 8004e64:	f04f 0003 	mov.w	r0, #3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	d006      	beq.n	8004e7a <ai_layers_forward_all+0x42>
 8004e6c:	6563      	str	r3, [r4, #84]	; 0x54
 8004e6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e70:	47b0      	blx	r6
 8004e72:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d1ec      	bne.n	8004e52 <ai_layers_forward_all+0x1a>
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6567      	str	r7, [r4, #84]	; 0x54
 8004e7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e80:	47b0      	blx	r6
 8004e82:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d1e4      	bne.n	8004e52 <ai_layers_forward_all+0x1a>
 8004e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	d0f4      	beq.n	8004e78 <ai_layers_forward_all+0x40>
 8004e8e:	6545      	str	r5, [r0, #84]	; 0x54
 8004e90:	692b      	ldr	r3, [r5, #16]
 8004e92:	4628      	mov	r0, r5
 8004e94:	4798      	blx	r3
 8004e96:	68eb      	ldr	r3, [r5, #12]
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	d004      	beq.n	8004ea6 <ai_layers_forward_all+0x6e>
 8004e9c:	6563      	str	r3, [r4, #84]	; 0x54
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f5      	bne.n	8004e90 <ai_layers_forward_all+0x58>
 8004ea4:	e7e8      	b.n	8004e78 <ai_layers_forward_all+0x40>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6563      	str	r3, [r4, #84]	; 0x54
 8004eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004eac <ai_array_to_buffer_fmt>:
 8004eac:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d01f      	beq.n	8004ef4 <ai_array_to_buffer_fmt+0x48>
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <ai_array_to_buffer_fmt+0x7c>)
 8004eb6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00a      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004ebe:	dc0d      	bgt.n	8004edc <ai_array_to_buffer_fmt+0x30>
 8004ec0:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <ai_array_to_buffer_fmt+0x80>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d006      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004ec6:	dd1d      	ble.n	8004f04 <ai_array_to_buffer_fmt+0x58>
 8004ec8:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <ai_array_to_buffer_fmt+0x84>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d002      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004ece:	320f      	adds	r2, #15
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10d      	bne.n	8004ef0 <ai_array_to_buffer_fmt+0x44>
 8004ed4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004ed8:	4318      	orrs	r0, r3
 8004eda:	4770      	bx	lr
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <ai_array_to_buffer_fmt+0x88>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d0f8      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004ee2:	dd18      	ble.n	8004f16 <ai_array_to_buffer_fmt+0x6a>
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <ai_array_to_buffer_fmt+0x8c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d0f4      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004eea:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <ai_array_to_buffer_fmt+0x90>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d0f1      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	e7ef      	b.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <ai_array_to_buffer_fmt+0x94>)
 8004ef6:	4003      	ands	r3, r0
 8004ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004efc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004f00:	4318      	orrs	r0, r3
 8004f02:	4770      	bx	lr
 8004f04:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d0e3      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d0df      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004f14:	e7ec      	b.n	8004ef0 <ai_array_to_buffer_fmt+0x44>
 8004f16:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d0da      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004f1e:	3207      	adds	r2, #7
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d0d7      	beq.n	8004ed4 <ai_array_to_buffer_fmt+0x28>
 8004f24:	e7e4      	b.n	8004ef0 <ai_array_to_buffer_fmt+0x44>
 8004f26:	bf00      	nop
 8004f28:	00840040 	.word	0x00840040
 8004f2c:	00040447 	.word	0x00040447
 8004f30:	00040840 	.word	0x00040840
 8004f34:	00840840 	.word	0x00840840
 8004f38:	0084084f 	.word	0x0084084f
 8004f3c:	01821040 	.word	0x01821040
 8004f40:	00803fff 	.word	0x00803fff

08004f44 <ai_array_get_byte_size>:
 8004f44:	b1c1      	cbz	r1, 8004f78 <ai_array_get_byte_size+0x34>
 8004f46:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8004f4a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004f4e:	4413      	add	r3, r2
 8004f50:	fb01 f103 	mul.w	r1, r1, r3
 8004f54:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004f58:	3107      	adds	r1, #7
 8004f5a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8004f5e:	f021 0107 	bic.w	r1, r1, #7
 8004f62:	2804      	cmp	r0, #4
 8004f64:	fa21 f102 	lsr.w	r1, r1, r2
 8004f68:	d008      	beq.n	8004f7c <ai_array_get_byte_size+0x38>
 8004f6a:	2808      	cmp	r0, #8
 8004f6c:	d101      	bne.n	8004f72 <ai_array_get_byte_size+0x2e>
 8004f6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004f72:	3107      	adds	r1, #7
 8004f74:	08c8      	lsrs	r0, r1, #3
 8004f76:	4770      	bx	lr
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4770      	bx	lr
 8004f7c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004f80:	3107      	adds	r1, #7
 8004f82:	08c8      	lsrs	r0, r1, #3
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop

08004f88 <__errno>:
 8004f88:	4b01      	ldr	r3, [pc, #4]	; (8004f90 <__errno+0x8>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	200006d4 	.word	0x200006d4

08004f94 <__libc_init_array>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4d0d      	ldr	r5, [pc, #52]	; (8004fcc <__libc_init_array+0x38>)
 8004f98:	4c0d      	ldr	r4, [pc, #52]	; (8004fd0 <__libc_init_array+0x3c>)
 8004f9a:	1b64      	subs	r4, r4, r5
 8004f9c:	10a4      	asrs	r4, r4, #2
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	42a6      	cmp	r6, r4
 8004fa2:	d109      	bne.n	8004fb8 <__libc_init_array+0x24>
 8004fa4:	4d0b      	ldr	r5, [pc, #44]	; (8004fd4 <__libc_init_array+0x40>)
 8004fa6:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <__libc_init_array+0x44>)
 8004fa8:	f002 fef6 	bl	8007d98 <_init>
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	42a6      	cmp	r6, r4
 8004fb4:	d105      	bne.n	8004fc2 <__libc_init_array+0x2e>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbc:	4798      	blx	r3
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	e7ee      	b.n	8004fa0 <__libc_init_array+0xc>
 8004fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc6:	4798      	blx	r3
 8004fc8:	3601      	adds	r6, #1
 8004fca:	e7f2      	b.n	8004fb2 <__libc_init_array+0x1e>
 8004fcc:	0800842c 	.word	0x0800842c
 8004fd0:	0800842c 	.word	0x0800842c
 8004fd4:	0800842c 	.word	0x0800842c
 8004fd8:	08008430 	.word	0x08008430

08004fdc <malloc>:
 8004fdc:	4b02      	ldr	r3, [pc, #8]	; (8004fe8 <malloc+0xc>)
 8004fde:	4601      	mov	r1, r0
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	f000 b885 	b.w	80050f0 <_malloc_r>
 8004fe6:	bf00      	nop
 8004fe8:	200006d4 	.word	0x200006d4

08004fec <memcpy>:
 8004fec:	440a      	add	r2, r1
 8004fee:	4291      	cmp	r1, r2
 8004ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ff4:	d100      	bne.n	8004ff8 <memcpy+0xc>
 8004ff6:	4770      	bx	lr
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005002:	4291      	cmp	r1, r2
 8005004:	d1f9      	bne.n	8004ffa <memcpy+0xe>
 8005006:	bd10      	pop	{r4, pc}

08005008 <memset>:
 8005008:	4402      	add	r2, r0
 800500a:	4603      	mov	r3, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <_free_r>:
 8005018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800501a:	2900      	cmp	r1, #0
 800501c:	d044      	beq.n	80050a8 <_free_r+0x90>
 800501e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005022:	9001      	str	r0, [sp, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f1a1 0404 	sub.w	r4, r1, #4
 800502a:	bfb8      	it	lt
 800502c:	18e4      	addlt	r4, r4, r3
 800502e:	f001 ff39 	bl	8006ea4 <__malloc_lock>
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <_free_r+0x94>)
 8005034:	9801      	ldr	r0, [sp, #4]
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	b933      	cbnz	r3, 8005048 <_free_r+0x30>
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	6014      	str	r4, [r2, #0]
 800503e:	b003      	add	sp, #12
 8005040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005044:	f001 bf34 	b.w	8006eb0 <__malloc_unlock>
 8005048:	42a3      	cmp	r3, r4
 800504a:	d908      	bls.n	800505e <_free_r+0x46>
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	1961      	adds	r1, r4, r5
 8005050:	428b      	cmp	r3, r1
 8005052:	bf01      	itttt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	1949      	addeq	r1, r1, r5
 800505a:	6021      	streq	r1, [r4, #0]
 800505c:	e7ed      	b.n	800503a <_free_r+0x22>
 800505e:	461a      	mov	r2, r3
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b10b      	cbz	r3, 8005068 <_free_r+0x50>
 8005064:	42a3      	cmp	r3, r4
 8005066:	d9fa      	bls.n	800505e <_free_r+0x46>
 8005068:	6811      	ldr	r1, [r2, #0]
 800506a:	1855      	adds	r5, r2, r1
 800506c:	42a5      	cmp	r5, r4
 800506e:	d10b      	bne.n	8005088 <_free_r+0x70>
 8005070:	6824      	ldr	r4, [r4, #0]
 8005072:	4421      	add	r1, r4
 8005074:	1854      	adds	r4, r2, r1
 8005076:	42a3      	cmp	r3, r4
 8005078:	6011      	str	r1, [r2, #0]
 800507a:	d1e0      	bne.n	800503e <_free_r+0x26>
 800507c:	681c      	ldr	r4, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	6053      	str	r3, [r2, #4]
 8005082:	4421      	add	r1, r4
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	e7da      	b.n	800503e <_free_r+0x26>
 8005088:	d902      	bls.n	8005090 <_free_r+0x78>
 800508a:	230c      	movs	r3, #12
 800508c:	6003      	str	r3, [r0, #0]
 800508e:	e7d6      	b.n	800503e <_free_r+0x26>
 8005090:	6825      	ldr	r5, [r4, #0]
 8005092:	1961      	adds	r1, r4, r5
 8005094:	428b      	cmp	r3, r1
 8005096:	bf04      	itt	eq
 8005098:	6819      	ldreq	r1, [r3, #0]
 800509a:	685b      	ldreq	r3, [r3, #4]
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	bf04      	itt	eq
 80050a0:	1949      	addeq	r1, r1, r5
 80050a2:	6021      	streq	r1, [r4, #0]
 80050a4:	6054      	str	r4, [r2, #4]
 80050a6:	e7ca      	b.n	800503e <_free_r+0x26>
 80050a8:	b003      	add	sp, #12
 80050aa:	bd30      	pop	{r4, r5, pc}
 80050ac:	200009ec 	.word	0x200009ec

080050b0 <sbrk_aligned>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4e0e      	ldr	r6, [pc, #56]	; (80050ec <sbrk_aligned+0x3c>)
 80050b4:	460c      	mov	r4, r1
 80050b6:	6831      	ldr	r1, [r6, #0]
 80050b8:	4605      	mov	r5, r0
 80050ba:	b911      	cbnz	r1, 80050c2 <sbrk_aligned+0x12>
 80050bc:	f000 fd84 	bl	8005bc8 <_sbrk_r>
 80050c0:	6030      	str	r0, [r6, #0]
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 fd7f 	bl	8005bc8 <_sbrk_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d00a      	beq.n	80050e4 <sbrk_aligned+0x34>
 80050ce:	1cc4      	adds	r4, r0, #3
 80050d0:	f024 0403 	bic.w	r4, r4, #3
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d007      	beq.n	80050e8 <sbrk_aligned+0x38>
 80050d8:	1a21      	subs	r1, r4, r0
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fd74 	bl	8005bc8 <_sbrk_r>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d101      	bne.n	80050e8 <sbrk_aligned+0x38>
 80050e4:	f04f 34ff 	mov.w	r4, #4294967295
 80050e8:	4620      	mov	r0, r4
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	200009f0 	.word	0x200009f0

080050f0 <_malloc_r>:
 80050f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f4:	1ccd      	adds	r5, r1, #3
 80050f6:	f025 0503 	bic.w	r5, r5, #3
 80050fa:	3508      	adds	r5, #8
 80050fc:	2d0c      	cmp	r5, #12
 80050fe:	bf38      	it	cc
 8005100:	250c      	movcc	r5, #12
 8005102:	2d00      	cmp	r5, #0
 8005104:	4607      	mov	r7, r0
 8005106:	db01      	blt.n	800510c <_malloc_r+0x1c>
 8005108:	42a9      	cmp	r1, r5
 800510a:	d905      	bls.n	8005118 <_malloc_r+0x28>
 800510c:	230c      	movs	r3, #12
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	2600      	movs	r6, #0
 8005112:	4630      	mov	r0, r6
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005118:	4e2e      	ldr	r6, [pc, #184]	; (80051d4 <_malloc_r+0xe4>)
 800511a:	f001 fec3 	bl	8006ea4 <__malloc_lock>
 800511e:	6833      	ldr	r3, [r6, #0]
 8005120:	461c      	mov	r4, r3
 8005122:	bb34      	cbnz	r4, 8005172 <_malloc_r+0x82>
 8005124:	4629      	mov	r1, r5
 8005126:	4638      	mov	r0, r7
 8005128:	f7ff ffc2 	bl	80050b0 <sbrk_aligned>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	4604      	mov	r4, r0
 8005130:	d14d      	bne.n	80051ce <_malloc_r+0xde>
 8005132:	6834      	ldr	r4, [r6, #0]
 8005134:	4626      	mov	r6, r4
 8005136:	2e00      	cmp	r6, #0
 8005138:	d140      	bne.n	80051bc <_malloc_r+0xcc>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	4631      	mov	r1, r6
 800513e:	4638      	mov	r0, r7
 8005140:	eb04 0803 	add.w	r8, r4, r3
 8005144:	f000 fd40 	bl	8005bc8 <_sbrk_r>
 8005148:	4580      	cmp	r8, r0
 800514a:	d13a      	bne.n	80051c2 <_malloc_r+0xd2>
 800514c:	6821      	ldr	r1, [r4, #0]
 800514e:	3503      	adds	r5, #3
 8005150:	1a6d      	subs	r5, r5, r1
 8005152:	f025 0503 	bic.w	r5, r5, #3
 8005156:	3508      	adds	r5, #8
 8005158:	2d0c      	cmp	r5, #12
 800515a:	bf38      	it	cc
 800515c:	250c      	movcc	r5, #12
 800515e:	4629      	mov	r1, r5
 8005160:	4638      	mov	r0, r7
 8005162:	f7ff ffa5 	bl	80050b0 <sbrk_aligned>
 8005166:	3001      	adds	r0, #1
 8005168:	d02b      	beq.n	80051c2 <_malloc_r+0xd2>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	442b      	add	r3, r5
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	e00e      	b.n	8005190 <_malloc_r+0xa0>
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	1b52      	subs	r2, r2, r5
 8005176:	d41e      	bmi.n	80051b6 <_malloc_r+0xc6>
 8005178:	2a0b      	cmp	r2, #11
 800517a:	d916      	bls.n	80051aa <_malloc_r+0xba>
 800517c:	1961      	adds	r1, r4, r5
 800517e:	42a3      	cmp	r3, r4
 8005180:	6025      	str	r5, [r4, #0]
 8005182:	bf18      	it	ne
 8005184:	6059      	strne	r1, [r3, #4]
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	bf08      	it	eq
 800518a:	6031      	streq	r1, [r6, #0]
 800518c:	5162      	str	r2, [r4, r5]
 800518e:	604b      	str	r3, [r1, #4]
 8005190:	4638      	mov	r0, r7
 8005192:	f104 060b 	add.w	r6, r4, #11
 8005196:	f001 fe8b 	bl	8006eb0 <__malloc_unlock>
 800519a:	f026 0607 	bic.w	r6, r6, #7
 800519e:	1d23      	adds	r3, r4, #4
 80051a0:	1af2      	subs	r2, r6, r3
 80051a2:	d0b6      	beq.n	8005112 <_malloc_r+0x22>
 80051a4:	1b9b      	subs	r3, r3, r6
 80051a6:	50a3      	str	r3, [r4, r2]
 80051a8:	e7b3      	b.n	8005112 <_malloc_r+0x22>
 80051aa:	6862      	ldr	r2, [r4, #4]
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	bf0c      	ite	eq
 80051b0:	6032      	streq	r2, [r6, #0]
 80051b2:	605a      	strne	r2, [r3, #4]
 80051b4:	e7ec      	b.n	8005190 <_malloc_r+0xa0>
 80051b6:	4623      	mov	r3, r4
 80051b8:	6864      	ldr	r4, [r4, #4]
 80051ba:	e7b2      	b.n	8005122 <_malloc_r+0x32>
 80051bc:	4634      	mov	r4, r6
 80051be:	6876      	ldr	r6, [r6, #4]
 80051c0:	e7b9      	b.n	8005136 <_malloc_r+0x46>
 80051c2:	230c      	movs	r3, #12
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4638      	mov	r0, r7
 80051c8:	f001 fe72 	bl	8006eb0 <__malloc_unlock>
 80051cc:	e7a1      	b.n	8005112 <_malloc_r+0x22>
 80051ce:	6025      	str	r5, [r4, #0]
 80051d0:	e7de      	b.n	8005190 <_malloc_r+0xa0>
 80051d2:	bf00      	nop
 80051d4:	200009ec 	.word	0x200009ec

080051d8 <__cvt>:
 80051d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	ec55 4b10 	vmov	r4, r5, d0
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	460e      	mov	r6, r1
 80051e4:	4619      	mov	r1, r3
 80051e6:	462b      	mov	r3, r5
 80051e8:	bfbb      	ittet	lt
 80051ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051ee:	461d      	movlt	r5, r3
 80051f0:	2300      	movge	r3, #0
 80051f2:	232d      	movlt	r3, #45	; 0x2d
 80051f4:	700b      	strb	r3, [r1, #0]
 80051f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051fc:	4691      	mov	r9, r2
 80051fe:	f023 0820 	bic.w	r8, r3, #32
 8005202:	bfbc      	itt	lt
 8005204:	4622      	movlt	r2, r4
 8005206:	4614      	movlt	r4, r2
 8005208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800520c:	d005      	beq.n	800521a <__cvt+0x42>
 800520e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005212:	d100      	bne.n	8005216 <__cvt+0x3e>
 8005214:	3601      	adds	r6, #1
 8005216:	2102      	movs	r1, #2
 8005218:	e000      	b.n	800521c <__cvt+0x44>
 800521a:	2103      	movs	r1, #3
 800521c:	ab03      	add	r3, sp, #12
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	ab02      	add	r3, sp, #8
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	ec45 4b10 	vmov	d0, r4, r5
 8005228:	4653      	mov	r3, sl
 800522a:	4632      	mov	r2, r6
 800522c:	f000 fe28 	bl	8005e80 <_dtoa_r>
 8005230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005234:	4607      	mov	r7, r0
 8005236:	d102      	bne.n	800523e <__cvt+0x66>
 8005238:	f019 0f01 	tst.w	r9, #1
 800523c:	d022      	beq.n	8005284 <__cvt+0xac>
 800523e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005242:	eb07 0906 	add.w	r9, r7, r6
 8005246:	d110      	bne.n	800526a <__cvt+0x92>
 8005248:	783b      	ldrb	r3, [r7, #0]
 800524a:	2b30      	cmp	r3, #48	; 0x30
 800524c:	d10a      	bne.n	8005264 <__cvt+0x8c>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	4620      	mov	r0, r4
 8005254:	4629      	mov	r1, r5
 8005256:	f7fb fc67 	bl	8000b28 <__aeabi_dcmpeq>
 800525a:	b918      	cbnz	r0, 8005264 <__cvt+0x8c>
 800525c:	f1c6 0601 	rsb	r6, r6, #1
 8005260:	f8ca 6000 	str.w	r6, [sl]
 8005264:	f8da 3000 	ldr.w	r3, [sl]
 8005268:	4499      	add	r9, r3
 800526a:	2200      	movs	r2, #0
 800526c:	2300      	movs	r3, #0
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb fc59 	bl	8000b28 <__aeabi_dcmpeq>
 8005276:	b108      	cbz	r0, 800527c <__cvt+0xa4>
 8005278:	f8cd 900c 	str.w	r9, [sp, #12]
 800527c:	2230      	movs	r2, #48	; 0x30
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	454b      	cmp	r3, r9
 8005282:	d307      	bcc.n	8005294 <__cvt+0xbc>
 8005284:	9b03      	ldr	r3, [sp, #12]
 8005286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005288:	1bdb      	subs	r3, r3, r7
 800528a:	4638      	mov	r0, r7
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	b004      	add	sp, #16
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	1c59      	adds	r1, r3, #1
 8005296:	9103      	str	r1, [sp, #12]
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e7f0      	b.n	800527e <__cvt+0xa6>

0800529c <__exponent>:
 800529c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800529e:	4603      	mov	r3, r0
 80052a0:	2900      	cmp	r1, #0
 80052a2:	bfb8      	it	lt
 80052a4:	4249      	neglt	r1, r1
 80052a6:	f803 2b02 	strb.w	r2, [r3], #2
 80052aa:	bfb4      	ite	lt
 80052ac:	222d      	movlt	r2, #45	; 0x2d
 80052ae:	222b      	movge	r2, #43	; 0x2b
 80052b0:	2909      	cmp	r1, #9
 80052b2:	7042      	strb	r2, [r0, #1]
 80052b4:	dd2a      	ble.n	800530c <__exponent+0x70>
 80052b6:	f10d 0407 	add.w	r4, sp, #7
 80052ba:	46a4      	mov	ip, r4
 80052bc:	270a      	movs	r7, #10
 80052be:	46a6      	mov	lr, r4
 80052c0:	460a      	mov	r2, r1
 80052c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80052c6:	fb07 1516 	mls	r5, r7, r6, r1
 80052ca:	3530      	adds	r5, #48	; 0x30
 80052cc:	2a63      	cmp	r2, #99	; 0x63
 80052ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80052d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052d6:	4631      	mov	r1, r6
 80052d8:	dcf1      	bgt.n	80052be <__exponent+0x22>
 80052da:	3130      	adds	r1, #48	; 0x30
 80052dc:	f1ae 0502 	sub.w	r5, lr, #2
 80052e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052e4:	1c44      	adds	r4, r0, #1
 80052e6:	4629      	mov	r1, r5
 80052e8:	4561      	cmp	r1, ip
 80052ea:	d30a      	bcc.n	8005302 <__exponent+0x66>
 80052ec:	f10d 0209 	add.w	r2, sp, #9
 80052f0:	eba2 020e 	sub.w	r2, r2, lr
 80052f4:	4565      	cmp	r5, ip
 80052f6:	bf88      	it	hi
 80052f8:	2200      	movhi	r2, #0
 80052fa:	4413      	add	r3, r2
 80052fc:	1a18      	subs	r0, r3, r0
 80052fe:	b003      	add	sp, #12
 8005300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800530a:	e7ed      	b.n	80052e8 <__exponent+0x4c>
 800530c:	2330      	movs	r3, #48	; 0x30
 800530e:	3130      	adds	r1, #48	; 0x30
 8005310:	7083      	strb	r3, [r0, #2]
 8005312:	70c1      	strb	r1, [r0, #3]
 8005314:	1d03      	adds	r3, r0, #4
 8005316:	e7f1      	b.n	80052fc <__exponent+0x60>

08005318 <_printf_float>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	ed2d 8b02 	vpush	{d8}
 8005320:	b08d      	sub	sp, #52	; 0x34
 8005322:	460c      	mov	r4, r1
 8005324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005328:	4616      	mov	r6, r2
 800532a:	461f      	mov	r7, r3
 800532c:	4605      	mov	r5, r0
 800532e:	f001 fd4d 	bl	8006dcc <_localeconv_r>
 8005332:	f8d0 a000 	ldr.w	sl, [r0]
 8005336:	4650      	mov	r0, sl
 8005338:	f7fa ff74 	bl	8000224 <strlen>
 800533c:	2300      	movs	r3, #0
 800533e:	930a      	str	r3, [sp, #40]	; 0x28
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	f8d8 3000 	ldr.w	r3, [r8]
 8005348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800534c:	3307      	adds	r3, #7
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	f103 0208 	add.w	r2, r3, #8
 8005356:	f8c8 2000 	str.w	r2, [r8]
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800536a:	9307      	str	r3, [sp, #28]
 800536c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005370:	ee08 0a10 	vmov	s16, r0
 8005374:	4b9f      	ldr	r3, [pc, #636]	; (80055f4 <_printf_float+0x2dc>)
 8005376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800537a:	f04f 32ff 	mov.w	r2, #4294967295
 800537e:	f7fb fc05 	bl	8000b8c <__aeabi_dcmpun>
 8005382:	bb88      	cbnz	r0, 80053e8 <_printf_float+0xd0>
 8005384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005388:	4b9a      	ldr	r3, [pc, #616]	; (80055f4 <_printf_float+0x2dc>)
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	f7fb fbdf 	bl	8000b50 <__aeabi_dcmple>
 8005392:	bb48      	cbnz	r0, 80053e8 <_printf_float+0xd0>
 8005394:	2200      	movs	r2, #0
 8005396:	2300      	movs	r3, #0
 8005398:	4640      	mov	r0, r8
 800539a:	4649      	mov	r1, r9
 800539c:	f7fb fbce 	bl	8000b3c <__aeabi_dcmplt>
 80053a0:	b110      	cbz	r0, 80053a8 <_printf_float+0x90>
 80053a2:	232d      	movs	r3, #45	; 0x2d
 80053a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a8:	4b93      	ldr	r3, [pc, #588]	; (80055f8 <_printf_float+0x2e0>)
 80053aa:	4894      	ldr	r0, [pc, #592]	; (80055fc <_printf_float+0x2e4>)
 80053ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053b0:	bf94      	ite	ls
 80053b2:	4698      	movls	r8, r3
 80053b4:	4680      	movhi	r8, r0
 80053b6:	2303      	movs	r3, #3
 80053b8:	6123      	str	r3, [r4, #16]
 80053ba:	9b05      	ldr	r3, [sp, #20]
 80053bc:	f023 0204 	bic.w	r2, r3, #4
 80053c0:	6022      	str	r2, [r4, #0]
 80053c2:	f04f 0900 	mov.w	r9, #0
 80053c6:	9700      	str	r7, [sp, #0]
 80053c8:	4633      	mov	r3, r6
 80053ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80053cc:	4621      	mov	r1, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f9d8 	bl	8005784 <_printf_common>
 80053d4:	3001      	adds	r0, #1
 80053d6:	f040 8090 	bne.w	80054fa <_printf_float+0x1e2>
 80053da:	f04f 30ff 	mov.w	r0, #4294967295
 80053de:	b00d      	add	sp, #52	; 0x34
 80053e0:	ecbd 8b02 	vpop	{d8}
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fb fbcc 	bl	8000b8c <__aeabi_dcmpun>
 80053f4:	b140      	cbz	r0, 8005408 <_printf_float+0xf0>
 80053f6:	464b      	mov	r3, r9
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfbc      	itt	lt
 80053fc:	232d      	movlt	r3, #45	; 0x2d
 80053fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005402:	487f      	ldr	r0, [pc, #508]	; (8005600 <_printf_float+0x2e8>)
 8005404:	4b7f      	ldr	r3, [pc, #508]	; (8005604 <_printf_float+0x2ec>)
 8005406:	e7d1      	b.n	80053ac <_printf_float+0x94>
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800540e:	9206      	str	r2, [sp, #24]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	d13f      	bne.n	8005494 <_printf_float+0x17c>
 8005414:	2306      	movs	r3, #6
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	9b05      	ldr	r3, [sp, #20]
 800541a:	6861      	ldr	r1, [r4, #4]
 800541c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005420:	2300      	movs	r3, #0
 8005422:	9303      	str	r3, [sp, #12]
 8005424:	ab0a      	add	r3, sp, #40	; 0x28
 8005426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800542a:	ab09      	add	r3, sp, #36	; 0x24
 800542c:	ec49 8b10 	vmov	d0, r8, r9
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	6022      	str	r2, [r4, #0]
 8005434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005438:	4628      	mov	r0, r5
 800543a:	f7ff fecd 	bl	80051d8 <__cvt>
 800543e:	9b06      	ldr	r3, [sp, #24]
 8005440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005442:	2b47      	cmp	r3, #71	; 0x47
 8005444:	4680      	mov	r8, r0
 8005446:	d108      	bne.n	800545a <_printf_float+0x142>
 8005448:	1cc8      	adds	r0, r1, #3
 800544a:	db02      	blt.n	8005452 <_printf_float+0x13a>
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	4299      	cmp	r1, r3
 8005450:	dd41      	ble.n	80054d6 <_printf_float+0x1be>
 8005452:	f1ab 0b02 	sub.w	fp, fp, #2
 8005456:	fa5f fb8b 	uxtb.w	fp, fp
 800545a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800545e:	d820      	bhi.n	80054a2 <_printf_float+0x18a>
 8005460:	3901      	subs	r1, #1
 8005462:	465a      	mov	r2, fp
 8005464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005468:	9109      	str	r1, [sp, #36]	; 0x24
 800546a:	f7ff ff17 	bl	800529c <__exponent>
 800546e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005470:	1813      	adds	r3, r2, r0
 8005472:	2a01      	cmp	r2, #1
 8005474:	4681      	mov	r9, r0
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	dc02      	bgt.n	8005480 <_printf_float+0x168>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	07d2      	lsls	r2, r2, #31
 800547e:	d501      	bpl.n	8005484 <_printf_float+0x16c>
 8005480:	3301      	adds	r3, #1
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005488:	2b00      	cmp	r3, #0
 800548a:	d09c      	beq.n	80053c6 <_printf_float+0xae>
 800548c:	232d      	movs	r3, #45	; 0x2d
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005492:	e798      	b.n	80053c6 <_printf_float+0xae>
 8005494:	9a06      	ldr	r2, [sp, #24]
 8005496:	2a47      	cmp	r2, #71	; 0x47
 8005498:	d1be      	bne.n	8005418 <_printf_float+0x100>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1bc      	bne.n	8005418 <_printf_float+0x100>
 800549e:	2301      	movs	r3, #1
 80054a0:	e7b9      	b.n	8005416 <_printf_float+0xfe>
 80054a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054a6:	d118      	bne.n	80054da <_printf_float+0x1c2>
 80054a8:	2900      	cmp	r1, #0
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	dd0b      	ble.n	80054c6 <_printf_float+0x1ae>
 80054ae:	6121      	str	r1, [r4, #16]
 80054b0:	b913      	cbnz	r3, 80054b8 <_printf_float+0x1a0>
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	07d0      	lsls	r0, r2, #31
 80054b6:	d502      	bpl.n	80054be <_printf_float+0x1a6>
 80054b8:	3301      	adds	r3, #1
 80054ba:	440b      	add	r3, r1
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	65a1      	str	r1, [r4, #88]	; 0x58
 80054c0:	f04f 0900 	mov.w	r9, #0
 80054c4:	e7de      	b.n	8005484 <_printf_float+0x16c>
 80054c6:	b913      	cbnz	r3, 80054ce <_printf_float+0x1b6>
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	07d2      	lsls	r2, r2, #31
 80054cc:	d501      	bpl.n	80054d2 <_printf_float+0x1ba>
 80054ce:	3302      	adds	r3, #2
 80054d0:	e7f4      	b.n	80054bc <_printf_float+0x1a4>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e7f2      	b.n	80054bc <_printf_float+0x1a4>
 80054d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054dc:	4299      	cmp	r1, r3
 80054de:	db05      	blt.n	80054ec <_printf_float+0x1d4>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	6121      	str	r1, [r4, #16]
 80054e4:	07d8      	lsls	r0, r3, #31
 80054e6:	d5ea      	bpl.n	80054be <_printf_float+0x1a6>
 80054e8:	1c4b      	adds	r3, r1, #1
 80054ea:	e7e7      	b.n	80054bc <_printf_float+0x1a4>
 80054ec:	2900      	cmp	r1, #0
 80054ee:	bfd4      	ite	le
 80054f0:	f1c1 0202 	rsble	r2, r1, #2
 80054f4:	2201      	movgt	r2, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	e7e0      	b.n	80054bc <_printf_float+0x1a4>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	055a      	lsls	r2, r3, #21
 80054fe:	d407      	bmi.n	8005510 <_printf_float+0x1f8>
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	4642      	mov	r2, r8
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	47b8      	blx	r7
 800550a:	3001      	adds	r0, #1
 800550c:	d12c      	bne.n	8005568 <_printf_float+0x250>
 800550e:	e764      	b.n	80053da <_printf_float+0xc2>
 8005510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005514:	f240 80e0 	bls.w	80056d8 <_printf_float+0x3c0>
 8005518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	f7fb fb02 	bl	8000b28 <__aeabi_dcmpeq>
 8005524:	2800      	cmp	r0, #0
 8005526:	d034      	beq.n	8005592 <_printf_float+0x27a>
 8005528:	4a37      	ldr	r2, [pc, #220]	; (8005608 <_printf_float+0x2f0>)
 800552a:	2301      	movs	r3, #1
 800552c:	4631      	mov	r1, r6
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	f43f af51 	beq.w	80053da <_printf_float+0xc2>
 8005538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800553c:	429a      	cmp	r2, r3
 800553e:	db02      	blt.n	8005546 <_printf_float+0x22e>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	07d8      	lsls	r0, r3, #31
 8005544:	d510      	bpl.n	8005568 <_printf_float+0x250>
 8005546:	ee18 3a10 	vmov	r3, s16
 800554a:	4652      	mov	r2, sl
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	f43f af41 	beq.w	80053da <_printf_float+0xc2>
 8005558:	f04f 0800 	mov.w	r8, #0
 800555c:	f104 091a 	add.w	r9, r4, #26
 8005560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005562:	3b01      	subs	r3, #1
 8005564:	4543      	cmp	r3, r8
 8005566:	dc09      	bgt.n	800557c <_printf_float+0x264>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	079b      	lsls	r3, r3, #30
 800556c:	f100 8105 	bmi.w	800577a <_printf_float+0x462>
 8005570:	68e0      	ldr	r0, [r4, #12]
 8005572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005574:	4298      	cmp	r0, r3
 8005576:	bfb8      	it	lt
 8005578:	4618      	movlt	r0, r3
 800557a:	e730      	b.n	80053de <_printf_float+0xc6>
 800557c:	2301      	movs	r3, #1
 800557e:	464a      	mov	r2, r9
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f af27 	beq.w	80053da <_printf_float+0xc2>
 800558c:	f108 0801 	add.w	r8, r8, #1
 8005590:	e7e6      	b.n	8005560 <_printf_float+0x248>
 8005592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	dc39      	bgt.n	800560c <_printf_float+0x2f4>
 8005598:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <_printf_float+0x2f0>)
 800559a:	2301      	movs	r3, #1
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af19 	beq.w	80053da <_printf_float+0xc2>
 80055a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ac:	4313      	orrs	r3, r2
 80055ae:	d102      	bne.n	80055b6 <_printf_float+0x29e>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07d9      	lsls	r1, r3, #31
 80055b4:	d5d8      	bpl.n	8005568 <_printf_float+0x250>
 80055b6:	ee18 3a10 	vmov	r3, s16
 80055ba:	4652      	mov	r2, sl
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af09 	beq.w	80053da <_printf_float+0xc2>
 80055c8:	f04f 0900 	mov.w	r9, #0
 80055cc:	f104 0a1a 	add.w	sl, r4, #26
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	425b      	negs	r3, r3
 80055d4:	454b      	cmp	r3, r9
 80055d6:	dc01      	bgt.n	80055dc <_printf_float+0x2c4>
 80055d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055da:	e792      	b.n	8005502 <_printf_float+0x1ea>
 80055dc:	2301      	movs	r3, #1
 80055de:	4652      	mov	r2, sl
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	f43f aef7 	beq.w	80053da <_printf_float+0xc2>
 80055ec:	f109 0901 	add.w	r9, r9, #1
 80055f0:	e7ee      	b.n	80055d0 <_printf_float+0x2b8>
 80055f2:	bf00      	nop
 80055f4:	7fefffff 	.word	0x7fefffff
 80055f8:	08008034 	.word	0x08008034
 80055fc:	08008038 	.word	0x08008038
 8005600:	08008040 	.word	0x08008040
 8005604:	0800803c 	.word	0x0800803c
 8005608:	08008044 	.word	0x08008044
 800560c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800560e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005610:	429a      	cmp	r2, r3
 8005612:	bfa8      	it	ge
 8005614:	461a      	movge	r2, r3
 8005616:	2a00      	cmp	r2, #0
 8005618:	4691      	mov	r9, r2
 800561a:	dc37      	bgt.n	800568c <_printf_float+0x374>
 800561c:	f04f 0b00 	mov.w	fp, #0
 8005620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005624:	f104 021a 	add.w	r2, r4, #26
 8005628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	eba3 0309 	sub.w	r3, r3, r9
 8005630:	455b      	cmp	r3, fp
 8005632:	dc33      	bgt.n	800569c <_printf_float+0x384>
 8005634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005638:	429a      	cmp	r2, r3
 800563a:	db3b      	blt.n	80056b4 <_printf_float+0x39c>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07da      	lsls	r2, r3, #31
 8005640:	d438      	bmi.n	80056b4 <_printf_float+0x39c>
 8005642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005648:	1a9a      	subs	r2, r3, r2
 800564a:	eba3 0901 	sub.w	r9, r3, r1
 800564e:	4591      	cmp	r9, r2
 8005650:	bfa8      	it	ge
 8005652:	4691      	movge	r9, r2
 8005654:	f1b9 0f00 	cmp.w	r9, #0
 8005658:	dc35      	bgt.n	80056c6 <_printf_float+0x3ae>
 800565a:	f04f 0800 	mov.w	r8, #0
 800565e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005662:	f104 0a1a 	add.w	sl, r4, #26
 8005666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	eba3 0309 	sub.w	r3, r3, r9
 8005670:	4543      	cmp	r3, r8
 8005672:	f77f af79 	ble.w	8005568 <_printf_float+0x250>
 8005676:	2301      	movs	r3, #1
 8005678:	4652      	mov	r2, sl
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	f43f aeaa 	beq.w	80053da <_printf_float+0xc2>
 8005686:	f108 0801 	add.w	r8, r8, #1
 800568a:	e7ec      	b.n	8005666 <_printf_float+0x34e>
 800568c:	4613      	mov	r3, r2
 800568e:	4631      	mov	r1, r6
 8005690:	4642      	mov	r2, r8
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	d1c0      	bne.n	800561c <_printf_float+0x304>
 800569a:	e69e      	b.n	80053da <_printf_float+0xc2>
 800569c:	2301      	movs	r3, #1
 800569e:	4631      	mov	r1, r6
 80056a0:	4628      	mov	r0, r5
 80056a2:	9205      	str	r2, [sp, #20]
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f ae97 	beq.w	80053da <_printf_float+0xc2>
 80056ac:	9a05      	ldr	r2, [sp, #20]
 80056ae:	f10b 0b01 	add.w	fp, fp, #1
 80056b2:	e7b9      	b.n	8005628 <_printf_float+0x310>
 80056b4:	ee18 3a10 	vmov	r3, s16
 80056b8:	4652      	mov	r2, sl
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	d1be      	bne.n	8005642 <_printf_float+0x32a>
 80056c4:	e689      	b.n	80053da <_printf_float+0xc2>
 80056c6:	9a05      	ldr	r2, [sp, #20]
 80056c8:	464b      	mov	r3, r9
 80056ca:	4442      	add	r2, r8
 80056cc:	4631      	mov	r1, r6
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b8      	blx	r7
 80056d2:	3001      	adds	r0, #1
 80056d4:	d1c1      	bne.n	800565a <_printf_float+0x342>
 80056d6:	e680      	b.n	80053da <_printf_float+0xc2>
 80056d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056da:	2a01      	cmp	r2, #1
 80056dc:	dc01      	bgt.n	80056e2 <_printf_float+0x3ca>
 80056de:	07db      	lsls	r3, r3, #31
 80056e0:	d538      	bpl.n	8005754 <_printf_float+0x43c>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4642      	mov	r2, r8
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f ae74 	beq.w	80053da <_printf_float+0xc2>
 80056f2:	ee18 3a10 	vmov	r3, s16
 80056f6:	4652      	mov	r2, sl
 80056f8:	4631      	mov	r1, r6
 80056fa:	4628      	mov	r0, r5
 80056fc:	47b8      	blx	r7
 80056fe:	3001      	adds	r0, #1
 8005700:	f43f ae6b 	beq.w	80053da <_printf_float+0xc2>
 8005704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005708:	2200      	movs	r2, #0
 800570a:	2300      	movs	r3, #0
 800570c:	f7fb fa0c 	bl	8000b28 <__aeabi_dcmpeq>
 8005710:	b9d8      	cbnz	r0, 800574a <_printf_float+0x432>
 8005712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005714:	f108 0201 	add.w	r2, r8, #1
 8005718:	3b01      	subs	r3, #1
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	d10e      	bne.n	8005742 <_printf_float+0x42a>
 8005724:	e659      	b.n	80053da <_printf_float+0xc2>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	f43f ae52 	beq.w	80053da <_printf_float+0xc2>
 8005736:	f108 0801 	add.w	r8, r8, #1
 800573a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573c:	3b01      	subs	r3, #1
 800573e:	4543      	cmp	r3, r8
 8005740:	dcf1      	bgt.n	8005726 <_printf_float+0x40e>
 8005742:	464b      	mov	r3, r9
 8005744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005748:	e6dc      	b.n	8005504 <_printf_float+0x1ec>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	f104 0a1a 	add.w	sl, r4, #26
 8005752:	e7f2      	b.n	800573a <_printf_float+0x422>
 8005754:	2301      	movs	r3, #1
 8005756:	4642      	mov	r2, r8
 8005758:	e7df      	b.n	800571a <_printf_float+0x402>
 800575a:	2301      	movs	r3, #1
 800575c:	464a      	mov	r2, r9
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f ae38 	beq.w	80053da <_printf_float+0xc2>
 800576a:	f108 0801 	add.w	r8, r8, #1
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005772:	1a5b      	subs	r3, r3, r1
 8005774:	4543      	cmp	r3, r8
 8005776:	dcf0      	bgt.n	800575a <_printf_float+0x442>
 8005778:	e6fa      	b.n	8005570 <_printf_float+0x258>
 800577a:	f04f 0800 	mov.w	r8, #0
 800577e:	f104 0919 	add.w	r9, r4, #25
 8005782:	e7f4      	b.n	800576e <_printf_float+0x456>

08005784 <_printf_common>:
 8005784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005788:	4616      	mov	r6, r2
 800578a:	4699      	mov	r9, r3
 800578c:	688a      	ldr	r2, [r1, #8]
 800578e:	690b      	ldr	r3, [r1, #16]
 8005790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005794:	4293      	cmp	r3, r2
 8005796:	bfb8      	it	lt
 8005798:	4613      	movlt	r3, r2
 800579a:	6033      	str	r3, [r6, #0]
 800579c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a0:	4607      	mov	r7, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	b10a      	cbz	r2, 80057aa <_printf_common+0x26>
 80057a6:	3301      	adds	r3, #1
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	0699      	lsls	r1, r3, #26
 80057ae:	bf42      	ittt	mi
 80057b0:	6833      	ldrmi	r3, [r6, #0]
 80057b2:	3302      	addmi	r3, #2
 80057b4:	6033      	strmi	r3, [r6, #0]
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	f015 0506 	ands.w	r5, r5, #6
 80057bc:	d106      	bne.n	80057cc <_printf_common+0x48>
 80057be:	f104 0a19 	add.w	sl, r4, #25
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	6832      	ldr	r2, [r6, #0]
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	42ab      	cmp	r3, r5
 80057ca:	dc26      	bgt.n	800581a <_printf_common+0x96>
 80057cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057d0:	1e13      	subs	r3, r2, #0
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	bf18      	it	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	0692      	lsls	r2, r2, #26
 80057da:	d42b      	bmi.n	8005834 <_printf_common+0xb0>
 80057dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e0:	4649      	mov	r1, r9
 80057e2:	4638      	mov	r0, r7
 80057e4:	47c0      	blx	r8
 80057e6:	3001      	adds	r0, #1
 80057e8:	d01e      	beq.n	8005828 <_printf_common+0xa4>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	68e5      	ldr	r5, [r4, #12]
 80057ee:	6832      	ldr	r2, [r6, #0]
 80057f0:	f003 0306 	and.w	r3, r3, #6
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	bf08      	it	eq
 80057f8:	1aad      	subeq	r5, r5, r2
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	6922      	ldr	r2, [r4, #16]
 80057fe:	bf0c      	ite	eq
 8005800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005804:	2500      	movne	r5, #0
 8005806:	4293      	cmp	r3, r2
 8005808:	bfc4      	itt	gt
 800580a:	1a9b      	subgt	r3, r3, r2
 800580c:	18ed      	addgt	r5, r5, r3
 800580e:	2600      	movs	r6, #0
 8005810:	341a      	adds	r4, #26
 8005812:	42b5      	cmp	r5, r6
 8005814:	d11a      	bne.n	800584c <_printf_common+0xc8>
 8005816:	2000      	movs	r0, #0
 8005818:	e008      	b.n	800582c <_printf_common+0xa8>
 800581a:	2301      	movs	r3, #1
 800581c:	4652      	mov	r2, sl
 800581e:	4649      	mov	r1, r9
 8005820:	4638      	mov	r0, r7
 8005822:	47c0      	blx	r8
 8005824:	3001      	adds	r0, #1
 8005826:	d103      	bne.n	8005830 <_printf_common+0xac>
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005830:	3501      	adds	r5, #1
 8005832:	e7c6      	b.n	80057c2 <_printf_common+0x3e>
 8005834:	18e1      	adds	r1, r4, r3
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	2030      	movs	r0, #48	; 0x30
 800583a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800583e:	4422      	add	r2, r4
 8005840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005848:	3302      	adds	r3, #2
 800584a:	e7c7      	b.n	80057dc <_printf_common+0x58>
 800584c:	2301      	movs	r3, #1
 800584e:	4622      	mov	r2, r4
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d0e6      	beq.n	8005828 <_printf_common+0xa4>
 800585a:	3601      	adds	r6, #1
 800585c:	e7d9      	b.n	8005812 <_printf_common+0x8e>
	...

08005860 <_printf_i>:
 8005860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	7e0f      	ldrb	r7, [r1, #24]
 8005866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005868:	2f78      	cmp	r7, #120	; 0x78
 800586a:	4691      	mov	r9, r2
 800586c:	4680      	mov	r8, r0
 800586e:	460c      	mov	r4, r1
 8005870:	469a      	mov	sl, r3
 8005872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005876:	d807      	bhi.n	8005888 <_printf_i+0x28>
 8005878:	2f62      	cmp	r7, #98	; 0x62
 800587a:	d80a      	bhi.n	8005892 <_printf_i+0x32>
 800587c:	2f00      	cmp	r7, #0
 800587e:	f000 80d8 	beq.w	8005a32 <_printf_i+0x1d2>
 8005882:	2f58      	cmp	r7, #88	; 0x58
 8005884:	f000 80a3 	beq.w	80059ce <_printf_i+0x16e>
 8005888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800588c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005890:	e03a      	b.n	8005908 <_printf_i+0xa8>
 8005892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005896:	2b15      	cmp	r3, #21
 8005898:	d8f6      	bhi.n	8005888 <_printf_i+0x28>
 800589a:	a101      	add	r1, pc, #4	; (adr r1, 80058a0 <_printf_i+0x40>)
 800589c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	0800590d 	.word	0x0800590d
 80058a8:	08005889 	.word	0x08005889
 80058ac:	08005889 	.word	0x08005889
 80058b0:	08005889 	.word	0x08005889
 80058b4:	08005889 	.word	0x08005889
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005889 	.word	0x08005889
 80058c0:	08005889 	.word	0x08005889
 80058c4:	08005889 	.word	0x08005889
 80058c8:	08005889 	.word	0x08005889
 80058cc:	08005a19 	.word	0x08005a19
 80058d0:	0800593d 	.word	0x0800593d
 80058d4:	080059fb 	.word	0x080059fb
 80058d8:	08005889 	.word	0x08005889
 80058dc:	08005889 	.word	0x08005889
 80058e0:	08005a3b 	.word	0x08005a3b
 80058e4:	08005889 	.word	0x08005889
 80058e8:	0800593d 	.word	0x0800593d
 80058ec:	08005889 	.word	0x08005889
 80058f0:	08005889 	.word	0x08005889
 80058f4:	08005a03 	.word	0x08005a03
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	602a      	str	r2, [r5, #0]
 8005900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005908:	2301      	movs	r3, #1
 800590a:	e0a3      	b.n	8005a54 <_printf_i+0x1f4>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	6829      	ldr	r1, [r5, #0]
 8005910:	0606      	lsls	r6, r0, #24
 8005912:	f101 0304 	add.w	r3, r1, #4
 8005916:	d50a      	bpl.n	800592e <_printf_i+0xce>
 8005918:	680e      	ldr	r6, [r1, #0]
 800591a:	602b      	str	r3, [r5, #0]
 800591c:	2e00      	cmp	r6, #0
 800591e:	da03      	bge.n	8005928 <_printf_i+0xc8>
 8005920:	232d      	movs	r3, #45	; 0x2d
 8005922:	4276      	negs	r6, r6
 8005924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005928:	485e      	ldr	r0, [pc, #376]	; (8005aa4 <_printf_i+0x244>)
 800592a:	230a      	movs	r3, #10
 800592c:	e019      	b.n	8005962 <_printf_i+0x102>
 800592e:	680e      	ldr	r6, [r1, #0]
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005936:	bf18      	it	ne
 8005938:	b236      	sxthne	r6, r6
 800593a:	e7ef      	b.n	800591c <_printf_i+0xbc>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	1d19      	adds	r1, r3, #4
 8005942:	6029      	str	r1, [r5, #0]
 8005944:	0601      	lsls	r1, r0, #24
 8005946:	d501      	bpl.n	800594c <_printf_i+0xec>
 8005948:	681e      	ldr	r6, [r3, #0]
 800594a:	e002      	b.n	8005952 <_printf_i+0xf2>
 800594c:	0646      	lsls	r6, r0, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0xe8>
 8005950:	881e      	ldrh	r6, [r3, #0]
 8005952:	4854      	ldr	r0, [pc, #336]	; (8005aa4 <_printf_i+0x244>)
 8005954:	2f6f      	cmp	r7, #111	; 0x6f
 8005956:	bf0c      	ite	eq
 8005958:	2308      	moveq	r3, #8
 800595a:	230a      	movne	r3, #10
 800595c:	2100      	movs	r1, #0
 800595e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005962:	6865      	ldr	r5, [r4, #4]
 8005964:	60a5      	str	r5, [r4, #8]
 8005966:	2d00      	cmp	r5, #0
 8005968:	bfa2      	ittt	ge
 800596a:	6821      	ldrge	r1, [r4, #0]
 800596c:	f021 0104 	bicge.w	r1, r1, #4
 8005970:	6021      	strge	r1, [r4, #0]
 8005972:	b90e      	cbnz	r6, 8005978 <_printf_i+0x118>
 8005974:	2d00      	cmp	r5, #0
 8005976:	d04d      	beq.n	8005a14 <_printf_i+0x1b4>
 8005978:	4615      	mov	r5, r2
 800597a:	fbb6 f1f3 	udiv	r1, r6, r3
 800597e:	fb03 6711 	mls	r7, r3, r1, r6
 8005982:	5dc7      	ldrb	r7, [r0, r7]
 8005984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005988:	4637      	mov	r7, r6
 800598a:	42bb      	cmp	r3, r7
 800598c:	460e      	mov	r6, r1
 800598e:	d9f4      	bls.n	800597a <_printf_i+0x11a>
 8005990:	2b08      	cmp	r3, #8
 8005992:	d10b      	bne.n	80059ac <_printf_i+0x14c>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	07de      	lsls	r6, r3, #31
 8005998:	d508      	bpl.n	80059ac <_printf_i+0x14c>
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	6861      	ldr	r1, [r4, #4]
 800599e:	4299      	cmp	r1, r3
 80059a0:	bfde      	ittt	le
 80059a2:	2330      	movle	r3, #48	; 0x30
 80059a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059ac:	1b52      	subs	r2, r2, r5
 80059ae:	6122      	str	r2, [r4, #16]
 80059b0:	f8cd a000 	str.w	sl, [sp]
 80059b4:	464b      	mov	r3, r9
 80059b6:	aa03      	add	r2, sp, #12
 80059b8:	4621      	mov	r1, r4
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff fee2 	bl	8005784 <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d14c      	bne.n	8005a5e <_printf_i+0x1fe>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	b004      	add	sp, #16
 80059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ce:	4835      	ldr	r0, [pc, #212]	; (8005aa4 <_printf_i+0x244>)
 80059d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059d4:	6829      	ldr	r1, [r5, #0]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059dc:	6029      	str	r1, [r5, #0]
 80059de:	061d      	lsls	r5, r3, #24
 80059e0:	d514      	bpl.n	8005a0c <_printf_i+0x1ac>
 80059e2:	07df      	lsls	r7, r3, #31
 80059e4:	bf44      	itt	mi
 80059e6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ea:	6023      	strmi	r3, [r4, #0]
 80059ec:	b91e      	cbnz	r6, 80059f6 <_printf_i+0x196>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	f023 0320 	bic.w	r3, r3, #32
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	2310      	movs	r3, #16
 80059f8:	e7b0      	b.n	800595c <_printf_i+0xfc>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f043 0320 	orr.w	r3, r3, #32
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	2378      	movs	r3, #120	; 0x78
 8005a04:	4828      	ldr	r0, [pc, #160]	; (8005aa8 <_printf_i+0x248>)
 8005a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a0a:	e7e3      	b.n	80059d4 <_printf_i+0x174>
 8005a0c:	0659      	lsls	r1, r3, #25
 8005a0e:	bf48      	it	mi
 8005a10:	b2b6      	uxthmi	r6, r6
 8005a12:	e7e6      	b.n	80059e2 <_printf_i+0x182>
 8005a14:	4615      	mov	r5, r2
 8005a16:	e7bb      	b.n	8005990 <_printf_i+0x130>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	6826      	ldr	r6, [r4, #0]
 8005a1c:	6961      	ldr	r1, [r4, #20]
 8005a1e:	1d18      	adds	r0, r3, #4
 8005a20:	6028      	str	r0, [r5, #0]
 8005a22:	0635      	lsls	r5, r6, #24
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	d501      	bpl.n	8005a2c <_printf_i+0x1cc>
 8005a28:	6019      	str	r1, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <_printf_i+0x1d2>
 8005a2c:	0670      	lsls	r0, r6, #25
 8005a2e:	d5fb      	bpl.n	8005a28 <_printf_i+0x1c8>
 8005a30:	8019      	strh	r1, [r3, #0]
 8005a32:	2300      	movs	r3, #0
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	4615      	mov	r5, r2
 8005a38:	e7ba      	b.n	80059b0 <_printf_i+0x150>
 8005a3a:	682b      	ldr	r3, [r5, #0]
 8005a3c:	1d1a      	adds	r2, r3, #4
 8005a3e:	602a      	str	r2, [r5, #0]
 8005a40:	681d      	ldr	r5, [r3, #0]
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	2100      	movs	r1, #0
 8005a46:	4628      	mov	r0, r5
 8005a48:	f7fa fbfa 	bl	8000240 <memchr>
 8005a4c:	b108      	cbz	r0, 8005a52 <_printf_i+0x1f2>
 8005a4e:	1b40      	subs	r0, r0, r5
 8005a50:	6060      	str	r0, [r4, #4]
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	2300      	movs	r3, #0
 8005a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5c:	e7a8      	b.n	80059b0 <_printf_i+0x150>
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	462a      	mov	r2, r5
 8005a62:	4649      	mov	r1, r9
 8005a64:	4640      	mov	r0, r8
 8005a66:	47d0      	blx	sl
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d0ab      	beq.n	80059c4 <_printf_i+0x164>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	079b      	lsls	r3, r3, #30
 8005a70:	d413      	bmi.n	8005a9a <_printf_i+0x23a>
 8005a72:	68e0      	ldr	r0, [r4, #12]
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	4298      	cmp	r0, r3
 8005a78:	bfb8      	it	lt
 8005a7a:	4618      	movlt	r0, r3
 8005a7c:	e7a4      	b.n	80059c8 <_printf_i+0x168>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4632      	mov	r2, r6
 8005a82:	4649      	mov	r1, r9
 8005a84:	4640      	mov	r0, r8
 8005a86:	47d0      	blx	sl
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d09b      	beq.n	80059c4 <_printf_i+0x164>
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	68e3      	ldr	r3, [r4, #12]
 8005a90:	9903      	ldr	r1, [sp, #12]
 8005a92:	1a5b      	subs	r3, r3, r1
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	dcf2      	bgt.n	8005a7e <_printf_i+0x21e>
 8005a98:	e7eb      	b.n	8005a72 <_printf_i+0x212>
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	f104 0619 	add.w	r6, r4, #25
 8005aa0:	e7f5      	b.n	8005a8e <_printf_i+0x22e>
 8005aa2:	bf00      	nop
 8005aa4:	08008046 	.word	0x08008046
 8005aa8:	08008057 	.word	0x08008057

08005aac <iprintf>:
 8005aac:	b40f      	push	{r0, r1, r2, r3}
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <iprintf+0x2c>)
 8005ab0:	b513      	push	{r0, r1, r4, lr}
 8005ab2:	681c      	ldr	r4, [r3, #0]
 8005ab4:	b124      	cbz	r4, 8005ac0 <iprintf+0x14>
 8005ab6:	69a3      	ldr	r3, [r4, #24]
 8005ab8:	b913      	cbnz	r3, 8005ac0 <iprintf+0x14>
 8005aba:	4620      	mov	r0, r4
 8005abc:	f001 f8e8 	bl	8006c90 <__sinit>
 8005ac0:	ab05      	add	r3, sp, #20
 8005ac2:	9a04      	ldr	r2, [sp, #16]
 8005ac4:	68a1      	ldr	r1, [r4, #8]
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f001 fdbb 	bl	8007644 <_vfiprintf_r>
 8005ace:	b002      	add	sp, #8
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	b004      	add	sp, #16
 8005ad6:	4770      	bx	lr
 8005ad8:	200006d4 	.word	0x200006d4

08005adc <_puts_r>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	460e      	mov	r6, r1
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	b118      	cbz	r0, 8005aec <_puts_r+0x10>
 8005ae4:	6983      	ldr	r3, [r0, #24]
 8005ae6:	b90b      	cbnz	r3, 8005aec <_puts_r+0x10>
 8005ae8:	f001 f8d2 	bl	8006c90 <__sinit>
 8005aec:	69ab      	ldr	r3, [r5, #24]
 8005aee:	68ac      	ldr	r4, [r5, #8]
 8005af0:	b913      	cbnz	r3, 8005af8 <_puts_r+0x1c>
 8005af2:	4628      	mov	r0, r5
 8005af4:	f001 f8cc 	bl	8006c90 <__sinit>
 8005af8:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <_puts_r+0xd0>)
 8005afa:	429c      	cmp	r4, r3
 8005afc:	d120      	bne.n	8005b40 <_puts_r+0x64>
 8005afe:	686c      	ldr	r4, [r5, #4]
 8005b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b02:	07db      	lsls	r3, r3, #31
 8005b04:	d405      	bmi.n	8005b12 <_puts_r+0x36>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	0598      	lsls	r0, r3, #22
 8005b0a:	d402      	bmi.n	8005b12 <_puts_r+0x36>
 8005b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b0e:	f001 f962 	bl	8006dd6 <__retarget_lock_acquire_recursive>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	0719      	lsls	r1, r3, #28
 8005b16:	d51d      	bpl.n	8005b54 <_puts_r+0x78>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	b1db      	cbz	r3, 8005b54 <_puts_r+0x78>
 8005b1c:	3e01      	subs	r6, #1
 8005b1e:	68a3      	ldr	r3, [r4, #8]
 8005b20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b24:	3b01      	subs	r3, #1
 8005b26:	60a3      	str	r3, [r4, #8]
 8005b28:	bb39      	cbnz	r1, 8005b7a <_puts_r+0x9e>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da38      	bge.n	8005ba0 <_puts_r+0xc4>
 8005b2e:	4622      	mov	r2, r4
 8005b30:	210a      	movs	r1, #10
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 f858 	bl	8005be8 <__swbuf_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d011      	beq.n	8005b60 <_puts_r+0x84>
 8005b3c:	250a      	movs	r5, #10
 8005b3e:	e011      	b.n	8005b64 <_puts_r+0x88>
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <_puts_r+0xd4>)
 8005b42:	429c      	cmp	r4, r3
 8005b44:	d101      	bne.n	8005b4a <_puts_r+0x6e>
 8005b46:	68ac      	ldr	r4, [r5, #8]
 8005b48:	e7da      	b.n	8005b00 <_puts_r+0x24>
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <_puts_r+0xd8>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	bf08      	it	eq
 8005b50:	68ec      	ldreq	r4, [r5, #12]
 8005b52:	e7d5      	b.n	8005b00 <_puts_r+0x24>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 f898 	bl	8005c8c <__swsetup_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d0dd      	beq.n	8005b1c <_puts_r+0x40>
 8005b60:	f04f 35ff 	mov.w	r5, #4294967295
 8005b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b66:	07da      	lsls	r2, r3, #31
 8005b68:	d405      	bmi.n	8005b76 <_puts_r+0x9a>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	059b      	lsls	r3, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_puts_r+0x9a>
 8005b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b72:	f001 f931 	bl	8006dd8 <__retarget_lock_release_recursive>
 8005b76:	4628      	mov	r0, r5
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	da04      	bge.n	8005b88 <_puts_r+0xac>
 8005b7e:	69a2      	ldr	r2, [r4, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	dc06      	bgt.n	8005b92 <_puts_r+0xb6>
 8005b84:	290a      	cmp	r1, #10
 8005b86:	d004      	beq.n	8005b92 <_puts_r+0xb6>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	7019      	strb	r1, [r3, #0]
 8005b90:	e7c5      	b.n	8005b1e <_puts_r+0x42>
 8005b92:	4622      	mov	r2, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 f827 	bl	8005be8 <__swbuf_r>
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d1bf      	bne.n	8005b1e <_puts_r+0x42>
 8005b9e:	e7df      	b.n	8005b60 <_puts_r+0x84>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	250a      	movs	r5, #10
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	701d      	strb	r5, [r3, #0]
 8005baa:	e7db      	b.n	8005b64 <_puts_r+0x88>
 8005bac:	08008118 	.word	0x08008118
 8005bb0:	08008138 	.word	0x08008138
 8005bb4:	080080f8 	.word	0x080080f8

08005bb8 <puts>:
 8005bb8:	4b02      	ldr	r3, [pc, #8]	; (8005bc4 <puts+0xc>)
 8005bba:	4601      	mov	r1, r0
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f7ff bf8d 	b.w	8005adc <_puts_r>
 8005bc2:	bf00      	nop
 8005bc4:	200006d4 	.word	0x200006d4

08005bc8 <_sbrk_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d06      	ldr	r5, [pc, #24]	; (8005be4 <_sbrk_r+0x1c>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f7fb fd48 	bl	8001668 <_sbrk>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_sbrk_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_sbrk_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200009f8 	.word	0x200009f8

08005be8 <__swbuf_r>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	460e      	mov	r6, r1
 8005bec:	4614      	mov	r4, r2
 8005bee:	4605      	mov	r5, r0
 8005bf0:	b118      	cbz	r0, 8005bfa <__swbuf_r+0x12>
 8005bf2:	6983      	ldr	r3, [r0, #24]
 8005bf4:	b90b      	cbnz	r3, 8005bfa <__swbuf_r+0x12>
 8005bf6:	f001 f84b 	bl	8006c90 <__sinit>
 8005bfa:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <__swbuf_r+0x98>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d12b      	bne.n	8005c58 <__swbuf_r+0x70>
 8005c00:	686c      	ldr	r4, [r5, #4]
 8005c02:	69a3      	ldr	r3, [r4, #24]
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	071a      	lsls	r2, r3, #28
 8005c0a:	d52f      	bpl.n	8005c6c <__swbuf_r+0x84>
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	b36b      	cbz	r3, 8005c6c <__swbuf_r+0x84>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1ac0      	subs	r0, r0, r3
 8005c16:	6963      	ldr	r3, [r4, #20]
 8005c18:	b2f6      	uxtb	r6, r6
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	4637      	mov	r7, r6
 8005c1e:	dc04      	bgt.n	8005c2a <__swbuf_r+0x42>
 8005c20:	4621      	mov	r1, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 ffa0 	bl	8006b68 <_fflush_r>
 8005c28:	bb30      	cbnz	r0, 8005c78 <__swbuf_r+0x90>
 8005c2a:	68a3      	ldr	r3, [r4, #8]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	60a3      	str	r3, [r4, #8]
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	6022      	str	r2, [r4, #0]
 8005c36:	701e      	strb	r6, [r3, #0]
 8005c38:	6963      	ldr	r3, [r4, #20]
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	4283      	cmp	r3, r0
 8005c3e:	d004      	beq.n	8005c4a <__swbuf_r+0x62>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	07db      	lsls	r3, r3, #31
 8005c44:	d506      	bpl.n	8005c54 <__swbuf_r+0x6c>
 8005c46:	2e0a      	cmp	r6, #10
 8005c48:	d104      	bne.n	8005c54 <__swbuf_r+0x6c>
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 ff8b 	bl	8006b68 <_fflush_r>
 8005c52:	b988      	cbnz	r0, 8005c78 <__swbuf_r+0x90>
 8005c54:	4638      	mov	r0, r7
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <__swbuf_r+0x9c>)
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d101      	bne.n	8005c62 <__swbuf_r+0x7a>
 8005c5e:	68ac      	ldr	r4, [r5, #8]
 8005c60:	e7cf      	b.n	8005c02 <__swbuf_r+0x1a>
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <__swbuf_r+0xa0>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	bf08      	it	eq
 8005c68:	68ec      	ldreq	r4, [r5, #12]
 8005c6a:	e7ca      	b.n	8005c02 <__swbuf_r+0x1a>
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f80c 	bl	8005c8c <__swsetup_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d0cb      	beq.n	8005c10 <__swbuf_r+0x28>
 8005c78:	f04f 37ff 	mov.w	r7, #4294967295
 8005c7c:	e7ea      	b.n	8005c54 <__swbuf_r+0x6c>
 8005c7e:	bf00      	nop
 8005c80:	08008118 	.word	0x08008118
 8005c84:	08008138 	.word	0x08008138
 8005c88:	080080f8 	.word	0x080080f8

08005c8c <__swsetup_r>:
 8005c8c:	4b32      	ldr	r3, [pc, #200]	; (8005d58 <__swsetup_r+0xcc>)
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	4606      	mov	r6, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	b125      	cbz	r5, 8005ca2 <__swsetup_r+0x16>
 8005c98:	69ab      	ldr	r3, [r5, #24]
 8005c9a:	b913      	cbnz	r3, 8005ca2 <__swsetup_r+0x16>
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 fff7 	bl	8006c90 <__sinit>
 8005ca2:	4b2e      	ldr	r3, [pc, #184]	; (8005d5c <__swsetup_r+0xd0>)
 8005ca4:	429c      	cmp	r4, r3
 8005ca6:	d10f      	bne.n	8005cc8 <__swsetup_r+0x3c>
 8005ca8:	686c      	ldr	r4, [r5, #4]
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cb0:	0719      	lsls	r1, r3, #28
 8005cb2:	d42c      	bmi.n	8005d0e <__swsetup_r+0x82>
 8005cb4:	06dd      	lsls	r5, r3, #27
 8005cb6:	d411      	bmi.n	8005cdc <__swsetup_r+0x50>
 8005cb8:	2309      	movs	r3, #9
 8005cba:	6033      	str	r3, [r6, #0]
 8005cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cc0:	81a3      	strh	r3, [r4, #12]
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc6:	e03e      	b.n	8005d46 <__swsetup_r+0xba>
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <__swsetup_r+0xd4>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d101      	bne.n	8005cd2 <__swsetup_r+0x46>
 8005cce:	68ac      	ldr	r4, [r5, #8]
 8005cd0:	e7eb      	b.n	8005caa <__swsetup_r+0x1e>
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <__swsetup_r+0xd8>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	bf08      	it	eq
 8005cd8:	68ec      	ldreq	r4, [r5, #12]
 8005cda:	e7e6      	b.n	8005caa <__swsetup_r+0x1e>
 8005cdc:	0758      	lsls	r0, r3, #29
 8005cde:	d512      	bpl.n	8005d06 <__swsetup_r+0x7a>
 8005ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce2:	b141      	cbz	r1, 8005cf6 <__swsetup_r+0x6a>
 8005ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	d002      	beq.n	8005cf2 <__swsetup_r+0x66>
 8005cec:	4630      	mov	r0, r6
 8005cee:	f7ff f993 	bl	8005018 <_free_r>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6063      	str	r3, [r4, #4]
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	f043 0308 	orr.w	r3, r3, #8
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	b94b      	cbnz	r3, 8005d26 <__swsetup_r+0x9a>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d003      	beq.n	8005d26 <__swsetup_r+0x9a>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4630      	mov	r0, r6
 8005d22:	f001 f87f 	bl	8006e24 <__smakebuf_r>
 8005d26:	89a0      	ldrh	r0, [r4, #12]
 8005d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d2c:	f010 0301 	ands.w	r3, r0, #1
 8005d30:	d00a      	beq.n	8005d48 <__swsetup_r+0xbc>
 8005d32:	2300      	movs	r3, #0
 8005d34:	60a3      	str	r3, [r4, #8]
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	425b      	negs	r3, r3
 8005d3a:	61a3      	str	r3, [r4, #24]
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	b943      	cbnz	r3, 8005d52 <__swsetup_r+0xc6>
 8005d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d44:	d1ba      	bne.n	8005cbc <__swsetup_r+0x30>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	0781      	lsls	r1, r0, #30
 8005d4a:	bf58      	it	pl
 8005d4c:	6963      	ldrpl	r3, [r4, #20]
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	e7f4      	b.n	8005d3c <__swsetup_r+0xb0>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e7f7      	b.n	8005d46 <__swsetup_r+0xba>
 8005d56:	bf00      	nop
 8005d58:	200006d4 	.word	0x200006d4
 8005d5c:	08008118 	.word	0x08008118
 8005d60:	08008138 	.word	0x08008138
 8005d64:	080080f8 	.word	0x080080f8

08005d68 <quorem>:
 8005d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	6903      	ldr	r3, [r0, #16]
 8005d6e:	690c      	ldr	r4, [r1, #16]
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	4607      	mov	r7, r0
 8005d74:	f2c0 8081 	blt.w	8005e7a <quorem+0x112>
 8005d78:	3c01      	subs	r4, #1
 8005d7a:	f101 0814 	add.w	r8, r1, #20
 8005d7e:	f100 0514 	add.w	r5, r0, #20
 8005d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d90:	3301      	adds	r3, #1
 8005d92:	429a      	cmp	r2, r3
 8005d94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005da0:	d331      	bcc.n	8005e06 <quorem+0x9e>
 8005da2:	f04f 0e00 	mov.w	lr, #0
 8005da6:	4640      	mov	r0, r8
 8005da8:	46ac      	mov	ip, r5
 8005daa:	46f2      	mov	sl, lr
 8005dac:	f850 2b04 	ldr.w	r2, [r0], #4
 8005db0:	b293      	uxth	r3, r2
 8005db2:	fb06 e303 	mla	r3, r6, r3, lr
 8005db6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dc0:	f8dc a000 	ldr.w	sl, [ip]
 8005dc4:	0c12      	lsrs	r2, r2, #16
 8005dc6:	fa13 f38a 	uxtah	r3, r3, sl
 8005dca:	fb06 e202 	mla	r2, r6, r2, lr
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	9b00      	ldr	r3, [sp, #0]
 8005dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005de0:	f8bd 3000 	ldrh.w	r3, [sp]
 8005de4:	4581      	cmp	r9, r0
 8005de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dea:	f84c 3b04 	str.w	r3, [ip], #4
 8005dee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005df2:	d2db      	bcs.n	8005dac <quorem+0x44>
 8005df4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005df8:	b92b      	cbnz	r3, 8005e06 <quorem+0x9e>
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	429d      	cmp	r5, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	d32e      	bcc.n	8005e62 <quorem+0xfa>
 8005e04:	613c      	str	r4, [r7, #16]
 8005e06:	4638      	mov	r0, r7
 8005e08:	f001 fada 	bl	80073c0 <__mcmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	db24      	blt.n	8005e5a <quorem+0xf2>
 8005e10:	3601      	adds	r6, #1
 8005e12:	4628      	mov	r0, r5
 8005e14:	f04f 0c00 	mov.w	ip, #0
 8005e18:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e1c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e20:	b293      	uxth	r3, r2
 8005e22:	ebac 0303 	sub.w	r3, ip, r3
 8005e26:	0c12      	lsrs	r2, r2, #16
 8005e28:	fa13 f38e 	uxtah	r3, r3, lr
 8005e2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e3a:	45c1      	cmp	r9, r8
 8005e3c:	f840 3b04 	str.w	r3, [r0], #4
 8005e40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e44:	d2e8      	bcs.n	8005e18 <quorem+0xb0>
 8005e46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e4e:	b922      	cbnz	r2, 8005e5a <quorem+0xf2>
 8005e50:	3b04      	subs	r3, #4
 8005e52:	429d      	cmp	r5, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	d30a      	bcc.n	8005e6e <quorem+0x106>
 8005e58:	613c      	str	r4, [r7, #16]
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	b003      	add	sp, #12
 8005e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	3b04      	subs	r3, #4
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d1cc      	bne.n	8005e04 <quorem+0x9c>
 8005e6a:	3c01      	subs	r4, #1
 8005e6c:	e7c7      	b.n	8005dfe <quorem+0x96>
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	3b04      	subs	r3, #4
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	d1f0      	bne.n	8005e58 <quorem+0xf0>
 8005e76:	3c01      	subs	r4, #1
 8005e78:	e7eb      	b.n	8005e52 <quorem+0xea>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7ee      	b.n	8005e5c <quorem+0xf4>
	...

08005e80 <_dtoa_r>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	ed2d 8b04 	vpush	{d8-d9}
 8005e88:	ec57 6b10 	vmov	r6, r7, d0
 8005e8c:	b093      	sub	sp, #76	; 0x4c
 8005e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e94:	9106      	str	r1, [sp, #24]
 8005e96:	ee10 aa10 	vmov	sl, s0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005ea0:	46bb      	mov	fp, r7
 8005ea2:	b975      	cbnz	r5, 8005ec2 <_dtoa_r+0x42>
 8005ea4:	2010      	movs	r0, #16
 8005ea6:	f7ff f899 	bl	8004fdc <malloc>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6260      	str	r0, [r4, #36]	; 0x24
 8005eae:	b920      	cbnz	r0, 8005eba <_dtoa_r+0x3a>
 8005eb0:	4ba7      	ldr	r3, [pc, #668]	; (8006150 <_dtoa_r+0x2d0>)
 8005eb2:	21ea      	movs	r1, #234	; 0xea
 8005eb4:	48a7      	ldr	r0, [pc, #668]	; (8006154 <_dtoa_r+0x2d4>)
 8005eb6:	f001 fd4b 	bl	8007950 <__assert_func>
 8005eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ebe:	6005      	str	r5, [r0, #0]
 8005ec0:	60c5      	str	r5, [r0, #12]
 8005ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	b151      	cbz	r1, 8005ede <_dtoa_r+0x5e>
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	604a      	str	r2, [r1, #4]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4093      	lsls	r3, r2
 8005ed0:	608b      	str	r3, [r1, #8]
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f001 f832 	bl	8006f3c <_Bfree>
 8005ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	1e3b      	subs	r3, r7, #0
 8005ee0:	bfaa      	itet	ge
 8005ee2:	2300      	movge	r3, #0
 8005ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ee8:	f8c8 3000 	strge.w	r3, [r8]
 8005eec:	4b9a      	ldr	r3, [pc, #616]	; (8006158 <_dtoa_r+0x2d8>)
 8005eee:	bfbc      	itt	lt
 8005ef0:	2201      	movlt	r2, #1
 8005ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ef6:	ea33 030b 	bics.w	r3, r3, fp
 8005efa:	d11b      	bne.n	8005f34 <_dtoa_r+0xb4>
 8005efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f08:	4333      	orrs	r3, r6
 8005f0a:	f000 8592 	beq.w	8006a32 <_dtoa_r+0xbb2>
 8005f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f10:	b963      	cbnz	r3, 8005f2c <_dtoa_r+0xac>
 8005f12:	4b92      	ldr	r3, [pc, #584]	; (800615c <_dtoa_r+0x2dc>)
 8005f14:	e022      	b.n	8005f5c <_dtoa_r+0xdc>
 8005f16:	4b92      	ldr	r3, [pc, #584]	; (8006160 <_dtoa_r+0x2e0>)
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	9801      	ldr	r0, [sp, #4]
 8005f22:	b013      	add	sp, #76	; 0x4c
 8005f24:	ecbd 8b04 	vpop	{d8-d9}
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	4b8b      	ldr	r3, [pc, #556]	; (800615c <_dtoa_r+0x2dc>)
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	3303      	adds	r3, #3
 8005f32:	e7f3      	b.n	8005f1c <_dtoa_r+0x9c>
 8005f34:	2200      	movs	r2, #0
 8005f36:	2300      	movs	r3, #0
 8005f38:	4650      	mov	r0, sl
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	f7fa fdf4 	bl	8000b28 <__aeabi_dcmpeq>
 8005f40:	ec4b ab19 	vmov	d9, sl, fp
 8005f44:	4680      	mov	r8, r0
 8005f46:	b158      	cbz	r0, 8005f60 <_dtoa_r+0xe0>
 8005f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 856b 	beq.w	8006a2c <_dtoa_r+0xbac>
 8005f56:	4883      	ldr	r0, [pc, #524]	; (8006164 <_dtoa_r+0x2e4>)
 8005f58:	6018      	str	r0, [r3, #0]
 8005f5a:	1e43      	subs	r3, r0, #1
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	e7df      	b.n	8005f20 <_dtoa_r+0xa0>
 8005f60:	ec4b ab10 	vmov	d0, sl, fp
 8005f64:	aa10      	add	r2, sp, #64	; 0x40
 8005f66:	a911      	add	r1, sp, #68	; 0x44
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f001 facf 	bl	800750c <__d2b>
 8005f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f72:	ee08 0a10 	vmov	s16, r0
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	f000 8084 	beq.w	8006084 <_dtoa_r+0x204>
 8005f7c:	ee19 3a90 	vmov	r3, s19
 8005f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f88:	4656      	mov	r6, sl
 8005f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f96:	4b74      	ldr	r3, [pc, #464]	; (8006168 <_dtoa_r+0x2e8>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f7fa f9a3 	bl	80002e8 <__aeabi_dsub>
 8005fa2:	a365      	add	r3, pc, #404	; (adr r3, 8006138 <_dtoa_r+0x2b8>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa fb56 	bl	8000658 <__aeabi_dmul>
 8005fac:	a364      	add	r3, pc, #400	; (adr r3, 8006140 <_dtoa_r+0x2c0>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f99b 	bl	80002ec <__adddf3>
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	4628      	mov	r0, r5
 8005fba:	460f      	mov	r7, r1
 8005fbc:	f7fa fae2 	bl	8000584 <__aeabi_i2d>
 8005fc0:	a361      	add	r3, pc, #388	; (adr r3, 8006148 <_dtoa_r+0x2c8>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa fb47 	bl	8000658 <__aeabi_dmul>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4630      	mov	r0, r6
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	f7fa f98b 	bl	80002ec <__adddf3>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460f      	mov	r7, r1
 8005fda:	f7fa fded 	bl	8000bb8 <__aeabi_d2iz>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	9000      	str	r0, [sp, #0]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa fda8 	bl	8000b3c <__aeabi_dcmplt>
 8005fec:	b150      	cbz	r0, 8006004 <_dtoa_r+0x184>
 8005fee:	9800      	ldr	r0, [sp, #0]
 8005ff0:	f7fa fac8 	bl	8000584 <__aeabi_i2d>
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	f7fa fd96 	bl	8000b28 <__aeabi_dcmpeq>
 8005ffc:	b910      	cbnz	r0, 8006004 <_dtoa_r+0x184>
 8005ffe:	9b00      	ldr	r3, [sp, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	2b16      	cmp	r3, #22
 8006008:	d85a      	bhi.n	80060c0 <_dtoa_r+0x240>
 800600a:	9a00      	ldr	r2, [sp, #0]
 800600c:	4b57      	ldr	r3, [pc, #348]	; (800616c <_dtoa_r+0x2ec>)
 800600e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	ec51 0b19 	vmov	r0, r1, d9
 800601a:	f7fa fd8f 	bl	8000b3c <__aeabi_dcmplt>
 800601e:	2800      	cmp	r0, #0
 8006020:	d050      	beq.n	80060c4 <_dtoa_r+0x244>
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	3b01      	subs	r3, #1
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2300      	movs	r3, #0
 800602a:	930b      	str	r3, [sp, #44]	; 0x2c
 800602c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800602e:	1b5d      	subs	r5, r3, r5
 8006030:	1e6b      	subs	r3, r5, #1
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	bf45      	ittet	mi
 8006036:	f1c5 0301 	rsbmi	r3, r5, #1
 800603a:	9304      	strmi	r3, [sp, #16]
 800603c:	2300      	movpl	r3, #0
 800603e:	2300      	movmi	r3, #0
 8006040:	bf4c      	ite	mi
 8006042:	9305      	strmi	r3, [sp, #20]
 8006044:	9304      	strpl	r3, [sp, #16]
 8006046:	9b00      	ldr	r3, [sp, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	db3d      	blt.n	80060c8 <_dtoa_r+0x248>
 800604c:	9b05      	ldr	r3, [sp, #20]
 800604e:	9a00      	ldr	r2, [sp, #0]
 8006050:	920a      	str	r2, [sp, #40]	; 0x28
 8006052:	4413      	add	r3, r2
 8006054:	9305      	str	r3, [sp, #20]
 8006056:	2300      	movs	r3, #0
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	9b06      	ldr	r3, [sp, #24]
 800605c:	2b09      	cmp	r3, #9
 800605e:	f200 8089 	bhi.w	8006174 <_dtoa_r+0x2f4>
 8006062:	2b05      	cmp	r3, #5
 8006064:	bfc4      	itt	gt
 8006066:	3b04      	subgt	r3, #4
 8006068:	9306      	strgt	r3, [sp, #24]
 800606a:	9b06      	ldr	r3, [sp, #24]
 800606c:	f1a3 0302 	sub.w	r3, r3, #2
 8006070:	bfcc      	ite	gt
 8006072:	2500      	movgt	r5, #0
 8006074:	2501      	movle	r5, #1
 8006076:	2b03      	cmp	r3, #3
 8006078:	f200 8087 	bhi.w	800618a <_dtoa_r+0x30a>
 800607c:	e8df f003 	tbb	[pc, r3]
 8006080:	59383a2d 	.word	0x59383a2d
 8006084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006088:	441d      	add	r5, r3
 800608a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800608e:	2b20      	cmp	r3, #32
 8006090:	bfc1      	itttt	gt
 8006092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800609a:	fa0b f303 	lslgt.w	r3, fp, r3
 800609e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060a2:	bfda      	itte	le
 80060a4:	f1c3 0320 	rsble	r3, r3, #32
 80060a8:	fa06 f003 	lslle.w	r0, r6, r3
 80060ac:	4318      	orrgt	r0, r3
 80060ae:	f7fa fa59 	bl	8000564 <__aeabi_ui2d>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4606      	mov	r6, r0
 80060b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060ba:	3d01      	subs	r5, #1
 80060bc:	930e      	str	r3, [sp, #56]	; 0x38
 80060be:	e76a      	b.n	8005f96 <_dtoa_r+0x116>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7b2      	b.n	800602a <_dtoa_r+0x1aa>
 80060c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80060c6:	e7b1      	b.n	800602c <_dtoa_r+0x1ac>
 80060c8:	9b04      	ldr	r3, [sp, #16]
 80060ca:	9a00      	ldr	r2, [sp, #0]
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	4253      	negs	r3, r2
 80060d2:	9307      	str	r3, [sp, #28]
 80060d4:	2300      	movs	r3, #0
 80060d6:	930a      	str	r3, [sp, #40]	; 0x28
 80060d8:	e7bf      	b.n	800605a <_dtoa_r+0x1da>
 80060da:	2300      	movs	r3, #0
 80060dc:	9308      	str	r3, [sp, #32]
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dc55      	bgt.n	8006190 <_dtoa_r+0x310>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ea:	461a      	mov	r2, r3
 80060ec:	9209      	str	r2, [sp, #36]	; 0x24
 80060ee:	e00c      	b.n	800610a <_dtoa_r+0x28a>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e7f3      	b.n	80060dc <_dtoa_r+0x25c>
 80060f4:	2300      	movs	r3, #0
 80060f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f8:	9308      	str	r3, [sp, #32]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	4413      	add	r3, r2
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	3301      	adds	r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	bfb8      	it	lt
 8006108:	2301      	movlt	r3, #1
 800610a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800610c:	2200      	movs	r2, #0
 800610e:	6042      	str	r2, [r0, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	f102 0614 	add.w	r6, r2, #20
 8006116:	429e      	cmp	r6, r3
 8006118:	6841      	ldr	r1, [r0, #4]
 800611a:	d93d      	bls.n	8006198 <_dtoa_r+0x318>
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fecd 	bl	8006ebc <_Balloc>
 8006122:	9001      	str	r0, [sp, #4]
 8006124:	2800      	cmp	r0, #0
 8006126:	d13b      	bne.n	80061a0 <_dtoa_r+0x320>
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <_dtoa_r+0x2f0>)
 800612a:	4602      	mov	r2, r0
 800612c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006130:	e6c0      	b.n	8005eb4 <_dtoa_r+0x34>
 8006132:	2301      	movs	r3, #1
 8006134:	e7df      	b.n	80060f6 <_dtoa_r+0x276>
 8006136:	bf00      	nop
 8006138:	636f4361 	.word	0x636f4361
 800613c:	3fd287a7 	.word	0x3fd287a7
 8006140:	8b60c8b3 	.word	0x8b60c8b3
 8006144:	3fc68a28 	.word	0x3fc68a28
 8006148:	509f79fb 	.word	0x509f79fb
 800614c:	3fd34413 	.word	0x3fd34413
 8006150:	08008075 	.word	0x08008075
 8006154:	0800808c 	.word	0x0800808c
 8006158:	7ff00000 	.word	0x7ff00000
 800615c:	08008071 	.word	0x08008071
 8006160:	08008068 	.word	0x08008068
 8006164:	08008045 	.word	0x08008045
 8006168:	3ff80000 	.word	0x3ff80000
 800616c:	080081e0 	.word	0x080081e0
 8006170:	080080e7 	.word	0x080080e7
 8006174:	2501      	movs	r5, #1
 8006176:	2300      	movs	r3, #0
 8006178:	9306      	str	r3, [sp, #24]
 800617a:	9508      	str	r5, [sp, #32]
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	2312      	movs	r3, #18
 8006188:	e7b0      	b.n	80060ec <_dtoa_r+0x26c>
 800618a:	2301      	movs	r3, #1
 800618c:	9308      	str	r3, [sp, #32]
 800618e:	e7f5      	b.n	800617c <_dtoa_r+0x2fc>
 8006190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006196:	e7b8      	b.n	800610a <_dtoa_r+0x28a>
 8006198:	3101      	adds	r1, #1
 800619a:	6041      	str	r1, [r0, #4]
 800619c:	0052      	lsls	r2, r2, #1
 800619e:	e7b8      	b.n	8006112 <_dtoa_r+0x292>
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	9a01      	ldr	r2, [sp, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	2b0e      	cmp	r3, #14
 80061aa:	f200 809d 	bhi.w	80062e8 <_dtoa_r+0x468>
 80061ae:	2d00      	cmp	r5, #0
 80061b0:	f000 809a 	beq.w	80062e8 <_dtoa_r+0x468>
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dd32      	ble.n	8006220 <_dtoa_r+0x3a0>
 80061ba:	4ab7      	ldr	r2, [pc, #732]	; (8006498 <_dtoa_r+0x618>)
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061c8:	9b00      	ldr	r3, [sp, #0]
 80061ca:	05d8      	lsls	r0, r3, #23
 80061cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061d0:	d516      	bpl.n	8006200 <_dtoa_r+0x380>
 80061d2:	4bb2      	ldr	r3, [pc, #712]	; (800649c <_dtoa_r+0x61c>)
 80061d4:	ec51 0b19 	vmov	r0, r1, d9
 80061d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061dc:	f7fa fb66 	bl	80008ac <__aeabi_ddiv>
 80061e0:	f007 070f 	and.w	r7, r7, #15
 80061e4:	4682      	mov	sl, r0
 80061e6:	468b      	mov	fp, r1
 80061e8:	2503      	movs	r5, #3
 80061ea:	4eac      	ldr	r6, [pc, #688]	; (800649c <_dtoa_r+0x61c>)
 80061ec:	b957      	cbnz	r7, 8006204 <_dtoa_r+0x384>
 80061ee:	4642      	mov	r2, r8
 80061f0:	464b      	mov	r3, r9
 80061f2:	4650      	mov	r0, sl
 80061f4:	4659      	mov	r1, fp
 80061f6:	f7fa fb59 	bl	80008ac <__aeabi_ddiv>
 80061fa:	4682      	mov	sl, r0
 80061fc:	468b      	mov	fp, r1
 80061fe:	e028      	b.n	8006252 <_dtoa_r+0x3d2>
 8006200:	2502      	movs	r5, #2
 8006202:	e7f2      	b.n	80061ea <_dtoa_r+0x36a>
 8006204:	07f9      	lsls	r1, r7, #31
 8006206:	d508      	bpl.n	800621a <_dtoa_r+0x39a>
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006210:	f7fa fa22 	bl	8000658 <__aeabi_dmul>
 8006214:	3501      	adds	r5, #1
 8006216:	4680      	mov	r8, r0
 8006218:	4689      	mov	r9, r1
 800621a:	107f      	asrs	r7, r7, #1
 800621c:	3608      	adds	r6, #8
 800621e:	e7e5      	b.n	80061ec <_dtoa_r+0x36c>
 8006220:	f000 809b 	beq.w	800635a <_dtoa_r+0x4da>
 8006224:	9b00      	ldr	r3, [sp, #0]
 8006226:	4f9d      	ldr	r7, [pc, #628]	; (800649c <_dtoa_r+0x61c>)
 8006228:	425e      	negs	r6, r3
 800622a:	4b9b      	ldr	r3, [pc, #620]	; (8006498 <_dtoa_r+0x618>)
 800622c:	f006 020f 	and.w	r2, r6, #15
 8006230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	ec51 0b19 	vmov	r0, r1, d9
 800623c:	f7fa fa0c 	bl	8000658 <__aeabi_dmul>
 8006240:	1136      	asrs	r6, r6, #4
 8006242:	4682      	mov	sl, r0
 8006244:	468b      	mov	fp, r1
 8006246:	2300      	movs	r3, #0
 8006248:	2502      	movs	r5, #2
 800624a:	2e00      	cmp	r6, #0
 800624c:	d17a      	bne.n	8006344 <_dtoa_r+0x4c4>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d3      	bne.n	80061fa <_dtoa_r+0x37a>
 8006252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8082 	beq.w	800635e <_dtoa_r+0x4de>
 800625a:	4b91      	ldr	r3, [pc, #580]	; (80064a0 <_dtoa_r+0x620>)
 800625c:	2200      	movs	r2, #0
 800625e:	4650      	mov	r0, sl
 8006260:	4659      	mov	r1, fp
 8006262:	f7fa fc6b 	bl	8000b3c <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	d079      	beq.n	800635e <_dtoa_r+0x4de>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d076      	beq.n	800635e <_dtoa_r+0x4de>
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	dd36      	ble.n	80062e4 <_dtoa_r+0x464>
 8006276:	9b00      	ldr	r3, [sp, #0]
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	1e5f      	subs	r7, r3, #1
 800627e:	2200      	movs	r2, #0
 8006280:	4b88      	ldr	r3, [pc, #544]	; (80064a4 <_dtoa_r+0x624>)
 8006282:	f7fa f9e9 	bl	8000658 <__aeabi_dmul>
 8006286:	9e02      	ldr	r6, [sp, #8]
 8006288:	4682      	mov	sl, r0
 800628a:	468b      	mov	fp, r1
 800628c:	3501      	adds	r5, #1
 800628e:	4628      	mov	r0, r5
 8006290:	f7fa f978 	bl	8000584 <__aeabi_i2d>
 8006294:	4652      	mov	r2, sl
 8006296:	465b      	mov	r3, fp
 8006298:	f7fa f9de 	bl	8000658 <__aeabi_dmul>
 800629c:	4b82      	ldr	r3, [pc, #520]	; (80064a8 <_dtoa_r+0x628>)
 800629e:	2200      	movs	r2, #0
 80062a0:	f7fa f824 	bl	80002ec <__adddf3>
 80062a4:	46d0      	mov	r8, sl
 80062a6:	46d9      	mov	r9, fp
 80062a8:	4682      	mov	sl, r0
 80062aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d158      	bne.n	8006364 <_dtoa_r+0x4e4>
 80062b2:	4b7e      	ldr	r3, [pc, #504]	; (80064ac <_dtoa_r+0x62c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	4640      	mov	r0, r8
 80062b8:	4649      	mov	r1, r9
 80062ba:	f7fa f815 	bl	80002e8 <__aeabi_dsub>
 80062be:	4652      	mov	r2, sl
 80062c0:	465b      	mov	r3, fp
 80062c2:	4680      	mov	r8, r0
 80062c4:	4689      	mov	r9, r1
 80062c6:	f7fa fc57 	bl	8000b78 <__aeabi_dcmpgt>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f040 8295 	bne.w	80067fa <_dtoa_r+0x97a>
 80062d0:	4652      	mov	r2, sl
 80062d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7fa fc2f 	bl	8000b3c <__aeabi_dcmplt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	f040 8289 	bne.w	80067f6 <_dtoa_r+0x976>
 80062e4:	ec5b ab19 	vmov	sl, fp, d9
 80062e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f2c0 8148 	blt.w	8006580 <_dtoa_r+0x700>
 80062f0:	9a00      	ldr	r2, [sp, #0]
 80062f2:	2a0e      	cmp	r2, #14
 80062f4:	f300 8144 	bgt.w	8006580 <_dtoa_r+0x700>
 80062f8:	4b67      	ldr	r3, [pc, #412]	; (8006498 <_dtoa_r+0x618>)
 80062fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	f280 80d5 	bge.w	80064b4 <_dtoa_r+0x634>
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f300 80d1 	bgt.w	80064b4 <_dtoa_r+0x634>
 8006312:	f040 826f 	bne.w	80067f4 <_dtoa_r+0x974>
 8006316:	4b65      	ldr	r3, [pc, #404]	; (80064ac <_dtoa_r+0x62c>)
 8006318:	2200      	movs	r2, #0
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	f7fa f99b 	bl	8000658 <__aeabi_dmul>
 8006322:	4652      	mov	r2, sl
 8006324:	465b      	mov	r3, fp
 8006326:	f7fa fc1d 	bl	8000b64 <__aeabi_dcmpge>
 800632a:	9e03      	ldr	r6, [sp, #12]
 800632c:	4637      	mov	r7, r6
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 8245 	bne.w	80067be <_dtoa_r+0x93e>
 8006334:	9d01      	ldr	r5, [sp, #4]
 8006336:	2331      	movs	r3, #49	; 0x31
 8006338:	f805 3b01 	strb.w	r3, [r5], #1
 800633c:	9b00      	ldr	r3, [sp, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	e240      	b.n	80067c6 <_dtoa_r+0x946>
 8006344:	07f2      	lsls	r2, r6, #31
 8006346:	d505      	bpl.n	8006354 <_dtoa_r+0x4d4>
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	f7fa f984 	bl	8000658 <__aeabi_dmul>
 8006350:	3501      	adds	r5, #1
 8006352:	2301      	movs	r3, #1
 8006354:	1076      	asrs	r6, r6, #1
 8006356:	3708      	adds	r7, #8
 8006358:	e777      	b.n	800624a <_dtoa_r+0x3ca>
 800635a:	2502      	movs	r5, #2
 800635c:	e779      	b.n	8006252 <_dtoa_r+0x3d2>
 800635e:	9f00      	ldr	r7, [sp, #0]
 8006360:	9e03      	ldr	r6, [sp, #12]
 8006362:	e794      	b.n	800628e <_dtoa_r+0x40e>
 8006364:	9901      	ldr	r1, [sp, #4]
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <_dtoa_r+0x618>)
 8006368:	4431      	add	r1, r6
 800636a:	910d      	str	r1, [sp, #52]	; 0x34
 800636c:	9908      	ldr	r1, [sp, #32]
 800636e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006376:	2900      	cmp	r1, #0
 8006378:	d043      	beq.n	8006402 <_dtoa_r+0x582>
 800637a:	494d      	ldr	r1, [pc, #308]	; (80064b0 <_dtoa_r+0x630>)
 800637c:	2000      	movs	r0, #0
 800637e:	f7fa fa95 	bl	80008ac <__aeabi_ddiv>
 8006382:	4652      	mov	r2, sl
 8006384:	465b      	mov	r3, fp
 8006386:	f7f9 ffaf 	bl	80002e8 <__aeabi_dsub>
 800638a:	9d01      	ldr	r5, [sp, #4]
 800638c:	4682      	mov	sl, r0
 800638e:	468b      	mov	fp, r1
 8006390:	4649      	mov	r1, r9
 8006392:	4640      	mov	r0, r8
 8006394:	f7fa fc10 	bl	8000bb8 <__aeabi_d2iz>
 8006398:	4606      	mov	r6, r0
 800639a:	f7fa f8f3 	bl	8000584 <__aeabi_i2d>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7f9 ff9f 	bl	80002e8 <__aeabi_dsub>
 80063aa:	3630      	adds	r6, #48	; 0x30
 80063ac:	f805 6b01 	strb.w	r6, [r5], #1
 80063b0:	4652      	mov	r2, sl
 80063b2:	465b      	mov	r3, fp
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	f7fa fbc0 	bl	8000b3c <__aeabi_dcmplt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d163      	bne.n	8006488 <_dtoa_r+0x608>
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	4936      	ldr	r1, [pc, #216]	; (80064a0 <_dtoa_r+0x620>)
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7f9 ff8e 	bl	80002e8 <__aeabi_dsub>
 80063cc:	4652      	mov	r2, sl
 80063ce:	465b      	mov	r3, fp
 80063d0:	f7fa fbb4 	bl	8000b3c <__aeabi_dcmplt>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f040 80b5 	bne.w	8006544 <_dtoa_r+0x6c4>
 80063da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063dc:	429d      	cmp	r5, r3
 80063de:	d081      	beq.n	80062e4 <_dtoa_r+0x464>
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <_dtoa_r+0x624>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	4650      	mov	r0, sl
 80063e6:	4659      	mov	r1, fp
 80063e8:	f7fa f936 	bl	8000658 <__aeabi_dmul>
 80063ec:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <_dtoa_r+0x624>)
 80063ee:	4682      	mov	sl, r0
 80063f0:	468b      	mov	fp, r1
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	2200      	movs	r2, #0
 80063f8:	f7fa f92e 	bl	8000658 <__aeabi_dmul>
 80063fc:	4680      	mov	r8, r0
 80063fe:	4689      	mov	r9, r1
 8006400:	e7c6      	b.n	8006390 <_dtoa_r+0x510>
 8006402:	4650      	mov	r0, sl
 8006404:	4659      	mov	r1, fp
 8006406:	f7fa f927 	bl	8000658 <__aeabi_dmul>
 800640a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800640c:	9d01      	ldr	r5, [sp, #4]
 800640e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006410:	4682      	mov	sl, r0
 8006412:	468b      	mov	fp, r1
 8006414:	4649      	mov	r1, r9
 8006416:	4640      	mov	r0, r8
 8006418:	f7fa fbce 	bl	8000bb8 <__aeabi_d2iz>
 800641c:	4606      	mov	r6, r0
 800641e:	f7fa f8b1 	bl	8000584 <__aeabi_i2d>
 8006422:	3630      	adds	r6, #48	; 0x30
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4640      	mov	r0, r8
 800642a:	4649      	mov	r1, r9
 800642c:	f7f9 ff5c 	bl	80002e8 <__aeabi_dsub>
 8006430:	f805 6b01 	strb.w	r6, [r5], #1
 8006434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006436:	429d      	cmp	r5, r3
 8006438:	4680      	mov	r8, r0
 800643a:	4689      	mov	r9, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	d124      	bne.n	800648c <_dtoa_r+0x60c>
 8006442:	4b1b      	ldr	r3, [pc, #108]	; (80064b0 <_dtoa_r+0x630>)
 8006444:	4650      	mov	r0, sl
 8006446:	4659      	mov	r1, fp
 8006448:	f7f9 ff50 	bl	80002ec <__adddf3>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7fa fb90 	bl	8000b78 <__aeabi_dcmpgt>
 8006458:	2800      	cmp	r0, #0
 800645a:	d173      	bne.n	8006544 <_dtoa_r+0x6c4>
 800645c:	4652      	mov	r2, sl
 800645e:	465b      	mov	r3, fp
 8006460:	4913      	ldr	r1, [pc, #76]	; (80064b0 <_dtoa_r+0x630>)
 8006462:	2000      	movs	r0, #0
 8006464:	f7f9 ff40 	bl	80002e8 <__aeabi_dsub>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa fb64 	bl	8000b3c <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f43f af35 	beq.w	80062e4 <_dtoa_r+0x464>
 800647a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800647c:	1e6b      	subs	r3, r5, #1
 800647e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006484:	2b30      	cmp	r3, #48	; 0x30
 8006486:	d0f8      	beq.n	800647a <_dtoa_r+0x5fa>
 8006488:	9700      	str	r7, [sp, #0]
 800648a:	e049      	b.n	8006520 <_dtoa_r+0x6a0>
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <_dtoa_r+0x624>)
 800648e:	f7fa f8e3 	bl	8000658 <__aeabi_dmul>
 8006492:	4680      	mov	r8, r0
 8006494:	4689      	mov	r9, r1
 8006496:	e7bd      	b.n	8006414 <_dtoa_r+0x594>
 8006498:	080081e0 	.word	0x080081e0
 800649c:	080081b8 	.word	0x080081b8
 80064a0:	3ff00000 	.word	0x3ff00000
 80064a4:	40240000 	.word	0x40240000
 80064a8:	401c0000 	.word	0x401c0000
 80064ac:	40140000 	.word	0x40140000
 80064b0:	3fe00000 	.word	0x3fe00000
 80064b4:	9d01      	ldr	r5, [sp, #4]
 80064b6:	4656      	mov	r6, sl
 80064b8:	465f      	mov	r7, fp
 80064ba:	4642      	mov	r2, r8
 80064bc:	464b      	mov	r3, r9
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa f9f3 	bl	80008ac <__aeabi_ddiv>
 80064c6:	f7fa fb77 	bl	8000bb8 <__aeabi_d2iz>
 80064ca:	4682      	mov	sl, r0
 80064cc:	f7fa f85a 	bl	8000584 <__aeabi_i2d>
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	f7fa f8c0 	bl	8000658 <__aeabi_dmul>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064e4:	f7f9 ff00 	bl	80002e8 <__aeabi_dsub>
 80064e8:	f805 6b01 	strb.w	r6, [r5], #1
 80064ec:	9e01      	ldr	r6, [sp, #4]
 80064ee:	9f03      	ldr	r7, [sp, #12]
 80064f0:	1bae      	subs	r6, r5, r6
 80064f2:	42b7      	cmp	r7, r6
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	d135      	bne.n	8006566 <_dtoa_r+0x6e6>
 80064fa:	f7f9 fef7 	bl	80002ec <__adddf3>
 80064fe:	4642      	mov	r2, r8
 8006500:	464b      	mov	r3, r9
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	f7fa fb37 	bl	8000b78 <__aeabi_dcmpgt>
 800650a:	b9d0      	cbnz	r0, 8006542 <_dtoa_r+0x6c2>
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7fa fb08 	bl	8000b28 <__aeabi_dcmpeq>
 8006518:	b110      	cbz	r0, 8006520 <_dtoa_r+0x6a0>
 800651a:	f01a 0f01 	tst.w	sl, #1
 800651e:	d110      	bne.n	8006542 <_dtoa_r+0x6c2>
 8006520:	4620      	mov	r0, r4
 8006522:	ee18 1a10 	vmov	r1, s16
 8006526:	f000 fd09 	bl	8006f3c <_Bfree>
 800652a:	2300      	movs	r3, #0
 800652c:	9800      	ldr	r0, [sp, #0]
 800652e:	702b      	strb	r3, [r5, #0]
 8006530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006532:	3001      	adds	r0, #1
 8006534:	6018      	str	r0, [r3, #0]
 8006536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006538:	2b00      	cmp	r3, #0
 800653a:	f43f acf1 	beq.w	8005f20 <_dtoa_r+0xa0>
 800653e:	601d      	str	r5, [r3, #0]
 8006540:	e4ee      	b.n	8005f20 <_dtoa_r+0xa0>
 8006542:	9f00      	ldr	r7, [sp, #0]
 8006544:	462b      	mov	r3, r5
 8006546:	461d      	mov	r5, r3
 8006548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800654c:	2a39      	cmp	r2, #57	; 0x39
 800654e:	d106      	bne.n	800655e <_dtoa_r+0x6de>
 8006550:	9a01      	ldr	r2, [sp, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d1f7      	bne.n	8006546 <_dtoa_r+0x6c6>
 8006556:	9901      	ldr	r1, [sp, #4]
 8006558:	2230      	movs	r2, #48	; 0x30
 800655a:	3701      	adds	r7, #1
 800655c:	700a      	strb	r2, [r1, #0]
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	3201      	adds	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	e790      	b.n	8006488 <_dtoa_r+0x608>
 8006566:	4ba6      	ldr	r3, [pc, #664]	; (8006800 <_dtoa_r+0x980>)
 8006568:	2200      	movs	r2, #0
 800656a:	f7fa f875 	bl	8000658 <__aeabi_dmul>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	4606      	mov	r6, r0
 8006574:	460f      	mov	r7, r1
 8006576:	f7fa fad7 	bl	8000b28 <__aeabi_dcmpeq>
 800657a:	2800      	cmp	r0, #0
 800657c:	d09d      	beq.n	80064ba <_dtoa_r+0x63a>
 800657e:	e7cf      	b.n	8006520 <_dtoa_r+0x6a0>
 8006580:	9a08      	ldr	r2, [sp, #32]
 8006582:	2a00      	cmp	r2, #0
 8006584:	f000 80d7 	beq.w	8006736 <_dtoa_r+0x8b6>
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2a01      	cmp	r2, #1
 800658c:	f300 80ba 	bgt.w	8006704 <_dtoa_r+0x884>
 8006590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006592:	2a00      	cmp	r2, #0
 8006594:	f000 80b2 	beq.w	80066fc <_dtoa_r+0x87c>
 8006598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800659c:	9e07      	ldr	r6, [sp, #28]
 800659e:	9d04      	ldr	r5, [sp, #16]
 80065a0:	9a04      	ldr	r2, [sp, #16]
 80065a2:	441a      	add	r2, r3
 80065a4:	9204      	str	r2, [sp, #16]
 80065a6:	9a05      	ldr	r2, [sp, #20]
 80065a8:	2101      	movs	r1, #1
 80065aa:	441a      	add	r2, r3
 80065ac:	4620      	mov	r0, r4
 80065ae:	9205      	str	r2, [sp, #20]
 80065b0:	f000 fd7c 	bl	80070ac <__i2b>
 80065b4:	4607      	mov	r7, r0
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	dd0c      	ble.n	80065d4 <_dtoa_r+0x754>
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd09      	ble.n	80065d4 <_dtoa_r+0x754>
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	bfa8      	it	ge
 80065c6:	462b      	movge	r3, r5
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	9204      	str	r2, [sp, #16]
 80065cc:	9a05      	ldr	r2, [sp, #20]
 80065ce:	1aed      	subs	r5, r5, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	b31b      	cbz	r3, 8006620 <_dtoa_r+0x7a0>
 80065d8:	9b08      	ldr	r3, [sp, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80af 	beq.w	800673e <_dtoa_r+0x8be>
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	dd13      	ble.n	800660c <_dtoa_r+0x78c>
 80065e4:	4639      	mov	r1, r7
 80065e6:	4632      	mov	r2, r6
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fe1f 	bl	800722c <__pow5mult>
 80065ee:	ee18 2a10 	vmov	r2, s16
 80065f2:	4601      	mov	r1, r0
 80065f4:	4607      	mov	r7, r0
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fd6e 	bl	80070d8 <__multiply>
 80065fc:	ee18 1a10 	vmov	r1, s16
 8006600:	4680      	mov	r8, r0
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fc9a 	bl	8006f3c <_Bfree>
 8006608:	ee08 8a10 	vmov	s16, r8
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	1b9a      	subs	r2, r3, r6
 8006610:	d006      	beq.n	8006620 <_dtoa_r+0x7a0>
 8006612:	ee18 1a10 	vmov	r1, s16
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fe08 	bl	800722c <__pow5mult>
 800661c:	ee08 0a10 	vmov	s16, r0
 8006620:	2101      	movs	r1, #1
 8006622:	4620      	mov	r0, r4
 8006624:	f000 fd42 	bl	80070ac <__i2b>
 8006628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	4606      	mov	r6, r0
 800662e:	f340 8088 	ble.w	8006742 <_dtoa_r+0x8c2>
 8006632:	461a      	mov	r2, r3
 8006634:	4601      	mov	r1, r0
 8006636:	4620      	mov	r0, r4
 8006638:	f000 fdf8 	bl	800722c <__pow5mult>
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	2b01      	cmp	r3, #1
 8006640:	4606      	mov	r6, r0
 8006642:	f340 8081 	ble.w	8006748 <_dtoa_r+0x8c8>
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	6933      	ldr	r3, [r6, #16]
 800664c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006650:	6918      	ldr	r0, [r3, #16]
 8006652:	f000 fcdb 	bl	800700c <__hi0bits>
 8006656:	f1c0 0020 	rsb	r0, r0, #32
 800665a:	9b05      	ldr	r3, [sp, #20]
 800665c:	4418      	add	r0, r3
 800665e:	f010 001f 	ands.w	r0, r0, #31
 8006662:	f000 8092 	beq.w	800678a <_dtoa_r+0x90a>
 8006666:	f1c0 0320 	rsb	r3, r0, #32
 800666a:	2b04      	cmp	r3, #4
 800666c:	f340 808a 	ble.w	8006784 <_dtoa_r+0x904>
 8006670:	f1c0 001c 	rsb	r0, r0, #28
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	4403      	add	r3, r0
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9b05      	ldr	r3, [sp, #20]
 800667c:	4403      	add	r3, r0
 800667e:	4405      	add	r5, r0
 8006680:	9305      	str	r3, [sp, #20]
 8006682:	9b04      	ldr	r3, [sp, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dd07      	ble.n	8006698 <_dtoa_r+0x818>
 8006688:	ee18 1a10 	vmov	r1, s16
 800668c:	461a      	mov	r2, r3
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fe26 	bl	80072e0 <__lshift>
 8006694:	ee08 0a10 	vmov	s16, r0
 8006698:	9b05      	ldr	r3, [sp, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	dd05      	ble.n	80066aa <_dtoa_r+0x82a>
 800669e:	4631      	mov	r1, r6
 80066a0:	461a      	mov	r2, r3
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 fe1c 	bl	80072e0 <__lshift>
 80066a8:	4606      	mov	r6, r0
 80066aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d06e      	beq.n	800678e <_dtoa_r+0x90e>
 80066b0:	ee18 0a10 	vmov	r0, s16
 80066b4:	4631      	mov	r1, r6
 80066b6:	f000 fe83 	bl	80073c0 <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	da67      	bge.n	800678e <_dtoa_r+0x90e>
 80066be:	9b00      	ldr	r3, [sp, #0]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	ee18 1a10 	vmov	r1, s16
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	220a      	movs	r2, #10
 80066ca:	2300      	movs	r3, #0
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fc57 	bl	8006f80 <__multadd>
 80066d2:	9b08      	ldr	r3, [sp, #32]
 80066d4:	ee08 0a10 	vmov	s16, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 81b1 	beq.w	8006a40 <_dtoa_r+0xbc0>
 80066de:	2300      	movs	r3, #0
 80066e0:	4639      	mov	r1, r7
 80066e2:	220a      	movs	r2, #10
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fc4b 	bl	8006f80 <__multadd>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	4607      	mov	r7, r0
 80066f0:	f300 808e 	bgt.w	8006810 <_dtoa_r+0x990>
 80066f4:	9b06      	ldr	r3, [sp, #24]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	dc51      	bgt.n	800679e <_dtoa_r+0x91e>
 80066fa:	e089      	b.n	8006810 <_dtoa_r+0x990>
 80066fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006702:	e74b      	b.n	800659c <_dtoa_r+0x71c>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	1e5e      	subs	r6, r3, #1
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	42b3      	cmp	r3, r6
 800670c:	bfbf      	itttt	lt
 800670e:	9b07      	ldrlt	r3, [sp, #28]
 8006710:	9607      	strlt	r6, [sp, #28]
 8006712:	1af2      	sublt	r2, r6, r3
 8006714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006716:	bfb6      	itet	lt
 8006718:	189b      	addlt	r3, r3, r2
 800671a:	1b9e      	subge	r6, r3, r6
 800671c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	bfb8      	it	lt
 8006722:	2600      	movlt	r6, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	bfb7      	itett	lt
 8006728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800672c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006730:	1a9d      	sublt	r5, r3, r2
 8006732:	2300      	movlt	r3, #0
 8006734:	e734      	b.n	80065a0 <_dtoa_r+0x720>
 8006736:	9e07      	ldr	r6, [sp, #28]
 8006738:	9d04      	ldr	r5, [sp, #16]
 800673a:	9f08      	ldr	r7, [sp, #32]
 800673c:	e73b      	b.n	80065b6 <_dtoa_r+0x736>
 800673e:	9a07      	ldr	r2, [sp, #28]
 8006740:	e767      	b.n	8006612 <_dtoa_r+0x792>
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	2b01      	cmp	r3, #1
 8006746:	dc18      	bgt.n	800677a <_dtoa_r+0x8fa>
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	d115      	bne.n	800677a <_dtoa_r+0x8fa>
 800674e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006752:	b993      	cbnz	r3, 800677a <_dtoa_r+0x8fa>
 8006754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006758:	0d1b      	lsrs	r3, r3, #20
 800675a:	051b      	lsls	r3, r3, #20
 800675c:	b183      	cbz	r3, 8006780 <_dtoa_r+0x900>
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	9b05      	ldr	r3, [sp, #20]
 8006766:	3301      	adds	r3, #1
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	f04f 0801 	mov.w	r8, #1
 800676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f af6a 	bne.w	800664a <_dtoa_r+0x7ca>
 8006776:	2001      	movs	r0, #1
 8006778:	e76f      	b.n	800665a <_dtoa_r+0x7da>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	e7f6      	b.n	800676e <_dtoa_r+0x8ee>
 8006780:	4698      	mov	r8, r3
 8006782:	e7f4      	b.n	800676e <_dtoa_r+0x8ee>
 8006784:	f43f af7d 	beq.w	8006682 <_dtoa_r+0x802>
 8006788:	4618      	mov	r0, r3
 800678a:	301c      	adds	r0, #28
 800678c:	e772      	b.n	8006674 <_dtoa_r+0x7f4>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dc37      	bgt.n	8006804 <_dtoa_r+0x984>
 8006794:	9b06      	ldr	r3, [sp, #24]
 8006796:	2b02      	cmp	r3, #2
 8006798:	dd34      	ble.n	8006804 <_dtoa_r+0x984>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	9b02      	ldr	r3, [sp, #8]
 80067a0:	b96b      	cbnz	r3, 80067be <_dtoa_r+0x93e>
 80067a2:	4631      	mov	r1, r6
 80067a4:	2205      	movs	r2, #5
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 fbea 	bl	8006f80 <__multadd>
 80067ac:	4601      	mov	r1, r0
 80067ae:	4606      	mov	r6, r0
 80067b0:	ee18 0a10 	vmov	r0, s16
 80067b4:	f000 fe04 	bl	80073c0 <__mcmp>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f73f adbb 	bgt.w	8006334 <_dtoa_r+0x4b4>
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	9d01      	ldr	r5, [sp, #4]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	4631      	mov	r1, r6
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fbb5 	bl	8006f3c <_Bfree>
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	f43f aea4 	beq.w	8006520 <_dtoa_r+0x6a0>
 80067d8:	f1b8 0f00 	cmp.w	r8, #0
 80067dc:	d005      	beq.n	80067ea <_dtoa_r+0x96a>
 80067de:	45b8      	cmp	r8, r7
 80067e0:	d003      	beq.n	80067ea <_dtoa_r+0x96a>
 80067e2:	4641      	mov	r1, r8
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 fba9 	bl	8006f3c <_Bfree>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fba5 	bl	8006f3c <_Bfree>
 80067f2:	e695      	b.n	8006520 <_dtoa_r+0x6a0>
 80067f4:	2600      	movs	r6, #0
 80067f6:	4637      	mov	r7, r6
 80067f8:	e7e1      	b.n	80067be <_dtoa_r+0x93e>
 80067fa:	9700      	str	r7, [sp, #0]
 80067fc:	4637      	mov	r7, r6
 80067fe:	e599      	b.n	8006334 <_dtoa_r+0x4b4>
 8006800:	40240000 	.word	0x40240000
 8006804:	9b08      	ldr	r3, [sp, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80ca 	beq.w	80069a0 <_dtoa_r+0xb20>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	2d00      	cmp	r5, #0
 8006812:	dd05      	ble.n	8006820 <_dtoa_r+0x9a0>
 8006814:	4639      	mov	r1, r7
 8006816:	462a      	mov	r2, r5
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fd61 	bl	80072e0 <__lshift>
 800681e:	4607      	mov	r7, r0
 8006820:	f1b8 0f00 	cmp.w	r8, #0
 8006824:	d05b      	beq.n	80068de <_dtoa_r+0xa5e>
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fb47 	bl	8006ebc <_Balloc>
 800682e:	4605      	mov	r5, r0
 8006830:	b928      	cbnz	r0, 800683e <_dtoa_r+0x9be>
 8006832:	4b87      	ldr	r3, [pc, #540]	; (8006a50 <_dtoa_r+0xbd0>)
 8006834:	4602      	mov	r2, r0
 8006836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800683a:	f7ff bb3b 	b.w	8005eb4 <_dtoa_r+0x34>
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	3202      	adds	r2, #2
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	f107 010c 	add.w	r1, r7, #12
 8006848:	300c      	adds	r0, #12
 800684a:	f7fe fbcf 	bl	8004fec <memcpy>
 800684e:	2201      	movs	r2, #1
 8006850:	4629      	mov	r1, r5
 8006852:	4620      	mov	r0, r4
 8006854:	f000 fd44 	bl	80072e0 <__lshift>
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	f103 0901 	add.w	r9, r3, #1
 800685e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006862:	4413      	add	r3, r2
 8006864:	9305      	str	r3, [sp, #20]
 8006866:	f00a 0301 	and.w	r3, sl, #1
 800686a:	46b8      	mov	r8, r7
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	4607      	mov	r7, r0
 8006870:	4631      	mov	r1, r6
 8006872:	ee18 0a10 	vmov	r0, s16
 8006876:	f7ff fa77 	bl	8005d68 <quorem>
 800687a:	4641      	mov	r1, r8
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006882:	ee18 0a10 	vmov	r0, s16
 8006886:	f000 fd9b 	bl	80073c0 <__mcmp>
 800688a:	463a      	mov	r2, r7
 800688c:	9003      	str	r0, [sp, #12]
 800688e:	4631      	mov	r1, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fdb1 	bl	80073f8 <__mdiff>
 8006896:	68c2      	ldr	r2, [r0, #12]
 8006898:	f109 3bff 	add.w	fp, r9, #4294967295
 800689c:	4605      	mov	r5, r0
 800689e:	bb02      	cbnz	r2, 80068e2 <_dtoa_r+0xa62>
 80068a0:	4601      	mov	r1, r0
 80068a2:	ee18 0a10 	vmov	r0, s16
 80068a6:	f000 fd8b 	bl	80073c0 <__mcmp>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4629      	mov	r1, r5
 80068ae:	4620      	mov	r0, r4
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	f000 fb43 	bl	8006f3c <_Bfree>
 80068b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068ba:	ea43 0102 	orr.w	r1, r3, r2
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	430b      	orrs	r3, r1
 80068c2:	464d      	mov	r5, r9
 80068c4:	d10f      	bne.n	80068e6 <_dtoa_r+0xa66>
 80068c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068ca:	d02a      	beq.n	8006922 <_dtoa_r+0xaa2>
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dd02      	ble.n	80068d8 <_dtoa_r+0xa58>
 80068d2:	9b02      	ldr	r3, [sp, #8]
 80068d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068d8:	f88b a000 	strb.w	sl, [fp]
 80068dc:	e775      	b.n	80067ca <_dtoa_r+0x94a>
 80068de:	4638      	mov	r0, r7
 80068e0:	e7ba      	b.n	8006858 <_dtoa_r+0x9d8>
 80068e2:	2201      	movs	r2, #1
 80068e4:	e7e2      	b.n	80068ac <_dtoa_r+0xa2c>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db04      	blt.n	80068f6 <_dtoa_r+0xa76>
 80068ec:	9906      	ldr	r1, [sp, #24]
 80068ee:	430b      	orrs	r3, r1
 80068f0:	9904      	ldr	r1, [sp, #16]
 80068f2:	430b      	orrs	r3, r1
 80068f4:	d122      	bne.n	800693c <_dtoa_r+0xabc>
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	ddee      	ble.n	80068d8 <_dtoa_r+0xa58>
 80068fa:	ee18 1a10 	vmov	r1, s16
 80068fe:	2201      	movs	r2, #1
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fced 	bl	80072e0 <__lshift>
 8006906:	4631      	mov	r1, r6
 8006908:	ee08 0a10 	vmov	s16, r0
 800690c:	f000 fd58 	bl	80073c0 <__mcmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	dc03      	bgt.n	800691c <_dtoa_r+0xa9c>
 8006914:	d1e0      	bne.n	80068d8 <_dtoa_r+0xa58>
 8006916:	f01a 0f01 	tst.w	sl, #1
 800691a:	d0dd      	beq.n	80068d8 <_dtoa_r+0xa58>
 800691c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006920:	d1d7      	bne.n	80068d2 <_dtoa_r+0xa52>
 8006922:	2339      	movs	r3, #57	; 0x39
 8006924:	f88b 3000 	strb.w	r3, [fp]
 8006928:	462b      	mov	r3, r5
 800692a:	461d      	mov	r5, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006932:	2a39      	cmp	r2, #57	; 0x39
 8006934:	d071      	beq.n	8006a1a <_dtoa_r+0xb9a>
 8006936:	3201      	adds	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	e746      	b.n	80067ca <_dtoa_r+0x94a>
 800693c:	2a00      	cmp	r2, #0
 800693e:	dd07      	ble.n	8006950 <_dtoa_r+0xad0>
 8006940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006944:	d0ed      	beq.n	8006922 <_dtoa_r+0xaa2>
 8006946:	f10a 0301 	add.w	r3, sl, #1
 800694a:	f88b 3000 	strb.w	r3, [fp]
 800694e:	e73c      	b.n	80067ca <_dtoa_r+0x94a>
 8006950:	9b05      	ldr	r3, [sp, #20]
 8006952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006956:	4599      	cmp	r9, r3
 8006958:	d047      	beq.n	80069ea <_dtoa_r+0xb6a>
 800695a:	ee18 1a10 	vmov	r1, s16
 800695e:	2300      	movs	r3, #0
 8006960:	220a      	movs	r2, #10
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fb0c 	bl	8006f80 <__multadd>
 8006968:	45b8      	cmp	r8, r7
 800696a:	ee08 0a10 	vmov	s16, r0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	f04f 020a 	mov.w	r2, #10
 8006976:	4641      	mov	r1, r8
 8006978:	4620      	mov	r0, r4
 800697a:	d106      	bne.n	800698a <_dtoa_r+0xb0a>
 800697c:	f000 fb00 	bl	8006f80 <__multadd>
 8006980:	4680      	mov	r8, r0
 8006982:	4607      	mov	r7, r0
 8006984:	f109 0901 	add.w	r9, r9, #1
 8006988:	e772      	b.n	8006870 <_dtoa_r+0x9f0>
 800698a:	f000 faf9 	bl	8006f80 <__multadd>
 800698e:	4639      	mov	r1, r7
 8006990:	4680      	mov	r8, r0
 8006992:	2300      	movs	r3, #0
 8006994:	220a      	movs	r2, #10
 8006996:	4620      	mov	r0, r4
 8006998:	f000 faf2 	bl	8006f80 <__multadd>
 800699c:	4607      	mov	r7, r0
 800699e:	e7f1      	b.n	8006984 <_dtoa_r+0xb04>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	9d01      	ldr	r5, [sp, #4]
 80069a6:	ee18 0a10 	vmov	r0, s16
 80069aa:	4631      	mov	r1, r6
 80069ac:	f7ff f9dc 	bl	8005d68 <quorem>
 80069b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	f805 ab01 	strb.w	sl, [r5], #1
 80069ba:	1aea      	subs	r2, r5, r3
 80069bc:	9b02      	ldr	r3, [sp, #8]
 80069be:	4293      	cmp	r3, r2
 80069c0:	dd09      	ble.n	80069d6 <_dtoa_r+0xb56>
 80069c2:	ee18 1a10 	vmov	r1, s16
 80069c6:	2300      	movs	r3, #0
 80069c8:	220a      	movs	r2, #10
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 fad8 	bl	8006f80 <__multadd>
 80069d0:	ee08 0a10 	vmov	s16, r0
 80069d4:	e7e7      	b.n	80069a6 <_dtoa_r+0xb26>
 80069d6:	9b02      	ldr	r3, [sp, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfc8      	it	gt
 80069dc:	461d      	movgt	r5, r3
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	bfd8      	it	le
 80069e2:	2501      	movle	r5, #1
 80069e4:	441d      	add	r5, r3
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	ee18 1a10 	vmov	r1, s16
 80069ee:	2201      	movs	r2, #1
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fc75 	bl	80072e0 <__lshift>
 80069f6:	4631      	mov	r1, r6
 80069f8:	ee08 0a10 	vmov	s16, r0
 80069fc:	f000 fce0 	bl	80073c0 <__mcmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	dc91      	bgt.n	8006928 <_dtoa_r+0xaa8>
 8006a04:	d102      	bne.n	8006a0c <_dtoa_r+0xb8c>
 8006a06:	f01a 0f01 	tst.w	sl, #1
 8006a0a:	d18d      	bne.n	8006928 <_dtoa_r+0xaa8>
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	461d      	mov	r5, r3
 8006a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a14:	2a30      	cmp	r2, #48	; 0x30
 8006a16:	d0fa      	beq.n	8006a0e <_dtoa_r+0xb8e>
 8006a18:	e6d7      	b.n	80067ca <_dtoa_r+0x94a>
 8006a1a:	9a01      	ldr	r2, [sp, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d184      	bne.n	800692a <_dtoa_r+0xaaa>
 8006a20:	9b00      	ldr	r3, [sp, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	2331      	movs	r3, #49	; 0x31
 8006a28:	7013      	strb	r3, [r2, #0]
 8006a2a:	e6ce      	b.n	80067ca <_dtoa_r+0x94a>
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <_dtoa_r+0xbd4>)
 8006a2e:	f7ff ba95 	b.w	8005f5c <_dtoa_r+0xdc>
 8006a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f47f aa6e 	bne.w	8005f16 <_dtoa_r+0x96>
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <_dtoa_r+0xbd8>)
 8006a3c:	f7ff ba8e 	b.w	8005f5c <_dtoa_r+0xdc>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dcae      	bgt.n	80069a4 <_dtoa_r+0xb24>
 8006a46:	9b06      	ldr	r3, [sp, #24]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	f73f aea8 	bgt.w	800679e <_dtoa_r+0x91e>
 8006a4e:	e7a9      	b.n	80069a4 <_dtoa_r+0xb24>
 8006a50:	080080e7 	.word	0x080080e7
 8006a54:	08008044 	.word	0x08008044
 8006a58:	08008068 	.word	0x08008068

08006a5c <__sflush_r>:
 8006a5c:	898a      	ldrh	r2, [r1, #12]
 8006a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	0710      	lsls	r0, r2, #28
 8006a66:	460c      	mov	r4, r1
 8006a68:	d458      	bmi.n	8006b1c <__sflush_r+0xc0>
 8006a6a:	684b      	ldr	r3, [r1, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dc05      	bgt.n	8006a7c <__sflush_r+0x20>
 8006a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dc02      	bgt.n	8006a7c <__sflush_r+0x20>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d0f9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a88:	682f      	ldr	r7, [r5, #0]
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	d032      	beq.n	8006af4 <__sflush_r+0x98>
 8006a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	075a      	lsls	r2, r3, #29
 8006a94:	d505      	bpl.n	8006aa2 <__sflush_r+0x46>
 8006a96:	6863      	ldr	r3, [r4, #4]
 8006a98:	1ac0      	subs	r0, r0, r3
 8006a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a9c:	b10b      	cbz	r3, 8006aa2 <__sflush_r+0x46>
 8006a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa8:	6a21      	ldr	r1, [r4, #32]
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b0      	blx	r6
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	d106      	bne.n	8006ac2 <__sflush_r+0x66>
 8006ab4:	6829      	ldr	r1, [r5, #0]
 8006ab6:	291d      	cmp	r1, #29
 8006ab8:	d82c      	bhi.n	8006b14 <__sflush_r+0xb8>
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <__sflush_r+0x108>)
 8006abc:	40ca      	lsrs	r2, r1
 8006abe:	07d6      	lsls	r6, r2, #31
 8006ac0:	d528      	bpl.n	8006b14 <__sflush_r+0xb8>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	6062      	str	r2, [r4, #4]
 8006ac6:	04d9      	lsls	r1, r3, #19
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	6022      	str	r2, [r4, #0]
 8006acc:	d504      	bpl.n	8006ad8 <__sflush_r+0x7c>
 8006ace:	1c42      	adds	r2, r0, #1
 8006ad0:	d101      	bne.n	8006ad6 <__sflush_r+0x7a>
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	b903      	cbnz	r3, 8006ad8 <__sflush_r+0x7c>
 8006ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ada:	602f      	str	r7, [r5, #0]
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d0ca      	beq.n	8006a76 <__sflush_r+0x1a>
 8006ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	d002      	beq.n	8006aee <__sflush_r+0x92>
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7fe fa95 	bl	8005018 <_free_r>
 8006aee:	2000      	movs	r0, #0
 8006af0:	6360      	str	r0, [r4, #52]	; 0x34
 8006af2:	e7c1      	b.n	8006a78 <__sflush_r+0x1c>
 8006af4:	6a21      	ldr	r1, [r4, #32]
 8006af6:	2301      	movs	r3, #1
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b0      	blx	r6
 8006afc:	1c41      	adds	r1, r0, #1
 8006afe:	d1c7      	bne.n	8006a90 <__sflush_r+0x34>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c4      	beq.n	8006a90 <__sflush_r+0x34>
 8006b06:	2b1d      	cmp	r3, #29
 8006b08:	d001      	beq.n	8006b0e <__sflush_r+0xb2>
 8006b0a:	2b16      	cmp	r3, #22
 8006b0c:	d101      	bne.n	8006b12 <__sflush_r+0xb6>
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	e7b1      	b.n	8006a76 <__sflush_r+0x1a>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e7ad      	b.n	8006a78 <__sflush_r+0x1c>
 8006b1c:	690f      	ldr	r7, [r1, #16]
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	d0a9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006b22:	0793      	lsls	r3, r2, #30
 8006b24:	680e      	ldr	r6, [r1, #0]
 8006b26:	bf08      	it	eq
 8006b28:	694b      	ldreq	r3, [r1, #20]
 8006b2a:	600f      	str	r7, [r1, #0]
 8006b2c:	bf18      	it	ne
 8006b2e:	2300      	movne	r3, #0
 8006b30:	eba6 0807 	sub.w	r8, r6, r7
 8006b34:	608b      	str	r3, [r1, #8]
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	dd9c      	ble.n	8006a76 <__sflush_r+0x1a>
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b40:	4643      	mov	r3, r8
 8006b42:	463a      	mov	r2, r7
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b0      	blx	r6
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dc06      	bgt.n	8006b5a <__sflush_r+0xfe>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	e78e      	b.n	8006a78 <__sflush_r+0x1c>
 8006b5a:	4407      	add	r7, r0
 8006b5c:	eba8 0800 	sub.w	r8, r8, r0
 8006b60:	e7e9      	b.n	8006b36 <__sflush_r+0xda>
 8006b62:	bf00      	nop
 8006b64:	20400001 	.word	0x20400001

08006b68 <_fflush_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	690b      	ldr	r3, [r1, #16]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	b913      	cbnz	r3, 8006b78 <_fflush_r+0x10>
 8006b72:	2500      	movs	r5, #0
 8006b74:	4628      	mov	r0, r5
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	b118      	cbz	r0, 8006b82 <_fflush_r+0x1a>
 8006b7a:	6983      	ldr	r3, [r0, #24]
 8006b7c:	b90b      	cbnz	r3, 8006b82 <_fflush_r+0x1a>
 8006b7e:	f000 f887 	bl	8006c90 <__sinit>
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <_fflush_r+0x6c>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	d11b      	bne.n	8006bc0 <_fflush_r+0x58>
 8006b88:	686c      	ldr	r4, [r5, #4]
 8006b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0ef      	beq.n	8006b72 <_fflush_r+0xa>
 8006b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b94:	07d0      	lsls	r0, r2, #31
 8006b96:	d404      	bmi.n	8006ba2 <_fflush_r+0x3a>
 8006b98:	0599      	lsls	r1, r3, #22
 8006b9a:	d402      	bmi.n	8006ba2 <_fflush_r+0x3a>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f000 f91a 	bl	8006dd6 <__retarget_lock_acquire_recursive>
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	f7ff ff59 	bl	8006a5c <__sflush_r>
 8006baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bac:	07da      	lsls	r2, r3, #31
 8006bae:	4605      	mov	r5, r0
 8006bb0:	d4e0      	bmi.n	8006b74 <_fflush_r+0xc>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	059b      	lsls	r3, r3, #22
 8006bb6:	d4dd      	bmi.n	8006b74 <_fflush_r+0xc>
 8006bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bba:	f000 f90d 	bl	8006dd8 <__retarget_lock_release_recursive>
 8006bbe:	e7d9      	b.n	8006b74 <_fflush_r+0xc>
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <_fflush_r+0x70>)
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	d101      	bne.n	8006bca <_fflush_r+0x62>
 8006bc6:	68ac      	ldr	r4, [r5, #8]
 8006bc8:	e7df      	b.n	8006b8a <_fflush_r+0x22>
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <_fflush_r+0x74>)
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	bf08      	it	eq
 8006bd0:	68ec      	ldreq	r4, [r5, #12]
 8006bd2:	e7da      	b.n	8006b8a <_fflush_r+0x22>
 8006bd4:	08008118 	.word	0x08008118
 8006bd8:	08008138 	.word	0x08008138
 8006bdc:	080080f8 	.word	0x080080f8

08006be0 <std>:
 8006be0:	2300      	movs	r3, #0
 8006be2:	b510      	push	{r4, lr}
 8006be4:	4604      	mov	r4, r0
 8006be6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bee:	6083      	str	r3, [r0, #8]
 8006bf0:	8181      	strh	r1, [r0, #12]
 8006bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf4:	81c2      	strh	r2, [r0, #14]
 8006bf6:	6183      	str	r3, [r0, #24]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	305c      	adds	r0, #92	; 0x5c
 8006bfe:	f7fe fa03 	bl	8005008 <memset>
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x38>)
 8006c04:	6263      	str	r3, [r4, #36]	; 0x24
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <std+0x3c>)
 8006c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x40>)
 8006c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <std+0x44>)
 8006c10:	6224      	str	r4, [r4, #32]
 8006c12:	6323      	str	r3, [r4, #48]	; 0x30
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	bf00      	nop
 8006c18:	080078a5 	.word	0x080078a5
 8006c1c:	080078c7 	.word	0x080078c7
 8006c20:	080078ff 	.word	0x080078ff
 8006c24:	08007923 	.word	0x08007923

08006c28 <_cleanup_r>:
 8006c28:	4901      	ldr	r1, [pc, #4]	; (8006c30 <_cleanup_r+0x8>)
 8006c2a:	f000 b8af 	b.w	8006d8c <_fwalk_reent>
 8006c2e:	bf00      	nop
 8006c30:	08006b69 	.word	0x08006b69

08006c34 <__sfmoreglue>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	2268      	movs	r2, #104	; 0x68
 8006c38:	1e4d      	subs	r5, r1, #1
 8006c3a:	4355      	muls	r5, r2
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c42:	f7fe fa55 	bl	80050f0 <_malloc_r>
 8006c46:	4604      	mov	r4, r0
 8006c48:	b140      	cbz	r0, 8006c5c <__sfmoreglue+0x28>
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c50:	300c      	adds	r0, #12
 8006c52:	60a0      	str	r0, [r4, #8]
 8006c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c58:	f7fe f9d6 	bl	8005008 <memset>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}

08006c60 <__sfp_lock_acquire>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__sfp_lock_acquire+0x8>)
 8006c62:	f000 b8b8 	b.w	8006dd6 <__retarget_lock_acquire_recursive>
 8006c66:	bf00      	nop
 8006c68:	200009f5 	.word	0x200009f5

08006c6c <__sfp_lock_release>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__sfp_lock_release+0x8>)
 8006c6e:	f000 b8b3 	b.w	8006dd8 <__retarget_lock_release_recursive>
 8006c72:	bf00      	nop
 8006c74:	200009f5 	.word	0x200009f5

08006c78 <__sinit_lock_acquire>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__sinit_lock_acquire+0x8>)
 8006c7a:	f000 b8ac 	b.w	8006dd6 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	200009f6 	.word	0x200009f6

08006c84 <__sinit_lock_release>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sinit_lock_release+0x8>)
 8006c86:	f000 b8a7 	b.w	8006dd8 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	200009f6 	.word	0x200009f6

08006c90 <__sinit>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	f7ff fff0 	bl	8006c78 <__sinit_lock_acquire>
 8006c98:	69a3      	ldr	r3, [r4, #24]
 8006c9a:	b11b      	cbz	r3, 8006ca4 <__sinit+0x14>
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	f7ff bff0 	b.w	8006c84 <__sinit_lock_release>
 8006ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <__sinit+0x68>)
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <__sinit+0x6c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	bf04      	itt	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	61a3      	streq	r3, [r4, #24]
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f820 	bl	8006d00 <__sfp>
 8006cc0:	6060      	str	r0, [r4, #4]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f81c 	bl	8006d00 <__sfp>
 8006cc8:	60a0      	str	r0, [r4, #8]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f818 	bl	8006d00 <__sfp>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60e0      	str	r0, [r4, #12]
 8006cd4:	2104      	movs	r1, #4
 8006cd6:	6860      	ldr	r0, [r4, #4]
 8006cd8:	f7ff ff82 	bl	8006be0 <std>
 8006cdc:	68a0      	ldr	r0, [r4, #8]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2109      	movs	r1, #9
 8006ce2:	f7ff ff7d 	bl	8006be0 <std>
 8006ce6:	68e0      	ldr	r0, [r4, #12]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	2112      	movs	r1, #18
 8006cec:	f7ff ff78 	bl	8006be0 <std>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	61a3      	str	r3, [r4, #24]
 8006cf4:	e7d2      	b.n	8006c9c <__sinit+0xc>
 8006cf6:	bf00      	nop
 8006cf8:	08008030 	.word	0x08008030
 8006cfc:	08006c29 	.word	0x08006c29

08006d00 <__sfp>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	4607      	mov	r7, r0
 8006d04:	f7ff ffac 	bl	8006c60 <__sfp_lock_acquire>
 8006d08:	4b1e      	ldr	r3, [pc, #120]	; (8006d84 <__sfp+0x84>)
 8006d0a:	681e      	ldr	r6, [r3, #0]
 8006d0c:	69b3      	ldr	r3, [r6, #24]
 8006d0e:	b913      	cbnz	r3, 8006d16 <__sfp+0x16>
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff ffbd 	bl	8006c90 <__sinit>
 8006d16:	3648      	adds	r6, #72	; 0x48
 8006d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	d503      	bpl.n	8006d28 <__sfp+0x28>
 8006d20:	6833      	ldr	r3, [r6, #0]
 8006d22:	b30b      	cbz	r3, 8006d68 <__sfp+0x68>
 8006d24:	6836      	ldr	r6, [r6, #0]
 8006d26:	e7f7      	b.n	8006d18 <__sfp+0x18>
 8006d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d2c:	b9d5      	cbnz	r5, 8006d64 <__sfp+0x64>
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <__sfp+0x88>)
 8006d30:	60e3      	str	r3, [r4, #12]
 8006d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d36:	6665      	str	r5, [r4, #100]	; 0x64
 8006d38:	f000 f84c 	bl	8006dd4 <__retarget_lock_init_recursive>
 8006d3c:	f7ff ff96 	bl	8006c6c <__sfp_lock_release>
 8006d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d48:	6025      	str	r5, [r4, #0]
 8006d4a:	61a5      	str	r5, [r4, #24]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d54:	f7fe f958 	bl	8005008 <memset>
 8006d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d60:	4620      	mov	r0, r4
 8006d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d64:	3468      	adds	r4, #104	; 0x68
 8006d66:	e7d9      	b.n	8006d1c <__sfp+0x1c>
 8006d68:	2104      	movs	r1, #4
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7ff ff62 	bl	8006c34 <__sfmoreglue>
 8006d70:	4604      	mov	r4, r0
 8006d72:	6030      	str	r0, [r6, #0]
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d1d5      	bne.n	8006d24 <__sfp+0x24>
 8006d78:	f7ff ff78 	bl	8006c6c <__sfp_lock_release>
 8006d7c:	230c      	movs	r3, #12
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	e7ee      	b.n	8006d60 <__sfp+0x60>
 8006d82:	bf00      	nop
 8006d84:	08008030 	.word	0x08008030
 8006d88:	ffff0001 	.word	0xffff0001

08006d8c <_fwalk_reent>:
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d90:	4606      	mov	r6, r0
 8006d92:	4688      	mov	r8, r1
 8006d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d98:	2700      	movs	r7, #0
 8006d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006da2:	d505      	bpl.n	8006db0 <_fwalk_reent+0x24>
 8006da4:	6824      	ldr	r4, [r4, #0]
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	d1f7      	bne.n	8006d9a <_fwalk_reent+0xe>
 8006daa:	4638      	mov	r0, r7
 8006dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db0:	89ab      	ldrh	r3, [r5, #12]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d907      	bls.n	8006dc6 <_fwalk_reent+0x3a>
 8006db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	d003      	beq.n	8006dc6 <_fwalk_reent+0x3a>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	47c0      	blx	r8
 8006dc4:	4307      	orrs	r7, r0
 8006dc6:	3568      	adds	r5, #104	; 0x68
 8006dc8:	e7e9      	b.n	8006d9e <_fwalk_reent+0x12>
	...

08006dcc <_localeconv_r>:
 8006dcc:	4800      	ldr	r0, [pc, #0]	; (8006dd0 <_localeconv_r+0x4>)
 8006dce:	4770      	bx	lr
 8006dd0:	20000828 	.word	0x20000828

08006dd4 <__retarget_lock_init_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_acquire_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <__retarget_lock_release_recursive>:
 8006dd8:	4770      	bx	lr

08006dda <__swhatbuf_r>:
 8006dda:	b570      	push	{r4, r5, r6, lr}
 8006ddc:	460e      	mov	r6, r1
 8006dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de2:	2900      	cmp	r1, #0
 8006de4:	b096      	sub	sp, #88	; 0x58
 8006de6:	4614      	mov	r4, r2
 8006de8:	461d      	mov	r5, r3
 8006dea:	da08      	bge.n	8006dfe <__swhatbuf_r+0x24>
 8006dec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	602a      	str	r2, [r5, #0]
 8006df4:	061a      	lsls	r2, r3, #24
 8006df6:	d410      	bmi.n	8006e1a <__swhatbuf_r+0x40>
 8006df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dfc:	e00e      	b.n	8006e1c <__swhatbuf_r+0x42>
 8006dfe:	466a      	mov	r2, sp
 8006e00:	f000 fde6 	bl	80079d0 <_fstat_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	dbf1      	blt.n	8006dec <__swhatbuf_r+0x12>
 8006e08:	9a01      	ldr	r2, [sp, #4]
 8006e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e12:	425a      	negs	r2, r3
 8006e14:	415a      	adcs	r2, r3
 8006e16:	602a      	str	r2, [r5, #0]
 8006e18:	e7ee      	b.n	8006df8 <__swhatbuf_r+0x1e>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	b016      	add	sp, #88	; 0x58
 8006e22:	bd70      	pop	{r4, r5, r6, pc}

08006e24 <__smakebuf_r>:
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e28:	079d      	lsls	r5, r3, #30
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	d507      	bpl.n	8006e40 <__smakebuf_r+0x1c>
 8006e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6163      	str	r3, [r4, #20]
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	ab01      	add	r3, sp, #4
 8006e42:	466a      	mov	r2, sp
 8006e44:	f7ff ffc9 	bl	8006dda <__swhatbuf_r>
 8006e48:	9900      	ldr	r1, [sp, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7fe f94f 	bl	80050f0 <_malloc_r>
 8006e52:	b948      	cbnz	r0, 8006e68 <__smakebuf_r+0x44>
 8006e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d4ef      	bmi.n	8006e3c <__smakebuf_r+0x18>
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	e7e3      	b.n	8006e30 <__smakebuf_r+0xc>
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <__smakebuf_r+0x7c>)
 8006e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	6020      	str	r0, [r4, #0]
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6163      	str	r3, [r4, #20]
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	6120      	str	r0, [r4, #16]
 8006e7e:	b15b      	cbz	r3, 8006e98 <__smakebuf_r+0x74>
 8006e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e84:	4630      	mov	r0, r6
 8006e86:	f000 fdb5 	bl	80079f4 <_isatty_r>
 8006e8a:	b128      	cbz	r0, 8006e98 <__smakebuf_r+0x74>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	89a0      	ldrh	r0, [r4, #12]
 8006e9a:	4305      	orrs	r5, r0
 8006e9c:	81a5      	strh	r5, [r4, #12]
 8006e9e:	e7cd      	b.n	8006e3c <__smakebuf_r+0x18>
 8006ea0:	08006c29 	.word	0x08006c29

08006ea4 <__malloc_lock>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	; (8006eac <__malloc_lock+0x8>)
 8006ea6:	f7ff bf96 	b.w	8006dd6 <__retarget_lock_acquire_recursive>
 8006eaa:	bf00      	nop
 8006eac:	200009f4 	.word	0x200009f4

08006eb0 <__malloc_unlock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__malloc_unlock+0x8>)
 8006eb2:	f7ff bf91 	b.w	8006dd8 <__retarget_lock_release_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200009f4 	.word	0x200009f4

08006ebc <_Balloc>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	b976      	cbnz	r6, 8006ee4 <_Balloc+0x28>
 8006ec6:	2010      	movs	r0, #16
 8006ec8:	f7fe f888 	bl	8004fdc <malloc>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6260      	str	r0, [r4, #36]	; 0x24
 8006ed0:	b920      	cbnz	r0, 8006edc <_Balloc+0x20>
 8006ed2:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <_Balloc+0x78>)
 8006ed4:	4818      	ldr	r0, [pc, #96]	; (8006f38 <_Balloc+0x7c>)
 8006ed6:	2166      	movs	r1, #102	; 0x66
 8006ed8:	f000 fd3a 	bl	8007950 <__assert_func>
 8006edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee0:	6006      	str	r6, [r0, #0]
 8006ee2:	60c6      	str	r6, [r0, #12]
 8006ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ee6:	68f3      	ldr	r3, [r6, #12]
 8006ee8:	b183      	cbz	r3, 8006f0c <_Balloc+0x50>
 8006eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ef2:	b9b8      	cbnz	r0, 8006f24 <_Balloc+0x68>
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8006efa:	1d72      	adds	r2, r6, #5
 8006efc:	0092      	lsls	r2, r2, #2
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 fb60 	bl	80075c4 <_calloc_r>
 8006f04:	b160      	cbz	r0, 8006f20 <_Balloc+0x64>
 8006f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f0a:	e00e      	b.n	8006f2a <_Balloc+0x6e>
 8006f0c:	2221      	movs	r2, #33	; 0x21
 8006f0e:	2104      	movs	r1, #4
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fb57 	bl	80075c4 <_calloc_r>
 8006f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f18:	60f0      	str	r0, [r6, #12]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e4      	bne.n	8006eea <_Balloc+0x2e>
 8006f20:	2000      	movs	r0, #0
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	6802      	ldr	r2, [r0, #0]
 8006f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f30:	e7f7      	b.n	8006f22 <_Balloc+0x66>
 8006f32:	bf00      	nop
 8006f34:	08008075 	.word	0x08008075
 8006f38:	08008158 	.word	0x08008158

08006f3c <_Bfree>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f40:	4605      	mov	r5, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	b976      	cbnz	r6, 8006f64 <_Bfree+0x28>
 8006f46:	2010      	movs	r0, #16
 8006f48:	f7fe f848 	bl	8004fdc <malloc>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006f50:	b920      	cbnz	r0, 8006f5c <_Bfree+0x20>
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <_Bfree+0x3c>)
 8006f54:	4809      	ldr	r0, [pc, #36]	; (8006f7c <_Bfree+0x40>)
 8006f56:	218a      	movs	r1, #138	; 0x8a
 8006f58:	f000 fcfa 	bl	8007950 <__assert_func>
 8006f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f60:	6006      	str	r6, [r0, #0]
 8006f62:	60c6      	str	r6, [r0, #12]
 8006f64:	b13c      	cbz	r4, 8006f76 <_Bfree+0x3a>
 8006f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f68:	6862      	ldr	r2, [r4, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f70:	6021      	str	r1, [r4, #0]
 8006f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	08008075 	.word	0x08008075
 8006f7c:	08008158 	.word	0x08008158

08006f80 <__multadd>:
 8006f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f84:	690d      	ldr	r5, [r1, #16]
 8006f86:	4607      	mov	r7, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	461e      	mov	r6, r3
 8006f8c:	f101 0c14 	add.w	ip, r1, #20
 8006f90:	2000      	movs	r0, #0
 8006f92:	f8dc 3000 	ldr.w	r3, [ip]
 8006f96:	b299      	uxth	r1, r3
 8006f98:	fb02 6101 	mla	r1, r2, r1, r6
 8006f9c:	0c1e      	lsrs	r6, r3, #16
 8006f9e:	0c0b      	lsrs	r3, r1, #16
 8006fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8006fa4:	b289      	uxth	r1, r1
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fac:	4285      	cmp	r5, r0
 8006fae:	f84c 1b04 	str.w	r1, [ip], #4
 8006fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fb6:	dcec      	bgt.n	8006f92 <__multadd+0x12>
 8006fb8:	b30e      	cbz	r6, 8006ffe <__multadd+0x7e>
 8006fba:	68a3      	ldr	r3, [r4, #8]
 8006fbc:	42ab      	cmp	r3, r5
 8006fbe:	dc19      	bgt.n	8006ff4 <__multadd+0x74>
 8006fc0:	6861      	ldr	r1, [r4, #4]
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	3101      	adds	r1, #1
 8006fc6:	f7ff ff79 	bl	8006ebc <_Balloc>
 8006fca:	4680      	mov	r8, r0
 8006fcc:	b928      	cbnz	r0, 8006fda <__multadd+0x5a>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <__multadd+0x84>)
 8006fd2:	480d      	ldr	r0, [pc, #52]	; (8007008 <__multadd+0x88>)
 8006fd4:	21b5      	movs	r1, #181	; 0xb5
 8006fd6:	f000 fcbb 	bl	8007950 <__assert_func>
 8006fda:	6922      	ldr	r2, [r4, #16]
 8006fdc:	3202      	adds	r2, #2
 8006fde:	f104 010c 	add.w	r1, r4, #12
 8006fe2:	0092      	lsls	r2, r2, #2
 8006fe4:	300c      	adds	r0, #12
 8006fe6:	f7fe f801 	bl	8004fec <memcpy>
 8006fea:	4621      	mov	r1, r4
 8006fec:	4638      	mov	r0, r7
 8006fee:	f7ff ffa5 	bl	8006f3c <_Bfree>
 8006ff2:	4644      	mov	r4, r8
 8006ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	615e      	str	r6, [r3, #20]
 8006ffc:	6125      	str	r5, [r4, #16]
 8006ffe:	4620      	mov	r0, r4
 8007000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007004:	080080e7 	.word	0x080080e7
 8007008:	08008158 	.word	0x08008158

0800700c <__hi0bits>:
 800700c:	0c03      	lsrs	r3, r0, #16
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	b9d3      	cbnz	r3, 8007048 <__hi0bits+0x3c>
 8007012:	0400      	lsls	r0, r0, #16
 8007014:	2310      	movs	r3, #16
 8007016:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800701a:	bf04      	itt	eq
 800701c:	0200      	lsleq	r0, r0, #8
 800701e:	3308      	addeq	r3, #8
 8007020:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007024:	bf04      	itt	eq
 8007026:	0100      	lsleq	r0, r0, #4
 8007028:	3304      	addeq	r3, #4
 800702a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800702e:	bf04      	itt	eq
 8007030:	0080      	lsleq	r0, r0, #2
 8007032:	3302      	addeq	r3, #2
 8007034:	2800      	cmp	r0, #0
 8007036:	db05      	blt.n	8007044 <__hi0bits+0x38>
 8007038:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800703c:	f103 0301 	add.w	r3, r3, #1
 8007040:	bf08      	it	eq
 8007042:	2320      	moveq	r3, #32
 8007044:	4618      	mov	r0, r3
 8007046:	4770      	bx	lr
 8007048:	2300      	movs	r3, #0
 800704a:	e7e4      	b.n	8007016 <__hi0bits+0xa>

0800704c <__lo0bits>:
 800704c:	6803      	ldr	r3, [r0, #0]
 800704e:	f013 0207 	ands.w	r2, r3, #7
 8007052:	4601      	mov	r1, r0
 8007054:	d00b      	beq.n	800706e <__lo0bits+0x22>
 8007056:	07da      	lsls	r2, r3, #31
 8007058:	d423      	bmi.n	80070a2 <__lo0bits+0x56>
 800705a:	0798      	lsls	r0, r3, #30
 800705c:	bf49      	itett	mi
 800705e:	085b      	lsrmi	r3, r3, #1
 8007060:	089b      	lsrpl	r3, r3, #2
 8007062:	2001      	movmi	r0, #1
 8007064:	600b      	strmi	r3, [r1, #0]
 8007066:	bf5c      	itt	pl
 8007068:	600b      	strpl	r3, [r1, #0]
 800706a:	2002      	movpl	r0, #2
 800706c:	4770      	bx	lr
 800706e:	b298      	uxth	r0, r3
 8007070:	b9a8      	cbnz	r0, 800709e <__lo0bits+0x52>
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	2010      	movs	r0, #16
 8007076:	b2da      	uxtb	r2, r3
 8007078:	b90a      	cbnz	r2, 800707e <__lo0bits+0x32>
 800707a:	3008      	adds	r0, #8
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	071a      	lsls	r2, r3, #28
 8007080:	bf04      	itt	eq
 8007082:	091b      	lsreq	r3, r3, #4
 8007084:	3004      	addeq	r0, #4
 8007086:	079a      	lsls	r2, r3, #30
 8007088:	bf04      	itt	eq
 800708a:	089b      	lsreq	r3, r3, #2
 800708c:	3002      	addeq	r0, #2
 800708e:	07da      	lsls	r2, r3, #31
 8007090:	d403      	bmi.n	800709a <__lo0bits+0x4e>
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	f100 0001 	add.w	r0, r0, #1
 8007098:	d005      	beq.n	80070a6 <__lo0bits+0x5a>
 800709a:	600b      	str	r3, [r1, #0]
 800709c:	4770      	bx	lr
 800709e:	4610      	mov	r0, r2
 80070a0:	e7e9      	b.n	8007076 <__lo0bits+0x2a>
 80070a2:	2000      	movs	r0, #0
 80070a4:	4770      	bx	lr
 80070a6:	2020      	movs	r0, #32
 80070a8:	4770      	bx	lr
	...

080070ac <__i2b>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	460c      	mov	r4, r1
 80070b0:	2101      	movs	r1, #1
 80070b2:	f7ff ff03 	bl	8006ebc <_Balloc>
 80070b6:	4602      	mov	r2, r0
 80070b8:	b928      	cbnz	r0, 80070c6 <__i2b+0x1a>
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <__i2b+0x24>)
 80070bc:	4805      	ldr	r0, [pc, #20]	; (80070d4 <__i2b+0x28>)
 80070be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070c2:	f000 fc45 	bl	8007950 <__assert_func>
 80070c6:	2301      	movs	r3, #1
 80070c8:	6144      	str	r4, [r0, #20]
 80070ca:	6103      	str	r3, [r0, #16]
 80070cc:	bd10      	pop	{r4, pc}
 80070ce:	bf00      	nop
 80070d0:	080080e7 	.word	0x080080e7
 80070d4:	08008158 	.word	0x08008158

080070d8 <__multiply>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4691      	mov	r9, r2
 80070de:	690a      	ldr	r2, [r1, #16]
 80070e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	bfb8      	it	lt
 80070e8:	460b      	movlt	r3, r1
 80070ea:	460c      	mov	r4, r1
 80070ec:	bfbc      	itt	lt
 80070ee:	464c      	movlt	r4, r9
 80070f0:	4699      	movlt	r9, r3
 80070f2:	6927      	ldr	r7, [r4, #16]
 80070f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070f8:	68a3      	ldr	r3, [r4, #8]
 80070fa:	6861      	ldr	r1, [r4, #4]
 80070fc:	eb07 060a 	add.w	r6, r7, sl
 8007100:	42b3      	cmp	r3, r6
 8007102:	b085      	sub	sp, #20
 8007104:	bfb8      	it	lt
 8007106:	3101      	addlt	r1, #1
 8007108:	f7ff fed8 	bl	8006ebc <_Balloc>
 800710c:	b930      	cbnz	r0, 800711c <__multiply+0x44>
 800710e:	4602      	mov	r2, r0
 8007110:	4b44      	ldr	r3, [pc, #272]	; (8007224 <__multiply+0x14c>)
 8007112:	4845      	ldr	r0, [pc, #276]	; (8007228 <__multiply+0x150>)
 8007114:	f240 115d 	movw	r1, #349	; 0x15d
 8007118:	f000 fc1a 	bl	8007950 <__assert_func>
 800711c:	f100 0514 	add.w	r5, r0, #20
 8007120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007124:	462b      	mov	r3, r5
 8007126:	2200      	movs	r2, #0
 8007128:	4543      	cmp	r3, r8
 800712a:	d321      	bcc.n	8007170 <__multiply+0x98>
 800712c:	f104 0314 	add.w	r3, r4, #20
 8007130:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007134:	f109 0314 	add.w	r3, r9, #20
 8007138:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800713c:	9202      	str	r2, [sp, #8]
 800713e:	1b3a      	subs	r2, r7, r4
 8007140:	3a15      	subs	r2, #21
 8007142:	f022 0203 	bic.w	r2, r2, #3
 8007146:	3204      	adds	r2, #4
 8007148:	f104 0115 	add.w	r1, r4, #21
 800714c:	428f      	cmp	r7, r1
 800714e:	bf38      	it	cc
 8007150:	2204      	movcc	r2, #4
 8007152:	9201      	str	r2, [sp, #4]
 8007154:	9a02      	ldr	r2, [sp, #8]
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	429a      	cmp	r2, r3
 800715a:	d80c      	bhi.n	8007176 <__multiply+0x9e>
 800715c:	2e00      	cmp	r6, #0
 800715e:	dd03      	ble.n	8007168 <__multiply+0x90>
 8007160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007164:	2b00      	cmp	r3, #0
 8007166:	d05a      	beq.n	800721e <__multiply+0x146>
 8007168:	6106      	str	r6, [r0, #16]
 800716a:	b005      	add	sp, #20
 800716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	f843 2b04 	str.w	r2, [r3], #4
 8007174:	e7d8      	b.n	8007128 <__multiply+0x50>
 8007176:	f8b3 a000 	ldrh.w	sl, [r3]
 800717a:	f1ba 0f00 	cmp.w	sl, #0
 800717e:	d024      	beq.n	80071ca <__multiply+0xf2>
 8007180:	f104 0e14 	add.w	lr, r4, #20
 8007184:	46a9      	mov	r9, r5
 8007186:	f04f 0c00 	mov.w	ip, #0
 800718a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800718e:	f8d9 1000 	ldr.w	r1, [r9]
 8007192:	fa1f fb82 	uxth.w	fp, r2
 8007196:	b289      	uxth	r1, r1
 8007198:	fb0a 110b 	mla	r1, sl, fp, r1
 800719c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071a0:	f8d9 2000 	ldr.w	r2, [r9]
 80071a4:	4461      	add	r1, ip
 80071a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80071ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071b2:	b289      	uxth	r1, r1
 80071b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071b8:	4577      	cmp	r7, lr
 80071ba:	f849 1b04 	str.w	r1, [r9], #4
 80071be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071c2:	d8e2      	bhi.n	800718a <__multiply+0xb2>
 80071c4:	9a01      	ldr	r2, [sp, #4]
 80071c6:	f845 c002 	str.w	ip, [r5, r2]
 80071ca:	9a03      	ldr	r2, [sp, #12]
 80071cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071d0:	3304      	adds	r3, #4
 80071d2:	f1b9 0f00 	cmp.w	r9, #0
 80071d6:	d020      	beq.n	800721a <__multiply+0x142>
 80071d8:	6829      	ldr	r1, [r5, #0]
 80071da:	f104 0c14 	add.w	ip, r4, #20
 80071de:	46ae      	mov	lr, r5
 80071e0:	f04f 0a00 	mov.w	sl, #0
 80071e4:	f8bc b000 	ldrh.w	fp, [ip]
 80071e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071ec:	fb09 220b 	mla	r2, r9, fp, r2
 80071f0:	4492      	add	sl, r2
 80071f2:	b289      	uxth	r1, r1
 80071f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80071f8:	f84e 1b04 	str.w	r1, [lr], #4
 80071fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007200:	f8be 1000 	ldrh.w	r1, [lr]
 8007204:	0c12      	lsrs	r2, r2, #16
 8007206:	fb09 1102 	mla	r1, r9, r2, r1
 800720a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800720e:	4567      	cmp	r7, ip
 8007210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007214:	d8e6      	bhi.n	80071e4 <__multiply+0x10c>
 8007216:	9a01      	ldr	r2, [sp, #4]
 8007218:	50a9      	str	r1, [r5, r2]
 800721a:	3504      	adds	r5, #4
 800721c:	e79a      	b.n	8007154 <__multiply+0x7c>
 800721e:	3e01      	subs	r6, #1
 8007220:	e79c      	b.n	800715c <__multiply+0x84>
 8007222:	bf00      	nop
 8007224:	080080e7 	.word	0x080080e7
 8007228:	08008158 	.word	0x08008158

0800722c <__pow5mult>:
 800722c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007230:	4615      	mov	r5, r2
 8007232:	f012 0203 	ands.w	r2, r2, #3
 8007236:	4606      	mov	r6, r0
 8007238:	460f      	mov	r7, r1
 800723a:	d007      	beq.n	800724c <__pow5mult+0x20>
 800723c:	4c25      	ldr	r4, [pc, #148]	; (80072d4 <__pow5mult+0xa8>)
 800723e:	3a01      	subs	r2, #1
 8007240:	2300      	movs	r3, #0
 8007242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007246:	f7ff fe9b 	bl	8006f80 <__multadd>
 800724a:	4607      	mov	r7, r0
 800724c:	10ad      	asrs	r5, r5, #2
 800724e:	d03d      	beq.n	80072cc <__pow5mult+0xa0>
 8007250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007252:	b97c      	cbnz	r4, 8007274 <__pow5mult+0x48>
 8007254:	2010      	movs	r0, #16
 8007256:	f7fd fec1 	bl	8004fdc <malloc>
 800725a:	4602      	mov	r2, r0
 800725c:	6270      	str	r0, [r6, #36]	; 0x24
 800725e:	b928      	cbnz	r0, 800726c <__pow5mult+0x40>
 8007260:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <__pow5mult+0xac>)
 8007262:	481e      	ldr	r0, [pc, #120]	; (80072dc <__pow5mult+0xb0>)
 8007264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007268:	f000 fb72 	bl	8007950 <__assert_func>
 800726c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007270:	6004      	str	r4, [r0, #0]
 8007272:	60c4      	str	r4, [r0, #12]
 8007274:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800727c:	b94c      	cbnz	r4, 8007292 <__pow5mult+0x66>
 800727e:	f240 2171 	movw	r1, #625	; 0x271
 8007282:	4630      	mov	r0, r6
 8007284:	f7ff ff12 	bl	80070ac <__i2b>
 8007288:	2300      	movs	r3, #0
 800728a:	f8c8 0008 	str.w	r0, [r8, #8]
 800728e:	4604      	mov	r4, r0
 8007290:	6003      	str	r3, [r0, #0]
 8007292:	f04f 0900 	mov.w	r9, #0
 8007296:	07eb      	lsls	r3, r5, #31
 8007298:	d50a      	bpl.n	80072b0 <__pow5mult+0x84>
 800729a:	4639      	mov	r1, r7
 800729c:	4622      	mov	r2, r4
 800729e:	4630      	mov	r0, r6
 80072a0:	f7ff ff1a 	bl	80070d8 <__multiply>
 80072a4:	4639      	mov	r1, r7
 80072a6:	4680      	mov	r8, r0
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7ff fe47 	bl	8006f3c <_Bfree>
 80072ae:	4647      	mov	r7, r8
 80072b0:	106d      	asrs	r5, r5, #1
 80072b2:	d00b      	beq.n	80072cc <__pow5mult+0xa0>
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	b938      	cbnz	r0, 80072c8 <__pow5mult+0x9c>
 80072b8:	4622      	mov	r2, r4
 80072ba:	4621      	mov	r1, r4
 80072bc:	4630      	mov	r0, r6
 80072be:	f7ff ff0b 	bl	80070d8 <__multiply>
 80072c2:	6020      	str	r0, [r4, #0]
 80072c4:	f8c0 9000 	str.w	r9, [r0]
 80072c8:	4604      	mov	r4, r0
 80072ca:	e7e4      	b.n	8007296 <__pow5mult+0x6a>
 80072cc:	4638      	mov	r0, r7
 80072ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d2:	bf00      	nop
 80072d4:	080082a8 	.word	0x080082a8
 80072d8:	08008075 	.word	0x08008075
 80072dc:	08008158 	.word	0x08008158

080072e0 <__lshift>:
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	460c      	mov	r4, r1
 80072e6:	6849      	ldr	r1, [r1, #4]
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	4607      	mov	r7, r0
 80072f2:	4691      	mov	r9, r2
 80072f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072f8:	f108 0601 	add.w	r6, r8, #1
 80072fc:	42b3      	cmp	r3, r6
 80072fe:	db0b      	blt.n	8007318 <__lshift+0x38>
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff fddb 	bl	8006ebc <_Balloc>
 8007306:	4605      	mov	r5, r0
 8007308:	b948      	cbnz	r0, 800731e <__lshift+0x3e>
 800730a:	4602      	mov	r2, r0
 800730c:	4b2a      	ldr	r3, [pc, #168]	; (80073b8 <__lshift+0xd8>)
 800730e:	482b      	ldr	r0, [pc, #172]	; (80073bc <__lshift+0xdc>)
 8007310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007314:	f000 fb1c 	bl	8007950 <__assert_func>
 8007318:	3101      	adds	r1, #1
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	e7ee      	b.n	80072fc <__lshift+0x1c>
 800731e:	2300      	movs	r3, #0
 8007320:	f100 0114 	add.w	r1, r0, #20
 8007324:	f100 0210 	add.w	r2, r0, #16
 8007328:	4618      	mov	r0, r3
 800732a:	4553      	cmp	r3, sl
 800732c:	db37      	blt.n	800739e <__lshift+0xbe>
 800732e:	6920      	ldr	r0, [r4, #16]
 8007330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007334:	f104 0314 	add.w	r3, r4, #20
 8007338:	f019 091f 	ands.w	r9, r9, #31
 800733c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007340:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007344:	d02f      	beq.n	80073a6 <__lshift+0xc6>
 8007346:	f1c9 0e20 	rsb	lr, r9, #32
 800734a:	468a      	mov	sl, r1
 800734c:	f04f 0c00 	mov.w	ip, #0
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	fa02 f209 	lsl.w	r2, r2, r9
 8007356:	ea42 020c 	orr.w	r2, r2, ip
 800735a:	f84a 2b04 	str.w	r2, [sl], #4
 800735e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007362:	4298      	cmp	r0, r3
 8007364:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007368:	d8f2      	bhi.n	8007350 <__lshift+0x70>
 800736a:	1b03      	subs	r3, r0, r4
 800736c:	3b15      	subs	r3, #21
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	3304      	adds	r3, #4
 8007374:	f104 0215 	add.w	r2, r4, #21
 8007378:	4290      	cmp	r0, r2
 800737a:	bf38      	it	cc
 800737c:	2304      	movcc	r3, #4
 800737e:	f841 c003 	str.w	ip, [r1, r3]
 8007382:	f1bc 0f00 	cmp.w	ip, #0
 8007386:	d001      	beq.n	800738c <__lshift+0xac>
 8007388:	f108 0602 	add.w	r6, r8, #2
 800738c:	3e01      	subs	r6, #1
 800738e:	4638      	mov	r0, r7
 8007390:	612e      	str	r6, [r5, #16]
 8007392:	4621      	mov	r1, r4
 8007394:	f7ff fdd2 	bl	8006f3c <_Bfree>
 8007398:	4628      	mov	r0, r5
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	f842 0f04 	str.w	r0, [r2, #4]!
 80073a2:	3301      	adds	r3, #1
 80073a4:	e7c1      	b.n	800732a <__lshift+0x4a>
 80073a6:	3904      	subs	r1, #4
 80073a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80073b0:	4298      	cmp	r0, r3
 80073b2:	d8f9      	bhi.n	80073a8 <__lshift+0xc8>
 80073b4:	e7ea      	b.n	800738c <__lshift+0xac>
 80073b6:	bf00      	nop
 80073b8:	080080e7 	.word	0x080080e7
 80073bc:	08008158 	.word	0x08008158

080073c0 <__mcmp>:
 80073c0:	b530      	push	{r4, r5, lr}
 80073c2:	6902      	ldr	r2, [r0, #16]
 80073c4:	690c      	ldr	r4, [r1, #16]
 80073c6:	1b12      	subs	r2, r2, r4
 80073c8:	d10e      	bne.n	80073e8 <__mcmp+0x28>
 80073ca:	f100 0314 	add.w	r3, r0, #20
 80073ce:	3114      	adds	r1, #20
 80073d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073e0:	42a5      	cmp	r5, r4
 80073e2:	d003      	beq.n	80073ec <__mcmp+0x2c>
 80073e4:	d305      	bcc.n	80073f2 <__mcmp+0x32>
 80073e6:	2201      	movs	r2, #1
 80073e8:	4610      	mov	r0, r2
 80073ea:	bd30      	pop	{r4, r5, pc}
 80073ec:	4283      	cmp	r3, r0
 80073ee:	d3f3      	bcc.n	80073d8 <__mcmp+0x18>
 80073f0:	e7fa      	b.n	80073e8 <__mcmp+0x28>
 80073f2:	f04f 32ff 	mov.w	r2, #4294967295
 80073f6:	e7f7      	b.n	80073e8 <__mcmp+0x28>

080073f8 <__mdiff>:
 80073f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	460c      	mov	r4, r1
 80073fe:	4606      	mov	r6, r0
 8007400:	4611      	mov	r1, r2
 8007402:	4620      	mov	r0, r4
 8007404:	4690      	mov	r8, r2
 8007406:	f7ff ffdb 	bl	80073c0 <__mcmp>
 800740a:	1e05      	subs	r5, r0, #0
 800740c:	d110      	bne.n	8007430 <__mdiff+0x38>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff fd53 	bl	8006ebc <_Balloc>
 8007416:	b930      	cbnz	r0, 8007426 <__mdiff+0x2e>
 8007418:	4b3a      	ldr	r3, [pc, #232]	; (8007504 <__mdiff+0x10c>)
 800741a:	4602      	mov	r2, r0
 800741c:	f240 2132 	movw	r1, #562	; 0x232
 8007420:	4839      	ldr	r0, [pc, #228]	; (8007508 <__mdiff+0x110>)
 8007422:	f000 fa95 	bl	8007950 <__assert_func>
 8007426:	2301      	movs	r3, #1
 8007428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800742c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007430:	bfa4      	itt	ge
 8007432:	4643      	movge	r3, r8
 8007434:	46a0      	movge	r8, r4
 8007436:	4630      	mov	r0, r6
 8007438:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800743c:	bfa6      	itte	ge
 800743e:	461c      	movge	r4, r3
 8007440:	2500      	movge	r5, #0
 8007442:	2501      	movlt	r5, #1
 8007444:	f7ff fd3a 	bl	8006ebc <_Balloc>
 8007448:	b920      	cbnz	r0, 8007454 <__mdiff+0x5c>
 800744a:	4b2e      	ldr	r3, [pc, #184]	; (8007504 <__mdiff+0x10c>)
 800744c:	4602      	mov	r2, r0
 800744e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007452:	e7e5      	b.n	8007420 <__mdiff+0x28>
 8007454:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007458:	6926      	ldr	r6, [r4, #16]
 800745a:	60c5      	str	r5, [r0, #12]
 800745c:	f104 0914 	add.w	r9, r4, #20
 8007460:	f108 0514 	add.w	r5, r8, #20
 8007464:	f100 0e14 	add.w	lr, r0, #20
 8007468:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800746c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007470:	f108 0210 	add.w	r2, r8, #16
 8007474:	46f2      	mov	sl, lr
 8007476:	2100      	movs	r1, #0
 8007478:	f859 3b04 	ldr.w	r3, [r9], #4
 800747c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007480:	fa1f f883 	uxth.w	r8, r3
 8007484:	fa11 f18b 	uxtah	r1, r1, fp
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	eba1 0808 	sub.w	r8, r1, r8
 800748e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007492:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007496:	fa1f f888 	uxth.w	r8, r8
 800749a:	1419      	asrs	r1, r3, #16
 800749c:	454e      	cmp	r6, r9
 800749e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074a2:	f84a 3b04 	str.w	r3, [sl], #4
 80074a6:	d8e7      	bhi.n	8007478 <__mdiff+0x80>
 80074a8:	1b33      	subs	r3, r6, r4
 80074aa:	3b15      	subs	r3, #21
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	3304      	adds	r3, #4
 80074b2:	3415      	adds	r4, #21
 80074b4:	42a6      	cmp	r6, r4
 80074b6:	bf38      	it	cc
 80074b8:	2304      	movcc	r3, #4
 80074ba:	441d      	add	r5, r3
 80074bc:	4473      	add	r3, lr
 80074be:	469e      	mov	lr, r3
 80074c0:	462e      	mov	r6, r5
 80074c2:	4566      	cmp	r6, ip
 80074c4:	d30e      	bcc.n	80074e4 <__mdiff+0xec>
 80074c6:	f10c 0203 	add.w	r2, ip, #3
 80074ca:	1b52      	subs	r2, r2, r5
 80074cc:	f022 0203 	bic.w	r2, r2, #3
 80074d0:	3d03      	subs	r5, #3
 80074d2:	45ac      	cmp	ip, r5
 80074d4:	bf38      	it	cc
 80074d6:	2200      	movcc	r2, #0
 80074d8:	441a      	add	r2, r3
 80074da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074de:	b17b      	cbz	r3, 8007500 <__mdiff+0x108>
 80074e0:	6107      	str	r7, [r0, #16]
 80074e2:	e7a3      	b.n	800742c <__mdiff+0x34>
 80074e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80074e8:	fa11 f288 	uxtah	r2, r1, r8
 80074ec:	1414      	asrs	r4, r2, #16
 80074ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074f2:	b292      	uxth	r2, r2
 80074f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80074f8:	f84e 2b04 	str.w	r2, [lr], #4
 80074fc:	1421      	asrs	r1, r4, #16
 80074fe:	e7e0      	b.n	80074c2 <__mdiff+0xca>
 8007500:	3f01      	subs	r7, #1
 8007502:	e7ea      	b.n	80074da <__mdiff+0xe2>
 8007504:	080080e7 	.word	0x080080e7
 8007508:	08008158 	.word	0x08008158

0800750c <__d2b>:
 800750c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007510:	4689      	mov	r9, r1
 8007512:	2101      	movs	r1, #1
 8007514:	ec57 6b10 	vmov	r6, r7, d0
 8007518:	4690      	mov	r8, r2
 800751a:	f7ff fccf 	bl	8006ebc <_Balloc>
 800751e:	4604      	mov	r4, r0
 8007520:	b930      	cbnz	r0, 8007530 <__d2b+0x24>
 8007522:	4602      	mov	r2, r0
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <__d2b+0xb0>)
 8007526:	4826      	ldr	r0, [pc, #152]	; (80075c0 <__d2b+0xb4>)
 8007528:	f240 310a 	movw	r1, #778	; 0x30a
 800752c:	f000 fa10 	bl	8007950 <__assert_func>
 8007530:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007534:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007538:	bb35      	cbnz	r5, 8007588 <__d2b+0x7c>
 800753a:	2e00      	cmp	r6, #0
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	d028      	beq.n	8007592 <__d2b+0x86>
 8007540:	4668      	mov	r0, sp
 8007542:	9600      	str	r6, [sp, #0]
 8007544:	f7ff fd82 	bl	800704c <__lo0bits>
 8007548:	9900      	ldr	r1, [sp, #0]
 800754a:	b300      	cbz	r0, 800758e <__d2b+0x82>
 800754c:	9a01      	ldr	r2, [sp, #4]
 800754e:	f1c0 0320 	rsb	r3, r0, #32
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	430b      	orrs	r3, r1
 8007558:	40c2      	lsrs	r2, r0
 800755a:	6163      	str	r3, [r4, #20]
 800755c:	9201      	str	r2, [sp, #4]
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	61a3      	str	r3, [r4, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2202      	movne	r2, #2
 8007568:	2201      	moveq	r2, #1
 800756a:	6122      	str	r2, [r4, #16]
 800756c:	b1d5      	cbz	r5, 80075a4 <__d2b+0x98>
 800756e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007572:	4405      	add	r5, r0
 8007574:	f8c9 5000 	str.w	r5, [r9]
 8007578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800757c:	f8c8 0000 	str.w	r0, [r8]
 8007580:	4620      	mov	r0, r4
 8007582:	b003      	add	sp, #12
 8007584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800758c:	e7d5      	b.n	800753a <__d2b+0x2e>
 800758e:	6161      	str	r1, [r4, #20]
 8007590:	e7e5      	b.n	800755e <__d2b+0x52>
 8007592:	a801      	add	r0, sp, #4
 8007594:	f7ff fd5a 	bl	800704c <__lo0bits>
 8007598:	9b01      	ldr	r3, [sp, #4]
 800759a:	6163      	str	r3, [r4, #20]
 800759c:	2201      	movs	r2, #1
 800759e:	6122      	str	r2, [r4, #16]
 80075a0:	3020      	adds	r0, #32
 80075a2:	e7e3      	b.n	800756c <__d2b+0x60>
 80075a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075ac:	f8c9 0000 	str.w	r0, [r9]
 80075b0:	6918      	ldr	r0, [r3, #16]
 80075b2:	f7ff fd2b 	bl	800700c <__hi0bits>
 80075b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075ba:	e7df      	b.n	800757c <__d2b+0x70>
 80075bc:	080080e7 	.word	0x080080e7
 80075c0:	08008158 	.word	0x08008158

080075c4 <_calloc_r>:
 80075c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075c6:	fba1 2402 	umull	r2, r4, r1, r2
 80075ca:	b94c      	cbnz	r4, 80075e0 <_calloc_r+0x1c>
 80075cc:	4611      	mov	r1, r2
 80075ce:	9201      	str	r2, [sp, #4]
 80075d0:	f7fd fd8e 	bl	80050f0 <_malloc_r>
 80075d4:	9a01      	ldr	r2, [sp, #4]
 80075d6:	4605      	mov	r5, r0
 80075d8:	b930      	cbnz	r0, 80075e8 <_calloc_r+0x24>
 80075da:	4628      	mov	r0, r5
 80075dc:	b003      	add	sp, #12
 80075de:	bd30      	pop	{r4, r5, pc}
 80075e0:	220c      	movs	r2, #12
 80075e2:	6002      	str	r2, [r0, #0]
 80075e4:	2500      	movs	r5, #0
 80075e6:	e7f8      	b.n	80075da <_calloc_r+0x16>
 80075e8:	4621      	mov	r1, r4
 80075ea:	f7fd fd0d 	bl	8005008 <memset>
 80075ee:	e7f4      	b.n	80075da <_calloc_r+0x16>

080075f0 <__sfputc_r>:
 80075f0:	6893      	ldr	r3, [r2, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	b410      	push	{r4}
 80075f8:	6093      	str	r3, [r2, #8]
 80075fa:	da08      	bge.n	800760e <__sfputc_r+0x1e>
 80075fc:	6994      	ldr	r4, [r2, #24]
 80075fe:	42a3      	cmp	r3, r4
 8007600:	db01      	blt.n	8007606 <__sfputc_r+0x16>
 8007602:	290a      	cmp	r1, #10
 8007604:	d103      	bne.n	800760e <__sfputc_r+0x1e>
 8007606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800760a:	f7fe baed 	b.w	8005be8 <__swbuf_r>
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	1c58      	adds	r0, r3, #1
 8007612:	6010      	str	r0, [r2, #0]
 8007614:	7019      	strb	r1, [r3, #0]
 8007616:	4608      	mov	r0, r1
 8007618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761c:	4770      	bx	lr

0800761e <__sfputs_r>:
 800761e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007620:	4606      	mov	r6, r0
 8007622:	460f      	mov	r7, r1
 8007624:	4614      	mov	r4, r2
 8007626:	18d5      	adds	r5, r2, r3
 8007628:	42ac      	cmp	r4, r5
 800762a:	d101      	bne.n	8007630 <__sfputs_r+0x12>
 800762c:	2000      	movs	r0, #0
 800762e:	e007      	b.n	8007640 <__sfputs_r+0x22>
 8007630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007634:	463a      	mov	r2, r7
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ffda 	bl	80075f0 <__sfputc_r>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d1f3      	bne.n	8007628 <__sfputs_r+0xa>
 8007640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007644 <_vfiprintf_r>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	460d      	mov	r5, r1
 800764a:	b09d      	sub	sp, #116	; 0x74
 800764c:	4614      	mov	r4, r2
 800764e:	4698      	mov	r8, r3
 8007650:	4606      	mov	r6, r0
 8007652:	b118      	cbz	r0, 800765c <_vfiprintf_r+0x18>
 8007654:	6983      	ldr	r3, [r0, #24]
 8007656:	b90b      	cbnz	r3, 800765c <_vfiprintf_r+0x18>
 8007658:	f7ff fb1a 	bl	8006c90 <__sinit>
 800765c:	4b89      	ldr	r3, [pc, #548]	; (8007884 <_vfiprintf_r+0x240>)
 800765e:	429d      	cmp	r5, r3
 8007660:	d11b      	bne.n	800769a <_vfiprintf_r+0x56>
 8007662:	6875      	ldr	r5, [r6, #4]
 8007664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007666:	07d9      	lsls	r1, r3, #31
 8007668:	d405      	bmi.n	8007676 <_vfiprintf_r+0x32>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	059a      	lsls	r2, r3, #22
 800766e:	d402      	bmi.n	8007676 <_vfiprintf_r+0x32>
 8007670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007672:	f7ff fbb0 	bl	8006dd6 <__retarget_lock_acquire_recursive>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	071b      	lsls	r3, r3, #28
 800767a:	d501      	bpl.n	8007680 <_vfiprintf_r+0x3c>
 800767c:	692b      	ldr	r3, [r5, #16]
 800767e:	b9eb      	cbnz	r3, 80076bc <_vfiprintf_r+0x78>
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f7fe fb02 	bl	8005c8c <__swsetup_r>
 8007688:	b1c0      	cbz	r0, 80076bc <_vfiprintf_r+0x78>
 800768a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800768c:	07dc      	lsls	r4, r3, #31
 800768e:	d50e      	bpl.n	80076ae <_vfiprintf_r+0x6a>
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	b01d      	add	sp, #116	; 0x74
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	4b7b      	ldr	r3, [pc, #492]	; (8007888 <_vfiprintf_r+0x244>)
 800769c:	429d      	cmp	r5, r3
 800769e:	d101      	bne.n	80076a4 <_vfiprintf_r+0x60>
 80076a0:	68b5      	ldr	r5, [r6, #8]
 80076a2:	e7df      	b.n	8007664 <_vfiprintf_r+0x20>
 80076a4:	4b79      	ldr	r3, [pc, #484]	; (800788c <_vfiprintf_r+0x248>)
 80076a6:	429d      	cmp	r5, r3
 80076a8:	bf08      	it	eq
 80076aa:	68f5      	ldreq	r5, [r6, #12]
 80076ac:	e7da      	b.n	8007664 <_vfiprintf_r+0x20>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	0598      	lsls	r0, r3, #22
 80076b2:	d4ed      	bmi.n	8007690 <_vfiprintf_r+0x4c>
 80076b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076b6:	f7ff fb8f 	bl	8006dd8 <__retarget_lock_release_recursive>
 80076ba:	e7e9      	b.n	8007690 <_vfiprintf_r+0x4c>
 80076bc:	2300      	movs	r3, #0
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	2320      	movs	r3, #32
 80076c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ca:	2330      	movs	r3, #48	; 0x30
 80076cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007890 <_vfiprintf_r+0x24c>
 80076d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076d4:	f04f 0901 	mov.w	r9, #1
 80076d8:	4623      	mov	r3, r4
 80076da:	469a      	mov	sl, r3
 80076dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e0:	b10a      	cbz	r2, 80076e6 <_vfiprintf_r+0xa2>
 80076e2:	2a25      	cmp	r2, #37	; 0x25
 80076e4:	d1f9      	bne.n	80076da <_vfiprintf_r+0x96>
 80076e6:	ebba 0b04 	subs.w	fp, sl, r4
 80076ea:	d00b      	beq.n	8007704 <_vfiprintf_r+0xc0>
 80076ec:	465b      	mov	r3, fp
 80076ee:	4622      	mov	r2, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ff93 	bl	800761e <__sfputs_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	f000 80aa 	beq.w	8007852 <_vfiprintf_r+0x20e>
 80076fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007700:	445a      	add	r2, fp
 8007702:	9209      	str	r2, [sp, #36]	; 0x24
 8007704:	f89a 3000 	ldrb.w	r3, [sl]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a2 	beq.w	8007852 <_vfiprintf_r+0x20e>
 800770e:	2300      	movs	r3, #0
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007718:	f10a 0a01 	add.w	sl, sl, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	9307      	str	r3, [sp, #28]
 8007720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007724:	931a      	str	r3, [sp, #104]	; 0x68
 8007726:	4654      	mov	r4, sl
 8007728:	2205      	movs	r2, #5
 800772a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772e:	4858      	ldr	r0, [pc, #352]	; (8007890 <_vfiprintf_r+0x24c>)
 8007730:	f7f8 fd86 	bl	8000240 <memchr>
 8007734:	9a04      	ldr	r2, [sp, #16]
 8007736:	b9d8      	cbnz	r0, 8007770 <_vfiprintf_r+0x12c>
 8007738:	06d1      	lsls	r1, r2, #27
 800773a:	bf44      	itt	mi
 800773c:	2320      	movmi	r3, #32
 800773e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007742:	0713      	lsls	r3, r2, #28
 8007744:	bf44      	itt	mi
 8007746:	232b      	movmi	r3, #43	; 0x2b
 8007748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800774c:	f89a 3000 	ldrb.w	r3, [sl]
 8007750:	2b2a      	cmp	r3, #42	; 0x2a
 8007752:	d015      	beq.n	8007780 <_vfiprintf_r+0x13c>
 8007754:	9a07      	ldr	r2, [sp, #28]
 8007756:	4654      	mov	r4, sl
 8007758:	2000      	movs	r0, #0
 800775a:	f04f 0c0a 	mov.w	ip, #10
 800775e:	4621      	mov	r1, r4
 8007760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007764:	3b30      	subs	r3, #48	; 0x30
 8007766:	2b09      	cmp	r3, #9
 8007768:	d94e      	bls.n	8007808 <_vfiprintf_r+0x1c4>
 800776a:	b1b0      	cbz	r0, 800779a <_vfiprintf_r+0x156>
 800776c:	9207      	str	r2, [sp, #28]
 800776e:	e014      	b.n	800779a <_vfiprintf_r+0x156>
 8007770:	eba0 0308 	sub.w	r3, r0, r8
 8007774:	fa09 f303 	lsl.w	r3, r9, r3
 8007778:	4313      	orrs	r3, r2
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	46a2      	mov	sl, r4
 800777e:	e7d2      	b.n	8007726 <_vfiprintf_r+0xe2>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	1d19      	adds	r1, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	9103      	str	r1, [sp, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	bfbb      	ittet	lt
 800778c:	425b      	neglt	r3, r3
 800778e:	f042 0202 	orrlt.w	r2, r2, #2
 8007792:	9307      	strge	r3, [sp, #28]
 8007794:	9307      	strlt	r3, [sp, #28]
 8007796:	bfb8      	it	lt
 8007798:	9204      	strlt	r2, [sp, #16]
 800779a:	7823      	ldrb	r3, [r4, #0]
 800779c:	2b2e      	cmp	r3, #46	; 0x2e
 800779e:	d10c      	bne.n	80077ba <_vfiprintf_r+0x176>
 80077a0:	7863      	ldrb	r3, [r4, #1]
 80077a2:	2b2a      	cmp	r3, #42	; 0x2a
 80077a4:	d135      	bne.n	8007812 <_vfiprintf_r+0x1ce>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	9203      	str	r2, [sp, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077b6:	3402      	adds	r4, #2
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078a0 <_vfiprintf_r+0x25c>
 80077be:	7821      	ldrb	r1, [r4, #0]
 80077c0:	2203      	movs	r2, #3
 80077c2:	4650      	mov	r0, sl
 80077c4:	f7f8 fd3c 	bl	8000240 <memchr>
 80077c8:	b140      	cbz	r0, 80077dc <_vfiprintf_r+0x198>
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	eba0 000a 	sub.w	r0, r0, sl
 80077d0:	fa03 f000 	lsl.w	r0, r3, r0
 80077d4:	9b04      	ldr	r3, [sp, #16]
 80077d6:	4303      	orrs	r3, r0
 80077d8:	3401      	adds	r4, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	482c      	ldr	r0, [pc, #176]	; (8007894 <_vfiprintf_r+0x250>)
 80077e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077e6:	2206      	movs	r2, #6
 80077e8:	f7f8 fd2a 	bl	8000240 <memchr>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d03f      	beq.n	8007870 <_vfiprintf_r+0x22c>
 80077f0:	4b29      	ldr	r3, [pc, #164]	; (8007898 <_vfiprintf_r+0x254>)
 80077f2:	bb1b      	cbnz	r3, 800783c <_vfiprintf_r+0x1f8>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	3307      	adds	r3, #7
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	3308      	adds	r3, #8
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007802:	443b      	add	r3, r7
 8007804:	9309      	str	r3, [sp, #36]	; 0x24
 8007806:	e767      	b.n	80076d8 <_vfiprintf_r+0x94>
 8007808:	fb0c 3202 	mla	r2, ip, r2, r3
 800780c:	460c      	mov	r4, r1
 800780e:	2001      	movs	r0, #1
 8007810:	e7a5      	b.n	800775e <_vfiprintf_r+0x11a>
 8007812:	2300      	movs	r3, #0
 8007814:	3401      	adds	r4, #1
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	4619      	mov	r1, r3
 800781a:	f04f 0c0a 	mov.w	ip, #10
 800781e:	4620      	mov	r0, r4
 8007820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007824:	3a30      	subs	r2, #48	; 0x30
 8007826:	2a09      	cmp	r2, #9
 8007828:	d903      	bls.n	8007832 <_vfiprintf_r+0x1ee>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0c5      	beq.n	80077ba <_vfiprintf_r+0x176>
 800782e:	9105      	str	r1, [sp, #20]
 8007830:	e7c3      	b.n	80077ba <_vfiprintf_r+0x176>
 8007832:	fb0c 2101 	mla	r1, ip, r1, r2
 8007836:	4604      	mov	r4, r0
 8007838:	2301      	movs	r3, #1
 800783a:	e7f0      	b.n	800781e <_vfiprintf_r+0x1da>
 800783c:	ab03      	add	r3, sp, #12
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	462a      	mov	r2, r5
 8007842:	4b16      	ldr	r3, [pc, #88]	; (800789c <_vfiprintf_r+0x258>)
 8007844:	a904      	add	r1, sp, #16
 8007846:	4630      	mov	r0, r6
 8007848:	f7fd fd66 	bl	8005318 <_printf_float>
 800784c:	4607      	mov	r7, r0
 800784e:	1c78      	adds	r0, r7, #1
 8007850:	d1d6      	bne.n	8007800 <_vfiprintf_r+0x1bc>
 8007852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007854:	07d9      	lsls	r1, r3, #31
 8007856:	d405      	bmi.n	8007864 <_vfiprintf_r+0x220>
 8007858:	89ab      	ldrh	r3, [r5, #12]
 800785a:	059a      	lsls	r2, r3, #22
 800785c:	d402      	bmi.n	8007864 <_vfiprintf_r+0x220>
 800785e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007860:	f7ff faba 	bl	8006dd8 <__retarget_lock_release_recursive>
 8007864:	89ab      	ldrh	r3, [r5, #12]
 8007866:	065b      	lsls	r3, r3, #25
 8007868:	f53f af12 	bmi.w	8007690 <_vfiprintf_r+0x4c>
 800786c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800786e:	e711      	b.n	8007694 <_vfiprintf_r+0x50>
 8007870:	ab03      	add	r3, sp, #12
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	462a      	mov	r2, r5
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <_vfiprintf_r+0x258>)
 8007878:	a904      	add	r1, sp, #16
 800787a:	4630      	mov	r0, r6
 800787c:	f7fd fff0 	bl	8005860 <_printf_i>
 8007880:	e7e4      	b.n	800784c <_vfiprintf_r+0x208>
 8007882:	bf00      	nop
 8007884:	08008118 	.word	0x08008118
 8007888:	08008138 	.word	0x08008138
 800788c:	080080f8 	.word	0x080080f8
 8007890:	080082b4 	.word	0x080082b4
 8007894:	080082be 	.word	0x080082be
 8007898:	08005319 	.word	0x08005319
 800789c:	0800761f 	.word	0x0800761f
 80078a0:	080082ba 	.word	0x080082ba

080078a4 <__sread>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	460c      	mov	r4, r1
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	f000 f8d6 	bl	8007a5c <_read_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	bfab      	itete	ge
 80078b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078b6:	89a3      	ldrhlt	r3, [r4, #12]
 80078b8:	181b      	addge	r3, r3, r0
 80078ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078be:	bfac      	ite	ge
 80078c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80078c2:	81a3      	strhlt	r3, [r4, #12]
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <__swrite>:
 80078c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	461f      	mov	r7, r3
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	05db      	lsls	r3, r3, #23
 80078d0:	4605      	mov	r5, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4616      	mov	r6, r2
 80078d6:	d505      	bpl.n	80078e4 <__swrite+0x1e>
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	2302      	movs	r3, #2
 80078de:	2200      	movs	r2, #0
 80078e0:	f000 f898 	bl	8007a14 <_lseek_r>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	4632      	mov	r2, r6
 80078f2:	463b      	mov	r3, r7
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	f000 b817 	b.w	800792c <_write_r>

080078fe <__sseek>:
 80078fe:	b510      	push	{r4, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007906:	f000 f885 	bl	8007a14 <_lseek_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	bf15      	itete	ne
 8007910:	6560      	strne	r0, [r4, #84]	; 0x54
 8007912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800791a:	81a3      	strheq	r3, [r4, #12]
 800791c:	bf18      	it	ne
 800791e:	81a3      	strhne	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__sclose>:
 8007922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007926:	f000 b831 	b.w	800798c <_close_r>
	...

0800792c <_write_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	; (800794c <_write_r+0x20>)
 8007930:	4604      	mov	r4, r0
 8007932:	4608      	mov	r0, r1
 8007934:	4611      	mov	r1, r2
 8007936:	2200      	movs	r2, #0
 8007938:	602a      	str	r2, [r5, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f7f9 fe43 	bl	80015c6 <_write>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_write_r+0x1e>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_write_r+0x1e>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	200009f8 	.word	0x200009f8

08007950 <__assert_func>:
 8007950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007952:	4614      	mov	r4, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <__assert_func+0x2c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4605      	mov	r5, r0
 800795c:	68d8      	ldr	r0, [r3, #12]
 800795e:	b14c      	cbz	r4, 8007974 <__assert_func+0x24>
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <__assert_func+0x30>)
 8007962:	9100      	str	r1, [sp, #0]
 8007964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007968:	4906      	ldr	r1, [pc, #24]	; (8007984 <__assert_func+0x34>)
 800796a:	462b      	mov	r3, r5
 800796c:	f000 f81e 	bl	80079ac <fiprintf>
 8007970:	f000 f893 	bl	8007a9a <abort>
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <__assert_func+0x38>)
 8007976:	461c      	mov	r4, r3
 8007978:	e7f3      	b.n	8007962 <__assert_func+0x12>
 800797a:	bf00      	nop
 800797c:	200006d4 	.word	0x200006d4
 8007980:	080082c5 	.word	0x080082c5
 8007984:	080082d2 	.word	0x080082d2
 8007988:	08008300 	.word	0x08008300

0800798c <_close_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	; (80079a8 <_close_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7f9 fe31 	bl	80015fe <_close>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_close_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_close_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	200009f8 	.word	0x200009f8

080079ac <fiprintf>:
 80079ac:	b40e      	push	{r1, r2, r3}
 80079ae:	b503      	push	{r0, r1, lr}
 80079b0:	4601      	mov	r1, r0
 80079b2:	ab03      	add	r3, sp, #12
 80079b4:	4805      	ldr	r0, [pc, #20]	; (80079cc <fiprintf+0x20>)
 80079b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	f7ff fe41 	bl	8007644 <_vfiprintf_r>
 80079c2:	b002      	add	sp, #8
 80079c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c8:	b003      	add	sp, #12
 80079ca:	4770      	bx	lr
 80079cc:	200006d4 	.word	0x200006d4

080079d0 <_fstat_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	; (80079f0 <_fstat_r+0x20>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	f7f9 fe1a 	bl	8001616 <_fstat>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d102      	bne.n	80079ec <_fstat_r+0x1c>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	b103      	cbz	r3, 80079ec <_fstat_r+0x1c>
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	200009f8 	.word	0x200009f8

080079f4 <_isatty_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_isatty_r+0x1c>)
 80079f8:	2300      	movs	r3, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7f9 fe19 	bl	8001636 <_isatty>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_isatty_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_isatty_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	200009f8 	.word	0x200009f8

08007a14 <_lseek_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	; (8007a34 <_lseek_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7f9 fe12 	bl	800164c <_lseek>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_lseek_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_lseek_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	200009f8 	.word	0x200009f8

08007a38 <__ascii_mbtowc>:
 8007a38:	b082      	sub	sp, #8
 8007a3a:	b901      	cbnz	r1, 8007a3e <__ascii_mbtowc+0x6>
 8007a3c:	a901      	add	r1, sp, #4
 8007a3e:	b142      	cbz	r2, 8007a52 <__ascii_mbtowc+0x1a>
 8007a40:	b14b      	cbz	r3, 8007a56 <__ascii_mbtowc+0x1e>
 8007a42:	7813      	ldrb	r3, [r2, #0]
 8007a44:	600b      	str	r3, [r1, #0]
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	1e10      	subs	r0, r2, #0
 8007a4a:	bf18      	it	ne
 8007a4c:	2001      	movne	r0, #1
 8007a4e:	b002      	add	sp, #8
 8007a50:	4770      	bx	lr
 8007a52:	4610      	mov	r0, r2
 8007a54:	e7fb      	b.n	8007a4e <__ascii_mbtowc+0x16>
 8007a56:	f06f 0001 	mvn.w	r0, #1
 8007a5a:	e7f8      	b.n	8007a4e <__ascii_mbtowc+0x16>

08007a5c <_read_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_read_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 fd8e 	bl	800158c <_read>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_read_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_read_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200009f8 	.word	0x200009f8

08007a80 <__ascii_wctomb>:
 8007a80:	b149      	cbz	r1, 8007a96 <__ascii_wctomb+0x16>
 8007a82:	2aff      	cmp	r2, #255	; 0xff
 8007a84:	bf85      	ittet	hi
 8007a86:	238a      	movhi	r3, #138	; 0x8a
 8007a88:	6003      	strhi	r3, [r0, #0]
 8007a8a:	700a      	strbls	r2, [r1, #0]
 8007a8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a90:	bf98      	it	ls
 8007a92:	2001      	movls	r0, #1
 8007a94:	4770      	bx	lr
 8007a96:	4608      	mov	r0, r1
 8007a98:	4770      	bx	lr

08007a9a <abort>:
 8007a9a:	b508      	push	{r3, lr}
 8007a9c:	2006      	movs	r0, #6
 8007a9e:	f000 f82b 	bl	8007af8 <raise>
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	f7f9 fd68 	bl	8001578 <_exit>

08007aa8 <_raise_r>:
 8007aa8:	291f      	cmp	r1, #31
 8007aaa:	b538      	push	{r3, r4, r5, lr}
 8007aac:	4604      	mov	r4, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	d904      	bls.n	8007abc <_raise_r+0x14>
 8007ab2:	2316      	movs	r3, #22
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007abe:	b112      	cbz	r2, 8007ac6 <_raise_r+0x1e>
 8007ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ac4:	b94b      	cbnz	r3, 8007ada <_raise_r+0x32>
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 f830 	bl	8007b2c <_getpid_r>
 8007acc:	462a      	mov	r2, r5
 8007ace:	4601      	mov	r1, r0
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ad6:	f000 b817 	b.w	8007b08 <_kill_r>
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d00a      	beq.n	8007af4 <_raise_r+0x4c>
 8007ade:	1c59      	adds	r1, r3, #1
 8007ae0:	d103      	bne.n	8007aea <_raise_r+0x42>
 8007ae2:	2316      	movs	r3, #22
 8007ae4:	6003      	str	r3, [r0, #0]
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	e7e7      	b.n	8007aba <_raise_r+0x12>
 8007aea:	2400      	movs	r4, #0
 8007aec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007af0:	4628      	mov	r0, r5
 8007af2:	4798      	blx	r3
 8007af4:	2000      	movs	r0, #0
 8007af6:	e7e0      	b.n	8007aba <_raise_r+0x12>

08007af8 <raise>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <raise+0xc>)
 8007afa:	4601      	mov	r1, r0
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	f7ff bfd3 	b.w	8007aa8 <_raise_r>
 8007b02:	bf00      	nop
 8007b04:	200006d4 	.word	0x200006d4

08007b08 <_kill_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	; (8007b28 <_kill_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7f9 fd1f 	bl	8001558 <_kill>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_kill_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_kill_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	200009f8 	.word	0x200009f8

08007b2c <_getpid_r>:
 8007b2c:	f7f9 bd0c 	b.w	8001548 <_getpid>

08007b30 <expf>:
 8007b30:	b508      	push	{r3, lr}
 8007b32:	ed2d 8b02 	vpush	{d8}
 8007b36:	eef0 8a40 	vmov.f32	s17, s0
 8007b3a:	f000 f82f 	bl	8007b9c <__ieee754_expf>
 8007b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b42:	eeb0 0a68 	vmov.f32	s0, s17
 8007b46:	f000 f919 	bl	8007d7c <finitef>
 8007b4a:	b160      	cbz	r0, 8007b66 <expf+0x36>
 8007b4c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007b8c <expf+0x5c>
 8007b50:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	dd0a      	ble.n	8007b70 <expf+0x40>
 8007b5a:	f7fd fa15 	bl	8004f88 <__errno>
 8007b5e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007b90 <expf+0x60>
 8007b62:	2322      	movs	r3, #34	; 0x22
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	eeb0 0a48 	vmov.f32	s0, s16
 8007b6a:	ecbd 8b02 	vpop	{d8}
 8007b6e:	bd08      	pop	{r3, pc}
 8007b70:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007b94 <expf+0x64>
 8007b74:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7c:	d5f3      	bpl.n	8007b66 <expf+0x36>
 8007b7e:	f7fd fa03 	bl	8004f88 <__errno>
 8007b82:	2322      	movs	r3, #34	; 0x22
 8007b84:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007b98 <expf+0x68>
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	e7ec      	b.n	8007b66 <expf+0x36>
 8007b8c:	42b17180 	.word	0x42b17180
 8007b90:	7f800000 	.word	0x7f800000
 8007b94:	c2cff1b5 	.word	0xc2cff1b5
 8007b98:	00000000 	.word	0x00000000

08007b9c <__ieee754_expf>:
 8007b9c:	ee10 2a10 	vmov	r2, s0
 8007ba0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007ba4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ba8:	d902      	bls.n	8007bb0 <__ieee754_expf+0x14>
 8007baa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bae:	4770      	bx	lr
 8007bb0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007bb4:	d106      	bne.n	8007bc4 <__ieee754_expf+0x28>
 8007bb6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007cf0 <__ieee754_expf+0x154>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf18      	it	ne
 8007bbe:	eeb0 0a67 	vmovne.f32	s0, s15
 8007bc2:	4770      	bx	lr
 8007bc4:	484b      	ldr	r0, [pc, #300]	; (8007cf4 <__ieee754_expf+0x158>)
 8007bc6:	4282      	cmp	r2, r0
 8007bc8:	dd02      	ble.n	8007bd0 <__ieee754_expf+0x34>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	f000 b8d0 	b.w	8007d70 <__math_oflowf>
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	da05      	bge.n	8007be0 <__ieee754_expf+0x44>
 8007bd4:	4a48      	ldr	r2, [pc, #288]	; (8007cf8 <__ieee754_expf+0x15c>)
 8007bd6:	4291      	cmp	r1, r2
 8007bd8:	d902      	bls.n	8007be0 <__ieee754_expf+0x44>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	f000 b8c2 	b.w	8007d64 <__math_uflowf>
 8007be0:	4a46      	ldr	r2, [pc, #280]	; (8007cfc <__ieee754_expf+0x160>)
 8007be2:	4291      	cmp	r1, r2
 8007be4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007be8:	d952      	bls.n	8007c90 <__ieee754_expf+0xf4>
 8007bea:	4a45      	ldr	r2, [pc, #276]	; (8007d00 <__ieee754_expf+0x164>)
 8007bec:	4291      	cmp	r1, r2
 8007bee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007bf2:	d834      	bhi.n	8007c5e <__ieee754_expf+0xc2>
 8007bf4:	4943      	ldr	r1, [pc, #268]	; (8007d04 <__ieee754_expf+0x168>)
 8007bf6:	4411      	add	r1, r2
 8007bf8:	ed91 7a00 	vldr	s14, [r1]
 8007bfc:	4942      	ldr	r1, [pc, #264]	; (8007d08 <__ieee754_expf+0x16c>)
 8007bfe:	440a      	add	r2, r1
 8007c00:	edd2 7a00 	vldr	s15, [r2]
 8007c04:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007c08:	f1c3 0201 	rsb	r2, r3, #1
 8007c0c:	1ad2      	subs	r2, r2, r3
 8007c0e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007c12:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007c16:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007d0c <__ieee754_expf+0x170>
 8007c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d10 <__ieee754_expf+0x174>
 8007c1e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007c22:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007d14 <__ieee754_expf+0x178>
 8007c26:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007c2a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007d18 <__ieee754_expf+0x17c>
 8007c2e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007c32:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007d1c <__ieee754_expf+0x180>
 8007c36:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007c3a:	eef0 6a40 	vmov.f32	s13, s0
 8007c3e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007c42:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007c46:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007c4a:	bb92      	cbnz	r2, 8007cb2 <__ieee754_expf+0x116>
 8007c4c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007c50:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007c54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007c58:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007c5c:	4770      	bx	lr
 8007c5e:	4b30      	ldr	r3, [pc, #192]	; (8007d20 <__ieee754_expf+0x184>)
 8007c60:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007d24 <__ieee754_expf+0x188>
 8007c64:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007d28 <__ieee754_expf+0x18c>
 8007c68:	4413      	add	r3, r2
 8007c6a:	edd3 7a00 	vldr	s15, [r3]
 8007c6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c72:	eeb0 7a40 	vmov.f32	s14, s0
 8007c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c7a:	ee17 2a90 	vmov	r2, s15
 8007c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c82:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007c86:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007d2c <__ieee754_expf+0x190>
 8007c8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c8e:	e7be      	b.n	8007c0e <__ieee754_expf+0x72>
 8007c90:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8007c94:	d20b      	bcs.n	8007cae <__ieee754_expf+0x112>
 8007c96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007d30 <__ieee754_expf+0x194>
 8007c9a:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007c9e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca6:	dd02      	ble.n	8007cae <__ieee754_expf+0x112>
 8007ca8:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007cac:	4770      	bx	lr
 8007cae:	2200      	movs	r2, #0
 8007cb0:	e7af      	b.n	8007c12 <__ieee754_expf+0x76>
 8007cb2:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007cb6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007cba:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007cbe:	bfb8      	it	lt
 8007cc0:	3264      	addlt	r2, #100	; 0x64
 8007cc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007cc6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007cca:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8007cce:	ee17 3a90 	vmov	r3, s15
 8007cd2:	bfab      	itete	ge
 8007cd4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007cd8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007cdc:	ee00 3a10 	vmovge	s0, r3
 8007ce0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007d34 <__ieee754_expf+0x198>
 8007ce4:	bfbc      	itt	lt
 8007ce6:	ee00 3a10 	vmovlt	s0, r3
 8007cea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007cee:	4770      	bx	lr
 8007cf0:	00000000 	.word	0x00000000
 8007cf4:	42b17217 	.word	0x42b17217
 8007cf8:	42cff1b5 	.word	0x42cff1b5
 8007cfc:	3eb17218 	.word	0x3eb17218
 8007d00:	3f851591 	.word	0x3f851591
 8007d04:	08008414 	.word	0x08008414
 8007d08:	0800841c 	.word	0x0800841c
 8007d0c:	3331bb4c 	.word	0x3331bb4c
 8007d10:	b5ddea0e 	.word	0xb5ddea0e
 8007d14:	388ab355 	.word	0x388ab355
 8007d18:	bb360b61 	.word	0xbb360b61
 8007d1c:	3e2aaaab 	.word	0x3e2aaaab
 8007d20:	0800840c 	.word	0x0800840c
 8007d24:	3fb8aa3b 	.word	0x3fb8aa3b
 8007d28:	3f317180 	.word	0x3f317180
 8007d2c:	3717f7d1 	.word	0x3717f7d1
 8007d30:	7149f2ca 	.word	0x7149f2ca
 8007d34:	0d800000 	.word	0x0d800000

08007d38 <with_errnof>:
 8007d38:	b513      	push	{r0, r1, r4, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007d40:	f7fd f922 	bl	8004f88 <__errno>
 8007d44:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007d48:	6004      	str	r4, [r0, #0]
 8007d4a:	b002      	add	sp, #8
 8007d4c:	bd10      	pop	{r4, pc}

08007d4e <xflowf>:
 8007d4e:	b130      	cbz	r0, 8007d5e <xflowf+0x10>
 8007d50:	eef1 7a40 	vneg.f32	s15, s0
 8007d54:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007d58:	2022      	movs	r0, #34	; 0x22
 8007d5a:	f7ff bfed 	b.w	8007d38 <with_errnof>
 8007d5e:	eef0 7a40 	vmov.f32	s15, s0
 8007d62:	e7f7      	b.n	8007d54 <xflowf+0x6>

08007d64 <__math_uflowf>:
 8007d64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d6c <__math_uflowf+0x8>
 8007d68:	f7ff bff1 	b.w	8007d4e <xflowf>
 8007d6c:	10000000 	.word	0x10000000

08007d70 <__math_oflowf>:
 8007d70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d78 <__math_oflowf+0x8>
 8007d74:	f7ff bfeb 	b.w	8007d4e <xflowf>
 8007d78:	70000000 	.word	0x70000000

08007d7c <finitef>:
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007d82:	9801      	ldr	r0, [sp, #4]
 8007d84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d88:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007d8c:	bfac      	ite	ge
 8007d8e:	2000      	movge	r0, #0
 8007d90:	2001      	movlt	r0, #1
 8007d92:	b002      	add	sp, #8
 8007d94:	4770      	bx	lr
	...

08007d98 <_init>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr

08007da4 <_fini>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	bf00      	nop
 8007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007daa:	bc08      	pop	{r3}
 8007dac:	469e      	mov	lr, r3
 8007dae:	4770      	bx	lr
