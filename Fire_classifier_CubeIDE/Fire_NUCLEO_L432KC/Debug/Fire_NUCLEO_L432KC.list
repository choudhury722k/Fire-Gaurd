
Fire_NUCLEO_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08008690  08008690  00018690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d44  08008d44  00020890  2**0
                  CONTENTS
  4 .ARM          00000008  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d4c  08008d4c  00020890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000890  20000000  08008d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000890  080095e4  00020890  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000a40  080095e4  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aee  00000000  00000000  000208c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  000313ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00033690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002373e  00000000  00000000  00035238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f4b  00000000  00000000  00058976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d87cf  00000000  00000000  000698c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00142090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  0014215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000890 	.word	0x20000890
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008678 	.word	0x08008678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000894 	.word	0x20000894
 80001cc:	08008678 	.word	0x08008678

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <main>:
char Cnum[] = "AT+CMGS=\"+918144109993\"\r";
char Msg[] = "Fire Alert";
char End[] = "26";

int main(void)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b0ce      	sub	sp, #312	; 0x138
 8000ed4:	af02      	add	r7, sp, #8

  char alert_buf[50];
  uint8_t num = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  int alert_buf_len = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  char buf[50];
  int buf_len = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_FIRE_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_FIRE_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle fire_model = AI_HANDLE_NULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	663b      	str	r3, [r7, #96]	; 0x60

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_FIRE_IN_NUM] = AI_FIRE_IN;
 8000eec:	4bc4      	ldr	r3, [pc, #784]	; (8001200 <main+0x330>)
 8000eee:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000efc:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_FIRE_OUT_NUM] = AI_FIRE_OUT;
 8000f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f08:	4abe      	ldr	r2, [pc, #760]	; (8001204 <main+0x334>)
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	4615      	mov	r5, r2
 8000f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f16:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f22:	4ab9      	ldr	r2, [pc, #740]	; (8001208 <main+0x338>)
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f2e:	2201      	movs	r2, #1
 8000f30:	809a      	strh	r2, [r3, #4]
 8000f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	80da      	strh	r2, [r3, #6]
 8000f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f46:	2201      	movs	r2, #1
 8000f48:	811a      	strh	r2, [r3, #8]
 8000f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f52:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8000f56:	60da      	str	r2, [r3, #12]
		  AI_FIRE_DATA_WEIGHTS(ai_fire_data_weights_get()),
 8000f58:	f003 f9be 	bl	80042d8 <ai_fire_data_weights_get>
 8000f5c:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f7c:	4aa3      	ldr	r2, [pc, #652]	; (800120c <main+0x33c>)
 8000f7e:	619a      	str	r2, [r3, #24]
 8000f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f88:	2201      	movs	r2, #1
 8000f8a:	839a      	strh	r2, [r3, #28]
 8000f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f94:	2201      	movs	r2, #1
 8000f96:	83da      	strh	r2, [r3, #30]
 8000f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	841a      	strh	r2, [r3, #32]
 8000fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fac:	2234      	movs	r2, #52	; 0x34
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fb8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
 8000fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
		  AI_FIRE_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fd4:	65bb      	str	r3, [r7, #88]	; 0x58
  ai_output[0].n_batches = 1;
 8000fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000fde:	2201      	movs	r2, #1
 8000fe0:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fe6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000fea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fee:	611a      	str	r2, [r3, #16]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff0:	f000 fc43 	bl	800187a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ff4:	f000 f92e 	bl	8001254 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 f9f6 	bl	80013e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ffc:	f000 f9c4 	bl	8001388 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001000:	f000 f97a 	bl	80012f8 <MX_CRC_Init>
  MX_TIM16_Init();
 8001004:	f000 f99a 	bl	800133c <MX_TIM16_Init>

  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8001008:	4881      	ldr	r0, [pc, #516]	; (8001210 <main+0x340>)
 800100a:	f002 f9fd 	bl	8003408 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800100e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001012:	4980      	ldr	r1, [pc, #512]	; (8001214 <main+0x344>)
 8001014:	4618      	mov	r0, r3
 8001016:	f005 f889 	bl	800612c <siprintf>
 800101a:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800101e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001022:	b29a      	uxth	r2, r3
 8001024:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	487b      	ldr	r0, [pc, #492]	; (8001218 <main+0x348>)
 800102c:	f002 faea 	bl	8003604 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_fire_create(&fire_model, AI_FIRE_DATA_CONFIG);
 8001030:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f8e8 	bl	800420c <ai_fire_create>
 800103c:	4603      	mov	r3, r0
 800103e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (ai_err.type != AI_ERROR_NONE)
 8001042:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <main+0x19e>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 800104a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800104e:	4973      	ldr	r1, [pc, #460]	; (800121c <main+0x34c>)
 8001050:	4618      	mov	r0, r3
 8001052:	f005 f86b 	bl	800612c <siprintf>
 8001056:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800105a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800105e:	b29a      	uxth	r2, r3
 8001060:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	486c      	ldr	r0, [pc, #432]	; (8001218 <main+0x348>)
 8001068:	f002 facc 	bl	8003604 <HAL_UART_Transmit>
    while(1);
 800106c:	e7fe      	b.n	800106c <main+0x19c>
  }

  // Initialize neural network
  if (!ai_fire_init(fire_model, &ai_params))
 800106e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001070:	463a      	mov	r2, r7
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f003 f8df 	bl	8004238 <ai_fire_init>
 800107a:	4603      	mov	r3, r0
 800107c:	f083 0301 	eor.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d011      	beq.n	80010aa <main+0x1da>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001086:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800108a:	4965      	ldr	r1, [pc, #404]	; (8001220 <main+0x350>)
 800108c:	4618      	mov	r0, r3
 800108e:	f005 f84d 	bl	800612c <siprintf>
 8001092:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001096:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	485d      	ldr	r0, [pc, #372]	; (8001218 <main+0x348>)
 80010a4:	f002 faae 	bl	8003604 <HAL_UART_Transmit>
    while(1);
 80010a8:	e7fe      	b.n	80010a8 <main+0x1d8>
//	  Room
//	  ((ai_float *)in_data)[0] = 0.34;
//	  ((ai_float *)in_data)[1] = 0.32;
//	  ((ai_float *)in_data)[2] = 0.32;
//	  Fire
	  ((ai_float *)in_data)[0] = 0.54;
 80010aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ae:	4a5d      	ldr	r2, [pc, #372]	; (8001224 <main+0x354>)
 80010b0:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[1] = 0.28;
 80010b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010b6:	3304      	adds	r3, #4
 80010b8:	4a5b      	ldr	r2, [pc, #364]	; (8001228 <main+0x358>)
 80010ba:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[2] = 0.18;
 80010bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c0:	3308      	adds	r3, #8
 80010c2:	4a5a      	ldr	r2, [pc, #360]	; (800122c <main+0x35c>)
 80010c4:	601a      	str	r2, [r3, #0]


	  // Get current timestamp
	  timestamp = htim16.Instance->CNT;
 80010c6:	4b52      	ldr	r3, [pc, #328]	; (8001210 <main+0x340>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	  // Perform inference
	  nbatch = ai_fire_run(fire_model, &ai_input[0], &ai_output[0]);
 80010d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010d6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f8eb 	bl	80042b6 <ai_fire_run>
 80010e0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	  if (nbatch != 1) {
 80010e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d010      	beq.n	800110e <main+0x23e>
		buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80010ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010f0:	494f      	ldr	r1, [pc, #316]	; (8001230 <main+0x360>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 f81a 	bl	800612c <siprintf>
 80010f8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001100:	b29a      	uxth	r2, r3
 8001102:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	4843      	ldr	r0, [pc, #268]	; (8001218 <main+0x348>)
 800110a:	f002 fa7b 	bl	8003604 <HAL_UART_Transmit>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 800110e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf,
 8001118:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800111c:	f7ff fa24 	bl	8000568 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
						"Output: %f | Duration: %lu\r\n",
						y_val,
						htim16.Instance->CNT - timestamp);
 8001124:	493a      	ldr	r1, [pc, #232]	; (8001210 <main+0x340>)
 8001126:	6809      	ldr	r1, [r1, #0]
 8001128:	6a48      	ldr	r0, [r1, #36]	; 0x24
	  buf_len = sprintf(buf,
 800112a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800112e:	1a41      	subs	r1, r0, r1
 8001130:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001134:	9100      	str	r1, [sp, #0]
 8001136:	493f      	ldr	r1, [pc, #252]	; (8001234 <main+0x364>)
 8001138:	f004 fff8 	bl	800612c <siprintf>
 800113c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001140:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001144:	b29a      	uxth	r2, r3
 8001146:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800114a:	2364      	movs	r3, #100	; 0x64
 800114c:	4832      	ldr	r0, [pc, #200]	; (8001218 <main+0x348>)
 800114e:	f002 fa59 	bl	8003604 <HAL_UART_Transmit>

	  if(y_val > 0.9){
 8001152:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001156:	f7ff fa07 	bl	8000568 <__aeabi_f2d>
 800115a:	a327      	add	r3, pc, #156	; (adr r3, 80011f8 <main+0x328>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fcea 	bl	8000b38 <__aeabi_dcmpgt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d03e      	beq.n	80011e8 <main+0x318>
		  HAL_UART_Transmit(&huart2, (uint8_t *)Test, 2, 10);
 800116a:	230a      	movs	r3, #10
 800116c:	2202      	movs	r2, #2
 800116e:	4932      	ldr	r1, [pc, #200]	; (8001238 <main+0x368>)
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <main+0x348>)
 8001172:	f002 fa47 	bl	8003604 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart2, (uint8_t *)Reply, 2, 10);
 8001176:	230a      	movs	r3, #10
 8001178:	2202      	movs	r2, #2
 800117a:	4930      	ldr	r1, [pc, #192]	; (800123c <main+0x36c>)
 800117c:	4826      	ldr	r0, [pc, #152]	; (8001218 <main+0x348>)
 800117e:	f002 fad5 	bl	800372c <HAL_UART_Receive>
		  if (strcmp(Reply, "OK")){
 8001182:	492f      	ldr	r1, [pc, #188]	; (8001240 <main+0x370>)
 8001184:	482d      	ldr	r0, [pc, #180]	; (800123c <main+0x36c>)
 8001186:	f7ff f823 	bl	80001d0 <strcmp>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02b      	beq.n	80011e8 <main+0x318>
			  HAL_UART_Transmit(&huart2, (uint8_t *)Stext, strlen(Stext), 10);
 8001190:	482c      	ldr	r0, [pc, #176]	; (8001244 <main+0x374>)
 8001192:	f7ff f827 	bl	80001e4 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	230a      	movs	r3, #10
 800119c:	4929      	ldr	r1, [pc, #164]	; (8001244 <main+0x374>)
 800119e:	481e      	ldr	r0, [pc, #120]	; (8001218 <main+0x348>)
 80011a0:	f002 fa30 	bl	8003604 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)Cnum, strlen(Cnum), 10);
 80011a4:	4828      	ldr	r0, [pc, #160]	; (8001248 <main+0x378>)
 80011a6:	f7ff f81d 	bl	80001e4 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	4925      	ldr	r1, [pc, #148]	; (8001248 <main+0x378>)
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <main+0x348>)
 80011b4:	f002 fa26 	bl	8003604 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)Msg, strlen(Msg), 10);
 80011b8:	4824      	ldr	r0, [pc, #144]	; (800124c <main+0x37c>)
 80011ba:	f7ff f813 	bl	80001e4 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	230a      	movs	r3, #10
 80011c4:	4921      	ldr	r1, [pc, #132]	; (800124c <main+0x37c>)
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <main+0x348>)
 80011c8:	f002 fa1c 	bl	8003604 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)End, strlen(End), 10);
 80011cc:	4820      	ldr	r0, [pc, #128]	; (8001250 <main+0x380>)
 80011ce:	f7ff f809 	bl	80001e4 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	230a      	movs	r3, #10
 80011d8:	491d      	ldr	r1, [pc, #116]	; (8001250 <main+0x380>)
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <main+0x348>)
 80011dc:	f002 fa12 	bl	8003604 <HAL_UART_Transmit>
			  HAL_Delay(1000);
 80011e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e4:	f000 fbbe 	bl	8001964 <HAL_Delay>




	  // Wait before doing it again
	  HAL_Delay(500);
 80011e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ec:	f000 fbba 	bl	8001964 <HAL_Delay>
	  ((ai_float *)in_data)[0] = 0.54;
 80011f0:	e75b      	b.n	80010aa <main+0x1da>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	3feccccc 	.word	0x3feccccc
 8001200:	08008740 	.word	0x08008740
 8001204:	08008758 	.word	0x08008758
 8001208:	40040440 	.word	0x40040440
 800120c:	00040440 	.word	0x00040440
 8001210:	200008d0 	.word	0x200008d0
 8001214:	08008690 	.word	0x08008690
 8001218:	2000091c 	.word	0x2000091c
 800121c:	080086ac 	.word	0x080086ac
 8001220:	080086d4 	.word	0x080086d4
 8001224:	3f0a3d71 	.word	0x3f0a3d71
 8001228:	3e8f5c29 	.word	0x3e8f5c29
 800122c:	3e3851ec 	.word	0x3e3851ec
 8001230:	080086f8 	.word	0x080086f8
 8001234:	0800871c 	.word	0x0800871c
 8001238:	20000000 	.word	0x20000000
 800123c:	200009a0 	.word	0x200009a0
 8001240:	0800873c 	.word	0x0800873c
 8001244:	20000004 	.word	0x20000004
 8001248:	20000010 	.word	0x20000010
 800124c:	2000002c 	.word	0x2000002c
 8001250:	20000038 	.word	0x20000038

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	; 0x58
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2244      	movs	r2, #68	; 0x44
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fa00 	bl	8005668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001276:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127a:	f000 fef7 	bl	800206c <HAL_PWREx_ControlVoltageScaling>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001284:	f000 f8fa 	bl	800147c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001292:	2310      	movs	r3, #16
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129a:	2302      	movs	r3, #2
 800129c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012a2:	230a      	movs	r3, #10
 80012a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012a6:	2307      	movs	r3, #7
 80012a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 ff2e 	bl	8002118 <HAL_RCC_OscConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012c2:	f000 f8db 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2303      	movs	r3, #3
 80012cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	2104      	movs	r1, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fb2e 	bl	8002940 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ea:	f000 f8c7 	bl	800147c <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3758      	adds	r7, #88	; 0x58
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_CRC_Init+0x3c>)
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <MX_CRC_Init+0x40>)
 8001300:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_CRC_Init+0x3c>)
 8001304:	2200      	movs	r2, #0
 8001306:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_CRC_Init+0x3c>)
 800130a:	2200      	movs	r2, #0
 800130c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_CRC_Init+0x3c>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_CRC_Init+0x3c>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_CRC_Init+0x3c>)
 800131c:	2201      	movs	r2, #1
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_CRC_Init+0x3c>)
 8001322:	f000 fc29 	bl	8001b78 <HAL_CRC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800132c:	f000 f8a6 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200008ac 	.word	0x200008ac
 8001338:	40023000 	.word	0x40023000

0800133c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_TIM16_Init+0x44>)
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <MX_TIM16_Init+0x48>)
 8001344:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_TIM16_Init+0x44>)
 8001348:	224f      	movs	r2, #79	; 0x4f
 800134a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_TIM16_Init+0x44>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_TIM16_Init+0x44>)
 8001354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001358:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_TIM16_Init+0x44>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_TIM16_Init+0x44>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_TIM16_Init+0x44>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_TIM16_Init+0x44>)
 800136e:	f001 fff3 	bl	8003358 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001378:	f000 f880 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200008d0 	.word	0x200008d0
 8001384:	40014400 	.word	0x40014400

08001388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_USART2_UART_Init+0x5c>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x58>)
 80013cc:	f002 f8cc 	bl	8003568 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013d6:	f000 f851 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000091c 	.word	0x2000091c
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_GPIO_Init+0x8c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <MX_GPIO_Init+0x8c>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_GPIO_Init+0x8c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_GPIO_Init+0x8c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <MX_GPIO_Init+0x8c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_GPIO_Init+0x8c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_GPIO_Init+0x8c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <MX_GPIO_Init+0x8c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_GPIO_Init+0x8c>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2108      	movs	r1, #8
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <MX_GPIO_Init+0x90>)
 800144c:	f000 fde8 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001450:	2308      	movs	r3, #8
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_GPIO_Init+0x90>)
 8001468:	f000 fc70 	bl	8001d4c <HAL_GPIO_Init>

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	48000400 	.word	0x48000400

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>
	...

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x44>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6613      	str	r3, [r2, #96]	; 0x60
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x44>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x44>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x44>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x44>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_CRC_MspInit+0x38>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10b      	bne.n	80014fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	6493      	str	r3, [r2, #72]	; 0x48
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023000 	.word	0x40023000
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x38>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10b      	bne.n	800153a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40014400 	.word	0x40014400
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b09e      	sub	sp, #120	; 0x78
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f004 f879 	bl	8005668 <memset>
  if(huart->Instance==USART2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a28      	ldr	r2, [pc, #160]	; (800161c <HAL_UART_MspInit+0xcc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d148      	bne.n	8001612 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001580:	2302      	movs	r3, #2
 8001582:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001584:	2300      	movs	r3, #0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fbfb 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001598:	f7ff ff70 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_UART_MspInit+0xd0>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_UART_MspInit+0xd0>)
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	6593      	str	r3, [r2, #88]	; 0x58
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_UART_MspInit+0xd0>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_UART_MspInit+0xd0>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_UART_MspInit+0xd0>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_UART_MspInit+0xd0>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015cc:	2304      	movs	r3, #4
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015dc:	2307      	movs	r3, #7
 80015de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f000 fbaf 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001600:	2303      	movs	r3, #3
 8001602:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f000 fb9d 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3778      	adds	r7, #120	; 0x78
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40021000 	.word	0x40021000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f958 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	return 1;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_kill>:

int _kill(int pid, int sig)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001692:	f003 ffa9 	bl	80055e8 <__errno>
 8001696:	4603      	mov	r3, r0
 8001698:	2216      	movs	r2, #22
 800169a:	601a      	str	r2, [r3, #0]
	return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffe7 	bl	8001688 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ba:	e7fe      	b.n	80016ba <_exit+0x12>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
	}

return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e009      	b.n	800171c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbf1      	blt.n	8001708 <_write+0x12>
	}
	return len;
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_close>:

int _close(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	return -1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001756:	605a      	str	r2, [r3, #4]
	return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_isatty>:

int _isatty(int file)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
	return 1;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	return 0;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f003 ff0e 	bl	80055e8 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20010000 	.word	0x20010000
 80017f8:	00000800 	.word	0x00000800
 80017fc:	200009a4 	.word	0x200009a4
 8001800:	20000a40 	.word	0x20000a40

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800182c:	f7ff ffea 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001856:	f003 fecd 	bl	80055f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7ff fb39 	bl	8000ed0 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001860:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000890 	.word	0x20000890
  ldr r2, =_sidata
 800186c:	08008d54 	.word	0x08008d54
  ldr r2, =_sbss
 8001870:	20000890 	.word	0x20000890
  ldr r4, =_ebss
 8001874:	20000a40 	.word	0x20000a40

08001878 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_IRQHandler>

0800187a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f943 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f80e 	bl	80018ac <HAL_InitTick>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	e001      	b.n	80018a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800189c:	f7ff fdf4 	bl	8001488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_InitTick+0x6c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_InitTick+0x70>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_InitTick+0x6c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f941 	bl	8001b5e <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d809      	bhi.n	80018fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 f919 	bl	8001b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_InitTick+0x74>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e007      	b.n	800190c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e004      	b.n	800190c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e001      	b.n	800190c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000044 	.word	0x20000044
 800191c:	2000003c 	.word	0x2000003c
 8001920:	20000040 	.word	0x20000040

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000044 	.word	0x20000044
 8001948:	200009a8 	.word	0x200009a8

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200009a8 	.word	0x200009a8

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000044 	.word	0x20000044

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff47 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff5c 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb0 	bl	8001acc <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e054      	b.n	8001c34 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7f5b      	ldrb	r3, [r3, #29]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fc98 	bl	80014d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	791b      	ldrb	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_CRC_Init+0xc4>)
 8001bb4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0218 	bic.w	r2, r2, #24
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	e00c      	b.n	8001be2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f834 	bl	8001c40 <HAL_CRCEx_Polynomial_Set>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e028      	b.n	8001c34 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	e004      	b.n	8001c00 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6912      	ldr	r2, [r2, #16]
 8001bfe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	04c11db7 	.word	0x04c11db7

08001c40 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001c50:	231f      	movs	r3, #31
 8001c52:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001c54:	bf00      	nop
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1e5a      	subs	r2, r3, #1
 8001c5a:	613a      	str	r2, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_CRCEx_Polynomial_Set+0x34>
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b18      	cmp	r3, #24
 8001c78:	d846      	bhi.n	8001d08 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001d0f 	.word	0x08001d0f
 8001c84:	08001d09 	.word	0x08001d09
 8001c88:	08001d09 	.word	0x08001d09
 8001c8c:	08001d09 	.word	0x08001d09
 8001c90:	08001d09 	.word	0x08001d09
 8001c94:	08001d09 	.word	0x08001d09
 8001c98:	08001d09 	.word	0x08001d09
 8001c9c:	08001d09 	.word	0x08001d09
 8001ca0:	08001cfd 	.word	0x08001cfd
 8001ca4:	08001d09 	.word	0x08001d09
 8001ca8:	08001d09 	.word	0x08001d09
 8001cac:	08001d09 	.word	0x08001d09
 8001cb0:	08001d09 	.word	0x08001d09
 8001cb4:	08001d09 	.word	0x08001d09
 8001cb8:	08001d09 	.word	0x08001d09
 8001cbc:	08001d09 	.word	0x08001d09
 8001cc0:	08001cf1 	.word	0x08001cf1
 8001cc4:	08001d09 	.word	0x08001d09
 8001cc8:	08001d09 	.word	0x08001d09
 8001ccc:	08001d09 	.word	0x08001d09
 8001cd0:	08001d09 	.word	0x08001d09
 8001cd4:	08001d09 	.word	0x08001d09
 8001cd8:	08001d09 	.word	0x08001d09
 8001cdc:	08001d09 	.word	0x08001d09
 8001ce0:	08001ce5 	.word	0x08001ce5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d913      	bls.n	8001d12 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001cee:	e010      	b.n	8001d12 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d90f      	bls.n	8001d16 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001cfa:	e00c      	b.n	8001d16 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d90b      	bls.n	8001d1a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d06:	e008      	b.n	8001d1a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8001d0c:	e006      	b.n	8001d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e004      	b.n	8001d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d12:	bf00      	nop
 8001d14:	e002      	b.n	8001d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 0118 	bic.w	r1, r3, #24
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e148      	b.n	8001fee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 813a 	beq.w	8001fe8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x40>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	6939      	ldr	r1, [r7, #16]
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8094 	beq.w	8001fe8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6613      	str	r3, [r2, #96]	; 0x60
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_GPIO_Init+0x2c4>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1d4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a43      	ldr	r2, [pc, #268]	; (8002014 <HAL_GPIO_Init+0x2c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1d0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_GPIO_Init+0x2cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1cc>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1d6>
 8001f18:	2307      	movs	r3, #7
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1d6>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1d6>
 8001f20:	2300      	movs	r3, #0
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f32:	4937      	ldr	r1, [pc, #220]	; (8002010 <HAL_GPIO_Init+0x2c4>)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f aeaf 	bne.w	8001d5c <HAL_GPIO_Init+0x10>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	48000400 	.word	0x48000400
 8002018:	48000800 	.word	0x48000800
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800203c:	e002      	b.n	8002044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_PWREx_GetVoltageRange+0x18>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40007000 	.word	0x40007000

0800206c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800207a:	d130      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002088:	d038      	beq.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2232      	movs	r2, #50	; 0x32
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0c9b      	lsrs	r3, r3, #18
 80020ac:	3301      	adds	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b0:	e002      	b.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c4:	d102      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f2      	bne.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d8:	d110      	bne.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e00f      	b.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d007      	beq.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f4:	4a05      	ldr	r2, [pc, #20]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40007000 	.word	0x40007000
 8002110:	2000003c 	.word	0x2000003c
 8002114:	431bde83 	.word	0x431bde83

08002118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f000 bc02 	b.w	8002930 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212c:	4b96      	ldr	r3, [pc, #600]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002136:	4b94      	ldr	r3, [pc, #592]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80e4 	beq.w	8002316 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_RCC_OscConfig+0x4c>
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	f040 808b 	bne.w	8002272 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b01      	cmp	r3, #1
 8002160:	f040 8087 	bne.w	8002272 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x64>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e3d9      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_RCC_OscConfig+0x7e>
 800218c:	4b7e      	ldr	r3, [pc, #504]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	e005      	b.n	80021a2 <HAL_RCC_OscConfig+0x8a>
 8002196:	4b7c      	ldr	r3, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d223      	bcs.n	80021ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fd8c 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e3ba      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a72      	ldr	r2, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b70      	ldr	r3, [pc, #448]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	496d      	ldr	r1, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	4968      	ldr	r1, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e025      	b.n	800223a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4960      	ldr	r1, [pc, #384]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b5e      	ldr	r3, [pc, #376]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	495b      	ldr	r1, [pc, #364]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd4c 	bl	8002cc8 <RCC_SetFlashLatencyFromMSIRange>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e37a      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223a:	f000 fc81 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b51      	ldr	r3, [pc, #324]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4950      	ldr	r1, [pc, #320]	; (800238c <HAL_RCC_OscConfig+0x274>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_RCC_OscConfig+0x278>)
 8002258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800225a:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fb24 	bl	80018ac <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d052      	beq.n	8002314 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	e35e      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d032      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a42      	ldr	r2, [pc, #264]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002286:	f7ff fb61 	bl	800194c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228e:	f7ff fb5d 	bl	800194c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e347      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a35      	ldr	r2, [pc, #212]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4930      	ldr	r1, [pc, #192]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	492b      	ldr	r1, [pc, #172]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e01a      	b.n	8002316 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fb2e 	bl	800194c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f4:	f7ff fb2a 	bl	800194c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e314      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1dc>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d073      	beq.n	800240a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x21c>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d063      	beq.n	8002408 <HAL_RCC_OscConfig+0x2f0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d15f      	bne.n	8002408 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e2f1      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x24c>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e025      	b.n	80023b0 <HAL_RCC_OscConfig+0x298>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800236c:	d114      	bne.n	8002398 <HAL_RCC_OscConfig+0x280>
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a02      	ldr	r2, [pc, #8]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x298>
 8002388:	40021000 	.word	0x40021000
 800238c:	08008774 	.word	0x08008774
 8002390:	2000003c 	.word	0x2000003c
 8002394:	20000040 	.word	0x20000040
 8002398:	4ba0      	ldr	r3, [pc, #640]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a9f      	ldr	r2, [pc, #636]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b9d      	ldr	r3, [pc, #628]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a9c      	ldr	r2, [pc, #624]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff fac8 	bl	800194c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff fac4 	bl	800194c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2ae      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	4b92      	ldr	r3, [pc, #584]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2a8>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff fab4 	bl	800194c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff fab0 	bl	800194c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e29a      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	4b88      	ldr	r3, [pc, #544]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d0>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d060      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x310>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d119      	bne.n	8002456 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	4b7c      	ldr	r3, [pc, #496]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x328>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e277      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	4973      	ldr	r1, [pc, #460]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	e040      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6e      	ldr	r2, [pc, #440]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7ff fa6f 	bl	800194c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7ff fa6b 	bl	800194c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e255      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	4b65      	ldr	r3, [pc, #404]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b62      	ldr	r3, [pc, #392]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	495f      	ldr	r1, [pc, #380]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff fa4b 	bl	800194c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7ff fa47 	bl	800194c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e231      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d03c      	beq.n	800255e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01c      	beq.n	8002526 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7ff fa26 	bl	800194c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7ff fa22 	bl	800194c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e20c      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCC_OscConfig+0x3ec>
 8002524:	e01b      	b.n	800255e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252c:	4a3b      	ldr	r2, [pc, #236]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7ff fa09 	bl	800194c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7ff fa05 	bl	800194c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1ef      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ef      	bne.n	800253e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a6 	beq.w	80026b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a26      	ldr	r2, [pc, #152]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002594:	2301      	movs	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d118      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b0:	f7ff f9cc 	bl	800194c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7ff f9c8 	bl	800194c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1b2      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4d8>
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ee:	e029      	b.n	8002644 <HAL_RCC_OscConfig+0x52c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d115      	bne.n	8002624 <HAL_RCC_OscConfig+0x50c>
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	4a03      	ldr	r2, [pc, #12]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002618:	e014      	b.n	8002644 <HAL_RCC_OscConfig+0x52c>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	4b9a      	ldr	r3, [pc, #616]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a99      	ldr	r2, [pc, #612]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002634:	4b96      	ldr	r3, [pc, #600]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	4a95      	ldr	r2, [pc, #596]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d016      	beq.n	800267a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff f97e 	bl	800194c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7ff f97a 	bl	800194c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e162      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ed      	beq.n	8002654 <HAL_RCC_OscConfig+0x53c>
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7ff f967 	bl	800194c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff f963 	bl	800194c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e14b      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002698:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ed      	bne.n	8002682 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03c      	beq.n	800273e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01c      	beq.n	8002706 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026cc:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80026ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d2:	4a6f      	ldr	r2, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff f936 	bl	800194c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e4:	f7ff f932 	bl	800194c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e11c      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f6:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80026f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <HAL_RCC_OscConfig+0x5cc>
 8002704:	e01b      	b.n	800273e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270c:	4a60      	ldr	r2, [pc, #384]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7ff f919 	bl	800194c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271e:	f7ff f915 	bl	800194c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ff      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ef      	bne.n	800271e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80f3 	beq.w	800292e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	2b02      	cmp	r3, #2
 800274e:	f040 80c9 	bne.w	80028e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002752:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	429a      	cmp	r2, r3
 8002764:	d12c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	3b01      	subs	r3, #1
 8002772:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d123      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d11b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d113      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d109      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d06b      	beq.n	8002898 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d062      	beq.n	800288c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c6:	4b32      	ldr	r3, [pc, #200]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0ac      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e2:	f7ff f8b3 	bl	800194c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f8af 	bl	800194c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e099      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <HAL_RCC_OscConfig+0x77c>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002818:	3a01      	subs	r2, #1
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0552      	lsls	r2, r2, #21
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0652      	lsls	r2, r2, #25
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002842:	06d2      	lsls	r2, r2, #27
 8002844:	430a      	orrs	r2, r1
 8002846:	4912      	ldr	r1, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7ff f872 	bl	800194c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff f86e 	bl	800194c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e058      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288a:	e050      	b.n	800292e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e04f      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
 8002890:	40021000 	.word	0x40021000
 8002894:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d144      	bne.n	800292e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028bc:	f7ff f846 	bl	800194c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f842 	bl	800194c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e02c      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x7ac>
 80028e2:	e024      	b.n	800292e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d01f      	beq.n	800292a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 80028f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff f829 	bl	800194c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7ff f825 	bl	800194c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e00f      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	4905      	ldr	r1, [pc, #20]	; (8002938 <HAL_RCC_OscConfig+0x820>)
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x824>)
 8002924:	4013      	ands	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
 8002928:	e001      	b.n	800292e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	feeefffc 	.word	0xfeeefffc

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0e7      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4970      	ldr	r1, [pc, #448]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b6e      	ldr	r3, [pc, #440]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cf      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	429a      	cmp	r2, r3
 800299e:	d908      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4960      	ldr	r1, [pc, #384]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d04c      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	4b5a      	ldr	r3, [pc, #360]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d121      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0a6      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d115      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e09a      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f6:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e086      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4943      	ldr	r1, [pc, #268]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7fe ff90 	bl	800194c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe ff8c 	bl	800194c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e06e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d208      	bcs.n	8002a86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	492b      	ldr	r1, [pc, #172]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a86:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d210      	bcs.n	8002ab6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 0207 	bic.w	r2, r3, #7
 8002a9c:	4923      	ldr	r1, [pc, #140]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e036      	b.n	8002b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4918      	ldr	r1, [pc, #96]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4910      	ldr	r1, [pc, #64]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af4:	f000 f824 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	490b      	ldr	r1, [pc, #44]	; (8002b34 <HAL_RCC_ClockConfig+0x1f4>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1fc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fec7 	bl	80018ac <HAL_InitTick>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b22:	7afb      	ldrb	r3, [r7, #11]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08008774 	.word	0x08008774
 8002b38:	2000003c 	.word	0x2000003c
 8002b3c:	20000040 	.word	0x20000040

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d121      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d11e      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b9c:	4a2b      	ldr	r2, [pc, #172]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d134      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d003      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0xac>
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be8:	617b      	str	r3, [r7, #20]
      break;
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bee:	617b      	str	r3, [r7, #20]
      break;
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	617b      	str	r3, [r7, #20]
      break;
 8002bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	3301      	adds	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0e5b      	lsrs	r3, r3, #25
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c38:	69bb      	ldr	r3, [r7, #24]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	0800878c 	.word	0x0800878c
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200

08002c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000003c 	.word	0x2000003c

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08008784 	.word	0x08008784

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ca0:	f7ff ffda 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08008784 	.word	0x08008784

08002cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce0:	f7ff f9b6 	bl	8002050 <HAL_PWREx_GetVoltageRange>
 8002ce4:	6178      	str	r0, [r7, #20]
 8002ce6:	e014      	b.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf4:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7ff f9a6 	bl	8002050 <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d18:	d10b      	bne.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d919      	bls.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2ba0      	cmp	r3, #160	; 0xa0
 8002d24:	d902      	bls.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d26:	2302      	movs	r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e013      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e010      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d902      	bls.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d38:	2303      	movs	r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	e00a      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d102      	bne.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d44:	2302      	movs	r3, #2
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e004      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b70      	cmp	r3, #112	; 0x70
 8002d4e:	d101      	bne.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d50:	2301      	movs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0207 	bic.w	r2, r3, #7
 8002d5c:	4909      	ldr	r1, [pc, #36]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40022000 	.word	0x40022000

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d031      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dac:	d01a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002dae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db2:	d814      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dbc:	d10f      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dca:	e00c      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f9ce 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	74fb      	strb	r3, [r7, #19]
      break;
 8002de2:	e000      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dec:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	494e      	ldr	r1, [pc, #312]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e02:	e001      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 809e 	beq.w	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a3f      	ldr	r2, [pc, #252]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fd78 	bl	800194c <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e5e:	e009      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e60:	f7fe fd74 	bl	800194c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	74fb      	strb	r3, [r7, #19]
        break;
 8002e72:	e005      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ef      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d15a      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01e      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d019      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ece:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fd34 	bl	800194c <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fd30 	bl	800194c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d902      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	74fb      	strb	r3, [r7, #19]
            break;
 8002efe:	e006      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ec      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f2a:	e009      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	74bb      	strb	r3, [r7, #18]
 8002f30:	e006      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f40:	7c7b      	ldrb	r3, [r7, #17]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b8a      	ldr	r3, [pc, #552]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a89      	ldr	r2, [pc, #548]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f5e:	4b84      	ldr	r3, [pc, #528]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f023 0203 	bic.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4980      	ldr	r1, [pc, #512]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f80:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f023 020c 	bic.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	4978      	ldr	r1, [pc, #480]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fa2:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	496f      	ldr	r1, [pc, #444]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	4967      	ldr	r1, [pc, #412]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	495e      	ldr	r1, [pc, #376]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	4956      	ldr	r1, [pc, #344]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	494d      	ldr	r1, [pc, #308]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d028      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800304c:	4b48      	ldr	r3, [pc, #288]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4945      	ldr	r1, [pc, #276]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800306a:	d106      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306c:	4b40      	ldr	r3, [pc, #256]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003076:	60d3      	str	r3, [r2, #12]
 8003078:	e011      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003082:	d10c      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f872 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800309a:	7cfb      	ldrb	r3, [r7, #19]
 800309c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d028      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	492d      	ldr	r1, [pc, #180]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c8:	d106      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a28      	ldr	r2, [pc, #160]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d4:	60d3      	str	r3, [r2, #12]
 80030d6:	e011      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f843 	bl	8003174 <RCCEx_PLLSAI1_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01c      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	4916      	ldr	r1, [pc, #88]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003126:	d10c      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f820 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315c:	4904      	ldr	r1, [pc, #16]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003164:	7cbb      	ldrb	r3, [r7, #18]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000

08003174 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003182:	4b74      	ldr	r3, [pc, #464]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800318e:	4b71      	ldr	r3, [pc, #452]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0203 	and.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d10d      	bne.n	80031ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
       ||
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031a6:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
       ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d047      	beq.n	800324a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	e044      	b.n	800324a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d018      	beq.n	80031fa <RCCEx_PLLSAI1_Config+0x86>
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d825      	bhi.n	8003218 <RCCEx_PLLSAI1_Config+0xa4>
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d002      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0x62>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d009      	beq.n	80031e8 <RCCEx_PLLSAI1_Config+0x74>
 80031d4:	e020      	b.n	8003218 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031d6:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11d      	bne.n	800321e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e6:	e01a      	b.n	800321e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e8:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e013      	b.n	8003222 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031fa:	4b56      	ldr	r3, [pc, #344]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003206:	4b53      	ldr	r3, [pc, #332]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003216:	e006      	b.n	8003226 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e004      	b.n	8003228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003226:	bf00      	nop
    }

    if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	430b      	orrs	r3, r1
 8003244:	4943      	ldr	r1, [pc, #268]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d17c      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3f      	ldr	r2, [pc, #252]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325c:	f7fe fb76 	bl	800194c <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003262:	e009      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003264:	f7fe fb72 	bl	800194c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d902      	bls.n	8003278 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	73fb      	strb	r3, [r7, #15]
        break;
 8003276:	e005      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ef      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d15f      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d110      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003290:	4b30      	ldr	r3, [pc, #192]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003298:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6892      	ldr	r2, [r2, #8]
 80032a0:	0211      	lsls	r1, r2, #8
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	06d2      	lsls	r2, r2, #27
 80032a8:	430a      	orrs	r2, r1
 80032aa:	492a      	ldr	r1, [pc, #168]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	610b      	str	r3, [r1, #16]
 80032b0:	e027      	b.n	8003302 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d112      	bne.n	80032de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	0211      	lsls	r1, r2, #8
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6912      	ldr	r2, [r2, #16]
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0552      	lsls	r2, r2, #21
 80032d4:	430a      	orrs	r2, r1
 80032d6:	491f      	ldr	r1, [pc, #124]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	610b      	str	r3, [r1, #16]
 80032dc:	e011      	b.n	8003302 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6892      	ldr	r2, [r2, #8]
 80032ee:	0211      	lsls	r1, r2, #8
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6952      	ldr	r2, [r2, #20]
 80032f4:	0852      	lsrs	r2, r2, #1
 80032f6:	3a01      	subs	r2, #1
 80032f8:	0652      	lsls	r2, r2, #25
 80032fa:	430a      	orrs	r2, r1
 80032fc:	4915      	ldr	r1, [pc, #84]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a13      	ldr	r2, [pc, #76]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800330c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fb1d 	bl	800194c <HAL_GetTick>
 8003312:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003314:	e009      	b.n	800332a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003316:	f7fe fb19 	bl	800194c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d902      	bls.n	800332a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	73fb      	strb	r3, [r7, #15]
          break;
 8003328:	e005      	b.n	8003336 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ef      	beq.n	8003316 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003346:	4313      	orrs	r3, r2
 8003348:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e049      	b.n	80033fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f8c6 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 f882 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e033      	b.n	8003488 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_TIM_Base_Start+0x8c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_TIM_Base_Start+0x3e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d004      	beq.n	8003446 <HAL_TIM_Base_Start+0x3e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a15      	ldr	r2, [pc, #84]	; (8003498 <HAL_TIM_Base_Start+0x90>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d115      	bne.n	8003472 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_TIM_Base_Start+0x94>)
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b06      	cmp	r3, #6
 8003456:	d015      	beq.n	8003484 <HAL_TIM_Base_Start+0x7c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d011      	beq.n	8003484 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	e008      	b.n	8003484 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e000      	b.n	8003486 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40014000 	.word	0x40014000
 800349c:	00010007 	.word	0x00010007

080034a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	; (800355c <TIM_Base_SetConfig+0xbc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x20>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <TIM_Base_SetConfig+0xbc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x52>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x52>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <TIM_Base_SetConfig+0xc0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x52>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <TIM_Base_SetConfig+0xc4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <TIM_Base_SetConfig+0xbc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <TIM_Base_SetConfig+0xa0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <TIM_Base_SetConfig+0xc0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0xa0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <TIM_Base_SetConfig+0xc4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	615a      	str	r2, [r3, #20]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40014000 	.word	0x40014000
 8003564:	40014400 	.word	0x40014400

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e040      	b.n	80035fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd ffe0 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f992 	bl	80038d0 <UART_SetConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fbb2 	bl	8003d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fc39 	bl	8003e6c <UART_CheckIdleState>
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003618:	2b20      	cmp	r3, #32
 800361a:	f040 8082 	bne.w	8003722 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Transmit+0x26>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07a      	b.n	8003724 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x38>
 8003638:	2302      	movs	r3, #2
 800363a:	e073      	b.n	8003724 <HAL_UART_Transmit+0x120>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fe f97b 	bl	800194c <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d108      	bne.n	8003684 <HAL_UART_Transmit+0x80>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e003      	b.n	800368c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003694:	e02d      	b.n	80036f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fc2c 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e039      	b.n	8003724 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c2:	b292      	uxth	r2, r2
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	3302      	adds	r3, #2
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e008      	b.n	80036e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b292      	uxth	r2, r2
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1cb      	bne.n	8003696 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2140      	movs	r1, #64	; 0x40
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fbf8 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e005      	b.n	8003724 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 80bf 	bne.w	80038c4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_UART_Receive+0x26>
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0b7      	b.n	80038c6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_UART_Receive+0x38>
 8003760:	2302      	movs	r3, #2
 8003762:	e0b0      	b.n	80038c6 <HAL_UART_Receive+0x19a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2222      	movs	r2, #34	; 0x22
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003780:	f7fe f8e4 	bl	800194c <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d10e      	bne.n	80037be <HAL_UART_Receive+0x92>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_UART_Receive+0x88>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037b2:	e02d      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037bc:	e028      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_UART_Receive+0xb6>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <HAL_UART_Receive+0xac>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d6:	e01b      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	227f      	movs	r2, #127	; 0x7f
 80037dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037e0:	e016      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ea:	d10d      	bne.n	8003808 <HAL_UART_Receive+0xdc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_UART_Receive+0xd2>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	227f      	movs	r2, #127	; 0x7f
 80037f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037fc:	e008      	b.n	8003810 <HAL_UART_Receive+0xe4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	223f      	movs	r2, #63	; 0x3f
 8003802:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003806:	e003      	b.n	8003810 <HAL_UART_Receive+0xe4>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003816:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003820:	d108      	bne.n	8003834 <HAL_UART_Receive+0x108>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e003      	b.n	800383c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003844:	e033      	b.n	80038ae <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2120      	movs	r1, #32
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fb54 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e032      	b.n	80038c6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800386c:	b29a      	uxth	r2, r3
 800386e:	8a7b      	ldrh	r3, [r7, #18]
 8003870:	4013      	ands	r3, r2
 8003872:	b29a      	uxth	r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	3302      	adds	r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e00d      	b.n	800389c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003886:	b29b      	uxth	r3, r3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	8a7b      	ldrh	r3, [r7, #18]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4013      	ands	r3, r2
 8003890:	b2da      	uxtb	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1c5      	bne.n	8003846 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b08a      	sub	sp, #40	; 0x28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4bb4      	ldr	r3, [pc, #720]	; (8003bd0 <UART_SetConfig+0x300>)
 8003900:	4013      	ands	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4aa9      	ldr	r2, [pc, #676]	; (8003bd4 <UART_SetConfig+0x304>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4313      	orrs	r3, r2
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4aa0      	ldr	r2, [pc, #640]	; (8003bd8 <UART_SetConfig+0x308>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d126      	bne.n	80039a8 <UART_SetConfig+0xd8>
 800395a:	4ba0      	ldr	r3, [pc, #640]	; (8003bdc <UART_SetConfig+0x30c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d81b      	bhi.n	80039a0 <UART_SetConfig+0xd0>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0xa0>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003981 	.word	0x08003981
 8003974:	08003991 	.word	0x08003991
 8003978:	08003989 	.word	0x08003989
 800397c:	08003999 	.word	0x08003999
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e080      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e07c      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e078      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e074      	b.n	8003a8a <UART_SetConfig+0x1ba>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e070      	b.n	8003a8a <UART_SetConfig+0x1ba>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a8c      	ldr	r2, [pc, #560]	; (8003be0 <UART_SetConfig+0x310>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d138      	bne.n	8003a24 <UART_SetConfig+0x154>
 80039b2:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <UART_SetConfig+0x30c>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d82d      	bhi.n	8003a1c <UART_SetConfig+0x14c>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0xf8>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a1d 	.word	0x08003a1d
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a1d 	.word	0x08003a1d
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a1d 	.word	0x08003a1d
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	08003a1d 	.word	0x08003a1d
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e042      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e03e      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e03a      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e036      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e032      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <UART_SetConfig+0x304>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d12a      	bne.n	8003a84 <UART_SetConfig+0x1b4>
 8003a2e:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <UART_SetConfig+0x30c>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3c:	d01a      	beq.n	8003a74 <UART_SetConfig+0x1a4>
 8003a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a42:	d81b      	bhi.n	8003a7c <UART_SetConfig+0x1ac>
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a48:	d00c      	beq.n	8003a64 <UART_SetConfig+0x194>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d815      	bhi.n	8003a7c <UART_SetConfig+0x1ac>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <UART_SetConfig+0x18c>
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	d008      	beq.n	8003a6c <UART_SetConfig+0x19c>
 8003a5a:	e00f      	b.n	8003a7c <UART_SetConfig+0x1ac>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e012      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a64:	2302      	movs	r3, #2
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e00e      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e00a      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a74:	2308      	movs	r3, #8
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e006      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e002      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a84:	2310      	movs	r3, #16
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <UART_SetConfig+0x304>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d17a      	bne.n	8003b8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d824      	bhi.n	8003ae6 <UART_SetConfig+0x216>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x1d4>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ae7 	.word	0x08003ae7
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003ad7 	.word	0x08003ad7
 8003ab8:	08003ae7 	.word	0x08003ae7
 8003abc:	08003ae7 	.word	0x08003ae7
 8003ac0:	08003ae7 	.word	0x08003ae7
 8003ac4:	08003adf 	.word	0x08003adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7ff f8d2 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003acc:	61f8      	str	r0, [r7, #28]
        break;
 8003ace:	e010      	b.n	8003af2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <UART_SetConfig+0x314>)
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e00d      	b.n	8003af2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7ff f833 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8003ada:	61f8      	str	r0, [r7, #28]
        break;
 8003adc:	e009      	b.n	8003af2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae2:	61fb      	str	r3, [r7, #28]
        break;
 8003ae4:	e005      	b.n	8003af2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8107 	beq.w	8003d08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d305      	bcc.n	8003b16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d903      	bls.n	8003b1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b1c:	e0f4      	b.n	8003d08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2200      	movs	r2, #0
 8003b22:	461c      	mov	r4, r3
 8003b24:	4615      	mov	r5, r2
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	022b      	lsls	r3, r5, #8
 8003b30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b34:	0222      	lsls	r2, r4, #8
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	6849      	ldr	r1, [r1, #4]
 8003b3a:	0849      	lsrs	r1, r1, #1
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	4688      	mov	r8, r1
 8003b40:	4681      	mov	r9, r0
 8003b42:	eb12 0a08 	adds.w	sl, r2, r8
 8003b46:	eb43 0b09 	adc.w	fp, r3, r9
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b58:	4650      	mov	r0, sl
 8003b5a:	4659      	mov	r1, fp
 8003b5c:	f7fd f834 	bl	8000bc8 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6e:	d308      	bcc.n	8003b82 <UART_SetConfig+0x2b2>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b76:	d204      	bcs.n	8003b82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e0c2      	b.n	8003d08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b88:	e0be      	b.n	8003d08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d16a      	bne.n	8003c6a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d834      	bhi.n	8003c06 <UART_SetConfig+0x336>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x2d4>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bf1 	.word	0x08003bf1
 8003bb0:	08003c07 	.word	0x08003c07
 8003bb4:	08003bf7 	.word	0x08003bf7
 8003bb8:	08003c07 	.word	0x08003c07
 8003bbc:	08003c07 	.word	0x08003c07
 8003bc0:	08003c07 	.word	0x08003c07
 8003bc4:	08003bff 	.word	0x08003bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7ff f852 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61f8      	str	r0, [r7, #28]
        break;
 8003bce:	e020      	b.n	8003c12 <UART_SetConfig+0x342>
 8003bd0:	efff69f3 	.word	0xefff69f3
 8003bd4:	40008000 	.word	0x40008000
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40004400 	.word	0x40004400
 8003be4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7ff f858 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003bec:	61f8      	str	r0, [r7, #28]
        break;
 8003bee:	e010      	b.n	8003c12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <UART_SetConfig+0x454>)
 8003bf2:	61fb      	str	r3, [r7, #28]
        break;
 8003bf4:	e00d      	b.n	8003c12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf6:	f7fe ffa3 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8003bfa:	61f8      	str	r0, [r7, #28]
        break;
 8003bfc:	e009      	b.n	8003c12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c02:	61fb      	str	r3, [r7, #28]
        break;
 8003c04:	e005      	b.n	8003c12 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d077      	beq.n	8003d08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005a      	lsls	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	441a      	add	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d916      	bls.n	8003c62 <UART_SetConfig+0x392>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3a:	d212      	bcs.n	8003c62 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	8afa      	ldrh	r2, [r7, #22]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e052      	b.n	8003d08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c68:	e04e      	b.n	8003d08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d827      	bhi.n	8003cc2 <UART_SetConfig+0x3f2>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x3a8>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cc3 	.word	0x08003cc3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe ffe8 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61f8      	str	r0, [r7, #28]
        break;
 8003ca2:	e014      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe fffa 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003ca8:	61f8      	str	r0, [r7, #28]
        break;
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <UART_SetConfig+0x454>)
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e00d      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe ff45 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8003cb6:	61f8      	str	r0, [r7, #28]
        break;
 8003cb8:	e009      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	61fb      	str	r3, [r7, #28]
        break;
 8003cc0:	e005      	b.n	8003cce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d019      	beq.n	8003d08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085a      	lsrs	r2, r3, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	441a      	add	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d909      	bls.n	8003d02 <UART_SetConfig+0x432>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d205      	bcs.n	8003d02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	e002      	b.n	8003d08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	00f42400 	.word	0x00f42400

08003d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d10a      	bne.n	8003e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e7c:	f7fd fd66 	bl	800194c <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10e      	bne.n	8003eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f82d 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e023      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d10e      	bne.n	8003eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f817 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00d      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b09c      	sub	sp, #112	; 0x70
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	e0a5      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	f000 80a1 	beq.w	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd fd17 	bl	800194c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13e      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f44:	667b      	str	r3, [r7, #100]	; 0x64
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e6      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e067      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d04f      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d147      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e6      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3308      	adds	r3, #8
 800400e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004028:	623a      	str	r2, [r7, #32]
 800402a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	61bb      	str	r3, [r7, #24]
   return(result);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e5      	bne.n	8004008 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e010      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	f43f af4a 	beq.w	8003f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3770      	adds	r7, #112	; 0x70
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <fire_configure_activations>:


AI_DECLARE_STATIC
ai_bool fire_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	3303      	adds	r3, #3
 8004098:	f023 0303 	bic.w	r3, r3, #3
 800409c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <fire_configure_activations+0x80>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <fire_configure_activations+0x80>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <fire_configure_activations+0x84>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <fire_configure_activations+0x84>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <fire_configure_activations+0x88>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <fire_configure_activations+0x88>)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 32);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3320      	adds	r3, #32
 80040c6:	4a13      	ldr	r2, [pc, #76]	; (8004114 <fire_configure_activations+0x8c>)
 80040c8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 32);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3320      	adds	r3, #32
 80040ce:	4a11      	ldr	r2, [pc, #68]	; (8004114 <fire_configure_activations+0x8c>)
 80040d0:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 80040d2:	4a11      	ldr	r2, [pc, #68]	; (8004118 <fire_configure_activations+0x90>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 80040d8:	4a0f      	ldr	r2, [pc, #60]	; (8004118 <fire_configure_activations+0x90>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 20);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3314      	adds	r3, #20
 80040e2:	4a0e      	ldr	r2, [pc, #56]	; (800411c <fire_configure_activations+0x94>)
 80040e4:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 20);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3314      	adds	r3, #20
 80040ea:	4a0c      	ldr	r2, [pc, #48]	; (800411c <fire_configure_activations+0x94>)
 80040ec:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <fire_configure_activations+0x98>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <fire_configure_activations+0x98>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000108 	.word	0x20000108
 800410c:	20000118 	.word	0x20000118
 8004110:	20000128 	.word	0x20000128
 8004114:	20000138 	.word	0x20000138
 8004118:	20000148 	.word	0x20000148
 800411c:	20000158 	.word	0x20000158
 8004120:	20000168 	.word	0x20000168

08004124 <fire_configure_weights>:


AI_DECLARE_STATIC
ai_bool fire_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004134:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <fire_configure_weights+0xd0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800413c:	4a2d      	ldr	r2, [pc, #180]	; (80041f4 <fire_configure_weights+0xd0>)
 800413e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 348);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8004146:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <fire_configure_weights+0xd0>)
 8004148:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 348);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8004150:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <fire_configure_weights+0xd0>)
 8004152:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <fire_configure_weights+0xd4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415c:	4a26      	ldr	r2, [pc, #152]	; (80041f8 <fire_configure_weights+0xd4>)
 800415e:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 308);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8004166:	4a24      	ldr	r2, [pc, #144]	; (80041f8 <fire_configure_weights+0xd4>)
 8004168:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 308);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8004170:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <fire_configure_weights+0xd4>)
 8004172:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <fire_configure_weights+0xd8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <fire_configure_weights+0xd8>)
 800417e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 288);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <fire_configure_weights+0xd8>)
 8004188:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 288);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004190:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <fire_configure_weights+0xd8>)
 8004192:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <fire_configure_weights+0xdc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <fire_configure_weights+0xdc>)
 800419e:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3380      	adds	r3, #128	; 0x80
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <fire_configure_weights+0xdc>)
 80041a6:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3380      	adds	r3, #128	; 0x80
 80041ac:	4a14      	ldr	r2, [pc, #80]	; (8004200 <fire_configure_weights+0xdc>)
 80041ae:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <fire_configure_weights+0xe0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041b8:	4a12      	ldr	r2, [pc, #72]	; (8004204 <fire_configure_weights+0xe0>)
 80041ba:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 96);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3360      	adds	r3, #96	; 0x60
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <fire_configure_weights+0xe0>)
 80041c2:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 96);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3360      	adds	r3, #96	; 0x60
 80041c8:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <fire_configure_weights+0xe0>)
 80041ca:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <fire_configure_weights+0xe4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <fire_configure_weights+0xe4>)
 80041d6:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 80041d8:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <fire_configure_weights+0xe4>)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <fire_configure_weights+0xe4>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80041e4:	2301      	movs	r3, #1
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	200000a8 	.word	0x200000a8
 80041f8:	200000b8 	.word	0x200000b8
 80041fc:	200000c8 	.word	0x200000c8
 8004200:	200000d8 	.word	0x200000d8
 8004204:	200000e8 	.word	0x200000e8
 8004208:	200000f8 	.word	0x200000f8

0800420c <ai_fire_create>:
}

AI_API_ENTRY
ai_error ai_fire_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af02      	add	r7, sp, #8
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004216:	2300      	movs	r3, #0
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2303      	movs	r3, #3
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2301      	movs	r3, #1
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <ai_fire_create+0x28>)
 8004222:	6839      	ldr	r1, [r7, #0]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f881 	bl	800432c <ai_platform_network_create>
 800422a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000048 	.word	0x20000048

08004238 <ai_fire_init>:
}

AI_API_ENTRY
ai_bool ai_fire_init(
  ai_handle network, const ai_network_params* params)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8c9 	bl	80043dc <ai_platform_network_init>
 800424a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <ai_fire_init+0x1e>
 8004252:	2300      	movs	r3, #0
 8004254:	e02b      	b.n	80042ae <ai_fire_init+0x76>

  ai_bool ok = true;
 8004256:	2301      	movs	r3, #1
 8004258:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_weights(net_ctx, &params->params);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff60 	bl	8004124 <fire_configure_weights>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_activations(net_ctx, &params->activations);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	3318      	adds	r3, #24
 800427a:	4619      	mov	r1, r3
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff ff03 	bl	8004088 <fire_configure_activations>
 8004282:	4603      	mov	r3, r0
 8004284:	461a      	mov	r2, r3
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f91f 	bl	80044d8 <ai_platform_network_post_init>
 800429a:	4603      	mov	r3, r0
 800429c:	461a      	mov	r2, r3
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	72fb      	strb	r3, [r7, #11]

  return ok;
 80042ac:	7afb      	ldrb	r3, [r7, #11]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <ai_fire_run>:


AI_API_ENTRY
ai_i32 ai_fire_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f94e 	bl	8004568 <ai_platform_network_process>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <ai_fire_data_weights_get>:
#include "fire_data.h"

ai_handle ai_fire_data_weights_get(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
    0x92, 0xe6, 0x3f, 0x10, 0x57, 0x49, 0xbf, 0x93, 0xd9,
    0x7a, 0x3f, 0x86, 0xfd, 0xd0, 0xbf, 0xfd, 0x48, 0x0e,
    0xbf, 0xdb, 0xbb, 0x2b, 0x3d, 0xdb, 0xbb, 0x2b, 0xbd
  };

  return AI_HANDLE_PTR(s_fire_weights);
 80042dc:	4b02      	ldr	r3, [pc, #8]	; (80042e8 <ai_fire_data_weights_get+0x10>)

}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	080087ec 	.word	0x080087ec

080042ec <_platform_network_state_setup.isra.1>:
 80042ec:	b430      	push	{r4, r5}
 80042ee:	68dd      	ldr	r5, [r3, #12]
 80042f0:	695c      	ldr	r4, [r3, #20]
 80042f2:	68ed      	ldr	r5, [r5, #12]
 80042f4:	68e4      	ldr	r4, [r4, #12]
 80042f6:	fb04 f405 	mul.w	r4, r4, r5
 80042fa:	6084      	str	r4, [r0, #8]
 80042fc:	8809      	ldrh	r1, [r1, #0]
 80042fe:	fb04 f401 	mul.w	r4, r4, r1
 8004302:	60c4      	str	r4, [r0, #12]
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	6041      	str	r1, [r0, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	4414      	add	r4, r2
 800430c:	6004      	str	r4, [r0, #0]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	6814      	ldr	r4, [r2, #0]
 8004312:	00a4      	lsls	r4, r4, #2
 8004314:	d407      	bmi.n	8004326 <_platform_network_state_setup.isra.1+0x3a>
 8004316:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	4421      	add	r1, r4
 800431e:	6091      	str	r1, [r2, #8]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	6842      	ldr	r2, [r0, #4]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	bc30      	pop	{r4, r5}
 8004328:	4770      	bx	lr
	...

0800432c <ai_platform_network_create>:
 800432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004330:	4e23      	ldr	r6, [pc, #140]	; (80043c0 <ai_platform_network_create+0x94>)
 8004332:	4924      	ldr	r1, [pc, #144]	; (80043c4 <ai_platform_network_create+0x98>)
 8004334:	6835      	ldr	r5, [r6, #0]
 8004336:	b082      	sub	sp, #8
 8004338:	f025 0501 	bic.w	r5, r5, #1
 800433c:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8004340:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004344:	6035      	str	r5, [r6, #0]
 8004346:	2501      	movs	r5, #1
 8004348:	600d      	str	r5, [r1, #0]
 800434a:	680d      	ldr	r5, [r1, #0]
 800434c:	2d00      	cmp	r5, #0
 800434e:	d1fc      	bne.n	800434a <ai_platform_network_create+0x1e>
 8004350:	491d      	ldr	r1, [pc, #116]	; (80043c8 <ai_platform_network_create+0x9c>)
 8004352:	4e1e      	ldr	r6, [pc, #120]	; (80043cc <ai_platform_network_create+0xa0>)
 8004354:	600e      	str	r6, [r1, #0]
 8004356:	680e      	ldr	r6, [r1, #0]
 8004358:	491d      	ldr	r1, [pc, #116]	; (80043d0 <ai_platform_network_create+0xa4>)
 800435a:	428e      	cmp	r6, r1
 800435c:	d000      	beq.n	8004360 <ai_platform_network_create+0x34>
 800435e:	e7fe      	b.n	800435e <ai_platform_network_create+0x32>
 8004360:	b1d0      	cbz	r0, 8004398 <ai_platform_network_create+0x6c>
 8004362:	4698      	mov	r8, r3
 8004364:	4613      	mov	r3, r2
 8004366:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <ai_platform_network_create+0xa8>)
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	6003      	str	r3, [r0, #0]
 800436c:	4606      	mov	r6, r0
 800436e:	f000 fb05 	bl	800497c <core_init>
 8004372:	b1b0      	cbz	r0, 80043a2 <ai_platform_network_create+0x76>
 8004374:	0223      	lsls	r3, r4, #8
 8004376:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800437a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800437e:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004382:	d910      	bls.n	80043a6 <ai_platform_network_create+0x7a>
 8004384:	2201      	movs	r2, #1
 8004386:	2300      	movs	r3, #0
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	2310      	movs	r3, #16
 800438c:	2000      	movs	r0, #0
 800438e:	f362 0007 	bfi	r0, r2, #0, #8
 8004392:	f363 201f 	bfi	r0, r3, #8, #24
 8004396:	e001      	b.n	800439c <ai_platform_network_create+0x70>
 8004398:	f241 0010 	movw	r0, #4112	; 0x1010
 800439c:	b002      	add	sp, #8
 800439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a2:	2230      	movs	r2, #48	; 0x30
 80043a4:	e7ef      	b.n	8004386 <ai_platform_network_create+0x5a>
 80043a6:	a802      	add	r0, sp, #8
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <ai_platform_network_create+0xac>)
 80043aa:	f840 3d04 	str.w	r3, [r0, #-4]!
 80043ae:	f001 f849 	bl	8005444 <ai_check_custom_types>
 80043b2:	b110      	cbz	r0, 80043ba <ai_platform_network_create+0x8e>
 80043b4:	462b      	mov	r3, r5
 80043b6:	462a      	mov	r2, r5
 80043b8:	e7e8      	b.n	800438c <ai_platform_network_create+0x60>
 80043ba:	2202      	movs	r2, #2
 80043bc:	e7e3      	b.n	8004386 <ai_platform_network_create+0x5a>
 80043be:	bf00      	nop
 80043c0:	e0002000 	.word	0xe0002000
 80043c4:	40023008 	.word	0x40023008
 80043c8:	40023000 	.word	0x40023000
 80043cc:	f407a5c2 	.word	0xf407a5c2
 80043d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80043d4:	a1c00100 	.word	0xa1c00100
 80043d8:	84048403 	.word	0x84048403

080043dc <ai_platform_network_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	460c      	mov	r4, r1
 80043e0:	4605      	mov	r5, r0
 80043e2:	b120      	cbz	r0, 80043ee <ai_platform_network_init+0x12>
 80043e4:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <ai_platform_network_init+0xe4>)
 80043e6:	6802      	ldr	r2, [r0, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf18      	it	ne
 80043ec:	2500      	movne	r5, #0
 80043ee:	4935      	ldr	r1, [pc, #212]	; (80044c4 <ai_platform_network_init+0xe8>)
 80043f0:	4a35      	ldr	r2, [pc, #212]	; (80044c8 <ai_platform_network_init+0xec>)
 80043f2:	680b      	ldr	r3, [r1, #0]
 80043f4:	2001      	movs	r0, #1
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	6010      	str	r0, [r2, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2a00      	cmp	r2, #0
 8004404:	d1fc      	bne.n	8004400 <ai_platform_network_init+0x24>
 8004406:	4b31      	ldr	r3, [pc, #196]	; (80044cc <ai_platform_network_init+0xf0>)
 8004408:	4a31      	ldr	r2, [pc, #196]	; (80044d0 <ai_platform_network_init+0xf4>)
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <ai_platform_network_init+0xf8>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d000      	beq.n	8004416 <ai_platform_network_init+0x3a>
 8004414:	e7fe      	b.n	8004414 <ai_platform_network_init+0x38>
 8004416:	b33d      	cbz	r5, 8004468 <ai_platform_network_init+0x8c>
 8004418:	b344      	cbz	r4, 800446c <ai_platform_network_init+0x90>
 800441a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800441c:	6926      	ldr	r6, [r4, #16]
 800441e:	2f00      	cmp	r7, #0
 8004420:	d03d      	beq.n	800449e <ai_platform_network_init+0xc2>
 8004422:	b35e      	cbz	r6, 800447c <ai_platform_network_init+0xa0>
 8004424:	4627      	mov	r7, r4
 8004426:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004428:	f105 0618 	add.w	r6, r5, #24
 800442c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800442e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004432:	e886 0003 	stmia.w	r6, {r0, r1}
 8004436:	3418      	adds	r4, #24
 8004438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800443a:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800443e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004440:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004444:	e886 0003 	stmia.w	r6, {r0, r1}
 8004448:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800444a:	2303      	movs	r3, #3
 800444c:	60eb      	str	r3, [r5, #12]
 800444e:	b15a      	cbz	r2, 8004468 <ai_platform_network_init+0x8c>
 8004450:	68d3      	ldr	r3, [r2, #12]
 8004452:	6095      	str	r5, [r2, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d007      	beq.n	8004468 <ai_platform_network_init+0x8c>
 8004458:	b133      	cbz	r3, 8004468 <ai_platform_network_init+0x8c>
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	609d      	str	r5, [r3, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d002      	beq.n	8004468 <ai_platform_network_init+0x8c>
 8004462:	4613      	mov	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f8      	bne.n	800445a <ai_platform_network_init+0x7e>
 8004468:	4628      	mov	r0, r5
 800446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446c:	f105 0010 	add.w	r0, r5, #16
 8004470:	2211      	movs	r2, #17
 8004472:	2110      	movs	r1, #16
 8004474:	f000 fa84 	bl	8004980 <core_set_error>
 8004478:	4625      	mov	r5, r4
 800447a:	e7f5      	b.n	8004468 <ai_platform_network_init+0x8c>
 800447c:	8921      	ldrh	r1, [r4, #8]
 800447e:	88e2      	ldrh	r2, [r4, #6]
 8004480:	68e3      	ldr	r3, [r4, #12]
 8004482:	fb02 f201 	mul.w	r2, r2, r1
 8004486:	fb03 f302 	mul.w	r3, r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0ca      	beq.n	8004424 <ai_platform_network_init+0x48>
 800448e:	f105 0010 	add.w	r0, r5, #16
 8004492:	2212      	movs	r2, #18
 8004494:	2110      	movs	r1, #16
 8004496:	f000 fa73 	bl	8004980 <core_set_error>
 800449a:	4635      	mov	r5, r6
 800449c:	e7e4      	b.n	8004468 <ai_platform_network_init+0x8c>
 800449e:	8c21      	ldrh	r1, [r4, #32]
 80044a0:	8be2      	ldrh	r2, [r4, #30]
 80044a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a4:	fb02 f201 	mul.w	r2, r2, r1
 80044a8:	fb03 f302 	mul.w	r3, r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0b8      	beq.n	8004422 <ai_platform_network_init+0x46>
 80044b0:	f105 0010 	add.w	r0, r5, #16
 80044b4:	2213      	movs	r2, #19
 80044b6:	2110      	movs	r1, #16
 80044b8:	f000 fa62 	bl	8004980 <core_set_error>
 80044bc:	463d      	mov	r5, r7
 80044be:	e7d3      	b.n	8004468 <ai_platform_network_init+0x8c>
 80044c0:	a1c00100 	.word	0xa1c00100
 80044c4:	e0002000 	.word	0xe0002000
 80044c8:	40023008 	.word	0x40023008
 80044cc:	40023000 	.word	0x40023000
 80044d0:	f407a5c2 	.word	0xf407a5c2
 80044d4:	b5e8b5cd 	.word	0xb5e8b5cd

080044d8 <ai_platform_network_post_init>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	b120      	cbz	r0, 80044e8 <ai_platform_network_post_init+0x10>
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <ai_platform_network_post_init+0x78>)
 80044e0:	6802      	ldr	r2, [r0, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	bf18      	it	ne
 80044e6:	2400      	movne	r4, #0
 80044e8:	491a      	ldr	r1, [pc, #104]	; (8004554 <ai_platform_network_post_init+0x7c>)
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <ai_platform_network_post_init+0x80>)
 80044ec:	680b      	ldr	r3, [r1, #0]
 80044ee:	2001      	movs	r0, #1
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	600b      	str	r3, [r1, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	6010      	str	r0, [r2, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	d1fc      	bne.n	80044fa <ai_platform_network_post_init+0x22>
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <ai_platform_network_post_init+0x84>)
 8004502:	4a17      	ldr	r2, [pc, #92]	; (8004560 <ai_platform_network_post_init+0x88>)
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b16      	ldr	r3, [pc, #88]	; (8004564 <ai_platform_network_post_init+0x8c>)
 800450a:	429a      	cmp	r2, r3
 800450c:	d000      	beq.n	8004510 <ai_platform_network_post_init+0x38>
 800450e:	e7fe      	b.n	800450e <ai_platform_network_post_init+0x36>
 8004510:	b1a4      	cbz	r4, 800453c <ai_platform_network_post_init+0x64>
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	f013 0502 	ands.w	r5, r3, #2
 8004518:	d012      	beq.n	8004540 <ai_platform_network_post_init+0x68>
 800451a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800451c:	b163      	cbz	r3, 8004538 <ai_platform_network_post_init+0x60>
 800451e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004520:	b91d      	cbnz	r5, 800452a <ai_platform_network_post_init+0x52>
 8004522:	e009      	b.n	8004538 <ai_platform_network_post_init+0x60>
 8004524:	461d      	mov	r5, r3
 8004526:	b13b      	cbz	r3, 8004538 <ai_platform_network_post_init+0x60>
 8004528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800452a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800452c:	4629      	mov	r1, r5
 800452e:	2000      	movs	r0, #0
 8004530:	4798      	blx	r3
 8004532:	68eb      	ldr	r3, [r5, #12]
 8004534:	42ab      	cmp	r3, r5
 8004536:	d1f5      	bne.n	8004524 <ai_platform_network_post_init+0x4c>
 8004538:	2001      	movs	r0, #1
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	4620      	mov	r0, r4
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	f104 0010 	add.w	r0, r4, #16
 8004544:	2210      	movs	r2, #16
 8004546:	2111      	movs	r1, #17
 8004548:	f000 fa1a 	bl	8004980 <core_set_error>
 800454c:	4628      	mov	r0, r5
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	a1c00100 	.word	0xa1c00100
 8004554:	e0002000 	.word	0xe0002000
 8004558:	40023008 	.word	0x40023008
 800455c:	40023000 	.word	0x40023000
 8004560:	f407a5c2 	.word	0xf407a5c2
 8004564:	b5e8b5cd 	.word	0xb5e8b5cd

08004568 <ai_platform_network_process>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	b083      	sub	sp, #12
 800456e:	4604      	mov	r4, r0
 8004570:	9201      	str	r2, [sp, #4]
 8004572:	b120      	cbz	r0, 800457e <ai_platform_network_process+0x16>
 8004574:	4ba5      	ldr	r3, [pc, #660]	; (800480c <ai_platform_network_process+0x2a4>)
 8004576:	6802      	ldr	r2, [r0, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	bf18      	it	ne
 800457c:	2400      	movne	r4, #0
 800457e:	48a4      	ldr	r0, [pc, #656]	; (8004810 <ai_platform_network_process+0x2a8>)
 8004580:	4ba4      	ldr	r3, [pc, #656]	; (8004814 <ai_platform_network_process+0x2ac>)
 8004582:	6802      	ldr	r2, [r0, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	6002      	str	r2, [r0, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2a00      	cmp	r2, #0
 8004592:	d1fc      	bne.n	800458e <ai_platform_network_process+0x26>
 8004594:	4ba0      	ldr	r3, [pc, #640]	; (8004818 <ai_platform_network_process+0x2b0>)
 8004596:	4aa1      	ldr	r2, [pc, #644]	; (800481c <ai_platform_network_process+0x2b4>)
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4ba0      	ldr	r3, [pc, #640]	; (8004820 <ai_platform_network_process+0x2b8>)
 800459e:	429a      	cmp	r2, r3
 80045a0:	d000      	beq.n	80045a4 <ai_platform_network_process+0x3c>
 80045a2:	e7fe      	b.n	80045a2 <ai_platform_network_process+0x3a>
 80045a4:	2c00      	cmp	r4, #0
 80045a6:	d066      	beq.n	8004676 <ai_platform_network_process+0x10e>
 80045a8:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80045ac:	b107      	cbz	r7, 80045b0 <ai_platform_network_process+0x48>
 80045ae:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80045b0:	68e3      	ldr	r3, [r4, #12]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2600      	movs	r6, #0
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	6166      	str	r6, [r4, #20]
 80045bc:	f040 80fe 	bne.w	80047bc <ai_platform_network_process+0x254>
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d07f      	beq.n	80046c4 <ai_platform_network_process+0x15c>
 80045c4:	2f00      	cmp	r7, #0
 80045c6:	d07d      	beq.n	80046c4 <ai_platform_network_process+0x15c>
 80045c8:	883b      	ldrh	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d07a      	beq.n	80046c4 <ai_platform_network_process+0x15c>
 80045ce:	460d      	mov	r5, r1
 80045d0:	46a0      	mov	r8, r4
 80045d2:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80045d6:	429e      	cmp	r6, r3
 80045d8:	d27d      	bcs.n	80046d6 <ai_platform_network_process+0x16e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d07a      	beq.n	80046d6 <ai_platform_network_process+0x16e>
 80045e0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80045e4:	2c00      	cmp	r4, #0
 80045e6:	d076      	beq.n	80046d6 <ai_platform_network_process+0x16e>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80045f0:	d067      	beq.n	80046c2 <ai_platform_network_process+0x15a>
 80045f2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80045f6:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80045fa:	69a0      	ldr	r0, [r4, #24]
 80045fc:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004600:	6841      	ldr	r1, [r0, #4]
 8004602:	fb0b f30e 	mul.w	r3, fp, lr
 8004606:	fb0c f303 	mul.w	r3, ip, r3
 800460a:	4299      	cmp	r1, r3
 800460c:	d350      	bcc.n	80046b0 <ai_platform_network_process+0x148>
 800460e:	68e3      	ldr	r3, [r4, #12]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	455a      	cmp	r2, fp
 8004614:	d14c      	bne.n	80046b0 <ai_platform_network_process+0x148>
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4572      	cmp	r2, lr
 800461a:	d149      	bne.n	80046b0 <ai_platform_network_process+0x148>
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	459c      	cmp	ip, r3
 8004620:	d146      	bne.n	80046b0 <ai_platform_network_process+0x148>
 8004622:	6800      	ldr	r0, [r0, #0]
 8004624:	f000 ffbe 	bl	80055a4 <ai_array_get_byte_size>
 8004628:	68e2      	ldr	r2, [r4, #12]
 800462a:	6963      	ldr	r3, [r4, #20]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	fb03 f302 	mul.w	r3, r3, r2
 8004634:	4298      	cmp	r0, r3
 8004636:	d33b      	bcc.n	80046b0 <ai_platform_network_process+0x148>
 8004638:	69a3      	ldr	r3, [r4, #24]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	f000 ff66 	bl	800550c <ai_array_to_buffer_fmt>
 8004640:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004644:	4043      	eors	r3, r0
 8004646:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800464a:	d128      	bne.n	800469e <ai_platform_network_process+0x136>
 800464c:	68eb      	ldr	r3, [r5, #12]
 800464e:	b1f3      	cbz	r3, 800468e <ai_platform_network_process+0x126>
 8004650:	f8b5 b000 	ldrh.w	fp, [r5]
 8004654:	f1bb 0f00 	cmp.w	fp, #0
 8004658:	d012      	beq.n	8004680 <ai_platform_network_process+0x118>
 800465a:	4623      	mov	r3, r4
 800465c:	f105 020c 	add.w	r2, r5, #12
 8004660:	4629      	mov	r1, r5
 8004662:	4650      	mov	r0, sl
 8004664:	f7ff fe42 	bl	80042ec <_platform_network_state_setup.isra.1>
 8004668:	45d9      	cmp	r9, fp
 800466a:	883b      	ldrh	r3, [r7, #0]
 800466c:	bf38      	it	cc
 800466e:	46d9      	movcc	r9, fp
 8004670:	3601      	adds	r6, #1
 8004672:	3518      	adds	r5, #24
 8004674:	e7af      	b.n	80045d6 <ai_platform_network_process+0x6e>
 8004676:	46a3      	mov	fp, r4
 8004678:	4658      	mov	r0, fp
 800467a:	b003      	add	sp, #12
 800467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004680:	f108 0010 	add.w	r0, r8, #16
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	2112      	movs	r1, #18
 8004688:	f000 f97a 	bl	8004980 <core_set_error>
 800468c:	e7f4      	b.n	8004678 <ai_platform_network_process+0x110>
 800468e:	f108 0010 	add.w	r0, r8, #16
 8004692:	2217      	movs	r2, #23
 8004694:	2112      	movs	r1, #18
 8004696:	469b      	mov	fp, r3
 8004698:	f000 f972 	bl	8004980 <core_set_error>
 800469c:	e7ec      	b.n	8004678 <ai_platform_network_process+0x110>
 800469e:	f108 0010 	add.w	r0, r8, #16
 80046a2:	2219      	movs	r2, #25
 80046a4:	2112      	movs	r1, #18
 80046a6:	f000 f96b 	bl	8004980 <core_set_error>
 80046aa:	f04f 0b00 	mov.w	fp, #0
 80046ae:	e7e3      	b.n	8004678 <ai_platform_network_process+0x110>
 80046b0:	f108 0010 	add.w	r0, r8, #16
 80046b4:	2218      	movs	r2, #24
 80046b6:	2112      	movs	r1, #18
 80046b8:	f000 f962 	bl	8004980 <core_set_error>
 80046bc:	f04f 0b00 	mov.w	fp, #0
 80046c0:	e7da      	b.n	8004678 <ai_platform_network_process+0x110>
 80046c2:	4644      	mov	r4, r8
 80046c4:	f104 0010 	add.w	r0, r4, #16
 80046c8:	2217      	movs	r2, #23
 80046ca:	2112      	movs	r1, #18
 80046cc:	f000 f958 	bl	8004980 <core_set_error>
 80046d0:	f04f 0b00 	mov.w	fp, #0
 80046d4:	e7d0      	b.n	8004678 <ai_platform_network_process+0x110>
 80046d6:	9a01      	ldr	r2, [sp, #4]
 80046d8:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80046dc:	4644      	mov	r4, r8
 80046de:	2a00      	cmp	r2, #0
 80046e0:	f000 80a4 	beq.w	800482c <ai_platform_network_process+0x2c4>
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f240 8140 	bls.w	800496a <ai_platform_network_process+0x402>
 80046ea:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80046ee:	f118 0f0c 	cmn.w	r8, #12
 80046f2:	f000 813a 	beq.w	800496a <ai_platform_network_process+0x402>
 80046f6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8135 	beq.w	800496a <ai_platform_network_process+0x402>
 8004700:	3204      	adds	r2, #4
 8004702:	4615      	mov	r5, r2
 8004704:	2700      	movs	r7, #0
 8004706:	429f      	cmp	r7, r3
 8004708:	f080 808c 	bcs.w	8004824 <ai_platform_network_process+0x2bc>
 800470c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8087 	beq.w	8004824 <ai_platform_network_process+0x2bc>
 8004716:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800471a:	2e00      	cmp	r6, #0
 800471c:	f000 8082 	beq.w	8004824 <ai_platform_network_process+0x2bc>
 8004720:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800472a:	d067      	beq.n	80047fc <ai_platform_network_process+0x294>
 800472c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004730:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004734:	69b0      	ldr	r0, [r6, #24]
 8004736:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800473a:	6841      	ldr	r1, [r0, #4]
 800473c:	fb0b f30e 	mul.w	r3, fp, lr
 8004740:	fb0c f303 	mul.w	r3, ip, r3
 8004744:	4299      	cmp	r1, r3
 8004746:	f0c0 8110 	bcc.w	800496a <ai_platform_network_process+0x402>
 800474a:	68f3      	ldr	r3, [r6, #12]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	455a      	cmp	r2, fp
 8004750:	f040 810b 	bne.w	800496a <ai_platform_network_process+0x402>
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	4572      	cmp	r2, lr
 8004758:	f040 8107 	bne.w	800496a <ai_platform_network_process+0x402>
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	459c      	cmp	ip, r3
 8004760:	f040 8103 	bne.w	800496a <ai_platform_network_process+0x402>
 8004764:	6800      	ldr	r0, [r0, #0]
 8004766:	f000 ff1d 	bl	80055a4 <ai_array_get_byte_size>
 800476a:	68f2      	ldr	r2, [r6, #12]
 800476c:	6973      	ldr	r3, [r6, #20]
 800476e:	68d2      	ldr	r2, [r2, #12]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	fb03 f302 	mul.w	r3, r3, r2
 8004776:	4298      	cmp	r0, r3
 8004778:	f0c0 80f7 	bcc.w	800496a <ai_platform_network_process+0x402>
 800477c:	69b3      	ldr	r3, [r6, #24]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	f000 fec4 	bl	800550c <ai_array_to_buffer_fmt>
 8004784:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004788:	4043      	eors	r3, r0
 800478a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800478e:	d12c      	bne.n	80047ea <ai_platform_network_process+0x282>
 8004790:	68eb      	ldr	r3, [r5, #12]
 8004792:	b313      	cbz	r3, 80047da <ai_platform_network_process+0x272>
 8004794:	f8b5 b000 	ldrh.w	fp, [r5]
 8004798:	f1bb 0f00 	cmp.w	fp, #0
 800479c:	d016      	beq.n	80047cc <ai_platform_network_process+0x264>
 800479e:	4633      	mov	r3, r6
 80047a0:	f105 020c 	add.w	r2, r5, #12
 80047a4:	4629      	mov	r1, r5
 80047a6:	4650      	mov	r0, sl
 80047a8:	f7ff fda0 	bl	80042ec <_platform_network_state_setup.isra.1>
 80047ac:	45d9      	cmp	r9, fp
 80047ae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80047b2:	bf38      	it	cc
 80047b4:	46d9      	movcc	r9, fp
 80047b6:	3701      	adds	r7, #1
 80047b8:	3518      	adds	r5, #24
 80047ba:	e7a4      	b.n	8004706 <ai_platform_network_process+0x19e>
 80047bc:	f104 0010 	add.w	r0, r4, #16
 80047c0:	2230      	movs	r2, #48	; 0x30
 80047c2:	2111      	movs	r1, #17
 80047c4:	f000 f8dc 	bl	8004980 <core_set_error>
 80047c8:	46b3      	mov	fp, r6
 80047ca:	e755      	b.n	8004678 <ai_platform_network_process+0x110>
 80047cc:	f104 0010 	add.w	r0, r4, #16
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	2113      	movs	r1, #19
 80047d4:	f000 f8d4 	bl	8004980 <core_set_error>
 80047d8:	e74e      	b.n	8004678 <ai_platform_network_process+0x110>
 80047da:	f104 0010 	add.w	r0, r4, #16
 80047de:	2217      	movs	r2, #23
 80047e0:	2113      	movs	r1, #19
 80047e2:	469b      	mov	fp, r3
 80047e4:	f000 f8cc 	bl	8004980 <core_set_error>
 80047e8:	e746      	b.n	8004678 <ai_platform_network_process+0x110>
 80047ea:	f104 0010 	add.w	r0, r4, #16
 80047ee:	2219      	movs	r2, #25
 80047f0:	2113      	movs	r1, #19
 80047f2:	f000 f8c5 	bl	8004980 <core_set_error>
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	e73d      	b.n	8004678 <ai_platform_network_process+0x110>
 80047fc:	f104 0010 	add.w	r0, r4, #16
 8004800:	2217      	movs	r2, #23
 8004802:	2113      	movs	r1, #19
 8004804:	f000 f8bc 	bl	8004980 <core_set_error>
 8004808:	46d3      	mov	fp, sl
 800480a:	e735      	b.n	8004678 <ai_platform_network_process+0x110>
 800480c:	a1c00100 	.word	0xa1c00100
 8004810:	e0002000 	.word	0xe0002000
 8004814:	40023008 	.word	0x40023008
 8004818:	40023000 	.word	0x40023000
 800481c:	f407a5c2 	.word	0xf407a5c2
 8004820:	b5e8b5cd 	.word	0xb5e8b5cd
 8004824:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8004828:	f8a4 9014 	strh.w	r9, [r4, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8099 	beq.w	8004964 <ai_platform_network_process+0x3fc>
 8004832:	2b01      	cmp	r3, #1
 8004834:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004836:	f240 8093 	bls.w	8004960 <ai_platform_network_process+0x3f8>
 800483a:	f105 070c 	add.w	r7, r5, #12
 800483e:	8ae0      	ldrh	r0, [r4, #22]
 8004840:	8aa3      	ldrh	r3, [r4, #20]
 8004842:	4283      	cmp	r3, r0
 8004844:	d977      	bls.n	8004936 <ai_platform_network_process+0x3ce>
 8004846:	46a3      	mov	fp, r4
 8004848:	2d00      	cmp	r5, #0
 800484a:	d032      	beq.n	80048b2 <ai_platform_network_process+0x34a>
 800484c:	882b      	ldrh	r3, [r5, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02f      	beq.n	80048b2 <ai_platform_network_process+0x34a>
 8004852:	686b      	ldr	r3, [r5, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02c      	beq.n	80048b2 <ai_platform_network_process+0x34a>
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f04f 0800 	mov.w	r8, #0
 800485e:	b343      	cbz	r3, 80048b2 <ai_platform_network_process+0x34a>
 8004860:	68a9      	ldr	r1, [r5, #8]
 8004862:	699a      	ldr	r2, [r3, #24]
 8004864:	f8d1 a000 	ldr.w	sl, [r1]
 8004868:	6814      	ldr	r4, [r2, #0]
 800486a:	6890      	ldr	r0, [r2, #8]
 800486c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004870:	eb0a 0609 	add.w	r6, sl, r9
 8004874:	00a4      	lsls	r4, r4, #2
 8004876:	6871      	ldr	r1, [r6, #4]
 8004878:	d45f      	bmi.n	800493a <ai_platform_network_process+0x3d2>
 800487a:	68d4      	ldr	r4, [r2, #12]
 800487c:	1b00      	subs	r0, r0, r4
 800487e:	4401      	add	r1, r0
 8004880:	6091      	str	r1, [r2, #8]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	6872      	ldr	r2, [r6, #4]
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800488c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004890:	440b      	add	r3, r1
 8004892:	4293      	cmp	r3, r2
 8004894:	bf24      	itt	cs
 8004896:	68f3      	ldrcs	r3, [r6, #12]
 8004898:	1ad3      	subcs	r3, r2, r3
 800489a:	6073      	str	r3, [r6, #4]
 800489c:	882b      	ldrh	r3, [r5, #0]
 800489e:	f108 0801 	add.w	r8, r8, #1
 80048a2:	4598      	cmp	r8, r3
 80048a4:	d205      	bcs.n	80048b2 <ai_platform_network_process+0x34a>
 80048a6:	686b      	ldr	r3, [r5, #4]
 80048a8:	b11b      	cbz	r3, 80048b2 <ai_platform_network_process+0x34a>
 80048aa:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1d6      	bne.n	8004860 <ai_platform_network_process+0x2f8>
 80048b2:	4658      	mov	r0, fp
 80048b4:	f000 fdf0 	bl	8005498 <ai_layers_forward_all>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	d032      	beq.n	8004922 <ai_platform_network_process+0x3ba>
 80048bc:	883b      	ldrh	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d02f      	beq.n	8004922 <ai_platform_network_process+0x3ba>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	b36b      	cbz	r3, 8004922 <ai_platform_network_process+0x3ba>
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	b358      	cbz	r0, 8004922 <ai_platform_network_process+0x3ba>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6981      	ldr	r1, [r0, #24]
 80048d2:	f8d3 a000 	ldr.w	sl, [r3]
 80048d6:	680c      	ldr	r4, [r1, #0]
 80048d8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80048dc:	eb0a 0609 	add.w	r6, sl, r9
 80048e0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80048e4:	00a4      	lsls	r4, r4, #2
 80048e6:	eb0c 0302 	add.w	r3, ip, r2
 80048ea:	d42a      	bmi.n	8004942 <ai_platform_network_process+0x3da>
 80048ec:	f85a 2009 	ldr.w	r2, [sl, r9]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	bf24      	itt	cs
 80048f4:	68f3      	ldrcs	r3, [r6, #12]
 80048f6:	1ad3      	subcs	r3, r2, r3
 80048f8:	6073      	str	r3, [r6, #4]
 80048fa:	6981      	ldr	r1, [r0, #24]
 80048fc:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8004900:	1b12      	subs	r2, r2, r4
 8004902:	4413      	add	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
 8004906:	6983      	ldr	r3, [r0, #24]
 8004908:	6872      	ldr	r2, [r6, #4]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	883b      	ldrh	r3, [r7, #0]
 800490e:	f108 0801 	add.w	r8, r8, #1
 8004912:	4598      	cmp	r8, r3
 8004914:	d205      	bcs.n	8004922 <ai_platform_network_process+0x3ba>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	b11b      	cbz	r3, 8004922 <ai_platform_network_process+0x3ba>
 800491a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800491e:	2800      	cmp	r0, #0
 8004920:	d1d5      	bne.n	80048ce <ai_platform_network_process+0x366>
 8004922:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8004926:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800492a:	3001      	adds	r0, #1
 800492c:	b280      	uxth	r0, r0
 800492e:	4283      	cmp	r3, r0
 8004930:	f8ab 0016 	strh.w	r0, [fp, #22]
 8004934:	d888      	bhi.n	8004848 <ai_platform_network_process+0x2e0>
 8004936:	4683      	mov	fp, r0
 8004938:	e69e      	b.n	8004678 <ai_platform_network_process+0x110>
 800493a:	68b2      	ldr	r2, [r6, #8]
 800493c:	f000 fe86 	bl	800564c <memcpy>
 8004940:	e7a2      	b.n	8004888 <ai_platform_network_process+0x320>
 8004942:	6889      	ldr	r1, [r1, #8]
 8004944:	4660      	mov	r0, ip
 8004946:	f000 fe81 	bl	800564c <memcpy>
 800494a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800494e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004952:	440b      	add	r3, r1
 8004954:	4293      	cmp	r3, r2
 8004956:	bf24      	itt	cs
 8004958:	68f3      	ldrcs	r3, [r6, #12]
 800495a:	1ad3      	subcs	r3, r2, r3
 800495c:	6073      	str	r3, [r6, #4]
 800495e:	e7d5      	b.n	800490c <ai_platform_network_process+0x3a4>
 8004960:	2700      	movs	r7, #0
 8004962:	e76c      	b.n	800483e <ai_platform_network_process+0x2d6>
 8004964:	461d      	mov	r5, r3
 8004966:	461f      	mov	r7, r3
 8004968:	e769      	b.n	800483e <ai_platform_network_process+0x2d6>
 800496a:	f104 0010 	add.w	r0, r4, #16
 800496e:	2218      	movs	r2, #24
 8004970:	2113      	movs	r1, #19
 8004972:	f000 f805 	bl	8004980 <core_set_error>
 8004976:	f04f 0b00 	mov.w	fp, #0
 800497a:	e67d      	b.n	8004678 <ai_platform_network_process+0x110>

0800497c <core_init>:
 800497c:	2001      	movs	r0, #1
 800497e:	4770      	bx	lr

08004980 <core_set_error>:
 8004980:	7803      	ldrb	r3, [r0, #0]
 8004982:	b933      	cbnz	r3, 8004992 <core_set_error+0x12>
 8004984:	7001      	strb	r1, [r0, #0]
 8004986:	6803      	ldr	r3, [r0, #0]
 8004988:	f362 231f 	bfi	r3, r2, #8, #24
 800498c:	6003      	str	r3, [r0, #0]
 800498e:	2001      	movs	r0, #1
 8004990:	4770      	bx	lr
 8004992:	2000      	movs	r0, #0
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop

08004998 <ai_dict8_dot_array_f32>:
 8004998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800499c:	f8dd c020 	ldr.w	ip, [sp, #32]
 80049a0:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80049a4:	f000 80c0 	beq.w	8004b28 <ai_dict8_dot_array_f32+0x190>
 80049a8:	f101 0408 	add.w	r4, r1, #8
 80049ac:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80049b0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004b30 <ai_dict8_dot_array_f32+0x198>
 80049b4:	eb04 0e09 	add.w	lr, r4, r9
 80049b8:	f103 0520 	add.w	r5, r3, #32
 80049bc:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80049c0:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80049c4:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80049c8:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80049cc:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80049d0:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80049d4:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80049d8:	ed55 3a04 	vldr	s7, [r5, #-16]
 80049dc:	ed55 4a03 	vldr	s9, [r5, #-12]
 80049e0:	ed55 5a02 	vldr	s11, [r5, #-8]
 80049e4:	ed55 6a01 	vldr	s13, [r5, #-4]
 80049e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80049ec:	edd6 7a00 	vldr	s15, [r6]
 80049f0:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80049f4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80049f8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80049fc:	ed9a 3a00 	vldr	s6, [sl]
 8004a00:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8004a04:	eee3 7a05 	vfma.f32	s15, s6, s10
 8004a08:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004a0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004a10:	ed97 3a00 	vldr	s6, [r7]
 8004a14:	ed96 5a00 	vldr	s10, [r6]
 8004a18:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8004a1c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8004a20:	eee3 7a04 	vfma.f32	s15, s6, s8
 8004a24:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004a28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004a2c:	ed9a 3a00 	vldr	s6, [sl]
 8004a30:	ed96 4a00 	vldr	s8, [r6]
 8004a34:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8004a38:	eee5 7a06 	vfma.f32	s15, s10, s12
 8004a3c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004a40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004a44:	ed97 5a00 	vldr	s10, [r7]
 8004a48:	ed96 6a00 	vldr	s12, [r6]
 8004a4c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004a50:	3408      	adds	r4, #8
 8004a52:	45a6      	cmp	lr, r4
 8004a54:	f105 0520 	add.w	r5, r5, #32
 8004a58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004a5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004a60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a68:	d1a8      	bne.n	80049bc <ai_dict8_dot_array_f32+0x24>
 8004a6a:	4449      	add	r1, r9
 8004a6c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004a70:	f01c 0c07 	ands.w	ip, ip, #7
 8004a74:	d050      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004a76:	780c      	ldrb	r4, [r1, #0]
 8004a78:	edd3 6a00 	vldr	s13, [r3]
 8004a7c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a80:	edd4 7a00 	vldr	s15, [r4]
 8004a84:	f1bc 0f01 	cmp.w	ip, #1
 8004a88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a8c:	d044      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004a8e:	784c      	ldrb	r4, [r1, #1]
 8004a90:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a94:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a98:	edd4 7a00 	vldr	s15, [r4]
 8004a9c:	f1bc 0f02 	cmp.w	ip, #2
 8004aa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004aa4:	d038      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004aa6:	788c      	ldrb	r4, [r1, #2]
 8004aa8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aac:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004ab0:	edd4 7a00 	vldr	s15, [r4]
 8004ab4:	f1bc 0f03 	cmp.w	ip, #3
 8004ab8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004abc:	d02c      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004abe:	78cc      	ldrb	r4, [r1, #3]
 8004ac0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ac4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004ac8:	edd4 7a00 	vldr	s15, [r4]
 8004acc:	f1bc 0f04 	cmp.w	ip, #4
 8004ad0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ad4:	d020      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004ad6:	790c      	ldrb	r4, [r1, #4]
 8004ad8:	edd3 6a04 	vldr	s13, [r3, #16]
 8004adc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004ae0:	edd4 7a00 	vldr	s15, [r4]
 8004ae4:	f1bc 0f05 	cmp.w	ip, #5
 8004ae8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004aec:	d014      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004aee:	794c      	ldrb	r4, [r1, #5]
 8004af0:	edd3 6a05 	vldr	s13, [r3, #20]
 8004af4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004af8:	edd4 7a00 	vldr	s15, [r4]
 8004afc:	f1bc 0f06 	cmp.w	ip, #6
 8004b00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b04:	d008      	beq.n	8004b18 <ai_dict8_dot_array_f32+0x180>
 8004b06:	7989      	ldrb	r1, [r1, #6]
 8004b08:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004b10:	edd2 6a00 	vldr	s13, [r2]
 8004b14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b18:	edd0 7a00 	vldr	s15, [r0]
 8004b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b20:	ed80 7a00 	vstr	s14, [r0]
 8004b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b28:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004b30 <ai_dict8_dot_array_f32+0x198>
 8004b2c:	e7a0      	b.n	8004a70 <ai_dict8_dot_array_f32+0xd8>
 8004b2e:	bf00      	nop
 8004b30:	00000000 	.word	0x00000000

08004b34 <ai_dict4_dot_array_f32>:
 8004b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b3a:	f027 0c01 	bic.w	ip, r7, #1
 8004b3e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8004b42:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004b46:	f000 80ae 	beq.w	8004ca6 <ai_dict4_dot_array_f32+0x172>
 8004b4a:	1d0d      	adds	r5, r1, #4
 8004b4c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8004b50:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004cac <ai_dict4_dot_array_f32+0x178>
 8004b54:	eb05 0e09 	add.w	lr, r5, r9
 8004b58:	f103 0420 	add.w	r4, r3, #32
 8004b5c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004b60:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8004b64:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8004b68:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8004b6c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004b70:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8004b74:	ed14 5a04 	vldr	s10, [r4, #-16]
 8004b78:	ed54 5a03 	vldr	s11, [r4, #-12]
 8004b7c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004b80:	ed54 6a01 	vldr	s13, [r4, #-4]
 8004b84:	f006 0a0f 	and.w	sl, r6, #15
 8004b88:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b8c:	edda 7a00 	vldr	s15, [sl]
 8004b90:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8004b94:	0936      	lsrs	r6, r6, #4
 8004b96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b9a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004b9e:	ed96 3a00 	vldr	s6, [r6]
 8004ba2:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8004ba6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004baa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004bae:	f00b 0b0f 	and.w	fp, fp, #15
 8004bb2:	edd6 3a00 	vldr	s7, [r6]
 8004bb6:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8004bba:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004bbe:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004bc2:	3504      	adds	r5, #4
 8004bc4:	ed9b 4a00 	vldr	s8, [fp]
 8004bc8:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8004bcc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004bd0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004bd4:	f00a 0a0f 	and.w	sl, sl, #15
 8004bd8:	eddb 4a00 	vldr	s9, [fp]
 8004bdc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004be0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004be4:	45ae      	cmp	lr, r5
 8004be6:	ed9a 5a00 	vldr	s10, [sl]
 8004bea:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8004bee:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004bf2:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004bf6:	f006 060f 	and.w	r6, r6, #15
 8004bfa:	edda 5a00 	vldr	s11, [sl]
 8004bfe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004c02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004c06:	f104 0420 	add.w	r4, r4, #32
 8004c0a:	ed96 6a00 	vldr	s12, [r6]
 8004c0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c16:	d1a1      	bne.n	8004b5c <ai_dict4_dot_array_f32+0x28>
 8004c18:	4449      	add	r1, r9
 8004c1a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004c1e:	459c      	cmp	ip, r3
 8004c20:	d92d      	bls.n	8004c7e <ai_dict4_dot_array_f32+0x14a>
 8004c22:	f10c 0c07 	add.w	ip, ip, #7
 8004c26:	f103 0508 	add.w	r5, r3, #8
 8004c2a:	ebac 0c05 	sub.w	ip, ip, r5
 8004c2e:	f02c 0407 	bic.w	r4, ip, #7
 8004c32:	f103 0810 	add.w	r8, r3, #16
 8004c36:	44a0      	add	r8, r4
 8004c38:	f101 3eff 	add.w	lr, r1, #4294967295
 8004c3c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8004c40:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004c44:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004c48:	f004 060f 	and.w	r6, r4, #15
 8004c4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004c50:	0924      	lsrs	r4, r4, #4
 8004c52:	edd6 7a00 	vldr	s15, [r6]
 8004c56:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004c5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c5e:	ed94 6a00 	vldr	s12, [r4]
 8004c62:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004c66:	3508      	adds	r5, #8
 8004c68:	45a8      	cmp	r8, r5
 8004c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c6e:	d1e5      	bne.n	8004c3c <ai_dict4_dot_array_f32+0x108>
 8004c70:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004c74:	f10c 0c01 	add.w	ip, ip, #1
 8004c78:	4461      	add	r1, ip
 8004c7a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004c7e:	07fc      	lsls	r4, r7, #31
 8004c80:	d509      	bpl.n	8004c96 <ai_dict4_dot_array_f32+0x162>
 8004c82:	7809      	ldrb	r1, [r1, #0]
 8004c84:	edd3 7a00 	vldr	s15, [r3]
 8004c88:	090b      	lsrs	r3, r1, #4
 8004c8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004c8e:	edd2 6a00 	vldr	s13, [r2]
 8004c92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c96:	edd0 7a00 	vldr	s15, [r0]
 8004c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9e:	ed80 7a00 	vstr	s14, [r0]
 8004ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004cac <ai_dict4_dot_array_f32+0x178>
 8004caa:	e7b8      	b.n	8004c1e <ai_dict4_dot_array_f32+0xea>
 8004cac:	00000000 	.word	0x00000000

08004cb0 <forward_dense>:
 8004cb0:	6942      	ldr	r2, [r0, #20]
 8004cb2:	8813      	ldrh	r3, [r2, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 81ca 	beq.w	800504e <forward_dense+0x39e>
 8004cba:	6852      	ldr	r2, [r2, #4]
 8004cbc:	6850      	ldr	r0, [r2, #4]
 8004cbe:	b100      	cbz	r0, 8004cc2 <forward_dense+0x12>
 8004cc0:	6800      	ldr	r0, [r0, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	f240 81c0 	bls.w	8005048 <forward_dense+0x398>
 8004cc8:	6911      	ldr	r1, [r2, #16]
 8004cca:	b101      	cbz	r1, 8004cce <forward_dense+0x1e>
 8004ccc:	6809      	ldr	r1, [r1, #0]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	f000 81bf 	beq.w	8005052 <forward_dense+0x3a2>
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	ed2d 8b10 	vpush	{d8-d15}
 8004cdc:	69d3      	ldr	r3, [r2, #28]
 8004cde:	b091      	sub	sp, #68	; 0x44
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 820b 	beq.w	80050fc <forward_dense+0x44c>
 8004ce6:	681c      	ldr	r4, [r3, #0]
 8004ce8:	9408      	str	r4, [sp, #32]
 8004cea:	f112 0418 	adds.w	r4, r2, #24
 8004cee:	f000 81df 	beq.w	80050b0 <forward_dense+0x400>
 8004cf2:	8b12      	ldrh	r2, [r2, #24]
 8004cf4:	2a01      	cmp	r2, #1
 8004cf6:	f240 81fe 	bls.w	80050f6 <forward_dense+0x446>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 81da 	beq.w	80050b4 <forward_dense+0x404>
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	9306      	str	r3, [sp, #24]
 8004d04:	9b08      	ldr	r3, [sp, #32]
 8004d06:	68cc      	ldr	r4, [r1, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	68c5      	ldr	r5, [r0, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8004d12:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004d16:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8004d1a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8004d1e:	fa4c f505 	asr.w	r5, ip, r5
 8004d22:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8004d26:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d28:	2a04      	cmp	r2, #4
 8004d2a:	fb07 f506 	mul.w	r5, r7, r6
 8004d2e:	6864      	ldr	r4, [r4, #4]
 8004d30:	9507      	str	r5, [sp, #28]
 8004d32:	f000 81dd 	beq.w	80050f0 <forward_dense+0x440>
 8004d36:	2a08      	cmp	r2, #8
 8004d38:	f000 81da 	beq.w	80050f0 <forward_dense+0x440>
 8004d3c:	f04f 0a00 	mov.w	sl, #0
 8004d40:	698a      	ldr	r2, [r1, #24]
 8004d42:	6981      	ldr	r1, [r0, #24]
 8004d44:	6890      	ldr	r0, [r2, #8]
 8004d46:	9a08      	ldr	r2, [sp, #32]
 8004d48:	9004      	str	r0, [sp, #16]
 8004d4a:	6952      	ldr	r2, [r2, #20]
 8004d4c:	688f      	ldr	r7, [r1, #8]
 8004d4e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004d52:	00a2      	lsls	r2, r4, #2
 8004d54:	9209      	str	r2, [sp, #36]	; 0x24
 8004d56:	1886      	adds	r6, r0, r2
 8004d58:	9a07      	ldr	r2, [sp, #28]
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	f000 81c3 	beq.w	80050e6 <forward_dense+0x436>
 8004d60:	f1a8 0210 	sub.w	r2, r8, #16
 8004d64:	0912      	lsrs	r2, r2, #4
 8004d66:	3201      	adds	r2, #1
 8004d68:	0192      	lsls	r2, r2, #6
 8004d6a:	920c      	str	r2, [sp, #48]	; 0x30
 8004d6c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004d70:	920a      	str	r2, [sp, #40]	; 0x28
 8004d72:	689d      	ldr	r5, [r3, #8]
 8004d74:	9b06      	ldr	r3, [sp, #24]
 8004d76:	eddf aad0 	vldr	s21, [pc, #832]	; 80050b8 <forward_dense+0x408>
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	9205      	str	r2, [sp, #20]
 8004d7e:	f008 020f 	and.w	r2, r8, #15
 8004d82:	920d      	str	r2, [sp, #52]	; 0x34
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d043      	beq.n	8004e10 <forward_dense+0x160>
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	689c      	ldr	r4, [r3, #8]
 8004d8c:	9b04      	ldr	r3, [sp, #16]
 8004d8e:	f1ba 0f00 	cmp.w	sl, #0
 8004d92:	d042      	beq.n	8004e1a <forward_dense+0x16a>
 8004d94:	42b3      	cmp	r3, r6
 8004d96:	d22a      	bcs.n	8004dee <forward_dense+0x13e>
 8004d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d9a:	469b      	mov	fp, r3
 8004d9c:	ab0f      	add	r3, sp, #60	; 0x3c
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	2a04      	cmp	r2, #4
 8004da2:	4633      	mov	r3, r6
 8004da4:	4646      	mov	r6, r8
 8004da6:	4698      	mov	r8, r3
 8004da8:	f000 8156 	beq.w	8005058 <forward_dense+0x3a8>
 8004dac:	2c00      	cmp	r4, #0
 8004dae:	f000 8185 	beq.w	80050bc <forward_dense+0x40c>
 8004db2:	f8d4 c000 	ldr.w	ip, [r4]
 8004db6:	9803      	ldr	r0, [sp, #12]
 8004db8:	9600      	str	r6, [sp, #0]
 8004dba:	463b      	mov	r3, r7
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4652      	mov	r2, sl
 8004dc0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004dc4:	f7ff fde8 	bl	8004998 <ai_dict8_dot_array_f32>
 8004dc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dca:	f84b 3b04 	str.w	r3, [fp], #4
 8004dce:	45c3      	cmp	fp, r8
 8004dd0:	f104 0404 	add.w	r4, r4, #4
 8004dd4:	444d      	add	r5, r9
 8004dd6:	d3e9      	bcc.n	8004dac <forward_dense+0xfc>
 8004dd8:	4643      	mov	r3, r8
 8004dda:	46b0      	mov	r8, r6
 8004ddc:	461e      	mov	r6, r3
 8004dde:	9a04      	ldr	r2, [sp, #16]
 8004de0:	43d3      	mvns	r3, r2
 8004de2:	4433      	add	r3, r6
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	3304      	adds	r3, #4
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df0:	9b05      	ldr	r3, [sp, #20]
 8004df2:	4417      	add	r7, r2
 8004df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df6:	4416      	add	r6, r2
 8004df8:	9a07      	ldr	r2, [sp, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	9305      	str	r3, [sp, #20]
 8004e00:	f000 8171 	beq.w	80050e6 <forward_dense+0x436>
 8004e04:	9b08      	ldr	r3, [sp, #32]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	689d      	ldr	r5, [r3, #8]
 8004e0a:	9b06      	ldr	r3, [sp, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1bb      	bne.n	8004d88 <forward_dense+0xd8>
 8004e10:	461c      	mov	r4, r3
 8004e12:	9b04      	ldr	r3, [sp, #16]
 8004e14:	f1ba 0f00 	cmp.w	sl, #0
 8004e18:	d1bc      	bne.n	8004d94 <forward_dense+0xe4>
 8004e1a:	42b3      	cmp	r3, r6
 8004e1c:	d2e7      	bcs.n	8004dee <forward_dense+0x13e>
 8004e1e:	4618      	mov	r0, r3
 8004e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e22:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004e26:	eb07 0c03 	add.w	ip, r7, r3
 8004e2a:	469e      	mov	lr, r3
 8004e2c:	2c00      	cmp	r4, #0
 8004e2e:	f000 80ff 	beq.w	8005030 <forward_dense+0x380>
 8004e32:	f1b8 0f0f 	cmp.w	r8, #15
 8004e36:	edd4 fa00 	vldr	s31, [r4]
 8004e3a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80050b8 <forward_dense+0x408>
 8004e3e:	f104 0404 	add.w	r4, r4, #4
 8004e42:	f240 80fd 	bls.w	8005040 <forward_dense+0x390>
 8004e46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004e4e:	4641      	mov	r1, r8
 8004e50:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8004e54:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004e58:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004e5c:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004e60:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004e64:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004e68:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004e6c:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004e70:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004e74:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004e78:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004e7c:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004e80:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004e84:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004e88:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004e8c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004e90:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004e94:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004e98:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004e9c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004ea0:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004ea4:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004ea8:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004eac:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004eb0:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004eb4:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004eb8:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004ebc:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004ec0:	ed13 7a02 	vldr	s14, [r3, #-8]
 8004ec4:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004ec8:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004ecc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004ed0:	3910      	subs	r1, #16
 8004ed2:	290f      	cmp	r1, #15
 8004ed4:	ed53 ea01 	vldr	s29, [r3, #-4]
 8004ed8:	ed12 ea01 	vldr	s28, [r2, #-4]
 8004edc:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8004ee0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004ee4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004ee8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8004eec:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8004ef0:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8004ef4:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004ef8:	eee8 7a88 	vfma.f32	s15, s17, s16
 8004efc:	eee0 7a20 	vfma.f32	s15, s0, s1
 8004f00:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004f04:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004f08:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004f0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004f10:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004f14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004f18:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004f1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004f20:	d896      	bhi.n	8004e50 <forward_dense+0x1a0>
 8004f22:	eb05 010e 	add.w	r1, r5, lr
 8004f26:	465b      	mov	r3, fp
 8004f28:	4662      	mov	r2, ip
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d075      	beq.n	800501a <forward_dense+0x36a>
 8004f2e:	ed91 7a00 	vldr	s14, [r1]
 8004f32:	edd2 7a00 	vldr	s15, [r2]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f3c:	d06d      	beq.n	800501a <forward_dense+0x36a>
 8004f3e:	ed91 7a01 	vldr	s14, [r1, #4]
 8004f42:	edd2 7a01 	vldr	s15, [r2, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f4c:	d065      	beq.n	800501a <forward_dense+0x36a>
 8004f4e:	ed91 7a02 	vldr	s14, [r1, #8]
 8004f52:	edd2 7a02 	vldr	s15, [r2, #8]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f5c:	d05d      	beq.n	800501a <forward_dense+0x36a>
 8004f5e:	ed91 7a03 	vldr	s14, [r1, #12]
 8004f62:	edd2 7a03 	vldr	s15, [r2, #12]
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f6c:	d055      	beq.n	800501a <forward_dense+0x36a>
 8004f6e:	ed91 7a04 	vldr	s14, [r1, #16]
 8004f72:	edd2 7a04 	vldr	s15, [r2, #16]
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f7c:	d04d      	beq.n	800501a <forward_dense+0x36a>
 8004f7e:	ed91 7a05 	vldr	s14, [r1, #20]
 8004f82:	edd2 7a05 	vldr	s15, [r2, #20]
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f8c:	d045      	beq.n	800501a <forward_dense+0x36a>
 8004f8e:	ed91 7a06 	vldr	s14, [r1, #24]
 8004f92:	edd2 7a06 	vldr	s15, [r2, #24]
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f9c:	d03d      	beq.n	800501a <forward_dense+0x36a>
 8004f9e:	ed91 7a07 	vldr	s14, [r1, #28]
 8004fa2:	edd2 7a07 	vldr	s15, [r2, #28]
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fac:	d035      	beq.n	800501a <forward_dense+0x36a>
 8004fae:	ed91 7a08 	vldr	s14, [r1, #32]
 8004fb2:	edd2 7a08 	vldr	s15, [r2, #32]
 8004fb6:	2b09      	cmp	r3, #9
 8004fb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fbc:	d02d      	beq.n	800501a <forward_dense+0x36a>
 8004fbe:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004fc2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004fc6:	2b0a      	cmp	r3, #10
 8004fc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fcc:	d025      	beq.n	800501a <forward_dense+0x36a>
 8004fce:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8004fd2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004fd6:	2b0b      	cmp	r3, #11
 8004fd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fdc:	d01d      	beq.n	800501a <forward_dense+0x36a>
 8004fde:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8004fe2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004fec:	d015      	beq.n	800501a <forward_dense+0x36a>
 8004fee:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8004ff2:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004ff6:	2b0d      	cmp	r3, #13
 8004ff8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ffc:	d00d      	beq.n	800501a <forward_dense+0x36a>
 8004ffe:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005002:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005006:	2b0e      	cmp	r3, #14
 8005008:	eee7 6a27 	vfma.f32	s13, s14, s15
 800500c:	d005      	beq.n	800501a <forward_dense+0x36a>
 800500e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005012:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005016:	eee7 6a27 	vfma.f32	s13, s14, s15
 800501a:	444d      	add	r5, r9
 800501c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005020:	ece0 6a01 	vstmia	r0!, {s13}
 8005024:	42b0      	cmp	r0, r6
 8005026:	f4bf aeda 	bcs.w	8004dde <forward_dense+0x12e>
 800502a:	2c00      	cmp	r4, #0
 800502c:	f47f af01 	bne.w	8004e32 <forward_dense+0x182>
 8005030:	f1b8 0f0f 	cmp.w	r8, #15
 8005034:	eef0 fa6a 	vmov.f32	s31, s21
 8005038:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80050b8 <forward_dense+0x408>
 800503c:	f63f af03 	bhi.w	8004e46 <forward_dense+0x196>
 8005040:	4643      	mov	r3, r8
 8005042:	4629      	mov	r1, r5
 8005044:	463a      	mov	r2, r7
 8005046:	e770      	b.n	8004f2a <forward_dense+0x27a>
 8005048:	2300      	movs	r3, #0
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	deff      	udf	#255	; 0xff
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	deff      	udf	#255	; 0xff
 8005052:	2300      	movs	r3, #0
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	deff      	udf	#255	; 0xff
 8005058:	b1ac      	cbz	r4, 8005086 <forward_dense+0x3d6>
 800505a:	f8d4 c000 	ldr.w	ip, [r4]
 800505e:	9803      	ldr	r0, [sp, #12]
 8005060:	9600      	str	r6, [sp, #0]
 8005062:	463b      	mov	r3, r7
 8005064:	4629      	mov	r1, r5
 8005066:	4652      	mov	r2, sl
 8005068:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800506c:	f7ff fd62 	bl	8004b34 <ai_dict4_dot_array_f32>
 8005070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005072:	f84b 3b04 	str.w	r3, [fp], #4
 8005076:	45c3      	cmp	fp, r8
 8005078:	f104 0404 	add.w	r4, r4, #4
 800507c:	444d      	add	r5, r9
 800507e:	f4bf aeab 	bcs.w	8004dd8 <forward_dense+0x128>
 8005082:	2c00      	cmp	r4, #0
 8005084:	d1e9      	bne.n	800505a <forward_dense+0x3aa>
 8005086:	4634      	mov	r4, r6
 8005088:	4646      	mov	r6, r8
 800508a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800508e:	9400      	str	r4, [sp, #0]
 8005090:	463b      	mov	r3, r7
 8005092:	4629      	mov	r1, r5
 8005094:	4652      	mov	r2, sl
 8005096:	4640      	mov	r0, r8
 8005098:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800509c:	f7ff fd4a 	bl	8004b34 <ai_dict4_dot_array_f32>
 80050a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050a2:	f84b 3b04 	str.w	r3, [fp], #4
 80050a6:	45b3      	cmp	fp, r6
 80050a8:	444d      	add	r5, r9
 80050aa:	d3f0      	bcc.n	800508e <forward_dense+0x3de>
 80050ac:	46a0      	mov	r8, r4
 80050ae:	e696      	b.n	8004dde <forward_dense+0x12e>
 80050b0:	9406      	str	r4, [sp, #24]
 80050b2:	e627      	b.n	8004d04 <forward_dense+0x54>
 80050b4:	9306      	str	r3, [sp, #24]
 80050b6:	e625      	b.n	8004d04 <forward_dense+0x54>
 80050b8:	00000000 	.word	0x00000000
 80050bc:	4634      	mov	r4, r6
 80050be:	4646      	mov	r6, r8
 80050c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80050c4:	9400      	str	r4, [sp, #0]
 80050c6:	463b      	mov	r3, r7
 80050c8:	4629      	mov	r1, r5
 80050ca:	4652      	mov	r2, sl
 80050cc:	4640      	mov	r0, r8
 80050ce:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80050d2:	f7ff fc61 	bl	8004998 <ai_dict8_dot_array_f32>
 80050d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050d8:	f84b 3b04 	str.w	r3, [fp], #4
 80050dc:	45b3      	cmp	fp, r6
 80050de:	444d      	add	r5, r9
 80050e0:	d3f0      	bcc.n	80050c4 <forward_dense+0x414>
 80050e2:	46a0      	mov	r8, r4
 80050e4:	e67b      	b.n	8004dde <forward_dense+0x12e>
 80050e6:	b011      	add	sp, #68	; 0x44
 80050e8:	ecbd 8b10 	vpop	{d8-d15}
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80050f4:	e624      	b.n	8004d40 <forward_dense+0x90>
 80050f6:	2300      	movs	r3, #0
 80050f8:	9306      	str	r3, [sp, #24]
 80050fa:	e603      	b.n	8004d04 <forward_dense+0x54>
 80050fc:	9308      	str	r3, [sp, #32]
 80050fe:	e5f4      	b.n	8004cea <forward_dense+0x3a>

08005100 <nl_func_relu_generic_array_f32>:
 8005100:	b430      	push	{r4, r5}
 8005102:	edd3 6a02 	vldr	s13, [r3, #8]
 8005106:	6880      	ldr	r0, [r0, #8]
 8005108:	688c      	ldr	r4, [r1, #8]
 800510a:	ed93 7a00 	vldr	s14, [r3]
 800510e:	ed93 6a01 	vldr	s12, [r3, #4]
 8005112:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005116:	3a01      	subs	r2, #1
 8005118:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800511c:	0092      	lsls	r2, r2, #2
 800511e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005122:	4410      	add	r0, r2
 8005124:	4422      	add	r2, r4
 8005126:	d421      	bmi.n	800516c <nl_func_relu_generic_array_f32+0x6c>
 8005128:	42a2      	cmp	r2, r4
 800512a:	d33d      	bcc.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 800512c:	1d13      	adds	r3, r2, #4
 800512e:	1d02      	adds	r2, r0, #4
 8005130:	e010      	b.n	8005154 <nl_func_relu_generic_array_f32+0x54>
 8005132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800513e:	dd01      	ble.n	8005144 <nl_func_relu_generic_array_f32+0x44>
 8005140:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005144:	ed62 7a01 	vstmdb	r2!, {s15}
 8005148:	6888      	ldr	r0, [r1, #8]
 800514a:	f1a3 0408 	sub.w	r4, r3, #8
 800514e:	4284      	cmp	r4, r0
 8005150:	462b      	mov	r3, r5
 8005152:	d329      	bcc.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 8005154:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005158:	eef4 6ae7 	vcmpe.f32	s13, s15
 800515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005160:	f1a3 0504 	sub.w	r5, r3, #4
 8005164:	dce5      	bgt.n	8005132 <nl_func_relu_generic_array_f32+0x32>
 8005166:	eef0 7a66 	vmov.f32	s15, s13
 800516a:	e7eb      	b.n	8005144 <nl_func_relu_generic_array_f32+0x44>
 800516c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	d01a      	beq.n	80051ac <nl_func_relu_generic_array_f32+0xac>
 8005176:	42a2      	cmp	r2, r4
 8005178:	d316      	bcc.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 800517a:	1d13      	adds	r3, r2, #4
 800517c:	1d02      	adds	r2, r0, #4
 800517e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005182:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518a:	f1a3 0408 	sub.w	r4, r3, #8
 800518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005192:	f1a3 0004 	sub.w	r0, r3, #4
 8005196:	ee66 6a86 	vmul.f32	s13, s13, s12
 800519a:	4623      	mov	r3, r4
 800519c:	d51e      	bpl.n	80051dc <nl_func_relu_generic_array_f32+0xdc>
 800519e:	ed62 6a01 	vstmdb	r2!, {s13}
 80051a2:	688b      	ldr	r3, [r1, #8]
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	d91e      	bls.n	80051e6 <nl_func_relu_generic_array_f32+0xe6>
 80051a8:	bc30      	pop	{r4, r5}
 80051aa:	4770      	bx	lr
 80051ac:	42a2      	cmp	r2, r4
 80051ae:	d3fb      	bcc.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 80051b0:	1d13      	adds	r3, r2, #4
 80051b2:	2500      	movs	r5, #0
 80051b4:	1d02      	adds	r2, r0, #4
 80051b6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80051ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051be:	f1a3 0408 	sub.w	r4, r3, #8
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	f1a3 0004 	sub.w	r0, r3, #4
 80051ca:	4623      	mov	r3, r4
 80051cc:	d80d      	bhi.n	80051ea <nl_func_relu_generic_array_f32+0xea>
 80051ce:	ed62 7a01 	vstmdb	r2!, {s15}
 80051d2:	688b      	ldr	r3, [r1, #8]
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	d8e7      	bhi.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 80051d8:	4603      	mov	r3, r0
 80051da:	e7ec      	b.n	80051b6 <nl_func_relu_generic_array_f32+0xb6>
 80051dc:	ed62 7a01 	vstmdb	r2!, {s15}
 80051e0:	688c      	ldr	r4, [r1, #8]
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d8e0      	bhi.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 80051e6:	4603      	mov	r3, r0
 80051e8:	e7c9      	b.n	800517e <nl_func_relu_generic_array_f32+0x7e>
 80051ea:	f842 5d04 	str.w	r5, [r2, #-4]!
 80051ee:	688c      	ldr	r4, [r1, #8]
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d8d9      	bhi.n	80051a8 <nl_func_relu_generic_array_f32+0xa8>
 80051f4:	4603      	mov	r3, r0
 80051f6:	e7de      	b.n	80051b6 <nl_func_relu_generic_array_f32+0xb6>

080051f8 <forward_relu>:
 80051f8:	6942      	ldr	r2, [r0, #20]
 80051fa:	8813      	ldrh	r3, [r2, #0]
 80051fc:	b33b      	cbz	r3, 800524e <forward_relu+0x56>
 80051fe:	b470      	push	{r4, r5, r6}
 8005200:	6852      	ldr	r2, [r2, #4]
 8005202:	6856      	ldr	r6, [r2, #4]
 8005204:	b106      	cbz	r6, 8005208 <forward_relu+0x10>
 8005206:	6836      	ldr	r6, [r6, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d91d      	bls.n	8005248 <forward_relu+0x50>
 800520c:	6913      	ldr	r3, [r2, #16]
 800520e:	b103      	cbz	r3, 8005212 <forward_relu+0x1a>
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6982      	ldr	r2, [r0, #24]
 8005214:	68b4      	ldr	r4, [r6, #8]
 8005216:	6998      	ldr	r0, [r3, #24]
 8005218:	69b1      	ldr	r1, [r6, #24]
 800521a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800521e:	2a00      	cmp	r2, #0
 8005220:	d041      	beq.n	80052a6 <forward_relu+0xae>
 8005222:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8005226:	2d01      	cmp	r5, #1
 8005228:	d013      	beq.n	8005252 <forward_relu+0x5a>
 800522a:	2c00      	cmp	r4, #0
 800522c:	d06f      	beq.n	800530e <forward_relu+0x116>
 800522e:	68f6      	ldr	r6, [r6, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005236:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800523a:	42a6      	cmp	r6, r4
 800523c:	fb05 f202 	mul.w	r2, r5, r2
 8005240:	d1f9      	bne.n	8005236 <forward_relu+0x3e>
 8005242:	bc70      	pop	{r4, r5, r6}
 8005244:	f7ff bf5c 	b.w	8005100 <nl_func_relu_generic_array_f32>
 8005248:	2300      	movs	r3, #0
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	deff      	udf	#255	; 0xff
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	deff      	udf	#255	; 0xff
 8005252:	6880      	ldr	r0, [r0, #8]
 8005254:	688a      	ldr	r2, [r1, #8]
 8005256:	ed93 7a00 	vldr	s14, [r3]
 800525a:	b184      	cbz	r4, 800527e <forward_relu+0x86>
 800525c:	68f6      	ldr	r6, [r6, #12]
 800525e:	462b      	mov	r3, r5
 8005260:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005268:	42a6      	cmp	r6, r4
 800526a:	fb05 f303 	mul.w	r3, r5, r3
 800526e:	d1f9      	bne.n	8005264 <forward_relu+0x6c>
 8005270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005274:	3b01      	subs	r3, #1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	18d2      	adds	r2, r2, r3
 800527a:	4418      	add	r0, r3
 800527c:	d23d      	bcs.n	80052fa <forward_relu+0x102>
 800527e:	1d13      	adds	r3, r2, #4
 8005280:	2500      	movs	r5, #0
 8005282:	1d02      	adds	r2, r0, #4
 8005284:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005290:	f1a3 0004 	sub.w	r0, r3, #4
 8005294:	d833      	bhi.n	80052fe <forward_relu+0x106>
 8005296:	ed62 7a01 	vstmdb	r2!, {s15}
 800529a:	688c      	ldr	r4, [r1, #8]
 800529c:	3b08      	subs	r3, #8
 800529e:	429c      	cmp	r4, r3
 80052a0:	d82b      	bhi.n	80052fa <forward_relu+0x102>
 80052a2:	4603      	mov	r3, r0
 80052a4:	e7ee      	b.n	8005284 <forward_relu+0x8c>
 80052a6:	6880      	ldr	r0, [r0, #8]
 80052a8:	688b      	ldr	r3, [r1, #8]
 80052aa:	b184      	cbz	r4, 80052ce <forward_relu+0xd6>
 80052ac:	68f6      	ldr	r6, [r6, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80052b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	fb05 f202 	mul.w	r2, r5, r2
 80052be:	d1f9      	bne.n	80052b4 <forward_relu+0xbc>
 80052c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0092      	lsls	r2, r2, #2
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	4410      	add	r0, r2
 80052cc:	d215      	bcs.n	80052fa <forward_relu+0x102>
 80052ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005314 <forward_relu+0x11c>
 80052d2:	3304      	adds	r3, #4
 80052d4:	3004      	adds	r0, #4
 80052d6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80052da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e2:	bfb8      	it	lt
 80052e4:	eef0 7a47 	vmovlt.f32	s15, s14
 80052e8:	ed60 7a01 	vstmdb	r0!, {s15}
 80052ec:	688c      	ldr	r4, [r1, #8]
 80052ee:	f1a3 0208 	sub.w	r2, r3, #8
 80052f2:	4294      	cmp	r4, r2
 80052f4:	f1a3 0304 	sub.w	r3, r3, #4
 80052f8:	d9ed      	bls.n	80052d6 <forward_relu+0xde>
 80052fa:	bc70      	pop	{r4, r5, r6}
 80052fc:	4770      	bx	lr
 80052fe:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005302:	688c      	ldr	r4, [r1, #8]
 8005304:	3b08      	subs	r3, #8
 8005306:	429c      	cmp	r4, r3
 8005308:	d8f7      	bhi.n	80052fa <forward_relu+0x102>
 800530a:	4603      	mov	r3, r0
 800530c:	e7ba      	b.n	8005284 <forward_relu+0x8c>
 800530e:	2201      	movs	r2, #1
 8005310:	e797      	b.n	8005242 <forward_relu+0x4a>
 8005312:	bf00      	nop
 8005314:	00000000 	.word	0x00000000

08005318 <forward_sm>:
 8005318:	6942      	ldr	r2, [r0, #20]
 800531a:	8813      	ldrh	r3, [r2, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 808a 	beq.w	8005436 <forward_sm+0x11e>
 8005322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005326:	ed2d 8b04 	vpush	{d8-d9}
 800532a:	6852      	ldr	r2, [r2, #4]
 800532c:	6855      	ldr	r5, [r2, #4]
 800532e:	b085      	sub	sp, #20
 8005330:	b105      	cbz	r5, 8005334 <forward_sm+0x1c>
 8005332:	682d      	ldr	r5, [r5, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d976      	bls.n	8005426 <forward_sm+0x10e>
 8005338:	6913      	ldr	r3, [r2, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d071      	beq.n	8005422 <forward_sm+0x10a>
 800533e:	681f      	ldr	r7, [r3, #0]
 8005340:	68ec      	ldr	r4, [r5, #12]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	68ab      	ldr	r3, [r5, #8]
 8005346:	6850      	ldr	r0, [r2, #4]
 8005348:	6862      	ldr	r2, [r4, #4]
 800534a:	9201      	str	r2, [sp, #4]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	d074      	beq.n	800543a <forward_sm+0x122>
 8005350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005354:	2201      	movs	r2, #1
 8005356:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800535a:	429c      	cmp	r4, r3
 800535c:	fb01 f202 	mul.w	r2, r1, r2
 8005360:	d1f9      	bne.n	8005356 <forward_sm+0x3e>
 8005362:	69ae      	ldr	r6, [r5, #24]
 8005364:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8005368:	9f01      	ldr	r7, [sp, #4]
 800536a:	68b5      	ldr	r5, [r6, #8]
 800536c:	68f3      	ldr	r3, [r6, #12]
 800536e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8005372:	1bd1      	subs	r1, r2, r7
 8005374:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8005378:	1a12      	subs	r2, r2, r0
 800537a:	429d      	cmp	r5, r3
 800537c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8005380:	d345      	bcc.n	800540e <forward_sm+0xf6>
 8005382:	00bb      	lsls	r3, r7, #2
 8005384:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	f1c8 0200 	rsb	r2, r8, #0
 800538e:	425b      	negs	r3, r3
 8005390:	9203      	str	r2, [sp, #12]
 8005392:	9302      	str	r3, [sp, #8]
 8005394:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005398:	60b5      	str	r5, [r6, #8]
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	f8c9 4008 	str.w	r4, [r9, #8]
 80053a0:	68b2      	ldr	r2, [r6, #8]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	ed92 8a00 	vldr	s16, [r2]
 80053a8:	d940      	bls.n	800542c <forward_sm+0x114>
 80053aa:	9900      	ldr	r1, [sp, #0]
 80053ac:	1d13      	adds	r3, r2, #4
 80053ae:	1857      	adds	r7, r2, r1
 80053b0:	ecf3 7a01 	vldmia	r3!, {s15}
 80053b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053bc:	bfb8      	it	lt
 80053be:	eeb0 8a67 	vmovlt.f32	s16, s15
 80053c2:	429f      	cmp	r7, r3
 80053c4:	d1f4      	bne.n	80053b0 <forward_sm+0x98>
 80053c6:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8005440 <forward_sm+0x128>
 80053ca:	4692      	mov	sl, r2
 80053cc:	46a3      	mov	fp, r4
 80053ce:	46a0      	mov	r8, r4
 80053d0:	ecba 0a01 	vldmia	sl!, {s0}
 80053d4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80053d8:	f003 f81a 	bl	8008410 <expf>
 80053dc:	4557      	cmp	r7, sl
 80053de:	eca8 0a01 	vstmia	r8!, {s0}
 80053e2:	ee78 8a80 	vadd.f32	s17, s17, s0
 80053e6:	d1f3      	bne.n	80053d0 <forward_sm+0xb8>
 80053e8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80053ec:	9b00      	ldr	r3, [sp, #0]
 80053ee:	18e2      	adds	r2, r4, r3
 80053f0:	eddb 7a00 	vldr	s15, [fp]
 80053f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f8:	eceb 7a01 	vstmia	fp!, {s15}
 80053fc:	455a      	cmp	r2, fp
 80053fe:	d1f7      	bne.n	80053f0 <forward_sm+0xd8>
 8005400:	9a02      	ldr	r2, [sp, #8]
 8005402:	68f3      	ldr	r3, [r6, #12]
 8005404:	4415      	add	r5, r2
 8005406:	9a03      	ldr	r2, [sp, #12]
 8005408:	429d      	cmp	r5, r3
 800540a:	4414      	add	r4, r2
 800540c:	d2c4      	bcs.n	8005398 <forward_sm+0x80>
 800540e:	60b3      	str	r3, [r6, #8]
 8005410:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005414:	f8c9 3008 	str.w	r3, [r9, #8]
 8005418:	b005      	add	sp, #20
 800541a:	ecbd 8b04 	vpop	{d8-d9}
 800541e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	deff      	udf	#255	; 0xff
 8005426:	2300      	movs	r3, #0
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	deff      	udf	#255	; 0xff
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0e7      	beq.n	8005400 <forward_sm+0xe8>
 8005430:	9b00      	ldr	r3, [sp, #0]
 8005432:	18d7      	adds	r7, r2, r3
 8005434:	e7c7      	b.n	80053c6 <forward_sm+0xae>
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	deff      	udf	#255	; 0xff
 800543a:	2201      	movs	r2, #1
 800543c:	e791      	b.n	8005362 <forward_sm+0x4a>
 800543e:	bf00      	nop
 8005440:	00000000 	.word	0x00000000

08005444 <ai_check_custom_types>:
 8005444:	4b13      	ldr	r3, [pc, #76]	; (8005494 <ai_check_custom_types+0x50>)
 8005446:	b082      	sub	sp, #8
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	b118      	cbz	r0, 8005456 <ai_check_custom_types+0x12>
 800544e:	7803      	ldrb	r3, [r0, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d002      	beq.n	800545a <ai_check_custom_types+0x16>
 8005454:	2000      	movs	r0, #0
 8005456:	b002      	add	sp, #8
 8005458:	4770      	bx	lr
 800545a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <ai_check_custom_types+0x28>
 8005462:	2001      	movs	r0, #1
 8005464:	f080 0001 	eor.w	r0, r0, #1
 8005468:	b002      	add	sp, #8
 800546a:	4770      	bx	lr
 800546c:	7842      	ldrb	r2, [r0, #1]
 800546e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005472:	429a      	cmp	r2, r3
 8005474:	f100 0001 	add.w	r0, r0, #1
 8005478:	d1f3      	bne.n	8005462 <ai_check_custom_types+0x1e>
 800547a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800547e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005482:	429a      	cmp	r2, r3
 8005484:	d1ed      	bne.n	8005462 <ai_check_custom_types+0x1e>
 8005486:	7842      	ldrb	r2, [r0, #1]
 8005488:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d1e8      	bne.n	8005462 <ai_check_custom_types+0x1e>
 8005490:	2000      	movs	r0, #0
 8005492:	e7e7      	b.n	8005464 <ai_check_custom_types+0x20>
 8005494:	08008770 	.word	0x08008770

08005498 <ai_layers_forward_all>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800549c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800549e:	4604      	mov	r4, r0
 80054a0:	b31e      	cbz	r6, 80054ea <ai_layers_forward_all+0x52>
 80054a2:	b1cd      	cbz	r5, 80054d8 <ai_layers_forward_all+0x40>
 80054a4:	6545      	str	r5, [r0, #84]	; 0x54
 80054a6:	4629      	mov	r1, r5
 80054a8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80054aa:	2001      	movs	r0, #1
 80054ac:	47b0      	blx	r6
 80054ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80054b0:	2700      	movs	r7, #0
 80054b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80054b4:	2002      	movs	r0, #2
 80054b6:	47b0      	blx	r6
 80054b8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80054ba:	692b      	ldr	r3, [r5, #16]
 80054bc:	4628      	mov	r0, r5
 80054be:	4798      	blx	r3
 80054c0:	68eb      	ldr	r3, [r5, #12]
 80054c2:	429d      	cmp	r5, r3
 80054c4:	f04f 0003 	mov.w	r0, #3
 80054c8:	4619      	mov	r1, r3
 80054ca:	d006      	beq.n	80054da <ai_layers_forward_all+0x42>
 80054cc:	6563      	str	r3, [r4, #84]	; 0x54
 80054ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80054d0:	47b0      	blx	r6
 80054d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80054d4:	2900      	cmp	r1, #0
 80054d6:	d1ec      	bne.n	80054b2 <ai_layers_forward_all+0x1a>
 80054d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054da:	2100      	movs	r1, #0
 80054dc:	6567      	str	r7, [r4, #84]	; 0x54
 80054de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80054e0:	47b0      	blx	r6
 80054e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80054e4:	2900      	cmp	r1, #0
 80054e6:	d1e4      	bne.n	80054b2 <ai_layers_forward_all+0x1a>
 80054e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	d0f4      	beq.n	80054d8 <ai_layers_forward_all+0x40>
 80054ee:	6545      	str	r5, [r0, #84]	; 0x54
 80054f0:	692b      	ldr	r3, [r5, #16]
 80054f2:	4628      	mov	r0, r5
 80054f4:	4798      	blx	r3
 80054f6:	68eb      	ldr	r3, [r5, #12]
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	d004      	beq.n	8005506 <ai_layers_forward_all+0x6e>
 80054fc:	6563      	str	r3, [r4, #84]	; 0x54
 80054fe:	461d      	mov	r5, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f5      	bne.n	80054f0 <ai_layers_forward_all+0x58>
 8005504:	e7e8      	b.n	80054d8 <ai_layers_forward_all+0x40>
 8005506:	2300      	movs	r3, #0
 8005508:	6563      	str	r3, [r4, #84]	; 0x54
 800550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800550c <ai_array_to_buffer_fmt>:
 800550c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005510:	2b02      	cmp	r3, #2
 8005512:	d01f      	beq.n	8005554 <ai_array_to_buffer_fmt+0x48>
 8005514:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <ai_array_to_buffer_fmt+0x7c>)
 8005516:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800551a:	4293      	cmp	r3, r2
 800551c:	d00a      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 800551e:	dc0d      	bgt.n	800553c <ai_array_to_buffer_fmt+0x30>
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <ai_array_to_buffer_fmt+0x80>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d006      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 8005526:	dd1d      	ble.n	8005564 <ai_array_to_buffer_fmt+0x58>
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <ai_array_to_buffer_fmt+0x84>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d002      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 800552e:	320f      	adds	r2, #15
 8005530:	4293      	cmp	r3, r2
 8005532:	d10d      	bne.n	8005550 <ai_array_to_buffer_fmt+0x44>
 8005534:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005538:	4318      	orrs	r0, r3
 800553a:	4770      	bx	lr
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <ai_array_to_buffer_fmt+0x88>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d0f8      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 8005542:	dd18      	ble.n	8005576 <ai_array_to_buffer_fmt+0x6a>
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <ai_array_to_buffer_fmt+0x8c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d0f4      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 800554a:	4a14      	ldr	r2, [pc, #80]	; (800559c <ai_array_to_buffer_fmt+0x90>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d0f1      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	e7ef      	b.n	8005534 <ai_array_to_buffer_fmt+0x28>
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <ai_array_to_buffer_fmt+0x94>)
 8005556:	4003      	ands	r3, r0
 8005558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800555c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005560:	4318      	orrs	r0, r3
 8005562:	4770      	bx	lr
 8005564:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005568:	4293      	cmp	r3, r2
 800556a:	d0e3      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 800556c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005570:	4293      	cmp	r3, r2
 8005572:	d0df      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 8005574:	e7ec      	b.n	8005550 <ai_array_to_buffer_fmt+0x44>
 8005576:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800557a:	4293      	cmp	r3, r2
 800557c:	d0da      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 800557e:	3207      	adds	r2, #7
 8005580:	4293      	cmp	r3, r2
 8005582:	d0d7      	beq.n	8005534 <ai_array_to_buffer_fmt+0x28>
 8005584:	e7e4      	b.n	8005550 <ai_array_to_buffer_fmt+0x44>
 8005586:	bf00      	nop
 8005588:	00840040 	.word	0x00840040
 800558c:	00040447 	.word	0x00040447
 8005590:	00040840 	.word	0x00040840
 8005594:	00840840 	.word	0x00840840
 8005598:	0084084f 	.word	0x0084084f
 800559c:	01821040 	.word	0x01821040
 80055a0:	00803fff 	.word	0x00803fff

080055a4 <ai_array_get_byte_size>:
 80055a4:	b1c1      	cbz	r1, 80055d8 <ai_array_get_byte_size+0x34>
 80055a6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80055aa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	fb01 f103 	mul.w	r1, r1, r3
 80055b4:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80055b8:	3107      	adds	r1, #7
 80055ba:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80055be:	f021 0107 	bic.w	r1, r1, #7
 80055c2:	2804      	cmp	r0, #4
 80055c4:	fa21 f102 	lsr.w	r1, r1, r2
 80055c8:	d008      	beq.n	80055dc <ai_array_get_byte_size+0x38>
 80055ca:	2808      	cmp	r0, #8
 80055cc:	d101      	bne.n	80055d2 <ai_array_get_byte_size+0x2e>
 80055ce:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80055d2:	3107      	adds	r1, #7
 80055d4:	08c8      	lsrs	r0, r1, #3
 80055d6:	4770      	bx	lr
 80055d8:	4608      	mov	r0, r1
 80055da:	4770      	bx	lr
 80055dc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80055e0:	3107      	adds	r1, #7
 80055e2:	08c8      	lsrs	r0, r1, #3
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop

080055e8 <__errno>:
 80055e8:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <__errno+0x8>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	200006c0 	.word	0x200006c0

080055f4 <__libc_init_array>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	4d0d      	ldr	r5, [pc, #52]	; (800562c <__libc_init_array+0x38>)
 80055f8:	4c0d      	ldr	r4, [pc, #52]	; (8005630 <__libc_init_array+0x3c>)
 80055fa:	1b64      	subs	r4, r4, r5
 80055fc:	10a4      	asrs	r4, r4, #2
 80055fe:	2600      	movs	r6, #0
 8005600:	42a6      	cmp	r6, r4
 8005602:	d109      	bne.n	8005618 <__libc_init_array+0x24>
 8005604:	4d0b      	ldr	r5, [pc, #44]	; (8005634 <__libc_init_array+0x40>)
 8005606:	4c0c      	ldr	r4, [pc, #48]	; (8005638 <__libc_init_array+0x44>)
 8005608:	f003 f836 	bl	8008678 <_init>
 800560c:	1b64      	subs	r4, r4, r5
 800560e:	10a4      	asrs	r4, r4, #2
 8005610:	2600      	movs	r6, #0
 8005612:	42a6      	cmp	r6, r4
 8005614:	d105      	bne.n	8005622 <__libc_init_array+0x2e>
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	f855 3b04 	ldr.w	r3, [r5], #4
 800561c:	4798      	blx	r3
 800561e:	3601      	adds	r6, #1
 8005620:	e7ee      	b.n	8005600 <__libc_init_array+0xc>
 8005622:	f855 3b04 	ldr.w	r3, [r5], #4
 8005626:	4798      	blx	r3
 8005628:	3601      	adds	r6, #1
 800562a:	e7f2      	b.n	8005612 <__libc_init_array+0x1e>
 800562c:	08008d4c 	.word	0x08008d4c
 8005630:	08008d4c 	.word	0x08008d4c
 8005634:	08008d4c 	.word	0x08008d4c
 8005638:	08008d50 	.word	0x08008d50

0800563c <malloc>:
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <malloc+0xc>)
 800563e:	4601      	mov	r1, r0
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f000 b885 	b.w	8005750 <_malloc_r>
 8005646:	bf00      	nop
 8005648:	200006c0 	.word	0x200006c0

0800564c <memcpy>:
 800564c:	440a      	add	r2, r1
 800564e:	4291      	cmp	r1, r2
 8005650:	f100 33ff 	add.w	r3, r0, #4294967295
 8005654:	d100      	bne.n	8005658 <memcpy+0xc>
 8005656:	4770      	bx	lr
 8005658:	b510      	push	{r4, lr}
 800565a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800565e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005662:	4291      	cmp	r1, r2
 8005664:	d1f9      	bne.n	800565a <memcpy+0xe>
 8005666:	bd10      	pop	{r4, pc}

08005668 <memset>:
 8005668:	4402      	add	r2, r0
 800566a:	4603      	mov	r3, r0
 800566c:	4293      	cmp	r3, r2
 800566e:	d100      	bne.n	8005672 <memset+0xa>
 8005670:	4770      	bx	lr
 8005672:	f803 1b01 	strb.w	r1, [r3], #1
 8005676:	e7f9      	b.n	800566c <memset+0x4>

08005678 <_free_r>:
 8005678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567a:	2900      	cmp	r1, #0
 800567c:	d044      	beq.n	8005708 <_free_r+0x90>
 800567e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005682:	9001      	str	r0, [sp, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f1a1 0404 	sub.w	r4, r1, #4
 800568a:	bfb8      	it	lt
 800568c:	18e4      	addlt	r4, r4, r3
 800568e:	f001 fbed 	bl	8006e6c <__malloc_lock>
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <_free_r+0x94>)
 8005694:	9801      	ldr	r0, [sp, #4]
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	b933      	cbnz	r3, 80056a8 <_free_r+0x30>
 800569a:	6063      	str	r3, [r4, #4]
 800569c:	6014      	str	r4, [r2, #0]
 800569e:	b003      	add	sp, #12
 80056a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a4:	f001 bbe8 	b.w	8006e78 <__malloc_unlock>
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	d908      	bls.n	80056be <_free_r+0x46>
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	1961      	adds	r1, r4, r5
 80056b0:	428b      	cmp	r3, r1
 80056b2:	bf01      	itttt	eq
 80056b4:	6819      	ldreq	r1, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	1949      	addeq	r1, r1, r5
 80056ba:	6021      	streq	r1, [r4, #0]
 80056bc:	e7ed      	b.n	800569a <_free_r+0x22>
 80056be:	461a      	mov	r2, r3
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	b10b      	cbz	r3, 80056c8 <_free_r+0x50>
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d9fa      	bls.n	80056be <_free_r+0x46>
 80056c8:	6811      	ldr	r1, [r2, #0]
 80056ca:	1855      	adds	r5, r2, r1
 80056cc:	42a5      	cmp	r5, r4
 80056ce:	d10b      	bne.n	80056e8 <_free_r+0x70>
 80056d0:	6824      	ldr	r4, [r4, #0]
 80056d2:	4421      	add	r1, r4
 80056d4:	1854      	adds	r4, r2, r1
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	d1e0      	bne.n	800569e <_free_r+0x26>
 80056dc:	681c      	ldr	r4, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	6053      	str	r3, [r2, #4]
 80056e2:	4421      	add	r1, r4
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	e7da      	b.n	800569e <_free_r+0x26>
 80056e8:	d902      	bls.n	80056f0 <_free_r+0x78>
 80056ea:	230c      	movs	r3, #12
 80056ec:	6003      	str	r3, [r0, #0]
 80056ee:	e7d6      	b.n	800569e <_free_r+0x26>
 80056f0:	6825      	ldr	r5, [r4, #0]
 80056f2:	1961      	adds	r1, r4, r5
 80056f4:	428b      	cmp	r3, r1
 80056f6:	bf04      	itt	eq
 80056f8:	6819      	ldreq	r1, [r3, #0]
 80056fa:	685b      	ldreq	r3, [r3, #4]
 80056fc:	6063      	str	r3, [r4, #4]
 80056fe:	bf04      	itt	eq
 8005700:	1949      	addeq	r1, r1, r5
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	6054      	str	r4, [r2, #4]
 8005706:	e7ca      	b.n	800569e <_free_r+0x26>
 8005708:	b003      	add	sp, #12
 800570a:	bd30      	pop	{r4, r5, pc}
 800570c:	20000a30 	.word	0x20000a30

08005710 <sbrk_aligned>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4e0e      	ldr	r6, [pc, #56]	; (800574c <sbrk_aligned+0x3c>)
 8005714:	460c      	mov	r4, r1
 8005716:	6831      	ldr	r1, [r6, #0]
 8005718:	4605      	mov	r5, r0
 800571a:	b911      	cbnz	r1, 8005722 <sbrk_aligned+0x12>
 800571c:	f000 fcf6 	bl	800610c <_sbrk_r>
 8005720:	6030      	str	r0, [r6, #0]
 8005722:	4621      	mov	r1, r4
 8005724:	4628      	mov	r0, r5
 8005726:	f000 fcf1 	bl	800610c <_sbrk_r>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d00a      	beq.n	8005744 <sbrk_aligned+0x34>
 800572e:	1cc4      	adds	r4, r0, #3
 8005730:	f024 0403 	bic.w	r4, r4, #3
 8005734:	42a0      	cmp	r0, r4
 8005736:	d007      	beq.n	8005748 <sbrk_aligned+0x38>
 8005738:	1a21      	subs	r1, r4, r0
 800573a:	4628      	mov	r0, r5
 800573c:	f000 fce6 	bl	800610c <_sbrk_r>
 8005740:	3001      	adds	r0, #1
 8005742:	d101      	bne.n	8005748 <sbrk_aligned+0x38>
 8005744:	f04f 34ff 	mov.w	r4, #4294967295
 8005748:	4620      	mov	r0, r4
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	20000a34 	.word	0x20000a34

08005750 <_malloc_r>:
 8005750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005754:	1ccd      	adds	r5, r1, #3
 8005756:	f025 0503 	bic.w	r5, r5, #3
 800575a:	3508      	adds	r5, #8
 800575c:	2d0c      	cmp	r5, #12
 800575e:	bf38      	it	cc
 8005760:	250c      	movcc	r5, #12
 8005762:	2d00      	cmp	r5, #0
 8005764:	4607      	mov	r7, r0
 8005766:	db01      	blt.n	800576c <_malloc_r+0x1c>
 8005768:	42a9      	cmp	r1, r5
 800576a:	d905      	bls.n	8005778 <_malloc_r+0x28>
 800576c:	230c      	movs	r3, #12
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	2600      	movs	r6, #0
 8005772:	4630      	mov	r0, r6
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	4e2e      	ldr	r6, [pc, #184]	; (8005834 <_malloc_r+0xe4>)
 800577a:	f001 fb77 	bl	8006e6c <__malloc_lock>
 800577e:	6833      	ldr	r3, [r6, #0]
 8005780:	461c      	mov	r4, r3
 8005782:	bb34      	cbnz	r4, 80057d2 <_malloc_r+0x82>
 8005784:	4629      	mov	r1, r5
 8005786:	4638      	mov	r0, r7
 8005788:	f7ff ffc2 	bl	8005710 <sbrk_aligned>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	4604      	mov	r4, r0
 8005790:	d14d      	bne.n	800582e <_malloc_r+0xde>
 8005792:	6834      	ldr	r4, [r6, #0]
 8005794:	4626      	mov	r6, r4
 8005796:	2e00      	cmp	r6, #0
 8005798:	d140      	bne.n	800581c <_malloc_r+0xcc>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	4631      	mov	r1, r6
 800579e:	4638      	mov	r0, r7
 80057a0:	eb04 0803 	add.w	r8, r4, r3
 80057a4:	f000 fcb2 	bl	800610c <_sbrk_r>
 80057a8:	4580      	cmp	r8, r0
 80057aa:	d13a      	bne.n	8005822 <_malloc_r+0xd2>
 80057ac:	6821      	ldr	r1, [r4, #0]
 80057ae:	3503      	adds	r5, #3
 80057b0:	1a6d      	subs	r5, r5, r1
 80057b2:	f025 0503 	bic.w	r5, r5, #3
 80057b6:	3508      	adds	r5, #8
 80057b8:	2d0c      	cmp	r5, #12
 80057ba:	bf38      	it	cc
 80057bc:	250c      	movcc	r5, #12
 80057be:	4629      	mov	r1, r5
 80057c0:	4638      	mov	r0, r7
 80057c2:	f7ff ffa5 	bl	8005710 <sbrk_aligned>
 80057c6:	3001      	adds	r0, #1
 80057c8:	d02b      	beq.n	8005822 <_malloc_r+0xd2>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	442b      	add	r3, r5
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	e00e      	b.n	80057f0 <_malloc_r+0xa0>
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	1b52      	subs	r2, r2, r5
 80057d6:	d41e      	bmi.n	8005816 <_malloc_r+0xc6>
 80057d8:	2a0b      	cmp	r2, #11
 80057da:	d916      	bls.n	800580a <_malloc_r+0xba>
 80057dc:	1961      	adds	r1, r4, r5
 80057de:	42a3      	cmp	r3, r4
 80057e0:	6025      	str	r5, [r4, #0]
 80057e2:	bf18      	it	ne
 80057e4:	6059      	strne	r1, [r3, #4]
 80057e6:	6863      	ldr	r3, [r4, #4]
 80057e8:	bf08      	it	eq
 80057ea:	6031      	streq	r1, [r6, #0]
 80057ec:	5162      	str	r2, [r4, r5]
 80057ee:	604b      	str	r3, [r1, #4]
 80057f0:	4638      	mov	r0, r7
 80057f2:	f104 060b 	add.w	r6, r4, #11
 80057f6:	f001 fb3f 	bl	8006e78 <__malloc_unlock>
 80057fa:	f026 0607 	bic.w	r6, r6, #7
 80057fe:	1d23      	adds	r3, r4, #4
 8005800:	1af2      	subs	r2, r6, r3
 8005802:	d0b6      	beq.n	8005772 <_malloc_r+0x22>
 8005804:	1b9b      	subs	r3, r3, r6
 8005806:	50a3      	str	r3, [r4, r2]
 8005808:	e7b3      	b.n	8005772 <_malloc_r+0x22>
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	42a3      	cmp	r3, r4
 800580e:	bf0c      	ite	eq
 8005810:	6032      	streq	r2, [r6, #0]
 8005812:	605a      	strne	r2, [r3, #4]
 8005814:	e7ec      	b.n	80057f0 <_malloc_r+0xa0>
 8005816:	4623      	mov	r3, r4
 8005818:	6864      	ldr	r4, [r4, #4]
 800581a:	e7b2      	b.n	8005782 <_malloc_r+0x32>
 800581c:	4634      	mov	r4, r6
 800581e:	6876      	ldr	r6, [r6, #4]
 8005820:	e7b9      	b.n	8005796 <_malloc_r+0x46>
 8005822:	230c      	movs	r3, #12
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4638      	mov	r0, r7
 8005828:	f001 fb26 	bl	8006e78 <__malloc_unlock>
 800582c:	e7a1      	b.n	8005772 <_malloc_r+0x22>
 800582e:	6025      	str	r5, [r4, #0]
 8005830:	e7de      	b.n	80057f0 <_malloc_r+0xa0>
 8005832:	bf00      	nop
 8005834:	20000a30 	.word	0x20000a30

08005838 <__cvt>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	ec55 4b10 	vmov	r4, r5, d0
 8005840:	2d00      	cmp	r5, #0
 8005842:	460e      	mov	r6, r1
 8005844:	4619      	mov	r1, r3
 8005846:	462b      	mov	r3, r5
 8005848:	bfbb      	ittet	lt
 800584a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800584e:	461d      	movlt	r5, r3
 8005850:	2300      	movge	r3, #0
 8005852:	232d      	movlt	r3, #45	; 0x2d
 8005854:	700b      	strb	r3, [r1, #0]
 8005856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005858:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800585c:	4691      	mov	r9, r2
 800585e:	f023 0820 	bic.w	r8, r3, #32
 8005862:	bfbc      	itt	lt
 8005864:	4622      	movlt	r2, r4
 8005866:	4614      	movlt	r4, r2
 8005868:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800586c:	d005      	beq.n	800587a <__cvt+0x42>
 800586e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005872:	d100      	bne.n	8005876 <__cvt+0x3e>
 8005874:	3601      	adds	r6, #1
 8005876:	2102      	movs	r1, #2
 8005878:	e000      	b.n	800587c <__cvt+0x44>
 800587a:	2103      	movs	r1, #3
 800587c:	ab03      	add	r3, sp, #12
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	ab02      	add	r3, sp, #8
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	ec45 4b10 	vmov	d0, r4, r5
 8005888:	4653      	mov	r3, sl
 800588a:	4632      	mov	r2, r6
 800588c:	f000 fcfc 	bl	8006288 <_dtoa_r>
 8005890:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005894:	4607      	mov	r7, r0
 8005896:	d102      	bne.n	800589e <__cvt+0x66>
 8005898:	f019 0f01 	tst.w	r9, #1
 800589c:	d022      	beq.n	80058e4 <__cvt+0xac>
 800589e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a2:	eb07 0906 	add.w	r9, r7, r6
 80058a6:	d110      	bne.n	80058ca <__cvt+0x92>
 80058a8:	783b      	ldrb	r3, [r7, #0]
 80058aa:	2b30      	cmp	r3, #48	; 0x30
 80058ac:	d10a      	bne.n	80058c4 <__cvt+0x8c>
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	4620      	mov	r0, r4
 80058b4:	4629      	mov	r1, r5
 80058b6:	f7fb f917 	bl	8000ae8 <__aeabi_dcmpeq>
 80058ba:	b918      	cbnz	r0, 80058c4 <__cvt+0x8c>
 80058bc:	f1c6 0601 	rsb	r6, r6, #1
 80058c0:	f8ca 6000 	str.w	r6, [sl]
 80058c4:	f8da 3000 	ldr.w	r3, [sl]
 80058c8:	4499      	add	r9, r3
 80058ca:	2200      	movs	r2, #0
 80058cc:	2300      	movs	r3, #0
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fb f909 	bl	8000ae8 <__aeabi_dcmpeq>
 80058d6:	b108      	cbz	r0, 80058dc <__cvt+0xa4>
 80058d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80058dc:	2230      	movs	r2, #48	; 0x30
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	454b      	cmp	r3, r9
 80058e2:	d307      	bcc.n	80058f4 <__cvt+0xbc>
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058e8:	1bdb      	subs	r3, r3, r7
 80058ea:	4638      	mov	r0, r7
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	b004      	add	sp, #16
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	9103      	str	r1, [sp, #12]
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e7f0      	b.n	80058de <__cvt+0xa6>

080058fc <__exponent>:
 80058fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fe:	4603      	mov	r3, r0
 8005900:	2900      	cmp	r1, #0
 8005902:	bfb8      	it	lt
 8005904:	4249      	neglt	r1, r1
 8005906:	f803 2b02 	strb.w	r2, [r3], #2
 800590a:	bfb4      	ite	lt
 800590c:	222d      	movlt	r2, #45	; 0x2d
 800590e:	222b      	movge	r2, #43	; 0x2b
 8005910:	2909      	cmp	r1, #9
 8005912:	7042      	strb	r2, [r0, #1]
 8005914:	dd2a      	ble.n	800596c <__exponent+0x70>
 8005916:	f10d 0407 	add.w	r4, sp, #7
 800591a:	46a4      	mov	ip, r4
 800591c:	270a      	movs	r7, #10
 800591e:	46a6      	mov	lr, r4
 8005920:	460a      	mov	r2, r1
 8005922:	fb91 f6f7 	sdiv	r6, r1, r7
 8005926:	fb07 1516 	mls	r5, r7, r6, r1
 800592a:	3530      	adds	r5, #48	; 0x30
 800592c:	2a63      	cmp	r2, #99	; 0x63
 800592e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005932:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005936:	4631      	mov	r1, r6
 8005938:	dcf1      	bgt.n	800591e <__exponent+0x22>
 800593a:	3130      	adds	r1, #48	; 0x30
 800593c:	f1ae 0502 	sub.w	r5, lr, #2
 8005940:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005944:	1c44      	adds	r4, r0, #1
 8005946:	4629      	mov	r1, r5
 8005948:	4561      	cmp	r1, ip
 800594a:	d30a      	bcc.n	8005962 <__exponent+0x66>
 800594c:	f10d 0209 	add.w	r2, sp, #9
 8005950:	eba2 020e 	sub.w	r2, r2, lr
 8005954:	4565      	cmp	r5, ip
 8005956:	bf88      	it	hi
 8005958:	2200      	movhi	r2, #0
 800595a:	4413      	add	r3, r2
 800595c:	1a18      	subs	r0, r3, r0
 800595e:	b003      	add	sp, #12
 8005960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005966:	f804 2f01 	strb.w	r2, [r4, #1]!
 800596a:	e7ed      	b.n	8005948 <__exponent+0x4c>
 800596c:	2330      	movs	r3, #48	; 0x30
 800596e:	3130      	adds	r1, #48	; 0x30
 8005970:	7083      	strb	r3, [r0, #2]
 8005972:	70c1      	strb	r1, [r0, #3]
 8005974:	1d03      	adds	r3, r0, #4
 8005976:	e7f1      	b.n	800595c <__exponent+0x60>

08005978 <_printf_float>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	ed2d 8b02 	vpush	{d8}
 8005980:	b08d      	sub	sp, #52	; 0x34
 8005982:	460c      	mov	r4, r1
 8005984:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005988:	4616      	mov	r6, r2
 800598a:	461f      	mov	r7, r3
 800598c:	4605      	mov	r5, r0
 800598e:	f001 fa69 	bl	8006e64 <_localeconv_r>
 8005992:	f8d0 a000 	ldr.w	sl, [r0]
 8005996:	4650      	mov	r0, sl
 8005998:	f7fa fc24 	bl	80001e4 <strlen>
 800599c:	2300      	movs	r3, #0
 800599e:	930a      	str	r3, [sp, #40]	; 0x28
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	9305      	str	r3, [sp, #20]
 80059a4:	f8d8 3000 	ldr.w	r3, [r8]
 80059a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059ac:	3307      	adds	r3, #7
 80059ae:	f023 0307 	bic.w	r3, r3, #7
 80059b2:	f103 0208 	add.w	r2, r3, #8
 80059b6:	f8c8 2000 	str.w	r2, [r8]
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80059d0:	ee08 0a10 	vmov	s16, r0
 80059d4:	4b9f      	ldr	r3, [pc, #636]	; (8005c54 <_printf_float+0x2dc>)
 80059d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	f7fb f8b5 	bl	8000b4c <__aeabi_dcmpun>
 80059e2:	bb88      	cbnz	r0, 8005a48 <_printf_float+0xd0>
 80059e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e8:	4b9a      	ldr	r3, [pc, #616]	; (8005c54 <_printf_float+0x2dc>)
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	f7fb f88f 	bl	8000b10 <__aeabi_dcmple>
 80059f2:	bb48      	cbnz	r0, 8005a48 <_printf_float+0xd0>
 80059f4:	2200      	movs	r2, #0
 80059f6:	2300      	movs	r3, #0
 80059f8:	4640      	mov	r0, r8
 80059fa:	4649      	mov	r1, r9
 80059fc:	f7fb f87e 	bl	8000afc <__aeabi_dcmplt>
 8005a00:	b110      	cbz	r0, 8005a08 <_printf_float+0x90>
 8005a02:	232d      	movs	r3, #45	; 0x2d
 8005a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a08:	4b93      	ldr	r3, [pc, #588]	; (8005c58 <_printf_float+0x2e0>)
 8005a0a:	4894      	ldr	r0, [pc, #592]	; (8005c5c <_printf_float+0x2e4>)
 8005a0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a10:	bf94      	ite	ls
 8005a12:	4698      	movls	r8, r3
 8005a14:	4680      	movhi	r8, r0
 8005a16:	2303      	movs	r3, #3
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	9b05      	ldr	r3, [sp, #20]
 8005a1c:	f023 0204 	bic.w	r2, r3, #4
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	9700      	str	r7, [sp, #0]
 8005a28:	4633      	mov	r3, r6
 8005a2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f9d8 	bl	8005de4 <_printf_common>
 8005a34:	3001      	adds	r0, #1
 8005a36:	f040 8090 	bne.w	8005b5a <_printf_float+0x1e2>
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3e:	b00d      	add	sp, #52	; 0x34
 8005a40:	ecbd 8b02 	vpop	{d8}
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4649      	mov	r1, r9
 8005a50:	f7fb f87c 	bl	8000b4c <__aeabi_dcmpun>
 8005a54:	b140      	cbz	r0, 8005a68 <_printf_float+0xf0>
 8005a56:	464b      	mov	r3, r9
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bfbc      	itt	lt
 8005a5c:	232d      	movlt	r3, #45	; 0x2d
 8005a5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a62:	487f      	ldr	r0, [pc, #508]	; (8005c60 <_printf_float+0x2e8>)
 8005a64:	4b7f      	ldr	r3, [pc, #508]	; (8005c64 <_printf_float+0x2ec>)
 8005a66:	e7d1      	b.n	8005a0c <_printf_float+0x94>
 8005a68:	6863      	ldr	r3, [r4, #4]
 8005a6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a6e:	9206      	str	r2, [sp, #24]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	d13f      	bne.n	8005af4 <_printf_float+0x17c>
 8005a74:	2306      	movs	r3, #6
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	9b05      	ldr	r3, [sp, #20]
 8005a7a:	6861      	ldr	r1, [r4, #4]
 8005a7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a80:	2300      	movs	r3, #0
 8005a82:	9303      	str	r3, [sp, #12]
 8005a84:	ab0a      	add	r3, sp, #40	; 0x28
 8005a86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a8a:	ab09      	add	r3, sp, #36	; 0x24
 8005a8c:	ec49 8b10 	vmov	d0, r8, r9
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6022      	str	r2, [r4, #0]
 8005a94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f7ff fecd 	bl	8005838 <__cvt>
 8005a9e:	9b06      	ldr	r3, [sp, #24]
 8005aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aa2:	2b47      	cmp	r3, #71	; 0x47
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	d108      	bne.n	8005aba <_printf_float+0x142>
 8005aa8:	1cc8      	adds	r0, r1, #3
 8005aaa:	db02      	blt.n	8005ab2 <_printf_float+0x13a>
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	4299      	cmp	r1, r3
 8005ab0:	dd41      	ble.n	8005b36 <_printf_float+0x1be>
 8005ab2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ab6:	fa5f fb8b 	uxtb.w	fp, fp
 8005aba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005abe:	d820      	bhi.n	8005b02 <_printf_float+0x18a>
 8005ac0:	3901      	subs	r1, #1
 8005ac2:	465a      	mov	r2, fp
 8005ac4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac8:	9109      	str	r1, [sp, #36]	; 0x24
 8005aca:	f7ff ff17 	bl	80058fc <__exponent>
 8005ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ad0:	1813      	adds	r3, r2, r0
 8005ad2:	2a01      	cmp	r2, #1
 8005ad4:	4681      	mov	r9, r0
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	dc02      	bgt.n	8005ae0 <_printf_float+0x168>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	07d2      	lsls	r2, r2, #31
 8005ade:	d501      	bpl.n	8005ae4 <_printf_float+0x16c>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d09c      	beq.n	8005a26 <_printf_float+0xae>
 8005aec:	232d      	movs	r3, #45	; 0x2d
 8005aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af2:	e798      	b.n	8005a26 <_printf_float+0xae>
 8005af4:	9a06      	ldr	r2, [sp, #24]
 8005af6:	2a47      	cmp	r2, #71	; 0x47
 8005af8:	d1be      	bne.n	8005a78 <_printf_float+0x100>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1bc      	bne.n	8005a78 <_printf_float+0x100>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e7b9      	b.n	8005a76 <_printf_float+0xfe>
 8005b02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b06:	d118      	bne.n	8005b3a <_printf_float+0x1c2>
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	dd0b      	ble.n	8005b26 <_printf_float+0x1ae>
 8005b0e:	6121      	str	r1, [r4, #16]
 8005b10:	b913      	cbnz	r3, 8005b18 <_printf_float+0x1a0>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	07d0      	lsls	r0, r2, #31
 8005b16:	d502      	bpl.n	8005b1e <_printf_float+0x1a6>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	440b      	add	r3, r1
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b20:	f04f 0900 	mov.w	r9, #0
 8005b24:	e7de      	b.n	8005ae4 <_printf_float+0x16c>
 8005b26:	b913      	cbnz	r3, 8005b2e <_printf_float+0x1b6>
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	07d2      	lsls	r2, r2, #31
 8005b2c:	d501      	bpl.n	8005b32 <_printf_float+0x1ba>
 8005b2e:	3302      	adds	r3, #2
 8005b30:	e7f4      	b.n	8005b1c <_printf_float+0x1a4>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e7f2      	b.n	8005b1c <_printf_float+0x1a4>
 8005b36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3c:	4299      	cmp	r1, r3
 8005b3e:	db05      	blt.n	8005b4c <_printf_float+0x1d4>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	6121      	str	r1, [r4, #16]
 8005b44:	07d8      	lsls	r0, r3, #31
 8005b46:	d5ea      	bpl.n	8005b1e <_printf_float+0x1a6>
 8005b48:	1c4b      	adds	r3, r1, #1
 8005b4a:	e7e7      	b.n	8005b1c <_printf_float+0x1a4>
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	bfd4      	ite	le
 8005b50:	f1c1 0202 	rsble	r2, r1, #2
 8005b54:	2201      	movgt	r2, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	e7e0      	b.n	8005b1c <_printf_float+0x1a4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	055a      	lsls	r2, r3, #21
 8005b5e:	d407      	bmi.n	8005b70 <_printf_float+0x1f8>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	4642      	mov	r2, r8
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d12c      	bne.n	8005bc8 <_printf_float+0x250>
 8005b6e:	e764      	b.n	8005a3a <_printf_float+0xc2>
 8005b70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b74:	f240 80e0 	bls.w	8005d38 <_printf_float+0x3c0>
 8005b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f7fa ffb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d034      	beq.n	8005bf2 <_printf_float+0x27a>
 8005b88:	4a37      	ldr	r2, [pc, #220]	; (8005c68 <_printf_float+0x2f0>)
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f af51 	beq.w	8005a3a <_printf_float+0xc2>
 8005b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	db02      	blt.n	8005ba6 <_printf_float+0x22e>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	07d8      	lsls	r0, r3, #31
 8005ba4:	d510      	bpl.n	8005bc8 <_printf_float+0x250>
 8005ba6:	ee18 3a10 	vmov	r3, s16
 8005baa:	4652      	mov	r2, sl
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	47b8      	blx	r7
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f43f af41 	beq.w	8005a3a <_printf_float+0xc2>
 8005bb8:	f04f 0800 	mov.w	r8, #0
 8005bbc:	f104 091a 	add.w	r9, r4, #26
 8005bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	dc09      	bgt.n	8005bdc <_printf_float+0x264>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	079b      	lsls	r3, r3, #30
 8005bcc:	f100 8105 	bmi.w	8005dda <_printf_float+0x462>
 8005bd0:	68e0      	ldr	r0, [r4, #12]
 8005bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd4:	4298      	cmp	r0, r3
 8005bd6:	bfb8      	it	lt
 8005bd8:	4618      	movlt	r0, r3
 8005bda:	e730      	b.n	8005a3e <_printf_float+0xc6>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	464a      	mov	r2, r9
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f af27 	beq.w	8005a3a <_printf_float+0xc2>
 8005bec:	f108 0801 	add.w	r8, r8, #1
 8005bf0:	e7e6      	b.n	8005bc0 <_printf_float+0x248>
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dc39      	bgt.n	8005c6c <_printf_float+0x2f4>
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <_printf_float+0x2f0>)
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	f43f af19 	beq.w	8005a3a <_printf_float+0xc2>
 8005c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	d102      	bne.n	8005c16 <_printf_float+0x29e>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	d5d8      	bpl.n	8005bc8 <_printf_float+0x250>
 8005c16:	ee18 3a10 	vmov	r3, s16
 8005c1a:	4652      	mov	r2, sl
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f af09 	beq.w	8005a3a <_printf_float+0xc2>
 8005c28:	f04f 0900 	mov.w	r9, #0
 8005c2c:	f104 0a1a 	add.w	sl, r4, #26
 8005c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c32:	425b      	negs	r3, r3
 8005c34:	454b      	cmp	r3, r9
 8005c36:	dc01      	bgt.n	8005c3c <_printf_float+0x2c4>
 8005c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3a:	e792      	b.n	8005b62 <_printf_float+0x1ea>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4652      	mov	r2, sl
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f aef7 	beq.w	8005a3a <_printf_float+0xc2>
 8005c4c:	f109 0901 	add.w	r9, r9, #1
 8005c50:	e7ee      	b.n	8005c30 <_printf_float+0x2b8>
 8005c52:	bf00      	nop
 8005c54:	7fefffff 	.word	0x7fefffff
 8005c58:	08008954 	.word	0x08008954
 8005c5c:	08008958 	.word	0x08008958
 8005c60:	08008960 	.word	0x08008960
 8005c64:	0800895c 	.word	0x0800895c
 8005c68:	08008964 	.word	0x08008964
 8005c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c70:	429a      	cmp	r2, r3
 8005c72:	bfa8      	it	ge
 8005c74:	461a      	movge	r2, r3
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	4691      	mov	r9, r2
 8005c7a:	dc37      	bgt.n	8005cec <_printf_float+0x374>
 8005c7c:	f04f 0b00 	mov.w	fp, #0
 8005c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c84:	f104 021a 	add.w	r2, r4, #26
 8005c88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c8a:	9305      	str	r3, [sp, #20]
 8005c8c:	eba3 0309 	sub.w	r3, r3, r9
 8005c90:	455b      	cmp	r3, fp
 8005c92:	dc33      	bgt.n	8005cfc <_printf_float+0x384>
 8005c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	db3b      	blt.n	8005d14 <_printf_float+0x39c>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07da      	lsls	r2, r3, #31
 8005ca0:	d438      	bmi.n	8005d14 <_printf_float+0x39c>
 8005ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca4:	9a05      	ldr	r2, [sp, #20]
 8005ca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ca8:	1a9a      	subs	r2, r3, r2
 8005caa:	eba3 0901 	sub.w	r9, r3, r1
 8005cae:	4591      	cmp	r9, r2
 8005cb0:	bfa8      	it	ge
 8005cb2:	4691      	movge	r9, r2
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	dc35      	bgt.n	8005d26 <_printf_float+0x3ae>
 8005cba:	f04f 0800 	mov.w	r8, #0
 8005cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cc2:	f104 0a1a 	add.w	sl, r4, #26
 8005cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	eba3 0309 	sub.w	r3, r3, r9
 8005cd0:	4543      	cmp	r3, r8
 8005cd2:	f77f af79 	ble.w	8005bc8 <_printf_float+0x250>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4652      	mov	r2, sl
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f aeaa 	beq.w	8005a3a <_printf_float+0xc2>
 8005ce6:	f108 0801 	add.w	r8, r8, #1
 8005cea:	e7ec      	b.n	8005cc6 <_printf_float+0x34e>
 8005cec:	4613      	mov	r3, r2
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d1c0      	bne.n	8005c7c <_printf_float+0x304>
 8005cfa:	e69e      	b.n	8005a3a <_printf_float+0xc2>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	9205      	str	r2, [sp, #20]
 8005d04:	47b8      	blx	r7
 8005d06:	3001      	adds	r0, #1
 8005d08:	f43f ae97 	beq.w	8005a3a <_printf_float+0xc2>
 8005d0c:	9a05      	ldr	r2, [sp, #20]
 8005d0e:	f10b 0b01 	add.w	fp, fp, #1
 8005d12:	e7b9      	b.n	8005c88 <_printf_float+0x310>
 8005d14:	ee18 3a10 	vmov	r3, s16
 8005d18:	4652      	mov	r2, sl
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	d1be      	bne.n	8005ca2 <_printf_float+0x32a>
 8005d24:	e689      	b.n	8005a3a <_printf_float+0xc2>
 8005d26:	9a05      	ldr	r2, [sp, #20]
 8005d28:	464b      	mov	r3, r9
 8005d2a:	4442      	add	r2, r8
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	d1c1      	bne.n	8005cba <_printf_float+0x342>
 8005d36:	e680      	b.n	8005a3a <_printf_float+0xc2>
 8005d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3a:	2a01      	cmp	r2, #1
 8005d3c:	dc01      	bgt.n	8005d42 <_printf_float+0x3ca>
 8005d3e:	07db      	lsls	r3, r3, #31
 8005d40:	d538      	bpl.n	8005db4 <_printf_float+0x43c>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4642      	mov	r2, r8
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f ae74 	beq.w	8005a3a <_printf_float+0xc2>
 8005d52:	ee18 3a10 	vmov	r3, s16
 8005d56:	4652      	mov	r2, sl
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f43f ae6b 	beq.w	8005a3a <_printf_float+0xc2>
 8005d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fa febc 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d70:	b9d8      	cbnz	r0, 8005daa <_printf_float+0x432>
 8005d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d74:	f108 0201 	add.w	r2, r8, #1
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	d10e      	bne.n	8005da2 <_printf_float+0x42a>
 8005d84:	e659      	b.n	8005a3a <_printf_float+0xc2>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f ae52 	beq.w	8005a3a <_printf_float+0xc2>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4543      	cmp	r3, r8
 8005da0:	dcf1      	bgt.n	8005d86 <_printf_float+0x40e>
 8005da2:	464b      	mov	r3, r9
 8005da4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005da8:	e6dc      	b.n	8005b64 <_printf_float+0x1ec>
 8005daa:	f04f 0800 	mov.w	r8, #0
 8005dae:	f104 0a1a 	add.w	sl, r4, #26
 8005db2:	e7f2      	b.n	8005d9a <_printf_float+0x422>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4642      	mov	r2, r8
 8005db8:	e7df      	b.n	8005d7a <_printf_float+0x402>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	464a      	mov	r2, r9
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	f43f ae38 	beq.w	8005a3a <_printf_float+0xc2>
 8005dca:	f108 0801 	add.w	r8, r8, #1
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dd2:	1a5b      	subs	r3, r3, r1
 8005dd4:	4543      	cmp	r3, r8
 8005dd6:	dcf0      	bgt.n	8005dba <_printf_float+0x442>
 8005dd8:	e6fa      	b.n	8005bd0 <_printf_float+0x258>
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	f104 0919 	add.w	r9, r4, #25
 8005de2:	e7f4      	b.n	8005dce <_printf_float+0x456>

08005de4 <_printf_common>:
 8005de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	4616      	mov	r6, r2
 8005dea:	4699      	mov	r9, r3
 8005dec:	688a      	ldr	r2, [r1, #8]
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfb8      	it	lt
 8005df8:	4613      	movlt	r3, r2
 8005dfa:	6033      	str	r3, [r6, #0]
 8005dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e00:	4607      	mov	r7, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	b10a      	cbz	r2, 8005e0a <_printf_common+0x26>
 8005e06:	3301      	adds	r3, #1
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	0699      	lsls	r1, r3, #26
 8005e0e:	bf42      	ittt	mi
 8005e10:	6833      	ldrmi	r3, [r6, #0]
 8005e12:	3302      	addmi	r3, #2
 8005e14:	6033      	strmi	r3, [r6, #0]
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	f015 0506 	ands.w	r5, r5, #6
 8005e1c:	d106      	bne.n	8005e2c <_printf_common+0x48>
 8005e1e:	f104 0a19 	add.w	sl, r4, #25
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	6832      	ldr	r2, [r6, #0]
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dc26      	bgt.n	8005e7a <_printf_common+0x96>
 8005e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e30:	1e13      	subs	r3, r2, #0
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	bf18      	it	ne
 8005e36:	2301      	movne	r3, #1
 8005e38:	0692      	lsls	r2, r2, #26
 8005e3a:	d42b      	bmi.n	8005e94 <_printf_common+0xb0>
 8005e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e40:	4649      	mov	r1, r9
 8005e42:	4638      	mov	r0, r7
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d01e      	beq.n	8005e88 <_printf_common+0xa4>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	68e5      	ldr	r5, [r4, #12]
 8005e4e:	6832      	ldr	r2, [r6, #0]
 8005e50:	f003 0306 	and.w	r3, r3, #6
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	bf08      	it	eq
 8005e58:	1aad      	subeq	r5, r5, r2
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	bf0c      	ite	eq
 8005e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e64:	2500      	movne	r5, #0
 8005e66:	4293      	cmp	r3, r2
 8005e68:	bfc4      	itt	gt
 8005e6a:	1a9b      	subgt	r3, r3, r2
 8005e6c:	18ed      	addgt	r5, r5, r3
 8005e6e:	2600      	movs	r6, #0
 8005e70:	341a      	adds	r4, #26
 8005e72:	42b5      	cmp	r5, r6
 8005e74:	d11a      	bne.n	8005eac <_printf_common+0xc8>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e008      	b.n	8005e8c <_printf_common+0xa8>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4638      	mov	r0, r7
 8005e82:	47c0      	blx	r8
 8005e84:	3001      	adds	r0, #1
 8005e86:	d103      	bne.n	8005e90 <_printf_common+0xac>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7c6      	b.n	8005e22 <_printf_common+0x3e>
 8005e94:	18e1      	adds	r1, r4, r3
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	2030      	movs	r0, #48	; 0x30
 8005e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9e:	4422      	add	r2, r4
 8005ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	e7c7      	b.n	8005e3c <_printf_common+0x58>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa4>
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7d9      	b.n	8005e72 <_printf_common+0x8e>
	...

08005ec0 <_printf_i>:
 8005ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	7e0f      	ldrb	r7, [r1, #24]
 8005ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec8:	2f78      	cmp	r7, #120	; 0x78
 8005eca:	4691      	mov	r9, r2
 8005ecc:	4680      	mov	r8, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed6:	d807      	bhi.n	8005ee8 <_printf_i+0x28>
 8005ed8:	2f62      	cmp	r7, #98	; 0x62
 8005eda:	d80a      	bhi.n	8005ef2 <_printf_i+0x32>
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	f000 80d8 	beq.w	8006092 <_printf_i+0x1d2>
 8005ee2:	2f58      	cmp	r7, #88	; 0x58
 8005ee4:	f000 80a3 	beq.w	800602e <_printf_i+0x16e>
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ef0:	e03a      	b.n	8005f68 <_printf_i+0xa8>
 8005ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef6:	2b15      	cmp	r3, #21
 8005ef8:	d8f6      	bhi.n	8005ee8 <_printf_i+0x28>
 8005efa:	a101      	add	r1, pc, #4	; (adr r1, 8005f00 <_printf_i+0x40>)
 8005efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005ee9 	.word	0x08005ee9
 8005f0c:	08005ee9 	.word	0x08005ee9
 8005f10:	08005ee9 	.word	0x08005ee9
 8005f14:	08005ee9 	.word	0x08005ee9
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005ee9 	.word	0x08005ee9
 8005f20:	08005ee9 	.word	0x08005ee9
 8005f24:	08005ee9 	.word	0x08005ee9
 8005f28:	08005ee9 	.word	0x08005ee9
 8005f2c:	08006079 	.word	0x08006079
 8005f30:	08005f9d 	.word	0x08005f9d
 8005f34:	0800605b 	.word	0x0800605b
 8005f38:	08005ee9 	.word	0x08005ee9
 8005f3c:	08005ee9 	.word	0x08005ee9
 8005f40:	0800609b 	.word	0x0800609b
 8005f44:	08005ee9 	.word	0x08005ee9
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005ee9 	.word	0x08005ee9
 8005f50:	08005ee9 	.word	0x08005ee9
 8005f54:	08006063 	.word	0x08006063
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	1d1a      	adds	r2, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	602a      	str	r2, [r5, #0]
 8005f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0a3      	b.n	80060b4 <_printf_i+0x1f4>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	6829      	ldr	r1, [r5, #0]
 8005f70:	0606      	lsls	r6, r0, #24
 8005f72:	f101 0304 	add.w	r3, r1, #4
 8005f76:	d50a      	bpl.n	8005f8e <_printf_i+0xce>
 8005f78:	680e      	ldr	r6, [r1, #0]
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	da03      	bge.n	8005f88 <_printf_i+0xc8>
 8005f80:	232d      	movs	r3, #45	; 0x2d
 8005f82:	4276      	negs	r6, r6
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	485e      	ldr	r0, [pc, #376]	; (8006104 <_printf_i+0x244>)
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e019      	b.n	8005fc2 <_printf_i+0x102>
 8005f8e:	680e      	ldr	r6, [r1, #0]
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f96:	bf18      	it	ne
 8005f98:	b236      	sxthne	r6, r6
 8005f9a:	e7ef      	b.n	8005f7c <_printf_i+0xbc>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	1d19      	adds	r1, r3, #4
 8005fa2:	6029      	str	r1, [r5, #0]
 8005fa4:	0601      	lsls	r1, r0, #24
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0xec>
 8005fa8:	681e      	ldr	r6, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0xf2>
 8005fac:	0646      	lsls	r6, r0, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0xe8>
 8005fb0:	881e      	ldrh	r6, [r3, #0]
 8005fb2:	4854      	ldr	r0, [pc, #336]	; (8006104 <_printf_i+0x244>)
 8005fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2308      	moveq	r3, #8
 8005fba:	230a      	movne	r3, #10
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fc2:	6865      	ldr	r5, [r4, #4]
 8005fc4:	60a5      	str	r5, [r4, #8]
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	bfa2      	ittt	ge
 8005fca:	6821      	ldrge	r1, [r4, #0]
 8005fcc:	f021 0104 	bicge.w	r1, r1, #4
 8005fd0:	6021      	strge	r1, [r4, #0]
 8005fd2:	b90e      	cbnz	r6, 8005fd8 <_printf_i+0x118>
 8005fd4:	2d00      	cmp	r5, #0
 8005fd6:	d04d      	beq.n	8006074 <_printf_i+0x1b4>
 8005fd8:	4615      	mov	r5, r2
 8005fda:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fde:	fb03 6711 	mls	r7, r3, r1, r6
 8005fe2:	5dc7      	ldrb	r7, [r0, r7]
 8005fe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe8:	4637      	mov	r7, r6
 8005fea:	42bb      	cmp	r3, r7
 8005fec:	460e      	mov	r6, r1
 8005fee:	d9f4      	bls.n	8005fda <_printf_i+0x11a>
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d10b      	bne.n	800600c <_printf_i+0x14c>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	07de      	lsls	r6, r3, #31
 8005ff8:	d508      	bpl.n	800600c <_printf_i+0x14c>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4299      	cmp	r1, r3
 8006000:	bfde      	ittt	le
 8006002:	2330      	movle	r3, #48	; 0x30
 8006004:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800600c:	1b52      	subs	r2, r2, r5
 800600e:	6122      	str	r2, [r4, #16]
 8006010:	f8cd a000 	str.w	sl, [sp]
 8006014:	464b      	mov	r3, r9
 8006016:	aa03      	add	r2, sp, #12
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f7ff fee2 	bl	8005de4 <_printf_common>
 8006020:	3001      	adds	r0, #1
 8006022:	d14c      	bne.n	80060be <_printf_i+0x1fe>
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	b004      	add	sp, #16
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602e:	4835      	ldr	r0, [pc, #212]	; (8006104 <_printf_i+0x244>)
 8006030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006034:	6829      	ldr	r1, [r5, #0]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f851 6b04 	ldr.w	r6, [r1], #4
 800603c:	6029      	str	r1, [r5, #0]
 800603e:	061d      	lsls	r5, r3, #24
 8006040:	d514      	bpl.n	800606c <_printf_i+0x1ac>
 8006042:	07df      	lsls	r7, r3, #31
 8006044:	bf44      	itt	mi
 8006046:	f043 0320 	orrmi.w	r3, r3, #32
 800604a:	6023      	strmi	r3, [r4, #0]
 800604c:	b91e      	cbnz	r6, 8006056 <_printf_i+0x196>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f023 0320 	bic.w	r3, r3, #32
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	2310      	movs	r3, #16
 8006058:	e7b0      	b.n	8005fbc <_printf_i+0xfc>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f043 0320 	orr.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2378      	movs	r3, #120	; 0x78
 8006064:	4828      	ldr	r0, [pc, #160]	; (8006108 <_printf_i+0x248>)
 8006066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800606a:	e7e3      	b.n	8006034 <_printf_i+0x174>
 800606c:	0659      	lsls	r1, r3, #25
 800606e:	bf48      	it	mi
 8006070:	b2b6      	uxthmi	r6, r6
 8006072:	e7e6      	b.n	8006042 <_printf_i+0x182>
 8006074:	4615      	mov	r5, r2
 8006076:	e7bb      	b.n	8005ff0 <_printf_i+0x130>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	6826      	ldr	r6, [r4, #0]
 800607c:	6961      	ldr	r1, [r4, #20]
 800607e:	1d18      	adds	r0, r3, #4
 8006080:	6028      	str	r0, [r5, #0]
 8006082:	0635      	lsls	r5, r6, #24
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	d501      	bpl.n	800608c <_printf_i+0x1cc>
 8006088:	6019      	str	r1, [r3, #0]
 800608a:	e002      	b.n	8006092 <_printf_i+0x1d2>
 800608c:	0670      	lsls	r0, r6, #25
 800608e:	d5fb      	bpl.n	8006088 <_printf_i+0x1c8>
 8006090:	8019      	strh	r1, [r3, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	6123      	str	r3, [r4, #16]
 8006096:	4615      	mov	r5, r2
 8006098:	e7ba      	b.n	8006010 <_printf_i+0x150>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	1d1a      	adds	r2, r3, #4
 800609e:	602a      	str	r2, [r5, #0]
 80060a0:	681d      	ldr	r5, [r3, #0]
 80060a2:	6862      	ldr	r2, [r4, #4]
 80060a4:	2100      	movs	r1, #0
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7fa f8aa 	bl	8000200 <memchr>
 80060ac:	b108      	cbz	r0, 80060b2 <_printf_i+0x1f2>
 80060ae:	1b40      	subs	r0, r0, r5
 80060b0:	6060      	str	r0, [r4, #4]
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	2300      	movs	r3, #0
 80060b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060bc:	e7a8      	b.n	8006010 <_printf_i+0x150>
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	462a      	mov	r2, r5
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	47d0      	blx	sl
 80060c8:	3001      	adds	r0, #1
 80060ca:	d0ab      	beq.n	8006024 <_printf_i+0x164>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	079b      	lsls	r3, r3, #30
 80060d0:	d413      	bmi.n	80060fa <_printf_i+0x23a>
 80060d2:	68e0      	ldr	r0, [r4, #12]
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	4298      	cmp	r0, r3
 80060d8:	bfb8      	it	lt
 80060da:	4618      	movlt	r0, r3
 80060dc:	e7a4      	b.n	8006028 <_printf_i+0x168>
 80060de:	2301      	movs	r3, #1
 80060e0:	4632      	mov	r2, r6
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d09b      	beq.n	8006024 <_printf_i+0x164>
 80060ec:	3501      	adds	r5, #1
 80060ee:	68e3      	ldr	r3, [r4, #12]
 80060f0:	9903      	ldr	r1, [sp, #12]
 80060f2:	1a5b      	subs	r3, r3, r1
 80060f4:	42ab      	cmp	r3, r5
 80060f6:	dcf2      	bgt.n	80060de <_printf_i+0x21e>
 80060f8:	e7eb      	b.n	80060d2 <_printf_i+0x212>
 80060fa:	2500      	movs	r5, #0
 80060fc:	f104 0619 	add.w	r6, r4, #25
 8006100:	e7f5      	b.n	80060ee <_printf_i+0x22e>
 8006102:	bf00      	nop
 8006104:	08008966 	.word	0x08008966
 8006108:	08008977 	.word	0x08008977

0800610c <_sbrk_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	; (8006128 <_sbrk_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fb fb3e 	bl	8001798 <_sbrk>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_sbrk_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_sbrk_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000a38 	.word	0x20000a38

0800612c <siprintf>:
 800612c:	b40e      	push	{r1, r2, r3}
 800612e:	b500      	push	{lr}
 8006130:	b09c      	sub	sp, #112	; 0x70
 8006132:	ab1d      	add	r3, sp, #116	; 0x74
 8006134:	9002      	str	r0, [sp, #8]
 8006136:	9006      	str	r0, [sp, #24]
 8006138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800613c:	4809      	ldr	r0, [pc, #36]	; (8006164 <siprintf+0x38>)
 800613e:	9107      	str	r1, [sp, #28]
 8006140:	9104      	str	r1, [sp, #16]
 8006142:	4909      	ldr	r1, [pc, #36]	; (8006168 <siprintf+0x3c>)
 8006144:	f853 2b04 	ldr.w	r2, [r3], #4
 8006148:	9105      	str	r1, [sp, #20]
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	a902      	add	r1, sp, #8
 8006150:	f001 fabc 	bl	80076cc <_svfiprintf_r>
 8006154:	9b02      	ldr	r3, [sp, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	b01c      	add	sp, #112	; 0x70
 800615c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006160:	b003      	add	sp, #12
 8006162:	4770      	bx	lr
 8006164:	200006c0 	.word	0x200006c0
 8006168:	ffff0208 	.word	0xffff0208

0800616c <quorem>:
 800616c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	6903      	ldr	r3, [r0, #16]
 8006172:	690c      	ldr	r4, [r1, #16]
 8006174:	42a3      	cmp	r3, r4
 8006176:	4607      	mov	r7, r0
 8006178:	f2c0 8081 	blt.w	800627e <quorem+0x112>
 800617c:	3c01      	subs	r4, #1
 800617e:	f101 0814 	add.w	r8, r1, #20
 8006182:	f100 0514 	add.w	r5, r0, #20
 8006186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006194:	3301      	adds	r3, #1
 8006196:	429a      	cmp	r2, r3
 8006198:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800619c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80061a4:	d331      	bcc.n	800620a <quorem+0x9e>
 80061a6:	f04f 0e00 	mov.w	lr, #0
 80061aa:	4640      	mov	r0, r8
 80061ac:	46ac      	mov	ip, r5
 80061ae:	46f2      	mov	sl, lr
 80061b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80061b4:	b293      	uxth	r3, r2
 80061b6:	fb06 e303 	mla	r3, r6, r3, lr
 80061ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061be:	b29b      	uxth	r3, r3
 80061c0:	ebaa 0303 	sub.w	r3, sl, r3
 80061c4:	f8dc a000 	ldr.w	sl, [ip]
 80061c8:	0c12      	lsrs	r2, r2, #16
 80061ca:	fa13 f38a 	uxtah	r3, r3, sl
 80061ce:	fb06 e202 	mla	r2, r6, r2, lr
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061da:	b292      	uxth	r2, r2
 80061dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80061e8:	4581      	cmp	r9, r0
 80061ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ee:	f84c 3b04 	str.w	r3, [ip], #4
 80061f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061f6:	d2db      	bcs.n	80061b0 <quorem+0x44>
 80061f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80061fc:	b92b      	cbnz	r3, 800620a <quorem+0x9e>
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	3b04      	subs	r3, #4
 8006202:	429d      	cmp	r5, r3
 8006204:	461a      	mov	r2, r3
 8006206:	d32e      	bcc.n	8006266 <quorem+0xfa>
 8006208:	613c      	str	r4, [r7, #16]
 800620a:	4638      	mov	r0, r7
 800620c:	f001 f8bc 	bl	8007388 <__mcmp>
 8006210:	2800      	cmp	r0, #0
 8006212:	db24      	blt.n	800625e <quorem+0xf2>
 8006214:	3601      	adds	r6, #1
 8006216:	4628      	mov	r0, r5
 8006218:	f04f 0c00 	mov.w	ip, #0
 800621c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006220:	f8d0 e000 	ldr.w	lr, [r0]
 8006224:	b293      	uxth	r3, r2
 8006226:	ebac 0303 	sub.w	r3, ip, r3
 800622a:	0c12      	lsrs	r2, r2, #16
 800622c:	fa13 f38e 	uxtah	r3, r3, lr
 8006230:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800623e:	45c1      	cmp	r9, r8
 8006240:	f840 3b04 	str.w	r3, [r0], #4
 8006244:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006248:	d2e8      	bcs.n	800621c <quorem+0xb0>
 800624a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800624e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006252:	b922      	cbnz	r2, 800625e <quorem+0xf2>
 8006254:	3b04      	subs	r3, #4
 8006256:	429d      	cmp	r5, r3
 8006258:	461a      	mov	r2, r3
 800625a:	d30a      	bcc.n	8006272 <quorem+0x106>
 800625c:	613c      	str	r4, [r7, #16]
 800625e:	4630      	mov	r0, r6
 8006260:	b003      	add	sp, #12
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	3b04      	subs	r3, #4
 800626a:	2a00      	cmp	r2, #0
 800626c:	d1cc      	bne.n	8006208 <quorem+0x9c>
 800626e:	3c01      	subs	r4, #1
 8006270:	e7c7      	b.n	8006202 <quorem+0x96>
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	3b04      	subs	r3, #4
 8006276:	2a00      	cmp	r2, #0
 8006278:	d1f0      	bne.n	800625c <quorem+0xf0>
 800627a:	3c01      	subs	r4, #1
 800627c:	e7eb      	b.n	8006256 <quorem+0xea>
 800627e:	2000      	movs	r0, #0
 8006280:	e7ee      	b.n	8006260 <quorem+0xf4>
 8006282:	0000      	movs	r0, r0
 8006284:	0000      	movs	r0, r0
	...

08006288 <_dtoa_r>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	ed2d 8b04 	vpush	{d8-d9}
 8006290:	ec57 6b10 	vmov	r6, r7, d0
 8006294:	b093      	sub	sp, #76	; 0x4c
 8006296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006298:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800629c:	9106      	str	r1, [sp, #24]
 800629e:	ee10 aa10 	vmov	sl, s0
 80062a2:	4604      	mov	r4, r0
 80062a4:	9209      	str	r2, [sp, #36]	; 0x24
 80062a6:	930c      	str	r3, [sp, #48]	; 0x30
 80062a8:	46bb      	mov	fp, r7
 80062aa:	b975      	cbnz	r5, 80062ca <_dtoa_r+0x42>
 80062ac:	2010      	movs	r0, #16
 80062ae:	f7ff f9c5 	bl	800563c <malloc>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6260      	str	r0, [r4, #36]	; 0x24
 80062b6:	b920      	cbnz	r0, 80062c2 <_dtoa_r+0x3a>
 80062b8:	4ba7      	ldr	r3, [pc, #668]	; (8006558 <_dtoa_r+0x2d0>)
 80062ba:	21ea      	movs	r1, #234	; 0xea
 80062bc:	48a7      	ldr	r0, [pc, #668]	; (800655c <_dtoa_r+0x2d4>)
 80062be:	f001 fb05 	bl	80078cc <__assert_func>
 80062c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062c6:	6005      	str	r5, [r0, #0]
 80062c8:	60c5      	str	r5, [r0, #12]
 80062ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062cc:	6819      	ldr	r1, [r3, #0]
 80062ce:	b151      	cbz	r1, 80062e6 <_dtoa_r+0x5e>
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	604a      	str	r2, [r1, #4]
 80062d4:	2301      	movs	r3, #1
 80062d6:	4093      	lsls	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fe12 	bl	8006f04 <_Bfree>
 80062e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	1e3b      	subs	r3, r7, #0
 80062e8:	bfaa      	itet	ge
 80062ea:	2300      	movge	r3, #0
 80062ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80062f0:	f8c8 3000 	strge.w	r3, [r8]
 80062f4:	4b9a      	ldr	r3, [pc, #616]	; (8006560 <_dtoa_r+0x2d8>)
 80062f6:	bfbc      	itt	lt
 80062f8:	2201      	movlt	r2, #1
 80062fa:	f8c8 2000 	strlt.w	r2, [r8]
 80062fe:	ea33 030b 	bics.w	r3, r3, fp
 8006302:	d11b      	bne.n	800633c <_dtoa_r+0xb4>
 8006304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006306:	f242 730f 	movw	r3, #9999	; 0x270f
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006310:	4333      	orrs	r3, r6
 8006312:	f000 8592 	beq.w	8006e3a <_dtoa_r+0xbb2>
 8006316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006318:	b963      	cbnz	r3, 8006334 <_dtoa_r+0xac>
 800631a:	4b92      	ldr	r3, [pc, #584]	; (8006564 <_dtoa_r+0x2dc>)
 800631c:	e022      	b.n	8006364 <_dtoa_r+0xdc>
 800631e:	4b92      	ldr	r3, [pc, #584]	; (8006568 <_dtoa_r+0x2e0>)
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	3308      	adds	r3, #8
 8006324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	9801      	ldr	r0, [sp, #4]
 800632a:	b013      	add	sp, #76	; 0x4c
 800632c:	ecbd 8b04 	vpop	{d8-d9}
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	4b8b      	ldr	r3, [pc, #556]	; (8006564 <_dtoa_r+0x2dc>)
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	3303      	adds	r3, #3
 800633a:	e7f3      	b.n	8006324 <_dtoa_r+0x9c>
 800633c:	2200      	movs	r2, #0
 800633e:	2300      	movs	r3, #0
 8006340:	4650      	mov	r0, sl
 8006342:	4659      	mov	r1, fp
 8006344:	f7fa fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006348:	ec4b ab19 	vmov	d9, sl, fp
 800634c:	4680      	mov	r8, r0
 800634e:	b158      	cbz	r0, 8006368 <_dtoa_r+0xe0>
 8006350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006352:	2301      	movs	r3, #1
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 856b 	beq.w	8006e34 <_dtoa_r+0xbac>
 800635e:	4883      	ldr	r0, [pc, #524]	; (800656c <_dtoa_r+0x2e4>)
 8006360:	6018      	str	r0, [r3, #0]
 8006362:	1e43      	subs	r3, r0, #1
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	e7df      	b.n	8006328 <_dtoa_r+0xa0>
 8006368:	ec4b ab10 	vmov	d0, sl, fp
 800636c:	aa10      	add	r2, sp, #64	; 0x40
 800636e:	a911      	add	r1, sp, #68	; 0x44
 8006370:	4620      	mov	r0, r4
 8006372:	f001 f8af 	bl	80074d4 <__d2b>
 8006376:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800637a:	ee08 0a10 	vmov	s16, r0
 800637e:	2d00      	cmp	r5, #0
 8006380:	f000 8084 	beq.w	800648c <_dtoa_r+0x204>
 8006384:	ee19 3a90 	vmov	r3, s19
 8006388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800638c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006390:	4656      	mov	r6, sl
 8006392:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800639a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800639e:	4b74      	ldr	r3, [pc, #464]	; (8006570 <_dtoa_r+0x2e8>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	4630      	mov	r0, r6
 80063a4:	4639      	mov	r1, r7
 80063a6:	f7f9 ff7f 	bl	80002a8 <__aeabi_dsub>
 80063aa:	a365      	add	r3, pc, #404	; (adr r3, 8006540 <_dtoa_r+0x2b8>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7fa f932 	bl	8000618 <__aeabi_dmul>
 80063b4:	a364      	add	r3, pc, #400	; (adr r3, 8006548 <_dtoa_r+0x2c0>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7f9 ff77 	bl	80002ac <__adddf3>
 80063be:	4606      	mov	r6, r0
 80063c0:	4628      	mov	r0, r5
 80063c2:	460f      	mov	r7, r1
 80063c4:	f7fa f8be 	bl	8000544 <__aeabi_i2d>
 80063c8:	a361      	add	r3, pc, #388	; (adr r3, 8006550 <_dtoa_r+0x2c8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7fa f923 	bl	8000618 <__aeabi_dmul>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7f9 ff67 	bl	80002ac <__adddf3>
 80063de:	4606      	mov	r6, r0
 80063e0:	460f      	mov	r7, r1
 80063e2:	f7fa fbc9 	bl	8000b78 <__aeabi_d2iz>
 80063e6:	2200      	movs	r2, #0
 80063e8:	9000      	str	r0, [sp, #0]
 80063ea:	2300      	movs	r3, #0
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7fa fb84 	bl	8000afc <__aeabi_dcmplt>
 80063f4:	b150      	cbz	r0, 800640c <_dtoa_r+0x184>
 80063f6:	9800      	ldr	r0, [sp, #0]
 80063f8:	f7fa f8a4 	bl	8000544 <__aeabi_i2d>
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	f7fa fb72 	bl	8000ae8 <__aeabi_dcmpeq>
 8006404:	b910      	cbnz	r0, 800640c <_dtoa_r+0x184>
 8006406:	9b00      	ldr	r3, [sp, #0]
 8006408:	3b01      	subs	r3, #1
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	9b00      	ldr	r3, [sp, #0]
 800640e:	2b16      	cmp	r3, #22
 8006410:	d85a      	bhi.n	80064c8 <_dtoa_r+0x240>
 8006412:	9a00      	ldr	r2, [sp, #0]
 8006414:	4b57      	ldr	r3, [pc, #348]	; (8006574 <_dtoa_r+0x2ec>)
 8006416:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	ec51 0b19 	vmov	r0, r1, d9
 8006422:	f7fa fb6b 	bl	8000afc <__aeabi_dcmplt>
 8006426:	2800      	cmp	r0, #0
 8006428:	d050      	beq.n	80064cc <_dtoa_r+0x244>
 800642a:	9b00      	ldr	r3, [sp, #0]
 800642c:	3b01      	subs	r3, #1
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	930b      	str	r3, [sp, #44]	; 0x2c
 8006434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006436:	1b5d      	subs	r5, r3, r5
 8006438:	1e6b      	subs	r3, r5, #1
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	bf45      	ittet	mi
 800643e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006442:	9304      	strmi	r3, [sp, #16]
 8006444:	2300      	movpl	r3, #0
 8006446:	2300      	movmi	r3, #0
 8006448:	bf4c      	ite	mi
 800644a:	9305      	strmi	r3, [sp, #20]
 800644c:	9304      	strpl	r3, [sp, #16]
 800644e:	9b00      	ldr	r3, [sp, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	db3d      	blt.n	80064d0 <_dtoa_r+0x248>
 8006454:	9b05      	ldr	r3, [sp, #20]
 8006456:	9a00      	ldr	r2, [sp, #0]
 8006458:	920a      	str	r2, [sp, #40]	; 0x28
 800645a:	4413      	add	r3, r2
 800645c:	9305      	str	r3, [sp, #20]
 800645e:	2300      	movs	r3, #0
 8006460:	9307      	str	r3, [sp, #28]
 8006462:	9b06      	ldr	r3, [sp, #24]
 8006464:	2b09      	cmp	r3, #9
 8006466:	f200 8089 	bhi.w	800657c <_dtoa_r+0x2f4>
 800646a:	2b05      	cmp	r3, #5
 800646c:	bfc4      	itt	gt
 800646e:	3b04      	subgt	r3, #4
 8006470:	9306      	strgt	r3, [sp, #24]
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	f1a3 0302 	sub.w	r3, r3, #2
 8006478:	bfcc      	ite	gt
 800647a:	2500      	movgt	r5, #0
 800647c:	2501      	movle	r5, #1
 800647e:	2b03      	cmp	r3, #3
 8006480:	f200 8087 	bhi.w	8006592 <_dtoa_r+0x30a>
 8006484:	e8df f003 	tbb	[pc, r3]
 8006488:	59383a2d 	.word	0x59383a2d
 800648c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006490:	441d      	add	r5, r3
 8006492:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006496:	2b20      	cmp	r3, #32
 8006498:	bfc1      	itttt	gt
 800649a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800649e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80064a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064aa:	bfda      	itte	le
 80064ac:	f1c3 0320 	rsble	r3, r3, #32
 80064b0:	fa06 f003 	lslle.w	r0, r6, r3
 80064b4:	4318      	orrgt	r0, r3
 80064b6:	f7fa f835 	bl	8000524 <__aeabi_ui2d>
 80064ba:	2301      	movs	r3, #1
 80064bc:	4606      	mov	r6, r0
 80064be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064c2:	3d01      	subs	r5, #1
 80064c4:	930e      	str	r3, [sp, #56]	; 0x38
 80064c6:	e76a      	b.n	800639e <_dtoa_r+0x116>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e7b2      	b.n	8006432 <_dtoa_r+0x1aa>
 80064cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80064ce:	e7b1      	b.n	8006434 <_dtoa_r+0x1ac>
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	9a00      	ldr	r2, [sp, #0]
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	4253      	negs	r3, r2
 80064da:	9307      	str	r3, [sp, #28]
 80064dc:	2300      	movs	r3, #0
 80064de:	930a      	str	r3, [sp, #40]	; 0x28
 80064e0:	e7bf      	b.n	8006462 <_dtoa_r+0x1da>
 80064e2:	2300      	movs	r3, #0
 80064e4:	9308      	str	r3, [sp, #32]
 80064e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dc55      	bgt.n	8006598 <_dtoa_r+0x310>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064f2:	461a      	mov	r2, r3
 80064f4:	9209      	str	r2, [sp, #36]	; 0x24
 80064f6:	e00c      	b.n	8006512 <_dtoa_r+0x28a>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e7f3      	b.n	80064e4 <_dtoa_r+0x25c>
 80064fc:	2300      	movs	r3, #0
 80064fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006500:	9308      	str	r3, [sp, #32]
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	4413      	add	r3, r2
 8006506:	9302      	str	r3, [sp, #8]
 8006508:	3301      	adds	r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	9303      	str	r3, [sp, #12]
 800650e:	bfb8      	it	lt
 8006510:	2301      	movlt	r3, #1
 8006512:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006514:	2200      	movs	r2, #0
 8006516:	6042      	str	r2, [r0, #4]
 8006518:	2204      	movs	r2, #4
 800651a:	f102 0614 	add.w	r6, r2, #20
 800651e:	429e      	cmp	r6, r3
 8006520:	6841      	ldr	r1, [r0, #4]
 8006522:	d93d      	bls.n	80065a0 <_dtoa_r+0x318>
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fcad 	bl	8006e84 <_Balloc>
 800652a:	9001      	str	r0, [sp, #4]
 800652c:	2800      	cmp	r0, #0
 800652e:	d13b      	bne.n	80065a8 <_dtoa_r+0x320>
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <_dtoa_r+0x2f0>)
 8006532:	4602      	mov	r2, r0
 8006534:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006538:	e6c0      	b.n	80062bc <_dtoa_r+0x34>
 800653a:	2301      	movs	r3, #1
 800653c:	e7df      	b.n	80064fe <_dtoa_r+0x276>
 800653e:	bf00      	nop
 8006540:	636f4361 	.word	0x636f4361
 8006544:	3fd287a7 	.word	0x3fd287a7
 8006548:	8b60c8b3 	.word	0x8b60c8b3
 800654c:	3fc68a28 	.word	0x3fc68a28
 8006550:	509f79fb 	.word	0x509f79fb
 8006554:	3fd34413 	.word	0x3fd34413
 8006558:	08008995 	.word	0x08008995
 800655c:	080089ac 	.word	0x080089ac
 8006560:	7ff00000 	.word	0x7ff00000
 8006564:	08008991 	.word	0x08008991
 8006568:	08008988 	.word	0x08008988
 800656c:	08008965 	.word	0x08008965
 8006570:	3ff80000 	.word	0x3ff80000
 8006574:	08008aa0 	.word	0x08008aa0
 8006578:	08008a07 	.word	0x08008a07
 800657c:	2501      	movs	r5, #1
 800657e:	2300      	movs	r3, #0
 8006580:	9306      	str	r3, [sp, #24]
 8006582:	9508      	str	r5, [sp, #32]
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	2312      	movs	r3, #18
 8006590:	e7b0      	b.n	80064f4 <_dtoa_r+0x26c>
 8006592:	2301      	movs	r3, #1
 8006594:	9308      	str	r3, [sp, #32]
 8006596:	e7f5      	b.n	8006584 <_dtoa_r+0x2fc>
 8006598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800659e:	e7b8      	b.n	8006512 <_dtoa_r+0x28a>
 80065a0:	3101      	adds	r1, #1
 80065a2:	6041      	str	r1, [r0, #4]
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	e7b8      	b.n	800651a <_dtoa_r+0x292>
 80065a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065aa:	9a01      	ldr	r2, [sp, #4]
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	2b0e      	cmp	r3, #14
 80065b2:	f200 809d 	bhi.w	80066f0 <_dtoa_r+0x468>
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	f000 809a 	beq.w	80066f0 <_dtoa_r+0x468>
 80065bc:	9b00      	ldr	r3, [sp, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd32      	ble.n	8006628 <_dtoa_r+0x3a0>
 80065c2:	4ab7      	ldr	r2, [pc, #732]	; (80068a0 <_dtoa_r+0x618>)
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065d0:	9b00      	ldr	r3, [sp, #0]
 80065d2:	05d8      	lsls	r0, r3, #23
 80065d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80065d8:	d516      	bpl.n	8006608 <_dtoa_r+0x380>
 80065da:	4bb2      	ldr	r3, [pc, #712]	; (80068a4 <_dtoa_r+0x61c>)
 80065dc:	ec51 0b19 	vmov	r0, r1, d9
 80065e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065e4:	f7fa f942 	bl	800086c <__aeabi_ddiv>
 80065e8:	f007 070f 	and.w	r7, r7, #15
 80065ec:	4682      	mov	sl, r0
 80065ee:	468b      	mov	fp, r1
 80065f0:	2503      	movs	r5, #3
 80065f2:	4eac      	ldr	r6, [pc, #688]	; (80068a4 <_dtoa_r+0x61c>)
 80065f4:	b957      	cbnz	r7, 800660c <_dtoa_r+0x384>
 80065f6:	4642      	mov	r2, r8
 80065f8:	464b      	mov	r3, r9
 80065fa:	4650      	mov	r0, sl
 80065fc:	4659      	mov	r1, fp
 80065fe:	f7fa f935 	bl	800086c <__aeabi_ddiv>
 8006602:	4682      	mov	sl, r0
 8006604:	468b      	mov	fp, r1
 8006606:	e028      	b.n	800665a <_dtoa_r+0x3d2>
 8006608:	2502      	movs	r5, #2
 800660a:	e7f2      	b.n	80065f2 <_dtoa_r+0x36a>
 800660c:	07f9      	lsls	r1, r7, #31
 800660e:	d508      	bpl.n	8006622 <_dtoa_r+0x39a>
 8006610:	4640      	mov	r0, r8
 8006612:	4649      	mov	r1, r9
 8006614:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006618:	f7f9 fffe 	bl	8000618 <__aeabi_dmul>
 800661c:	3501      	adds	r5, #1
 800661e:	4680      	mov	r8, r0
 8006620:	4689      	mov	r9, r1
 8006622:	107f      	asrs	r7, r7, #1
 8006624:	3608      	adds	r6, #8
 8006626:	e7e5      	b.n	80065f4 <_dtoa_r+0x36c>
 8006628:	f000 809b 	beq.w	8006762 <_dtoa_r+0x4da>
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	4f9d      	ldr	r7, [pc, #628]	; (80068a4 <_dtoa_r+0x61c>)
 8006630:	425e      	negs	r6, r3
 8006632:	4b9b      	ldr	r3, [pc, #620]	; (80068a0 <_dtoa_r+0x618>)
 8006634:	f006 020f 	and.w	r2, r6, #15
 8006638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	ec51 0b19 	vmov	r0, r1, d9
 8006644:	f7f9 ffe8 	bl	8000618 <__aeabi_dmul>
 8006648:	1136      	asrs	r6, r6, #4
 800664a:	4682      	mov	sl, r0
 800664c:	468b      	mov	fp, r1
 800664e:	2300      	movs	r3, #0
 8006650:	2502      	movs	r5, #2
 8006652:	2e00      	cmp	r6, #0
 8006654:	d17a      	bne.n	800674c <_dtoa_r+0x4c4>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1d3      	bne.n	8006602 <_dtoa_r+0x37a>
 800665a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8082 	beq.w	8006766 <_dtoa_r+0x4de>
 8006662:	4b91      	ldr	r3, [pc, #580]	; (80068a8 <_dtoa_r+0x620>)
 8006664:	2200      	movs	r2, #0
 8006666:	4650      	mov	r0, sl
 8006668:	4659      	mov	r1, fp
 800666a:	f7fa fa47 	bl	8000afc <__aeabi_dcmplt>
 800666e:	2800      	cmp	r0, #0
 8006670:	d079      	beq.n	8006766 <_dtoa_r+0x4de>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d076      	beq.n	8006766 <_dtoa_r+0x4de>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	dd36      	ble.n	80066ec <_dtoa_r+0x464>
 800667e:	9b00      	ldr	r3, [sp, #0]
 8006680:	4650      	mov	r0, sl
 8006682:	4659      	mov	r1, fp
 8006684:	1e5f      	subs	r7, r3, #1
 8006686:	2200      	movs	r2, #0
 8006688:	4b88      	ldr	r3, [pc, #544]	; (80068ac <_dtoa_r+0x624>)
 800668a:	f7f9 ffc5 	bl	8000618 <__aeabi_dmul>
 800668e:	9e02      	ldr	r6, [sp, #8]
 8006690:	4682      	mov	sl, r0
 8006692:	468b      	mov	fp, r1
 8006694:	3501      	adds	r5, #1
 8006696:	4628      	mov	r0, r5
 8006698:	f7f9 ff54 	bl	8000544 <__aeabi_i2d>
 800669c:	4652      	mov	r2, sl
 800669e:	465b      	mov	r3, fp
 80066a0:	f7f9 ffba 	bl	8000618 <__aeabi_dmul>
 80066a4:	4b82      	ldr	r3, [pc, #520]	; (80068b0 <_dtoa_r+0x628>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	f7f9 fe00 	bl	80002ac <__adddf3>
 80066ac:	46d0      	mov	r8, sl
 80066ae:	46d9      	mov	r9, fp
 80066b0:	4682      	mov	sl, r0
 80066b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	d158      	bne.n	800676c <_dtoa_r+0x4e4>
 80066ba:	4b7e      	ldr	r3, [pc, #504]	; (80068b4 <_dtoa_r+0x62c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	4640      	mov	r0, r8
 80066c0:	4649      	mov	r1, r9
 80066c2:	f7f9 fdf1 	bl	80002a8 <__aeabi_dsub>
 80066c6:	4652      	mov	r2, sl
 80066c8:	465b      	mov	r3, fp
 80066ca:	4680      	mov	r8, r0
 80066cc:	4689      	mov	r9, r1
 80066ce:	f7fa fa33 	bl	8000b38 <__aeabi_dcmpgt>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f040 8295 	bne.w	8006c02 <_dtoa_r+0x97a>
 80066d8:	4652      	mov	r2, sl
 80066da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066de:	4640      	mov	r0, r8
 80066e0:	4649      	mov	r1, r9
 80066e2:	f7fa fa0b 	bl	8000afc <__aeabi_dcmplt>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f040 8289 	bne.w	8006bfe <_dtoa_r+0x976>
 80066ec:	ec5b ab19 	vmov	sl, fp, d9
 80066f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f2c0 8148 	blt.w	8006988 <_dtoa_r+0x700>
 80066f8:	9a00      	ldr	r2, [sp, #0]
 80066fa:	2a0e      	cmp	r2, #14
 80066fc:	f300 8144 	bgt.w	8006988 <_dtoa_r+0x700>
 8006700:	4b67      	ldr	r3, [pc, #412]	; (80068a0 <_dtoa_r+0x618>)
 8006702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006706:	e9d3 8900 	ldrd	r8, r9, [r3]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	f280 80d5 	bge.w	80068bc <_dtoa_r+0x634>
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f300 80d1 	bgt.w	80068bc <_dtoa_r+0x634>
 800671a:	f040 826f 	bne.w	8006bfc <_dtoa_r+0x974>
 800671e:	4b65      	ldr	r3, [pc, #404]	; (80068b4 <_dtoa_r+0x62c>)
 8006720:	2200      	movs	r2, #0
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7f9 ff77 	bl	8000618 <__aeabi_dmul>
 800672a:	4652      	mov	r2, sl
 800672c:	465b      	mov	r3, fp
 800672e:	f7fa f9f9 	bl	8000b24 <__aeabi_dcmpge>
 8006732:	9e03      	ldr	r6, [sp, #12]
 8006734:	4637      	mov	r7, r6
 8006736:	2800      	cmp	r0, #0
 8006738:	f040 8245 	bne.w	8006bc6 <_dtoa_r+0x93e>
 800673c:	9d01      	ldr	r5, [sp, #4]
 800673e:	2331      	movs	r3, #49	; 0x31
 8006740:	f805 3b01 	strb.w	r3, [r5], #1
 8006744:	9b00      	ldr	r3, [sp, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	e240      	b.n	8006bce <_dtoa_r+0x946>
 800674c:	07f2      	lsls	r2, r6, #31
 800674e:	d505      	bpl.n	800675c <_dtoa_r+0x4d4>
 8006750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006754:	f7f9 ff60 	bl	8000618 <__aeabi_dmul>
 8006758:	3501      	adds	r5, #1
 800675a:	2301      	movs	r3, #1
 800675c:	1076      	asrs	r6, r6, #1
 800675e:	3708      	adds	r7, #8
 8006760:	e777      	b.n	8006652 <_dtoa_r+0x3ca>
 8006762:	2502      	movs	r5, #2
 8006764:	e779      	b.n	800665a <_dtoa_r+0x3d2>
 8006766:	9f00      	ldr	r7, [sp, #0]
 8006768:	9e03      	ldr	r6, [sp, #12]
 800676a:	e794      	b.n	8006696 <_dtoa_r+0x40e>
 800676c:	9901      	ldr	r1, [sp, #4]
 800676e:	4b4c      	ldr	r3, [pc, #304]	; (80068a0 <_dtoa_r+0x618>)
 8006770:	4431      	add	r1, r6
 8006772:	910d      	str	r1, [sp, #52]	; 0x34
 8006774:	9908      	ldr	r1, [sp, #32]
 8006776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800677a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800677e:	2900      	cmp	r1, #0
 8006780:	d043      	beq.n	800680a <_dtoa_r+0x582>
 8006782:	494d      	ldr	r1, [pc, #308]	; (80068b8 <_dtoa_r+0x630>)
 8006784:	2000      	movs	r0, #0
 8006786:	f7fa f871 	bl	800086c <__aeabi_ddiv>
 800678a:	4652      	mov	r2, sl
 800678c:	465b      	mov	r3, fp
 800678e:	f7f9 fd8b 	bl	80002a8 <__aeabi_dsub>
 8006792:	9d01      	ldr	r5, [sp, #4]
 8006794:	4682      	mov	sl, r0
 8006796:	468b      	mov	fp, r1
 8006798:	4649      	mov	r1, r9
 800679a:	4640      	mov	r0, r8
 800679c:	f7fa f9ec 	bl	8000b78 <__aeabi_d2iz>
 80067a0:	4606      	mov	r6, r0
 80067a2:	f7f9 fecf 	bl	8000544 <__aeabi_i2d>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4640      	mov	r0, r8
 80067ac:	4649      	mov	r1, r9
 80067ae:	f7f9 fd7b 	bl	80002a8 <__aeabi_dsub>
 80067b2:	3630      	adds	r6, #48	; 0x30
 80067b4:	f805 6b01 	strb.w	r6, [r5], #1
 80067b8:	4652      	mov	r2, sl
 80067ba:	465b      	mov	r3, fp
 80067bc:	4680      	mov	r8, r0
 80067be:	4689      	mov	r9, r1
 80067c0:	f7fa f99c 	bl	8000afc <__aeabi_dcmplt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d163      	bne.n	8006890 <_dtoa_r+0x608>
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	4936      	ldr	r1, [pc, #216]	; (80068a8 <_dtoa_r+0x620>)
 80067ce:	2000      	movs	r0, #0
 80067d0:	f7f9 fd6a 	bl	80002a8 <__aeabi_dsub>
 80067d4:	4652      	mov	r2, sl
 80067d6:	465b      	mov	r3, fp
 80067d8:	f7fa f990 	bl	8000afc <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 80b5 	bne.w	800694c <_dtoa_r+0x6c4>
 80067e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e4:	429d      	cmp	r5, r3
 80067e6:	d081      	beq.n	80066ec <_dtoa_r+0x464>
 80067e8:	4b30      	ldr	r3, [pc, #192]	; (80068ac <_dtoa_r+0x624>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	4650      	mov	r0, sl
 80067ee:	4659      	mov	r1, fp
 80067f0:	f7f9 ff12 	bl	8000618 <__aeabi_dmul>
 80067f4:	4b2d      	ldr	r3, [pc, #180]	; (80068ac <_dtoa_r+0x624>)
 80067f6:	4682      	mov	sl, r0
 80067f8:	468b      	mov	fp, r1
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	2200      	movs	r2, #0
 8006800:	f7f9 ff0a 	bl	8000618 <__aeabi_dmul>
 8006804:	4680      	mov	r8, r0
 8006806:	4689      	mov	r9, r1
 8006808:	e7c6      	b.n	8006798 <_dtoa_r+0x510>
 800680a:	4650      	mov	r0, sl
 800680c:	4659      	mov	r1, fp
 800680e:	f7f9 ff03 	bl	8000618 <__aeabi_dmul>
 8006812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006814:	9d01      	ldr	r5, [sp, #4]
 8006816:	930f      	str	r3, [sp, #60]	; 0x3c
 8006818:	4682      	mov	sl, r0
 800681a:	468b      	mov	fp, r1
 800681c:	4649      	mov	r1, r9
 800681e:	4640      	mov	r0, r8
 8006820:	f7fa f9aa 	bl	8000b78 <__aeabi_d2iz>
 8006824:	4606      	mov	r6, r0
 8006826:	f7f9 fe8d 	bl	8000544 <__aeabi_i2d>
 800682a:	3630      	adds	r6, #48	; 0x30
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fd38 	bl	80002a8 <__aeabi_dsub>
 8006838:	f805 6b01 	strb.w	r6, [r5], #1
 800683c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800683e:	429d      	cmp	r5, r3
 8006840:	4680      	mov	r8, r0
 8006842:	4689      	mov	r9, r1
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	d124      	bne.n	8006894 <_dtoa_r+0x60c>
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <_dtoa_r+0x630>)
 800684c:	4650      	mov	r0, sl
 800684e:	4659      	mov	r1, fp
 8006850:	f7f9 fd2c 	bl	80002ac <__adddf3>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7fa f96c 	bl	8000b38 <__aeabi_dcmpgt>
 8006860:	2800      	cmp	r0, #0
 8006862:	d173      	bne.n	800694c <_dtoa_r+0x6c4>
 8006864:	4652      	mov	r2, sl
 8006866:	465b      	mov	r3, fp
 8006868:	4913      	ldr	r1, [pc, #76]	; (80068b8 <_dtoa_r+0x630>)
 800686a:	2000      	movs	r0, #0
 800686c:	f7f9 fd1c 	bl	80002a8 <__aeabi_dsub>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4640      	mov	r0, r8
 8006876:	4649      	mov	r1, r9
 8006878:	f7fa f940 	bl	8000afc <__aeabi_dcmplt>
 800687c:	2800      	cmp	r0, #0
 800687e:	f43f af35 	beq.w	80066ec <_dtoa_r+0x464>
 8006882:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006884:	1e6b      	subs	r3, r5, #1
 8006886:	930f      	str	r3, [sp, #60]	; 0x3c
 8006888:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800688c:	2b30      	cmp	r3, #48	; 0x30
 800688e:	d0f8      	beq.n	8006882 <_dtoa_r+0x5fa>
 8006890:	9700      	str	r7, [sp, #0]
 8006892:	e049      	b.n	8006928 <_dtoa_r+0x6a0>
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <_dtoa_r+0x624>)
 8006896:	f7f9 febf 	bl	8000618 <__aeabi_dmul>
 800689a:	4680      	mov	r8, r0
 800689c:	4689      	mov	r9, r1
 800689e:	e7bd      	b.n	800681c <_dtoa_r+0x594>
 80068a0:	08008aa0 	.word	0x08008aa0
 80068a4:	08008a78 	.word	0x08008a78
 80068a8:	3ff00000 	.word	0x3ff00000
 80068ac:	40240000 	.word	0x40240000
 80068b0:	401c0000 	.word	0x401c0000
 80068b4:	40140000 	.word	0x40140000
 80068b8:	3fe00000 	.word	0x3fe00000
 80068bc:	9d01      	ldr	r5, [sp, #4]
 80068be:	4656      	mov	r6, sl
 80068c0:	465f      	mov	r7, fp
 80068c2:	4642      	mov	r2, r8
 80068c4:	464b      	mov	r3, r9
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7f9 ffcf 	bl	800086c <__aeabi_ddiv>
 80068ce:	f7fa f953 	bl	8000b78 <__aeabi_d2iz>
 80068d2:	4682      	mov	sl, r0
 80068d4:	f7f9 fe36 	bl	8000544 <__aeabi_i2d>
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f7f9 fe9c 	bl	8000618 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80068ec:	f7f9 fcdc 	bl	80002a8 <__aeabi_dsub>
 80068f0:	f805 6b01 	strb.w	r6, [r5], #1
 80068f4:	9e01      	ldr	r6, [sp, #4]
 80068f6:	9f03      	ldr	r7, [sp, #12]
 80068f8:	1bae      	subs	r6, r5, r6
 80068fa:	42b7      	cmp	r7, r6
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	d135      	bne.n	800696e <_dtoa_r+0x6e6>
 8006902:	f7f9 fcd3 	bl	80002ac <__adddf3>
 8006906:	4642      	mov	r2, r8
 8006908:	464b      	mov	r3, r9
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	f7fa f913 	bl	8000b38 <__aeabi_dcmpgt>
 8006912:	b9d0      	cbnz	r0, 800694a <_dtoa_r+0x6c2>
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7fa f8e4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006920:	b110      	cbz	r0, 8006928 <_dtoa_r+0x6a0>
 8006922:	f01a 0f01 	tst.w	sl, #1
 8006926:	d110      	bne.n	800694a <_dtoa_r+0x6c2>
 8006928:	4620      	mov	r0, r4
 800692a:	ee18 1a10 	vmov	r1, s16
 800692e:	f000 fae9 	bl	8006f04 <_Bfree>
 8006932:	2300      	movs	r3, #0
 8006934:	9800      	ldr	r0, [sp, #0]
 8006936:	702b      	strb	r3, [r5, #0]
 8006938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800693a:	3001      	adds	r0, #1
 800693c:	6018      	str	r0, [r3, #0]
 800693e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006940:	2b00      	cmp	r3, #0
 8006942:	f43f acf1 	beq.w	8006328 <_dtoa_r+0xa0>
 8006946:	601d      	str	r5, [r3, #0]
 8006948:	e4ee      	b.n	8006328 <_dtoa_r+0xa0>
 800694a:	9f00      	ldr	r7, [sp, #0]
 800694c:	462b      	mov	r3, r5
 800694e:	461d      	mov	r5, r3
 8006950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006954:	2a39      	cmp	r2, #57	; 0x39
 8006956:	d106      	bne.n	8006966 <_dtoa_r+0x6de>
 8006958:	9a01      	ldr	r2, [sp, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	d1f7      	bne.n	800694e <_dtoa_r+0x6c6>
 800695e:	9901      	ldr	r1, [sp, #4]
 8006960:	2230      	movs	r2, #48	; 0x30
 8006962:	3701      	adds	r7, #1
 8006964:	700a      	strb	r2, [r1, #0]
 8006966:	781a      	ldrb	r2, [r3, #0]
 8006968:	3201      	adds	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e790      	b.n	8006890 <_dtoa_r+0x608>
 800696e:	4ba6      	ldr	r3, [pc, #664]	; (8006c08 <_dtoa_r+0x980>)
 8006970:	2200      	movs	r2, #0
 8006972:	f7f9 fe51 	bl	8000618 <__aeabi_dmul>
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	4606      	mov	r6, r0
 800697c:	460f      	mov	r7, r1
 800697e:	f7fa f8b3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006982:	2800      	cmp	r0, #0
 8006984:	d09d      	beq.n	80068c2 <_dtoa_r+0x63a>
 8006986:	e7cf      	b.n	8006928 <_dtoa_r+0x6a0>
 8006988:	9a08      	ldr	r2, [sp, #32]
 800698a:	2a00      	cmp	r2, #0
 800698c:	f000 80d7 	beq.w	8006b3e <_dtoa_r+0x8b6>
 8006990:	9a06      	ldr	r2, [sp, #24]
 8006992:	2a01      	cmp	r2, #1
 8006994:	f300 80ba 	bgt.w	8006b0c <_dtoa_r+0x884>
 8006998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800699a:	2a00      	cmp	r2, #0
 800699c:	f000 80b2 	beq.w	8006b04 <_dtoa_r+0x87c>
 80069a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069a4:	9e07      	ldr	r6, [sp, #28]
 80069a6:	9d04      	ldr	r5, [sp, #16]
 80069a8:	9a04      	ldr	r2, [sp, #16]
 80069aa:	441a      	add	r2, r3
 80069ac:	9204      	str	r2, [sp, #16]
 80069ae:	9a05      	ldr	r2, [sp, #20]
 80069b0:	2101      	movs	r1, #1
 80069b2:	441a      	add	r2, r3
 80069b4:	4620      	mov	r0, r4
 80069b6:	9205      	str	r2, [sp, #20]
 80069b8:	f000 fb5c 	bl	8007074 <__i2b>
 80069bc:	4607      	mov	r7, r0
 80069be:	2d00      	cmp	r5, #0
 80069c0:	dd0c      	ble.n	80069dc <_dtoa_r+0x754>
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dd09      	ble.n	80069dc <_dtoa_r+0x754>
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	9a04      	ldr	r2, [sp, #16]
 80069cc:	bfa8      	it	ge
 80069ce:	462b      	movge	r3, r5
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	9204      	str	r2, [sp, #16]
 80069d4:	9a05      	ldr	r2, [sp, #20]
 80069d6:	1aed      	subs	r5, r5, r3
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	9305      	str	r3, [sp, #20]
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	b31b      	cbz	r3, 8006a28 <_dtoa_r+0x7a0>
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80af 	beq.w	8006b46 <_dtoa_r+0x8be>
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	dd13      	ble.n	8006a14 <_dtoa_r+0x78c>
 80069ec:	4639      	mov	r1, r7
 80069ee:	4632      	mov	r2, r6
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fbff 	bl	80071f4 <__pow5mult>
 80069f6:	ee18 2a10 	vmov	r2, s16
 80069fa:	4601      	mov	r1, r0
 80069fc:	4607      	mov	r7, r0
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fb4e 	bl	80070a0 <__multiply>
 8006a04:	ee18 1a10 	vmov	r1, s16
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 fa7a 	bl	8006f04 <_Bfree>
 8006a10:	ee08 8a10 	vmov	s16, r8
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	1b9a      	subs	r2, r3, r6
 8006a18:	d006      	beq.n	8006a28 <_dtoa_r+0x7a0>
 8006a1a:	ee18 1a10 	vmov	r1, s16
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fbe8 	bl	80071f4 <__pow5mult>
 8006a24:	ee08 0a10 	vmov	s16, r0
 8006a28:	2101      	movs	r1, #1
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 fb22 	bl	8007074 <__i2b>
 8006a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	4606      	mov	r6, r0
 8006a36:	f340 8088 	ble.w	8006b4a <_dtoa_r+0x8c2>
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 fbd8 	bl	80071f4 <__pow5mult>
 8006a44:	9b06      	ldr	r3, [sp, #24]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	4606      	mov	r6, r0
 8006a4a:	f340 8081 	ble.w	8006b50 <_dtoa_r+0x8c8>
 8006a4e:	f04f 0800 	mov.w	r8, #0
 8006a52:	6933      	ldr	r3, [r6, #16]
 8006a54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a58:	6918      	ldr	r0, [r3, #16]
 8006a5a:	f000 fabb 	bl	8006fd4 <__hi0bits>
 8006a5e:	f1c0 0020 	rsb	r0, r0, #32
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	4418      	add	r0, r3
 8006a66:	f010 001f 	ands.w	r0, r0, #31
 8006a6a:	f000 8092 	beq.w	8006b92 <_dtoa_r+0x90a>
 8006a6e:	f1c0 0320 	rsb	r3, r0, #32
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	f340 808a 	ble.w	8006b8c <_dtoa_r+0x904>
 8006a78:	f1c0 001c 	rsb	r0, r0, #28
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	4403      	add	r3, r0
 8006a80:	9304      	str	r3, [sp, #16]
 8006a82:	9b05      	ldr	r3, [sp, #20]
 8006a84:	4403      	add	r3, r0
 8006a86:	4405      	add	r5, r0
 8006a88:	9305      	str	r3, [sp, #20]
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dd07      	ble.n	8006aa0 <_dtoa_r+0x818>
 8006a90:	ee18 1a10 	vmov	r1, s16
 8006a94:	461a      	mov	r2, r3
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 fc06 	bl	80072a8 <__lshift>
 8006a9c:	ee08 0a10 	vmov	s16, r0
 8006aa0:	9b05      	ldr	r3, [sp, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dd05      	ble.n	8006ab2 <_dtoa_r+0x82a>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 fbfc 	bl	80072a8 <__lshift>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d06e      	beq.n	8006b96 <_dtoa_r+0x90e>
 8006ab8:	ee18 0a10 	vmov	r0, s16
 8006abc:	4631      	mov	r1, r6
 8006abe:	f000 fc63 	bl	8007388 <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	da67      	bge.n	8006b96 <_dtoa_r+0x90e>
 8006ac6:	9b00      	ldr	r3, [sp, #0]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	ee18 1a10 	vmov	r1, s16
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	220a      	movs	r2, #10
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fa37 	bl	8006f48 <__multadd>
 8006ada:	9b08      	ldr	r3, [sp, #32]
 8006adc:	ee08 0a10 	vmov	s16, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 81b1 	beq.w	8006e48 <_dtoa_r+0xbc0>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4639      	mov	r1, r7
 8006aea:	220a      	movs	r2, #10
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 fa2b 	bl	8006f48 <__multadd>
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	4607      	mov	r7, r0
 8006af8:	f300 808e 	bgt.w	8006c18 <_dtoa_r+0x990>
 8006afc:	9b06      	ldr	r3, [sp, #24]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	dc51      	bgt.n	8006ba6 <_dtoa_r+0x91e>
 8006b02:	e089      	b.n	8006c18 <_dtoa_r+0x990>
 8006b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b0a:	e74b      	b.n	80069a4 <_dtoa_r+0x71c>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	1e5e      	subs	r6, r3, #1
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	42b3      	cmp	r3, r6
 8006b14:	bfbf      	itttt	lt
 8006b16:	9b07      	ldrlt	r3, [sp, #28]
 8006b18:	9607      	strlt	r6, [sp, #28]
 8006b1a:	1af2      	sublt	r2, r6, r3
 8006b1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b1e:	bfb6      	itet	lt
 8006b20:	189b      	addlt	r3, r3, r2
 8006b22:	1b9e      	subge	r6, r3, r6
 8006b24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	bfb8      	it	lt
 8006b2a:	2600      	movlt	r6, #0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bfb7      	itett	lt
 8006b30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b38:	1a9d      	sublt	r5, r3, r2
 8006b3a:	2300      	movlt	r3, #0
 8006b3c:	e734      	b.n	80069a8 <_dtoa_r+0x720>
 8006b3e:	9e07      	ldr	r6, [sp, #28]
 8006b40:	9d04      	ldr	r5, [sp, #16]
 8006b42:	9f08      	ldr	r7, [sp, #32]
 8006b44:	e73b      	b.n	80069be <_dtoa_r+0x736>
 8006b46:	9a07      	ldr	r2, [sp, #28]
 8006b48:	e767      	b.n	8006a1a <_dtoa_r+0x792>
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	dc18      	bgt.n	8006b82 <_dtoa_r+0x8fa>
 8006b50:	f1ba 0f00 	cmp.w	sl, #0
 8006b54:	d115      	bne.n	8006b82 <_dtoa_r+0x8fa>
 8006b56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b5a:	b993      	cbnz	r3, 8006b82 <_dtoa_r+0x8fa>
 8006b5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b60:	0d1b      	lsrs	r3, r3, #20
 8006b62:	051b      	lsls	r3, r3, #20
 8006b64:	b183      	cbz	r3, 8006b88 <_dtoa_r+0x900>
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	9b05      	ldr	r3, [sp, #20]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	9305      	str	r3, [sp, #20]
 8006b72:	f04f 0801 	mov.w	r8, #1
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f47f af6a 	bne.w	8006a52 <_dtoa_r+0x7ca>
 8006b7e:	2001      	movs	r0, #1
 8006b80:	e76f      	b.n	8006a62 <_dtoa_r+0x7da>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	e7f6      	b.n	8006b76 <_dtoa_r+0x8ee>
 8006b88:	4698      	mov	r8, r3
 8006b8a:	e7f4      	b.n	8006b76 <_dtoa_r+0x8ee>
 8006b8c:	f43f af7d 	beq.w	8006a8a <_dtoa_r+0x802>
 8006b90:	4618      	mov	r0, r3
 8006b92:	301c      	adds	r0, #28
 8006b94:	e772      	b.n	8006a7c <_dtoa_r+0x7f4>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dc37      	bgt.n	8006c0c <_dtoa_r+0x984>
 8006b9c:	9b06      	ldr	r3, [sp, #24]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	dd34      	ble.n	8006c0c <_dtoa_r+0x984>
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	9302      	str	r3, [sp, #8]
 8006ba6:	9b02      	ldr	r3, [sp, #8]
 8006ba8:	b96b      	cbnz	r3, 8006bc6 <_dtoa_r+0x93e>
 8006baa:	4631      	mov	r1, r6
 8006bac:	2205      	movs	r2, #5
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f9ca 	bl	8006f48 <__multadd>
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	ee18 0a10 	vmov	r0, s16
 8006bbc:	f000 fbe4 	bl	8007388 <__mcmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f73f adbb 	bgt.w	800673c <_dtoa_r+0x4b4>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	9d01      	ldr	r5, [sp, #4]
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	f04f 0800 	mov.w	r8, #0
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 f995 	bl	8006f04 <_Bfree>
 8006bda:	2f00      	cmp	r7, #0
 8006bdc:	f43f aea4 	beq.w	8006928 <_dtoa_r+0x6a0>
 8006be0:	f1b8 0f00 	cmp.w	r8, #0
 8006be4:	d005      	beq.n	8006bf2 <_dtoa_r+0x96a>
 8006be6:	45b8      	cmp	r8, r7
 8006be8:	d003      	beq.n	8006bf2 <_dtoa_r+0x96a>
 8006bea:	4641      	mov	r1, r8
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 f989 	bl	8006f04 <_Bfree>
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 f985 	bl	8006f04 <_Bfree>
 8006bfa:	e695      	b.n	8006928 <_dtoa_r+0x6a0>
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	4637      	mov	r7, r6
 8006c00:	e7e1      	b.n	8006bc6 <_dtoa_r+0x93e>
 8006c02:	9700      	str	r7, [sp, #0]
 8006c04:	4637      	mov	r7, r6
 8006c06:	e599      	b.n	800673c <_dtoa_r+0x4b4>
 8006c08:	40240000 	.word	0x40240000
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80ca 	beq.w	8006da8 <_dtoa_r+0xb20>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	9302      	str	r3, [sp, #8]
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	dd05      	ble.n	8006c28 <_dtoa_r+0x9a0>
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	462a      	mov	r2, r5
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fb41 	bl	80072a8 <__lshift>
 8006c26:	4607      	mov	r7, r0
 8006c28:	f1b8 0f00 	cmp.w	r8, #0
 8006c2c:	d05b      	beq.n	8006ce6 <_dtoa_r+0xa5e>
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 f927 	bl	8006e84 <_Balloc>
 8006c36:	4605      	mov	r5, r0
 8006c38:	b928      	cbnz	r0, 8006c46 <_dtoa_r+0x9be>
 8006c3a:	4b87      	ldr	r3, [pc, #540]	; (8006e58 <_dtoa_r+0xbd0>)
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c42:	f7ff bb3b 	b.w	80062bc <_dtoa_r+0x34>
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	3202      	adds	r2, #2
 8006c4a:	0092      	lsls	r2, r2, #2
 8006c4c:	f107 010c 	add.w	r1, r7, #12
 8006c50:	300c      	adds	r0, #12
 8006c52:	f7fe fcfb 	bl	800564c <memcpy>
 8006c56:	2201      	movs	r2, #1
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fb24 	bl	80072a8 <__lshift>
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	f103 0901 	add.w	r9, r3, #1
 8006c66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	f00a 0301 	and.w	r3, sl, #1
 8006c72:	46b8      	mov	r8, r7
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	4607      	mov	r7, r0
 8006c78:	4631      	mov	r1, r6
 8006c7a:	ee18 0a10 	vmov	r0, s16
 8006c7e:	f7ff fa75 	bl	800616c <quorem>
 8006c82:	4641      	mov	r1, r8
 8006c84:	9002      	str	r0, [sp, #8]
 8006c86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c8a:	ee18 0a10 	vmov	r0, s16
 8006c8e:	f000 fb7b 	bl	8007388 <__mcmp>
 8006c92:	463a      	mov	r2, r7
 8006c94:	9003      	str	r0, [sp, #12]
 8006c96:	4631      	mov	r1, r6
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fb91 	bl	80073c0 <__mdiff>
 8006c9e:	68c2      	ldr	r2, [r0, #12]
 8006ca0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	bb02      	cbnz	r2, 8006cea <_dtoa_r+0xa62>
 8006ca8:	4601      	mov	r1, r0
 8006caa:	ee18 0a10 	vmov	r0, s16
 8006cae:	f000 fb6b 	bl	8007388 <__mcmp>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	9207      	str	r2, [sp, #28]
 8006cba:	f000 f923 	bl	8006f04 <_Bfree>
 8006cbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006cc2:	ea43 0102 	orr.w	r1, r3, r2
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	464d      	mov	r5, r9
 8006ccc:	d10f      	bne.n	8006cee <_dtoa_r+0xa66>
 8006cce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cd2:	d02a      	beq.n	8006d2a <_dtoa_r+0xaa2>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dd02      	ble.n	8006ce0 <_dtoa_r+0xa58>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ce0:	f88b a000 	strb.w	sl, [fp]
 8006ce4:	e775      	b.n	8006bd2 <_dtoa_r+0x94a>
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	e7ba      	b.n	8006c60 <_dtoa_r+0x9d8>
 8006cea:	2201      	movs	r2, #1
 8006cec:	e7e2      	b.n	8006cb4 <_dtoa_r+0xa2c>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	db04      	blt.n	8006cfe <_dtoa_r+0xa76>
 8006cf4:	9906      	ldr	r1, [sp, #24]
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	9904      	ldr	r1, [sp, #16]
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	d122      	bne.n	8006d44 <_dtoa_r+0xabc>
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	ddee      	ble.n	8006ce0 <_dtoa_r+0xa58>
 8006d02:	ee18 1a10 	vmov	r1, s16
 8006d06:	2201      	movs	r2, #1
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 facd 	bl	80072a8 <__lshift>
 8006d0e:	4631      	mov	r1, r6
 8006d10:	ee08 0a10 	vmov	s16, r0
 8006d14:	f000 fb38 	bl	8007388 <__mcmp>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	dc03      	bgt.n	8006d24 <_dtoa_r+0xa9c>
 8006d1c:	d1e0      	bne.n	8006ce0 <_dtoa_r+0xa58>
 8006d1e:	f01a 0f01 	tst.w	sl, #1
 8006d22:	d0dd      	beq.n	8006ce0 <_dtoa_r+0xa58>
 8006d24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d28:	d1d7      	bne.n	8006cda <_dtoa_r+0xa52>
 8006d2a:	2339      	movs	r3, #57	; 0x39
 8006d2c:	f88b 3000 	strb.w	r3, [fp]
 8006d30:	462b      	mov	r3, r5
 8006d32:	461d      	mov	r5, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d3a:	2a39      	cmp	r2, #57	; 0x39
 8006d3c:	d071      	beq.n	8006e22 <_dtoa_r+0xb9a>
 8006d3e:	3201      	adds	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	e746      	b.n	8006bd2 <_dtoa_r+0x94a>
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	dd07      	ble.n	8006d58 <_dtoa_r+0xad0>
 8006d48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d4c:	d0ed      	beq.n	8006d2a <_dtoa_r+0xaa2>
 8006d4e:	f10a 0301 	add.w	r3, sl, #1
 8006d52:	f88b 3000 	strb.w	r3, [fp]
 8006d56:	e73c      	b.n	8006bd2 <_dtoa_r+0x94a>
 8006d58:	9b05      	ldr	r3, [sp, #20]
 8006d5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d5e:	4599      	cmp	r9, r3
 8006d60:	d047      	beq.n	8006df2 <_dtoa_r+0xb6a>
 8006d62:	ee18 1a10 	vmov	r1, s16
 8006d66:	2300      	movs	r3, #0
 8006d68:	220a      	movs	r2, #10
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 f8ec 	bl	8006f48 <__multadd>
 8006d70:	45b8      	cmp	r8, r7
 8006d72:	ee08 0a10 	vmov	s16, r0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	f04f 020a 	mov.w	r2, #10
 8006d7e:	4641      	mov	r1, r8
 8006d80:	4620      	mov	r0, r4
 8006d82:	d106      	bne.n	8006d92 <_dtoa_r+0xb0a>
 8006d84:	f000 f8e0 	bl	8006f48 <__multadd>
 8006d88:	4680      	mov	r8, r0
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	f109 0901 	add.w	r9, r9, #1
 8006d90:	e772      	b.n	8006c78 <_dtoa_r+0x9f0>
 8006d92:	f000 f8d9 	bl	8006f48 <__multadd>
 8006d96:	4639      	mov	r1, r7
 8006d98:	4680      	mov	r8, r0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 f8d2 	bl	8006f48 <__multadd>
 8006da4:	4607      	mov	r7, r0
 8006da6:	e7f1      	b.n	8006d8c <_dtoa_r+0xb04>
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	9302      	str	r3, [sp, #8]
 8006dac:	9d01      	ldr	r5, [sp, #4]
 8006dae:	ee18 0a10 	vmov	r0, s16
 8006db2:	4631      	mov	r1, r6
 8006db4:	f7ff f9da 	bl	800616c <quorem>
 8006db8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	f805 ab01 	strb.w	sl, [r5], #1
 8006dc2:	1aea      	subs	r2, r5, r3
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	dd09      	ble.n	8006dde <_dtoa_r+0xb56>
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	2300      	movs	r3, #0
 8006dd0:	220a      	movs	r2, #10
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f8b8 	bl	8006f48 <__multadd>
 8006dd8:	ee08 0a10 	vmov	s16, r0
 8006ddc:	e7e7      	b.n	8006dae <_dtoa_r+0xb26>
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfc8      	it	gt
 8006de4:	461d      	movgt	r5, r3
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	bfd8      	it	le
 8006dea:	2501      	movle	r5, #1
 8006dec:	441d      	add	r5, r3
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	ee18 1a10 	vmov	r1, s16
 8006df6:	2201      	movs	r2, #1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fa55 	bl	80072a8 <__lshift>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	ee08 0a10 	vmov	s16, r0
 8006e04:	f000 fac0 	bl	8007388 <__mcmp>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	dc91      	bgt.n	8006d30 <_dtoa_r+0xaa8>
 8006e0c:	d102      	bne.n	8006e14 <_dtoa_r+0xb8c>
 8006e0e:	f01a 0f01 	tst.w	sl, #1
 8006e12:	d18d      	bne.n	8006d30 <_dtoa_r+0xaa8>
 8006e14:	462b      	mov	r3, r5
 8006e16:	461d      	mov	r5, r3
 8006e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e1c:	2a30      	cmp	r2, #48	; 0x30
 8006e1e:	d0fa      	beq.n	8006e16 <_dtoa_r+0xb8e>
 8006e20:	e6d7      	b.n	8006bd2 <_dtoa_r+0x94a>
 8006e22:	9a01      	ldr	r2, [sp, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d184      	bne.n	8006d32 <_dtoa_r+0xaaa>
 8006e28:	9b00      	ldr	r3, [sp, #0]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	2331      	movs	r3, #49	; 0x31
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	e6ce      	b.n	8006bd2 <_dtoa_r+0x94a>
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <_dtoa_r+0xbd4>)
 8006e36:	f7ff ba95 	b.w	8006364 <_dtoa_r+0xdc>
 8006e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f47f aa6e 	bne.w	800631e <_dtoa_r+0x96>
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <_dtoa_r+0xbd8>)
 8006e44:	f7ff ba8e 	b.w	8006364 <_dtoa_r+0xdc>
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dcae      	bgt.n	8006dac <_dtoa_r+0xb24>
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	f73f aea8 	bgt.w	8006ba6 <_dtoa_r+0x91e>
 8006e56:	e7a9      	b.n	8006dac <_dtoa_r+0xb24>
 8006e58:	08008a07 	.word	0x08008a07
 8006e5c:	08008964 	.word	0x08008964
 8006e60:	08008988 	.word	0x08008988

08006e64 <_localeconv_r>:
 8006e64:	4800      	ldr	r0, [pc, #0]	; (8006e68 <_localeconv_r+0x4>)
 8006e66:	4770      	bx	lr
 8006e68:	20000814 	.word	0x20000814

08006e6c <__malloc_lock>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__malloc_lock+0x8>)
 8006e6e:	f000 bd5e 	b.w	800792e <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	20000a3c 	.word	0x20000a3c

08006e78 <__malloc_unlock>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__malloc_unlock+0x8>)
 8006e7a:	f000 bd59 	b.w	8007930 <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20000a3c 	.word	0x20000a3c

08006e84 <_Balloc>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	b976      	cbnz	r6, 8006eac <_Balloc+0x28>
 8006e8e:	2010      	movs	r0, #16
 8006e90:	f7fe fbd4 	bl	800563c <malloc>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6260      	str	r0, [r4, #36]	; 0x24
 8006e98:	b920      	cbnz	r0, 8006ea4 <_Balloc+0x20>
 8006e9a:	4b18      	ldr	r3, [pc, #96]	; (8006efc <_Balloc+0x78>)
 8006e9c:	4818      	ldr	r0, [pc, #96]	; (8006f00 <_Balloc+0x7c>)
 8006e9e:	2166      	movs	r1, #102	; 0x66
 8006ea0:	f000 fd14 	bl	80078cc <__assert_func>
 8006ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ea8:	6006      	str	r6, [r0, #0]
 8006eaa:	60c6      	str	r6, [r0, #12]
 8006eac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006eae:	68f3      	ldr	r3, [r6, #12]
 8006eb0:	b183      	cbz	r3, 8006ed4 <_Balloc+0x50>
 8006eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006eba:	b9b8      	cbnz	r0, 8006eec <_Balloc+0x68>
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	fa01 f605 	lsl.w	r6, r1, r5
 8006ec2:	1d72      	adds	r2, r6, #5
 8006ec4:	0092      	lsls	r2, r2, #2
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fb60 	bl	800758c <_calloc_r>
 8006ecc:	b160      	cbz	r0, 8006ee8 <_Balloc+0x64>
 8006ece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ed2:	e00e      	b.n	8006ef2 <_Balloc+0x6e>
 8006ed4:	2221      	movs	r2, #33	; 0x21
 8006ed6:	2104      	movs	r1, #4
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fb57 	bl	800758c <_calloc_r>
 8006ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee0:	60f0      	str	r0, [r6, #12]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e4      	bne.n	8006eb2 <_Balloc+0x2e>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	6802      	ldr	r2, [r0, #0]
 8006eee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ef8:	e7f7      	b.n	8006eea <_Balloc+0x66>
 8006efa:	bf00      	nop
 8006efc:	08008995 	.word	0x08008995
 8006f00:	08008a18 	.word	0x08008a18

08006f04 <_Bfree>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b976      	cbnz	r6, 8006f2c <_Bfree+0x28>
 8006f0e:	2010      	movs	r0, #16
 8006f10:	f7fe fb94 	bl	800563c <malloc>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6268      	str	r0, [r5, #36]	; 0x24
 8006f18:	b920      	cbnz	r0, 8006f24 <_Bfree+0x20>
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <_Bfree+0x3c>)
 8006f1c:	4809      	ldr	r0, [pc, #36]	; (8006f44 <_Bfree+0x40>)
 8006f1e:	218a      	movs	r1, #138	; 0x8a
 8006f20:	f000 fcd4 	bl	80078cc <__assert_func>
 8006f24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f28:	6006      	str	r6, [r0, #0]
 8006f2a:	60c6      	str	r6, [r0, #12]
 8006f2c:	b13c      	cbz	r4, 8006f3e <_Bfree+0x3a>
 8006f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f30:	6862      	ldr	r2, [r4, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f38:	6021      	str	r1, [r4, #0]
 8006f3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	08008995 	.word	0x08008995
 8006f44:	08008a18 	.word	0x08008a18

08006f48 <__multadd>:
 8006f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4c:	690d      	ldr	r5, [r1, #16]
 8006f4e:	4607      	mov	r7, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	461e      	mov	r6, r3
 8006f54:	f101 0c14 	add.w	ip, r1, #20
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f5e:	b299      	uxth	r1, r3
 8006f60:	fb02 6101 	mla	r1, r2, r1, r6
 8006f64:	0c1e      	lsrs	r6, r3, #16
 8006f66:	0c0b      	lsrs	r3, r1, #16
 8006f68:	fb02 3306 	mla	r3, r2, r6, r3
 8006f6c:	b289      	uxth	r1, r1
 8006f6e:	3001      	adds	r0, #1
 8006f70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f74:	4285      	cmp	r5, r0
 8006f76:	f84c 1b04 	str.w	r1, [ip], #4
 8006f7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f7e:	dcec      	bgt.n	8006f5a <__multadd+0x12>
 8006f80:	b30e      	cbz	r6, 8006fc6 <__multadd+0x7e>
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dc19      	bgt.n	8006fbc <__multadd+0x74>
 8006f88:	6861      	ldr	r1, [r4, #4]
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	f7ff ff79 	bl	8006e84 <_Balloc>
 8006f92:	4680      	mov	r8, r0
 8006f94:	b928      	cbnz	r0, 8006fa2 <__multadd+0x5a>
 8006f96:	4602      	mov	r2, r0
 8006f98:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <__multadd+0x84>)
 8006f9a:	480d      	ldr	r0, [pc, #52]	; (8006fd0 <__multadd+0x88>)
 8006f9c:	21b5      	movs	r1, #181	; 0xb5
 8006f9e:	f000 fc95 	bl	80078cc <__assert_func>
 8006fa2:	6922      	ldr	r2, [r4, #16]
 8006fa4:	3202      	adds	r2, #2
 8006fa6:	f104 010c 	add.w	r1, r4, #12
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	300c      	adds	r0, #12
 8006fae:	f7fe fb4d 	bl	800564c <memcpy>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff ffa5 	bl	8006f04 <_Bfree>
 8006fba:	4644      	mov	r4, r8
 8006fbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	615e      	str	r6, [r3, #20]
 8006fc4:	6125      	str	r5, [r4, #16]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fcc:	08008a07 	.word	0x08008a07
 8006fd0:	08008a18 	.word	0x08008a18

08006fd4 <__hi0bits>:
 8006fd4:	0c03      	lsrs	r3, r0, #16
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	b9d3      	cbnz	r3, 8007010 <__hi0bits+0x3c>
 8006fda:	0400      	lsls	r0, r0, #16
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fe2:	bf04      	itt	eq
 8006fe4:	0200      	lsleq	r0, r0, #8
 8006fe6:	3308      	addeq	r3, #8
 8006fe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fec:	bf04      	itt	eq
 8006fee:	0100      	lsleq	r0, r0, #4
 8006ff0:	3304      	addeq	r3, #4
 8006ff2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ff6:	bf04      	itt	eq
 8006ff8:	0080      	lsleq	r0, r0, #2
 8006ffa:	3302      	addeq	r3, #2
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	db05      	blt.n	800700c <__hi0bits+0x38>
 8007000:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007004:	f103 0301 	add.w	r3, r3, #1
 8007008:	bf08      	it	eq
 800700a:	2320      	moveq	r3, #32
 800700c:	4618      	mov	r0, r3
 800700e:	4770      	bx	lr
 8007010:	2300      	movs	r3, #0
 8007012:	e7e4      	b.n	8006fde <__hi0bits+0xa>

08007014 <__lo0bits>:
 8007014:	6803      	ldr	r3, [r0, #0]
 8007016:	f013 0207 	ands.w	r2, r3, #7
 800701a:	4601      	mov	r1, r0
 800701c:	d00b      	beq.n	8007036 <__lo0bits+0x22>
 800701e:	07da      	lsls	r2, r3, #31
 8007020:	d423      	bmi.n	800706a <__lo0bits+0x56>
 8007022:	0798      	lsls	r0, r3, #30
 8007024:	bf49      	itett	mi
 8007026:	085b      	lsrmi	r3, r3, #1
 8007028:	089b      	lsrpl	r3, r3, #2
 800702a:	2001      	movmi	r0, #1
 800702c:	600b      	strmi	r3, [r1, #0]
 800702e:	bf5c      	itt	pl
 8007030:	600b      	strpl	r3, [r1, #0]
 8007032:	2002      	movpl	r0, #2
 8007034:	4770      	bx	lr
 8007036:	b298      	uxth	r0, r3
 8007038:	b9a8      	cbnz	r0, 8007066 <__lo0bits+0x52>
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	2010      	movs	r0, #16
 800703e:	b2da      	uxtb	r2, r3
 8007040:	b90a      	cbnz	r2, 8007046 <__lo0bits+0x32>
 8007042:	3008      	adds	r0, #8
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	071a      	lsls	r2, r3, #28
 8007048:	bf04      	itt	eq
 800704a:	091b      	lsreq	r3, r3, #4
 800704c:	3004      	addeq	r0, #4
 800704e:	079a      	lsls	r2, r3, #30
 8007050:	bf04      	itt	eq
 8007052:	089b      	lsreq	r3, r3, #2
 8007054:	3002      	addeq	r0, #2
 8007056:	07da      	lsls	r2, r3, #31
 8007058:	d403      	bmi.n	8007062 <__lo0bits+0x4e>
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	f100 0001 	add.w	r0, r0, #1
 8007060:	d005      	beq.n	800706e <__lo0bits+0x5a>
 8007062:	600b      	str	r3, [r1, #0]
 8007064:	4770      	bx	lr
 8007066:	4610      	mov	r0, r2
 8007068:	e7e9      	b.n	800703e <__lo0bits+0x2a>
 800706a:	2000      	movs	r0, #0
 800706c:	4770      	bx	lr
 800706e:	2020      	movs	r0, #32
 8007070:	4770      	bx	lr
	...

08007074 <__i2b>:
 8007074:	b510      	push	{r4, lr}
 8007076:	460c      	mov	r4, r1
 8007078:	2101      	movs	r1, #1
 800707a:	f7ff ff03 	bl	8006e84 <_Balloc>
 800707e:	4602      	mov	r2, r0
 8007080:	b928      	cbnz	r0, 800708e <__i2b+0x1a>
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <__i2b+0x24>)
 8007084:	4805      	ldr	r0, [pc, #20]	; (800709c <__i2b+0x28>)
 8007086:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800708a:	f000 fc1f 	bl	80078cc <__assert_func>
 800708e:	2301      	movs	r3, #1
 8007090:	6144      	str	r4, [r0, #20]
 8007092:	6103      	str	r3, [r0, #16]
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	08008a07 	.word	0x08008a07
 800709c:	08008a18 	.word	0x08008a18

080070a0 <__multiply>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4691      	mov	r9, r2
 80070a6:	690a      	ldr	r2, [r1, #16]
 80070a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	bfb8      	it	lt
 80070b0:	460b      	movlt	r3, r1
 80070b2:	460c      	mov	r4, r1
 80070b4:	bfbc      	itt	lt
 80070b6:	464c      	movlt	r4, r9
 80070b8:	4699      	movlt	r9, r3
 80070ba:	6927      	ldr	r7, [r4, #16]
 80070bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	6861      	ldr	r1, [r4, #4]
 80070c4:	eb07 060a 	add.w	r6, r7, sl
 80070c8:	42b3      	cmp	r3, r6
 80070ca:	b085      	sub	sp, #20
 80070cc:	bfb8      	it	lt
 80070ce:	3101      	addlt	r1, #1
 80070d0:	f7ff fed8 	bl	8006e84 <_Balloc>
 80070d4:	b930      	cbnz	r0, 80070e4 <__multiply+0x44>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b44      	ldr	r3, [pc, #272]	; (80071ec <__multiply+0x14c>)
 80070da:	4845      	ldr	r0, [pc, #276]	; (80071f0 <__multiply+0x150>)
 80070dc:	f240 115d 	movw	r1, #349	; 0x15d
 80070e0:	f000 fbf4 	bl	80078cc <__assert_func>
 80070e4:	f100 0514 	add.w	r5, r0, #20
 80070e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070ec:	462b      	mov	r3, r5
 80070ee:	2200      	movs	r2, #0
 80070f0:	4543      	cmp	r3, r8
 80070f2:	d321      	bcc.n	8007138 <__multiply+0x98>
 80070f4:	f104 0314 	add.w	r3, r4, #20
 80070f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070fc:	f109 0314 	add.w	r3, r9, #20
 8007100:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007104:	9202      	str	r2, [sp, #8]
 8007106:	1b3a      	subs	r2, r7, r4
 8007108:	3a15      	subs	r2, #21
 800710a:	f022 0203 	bic.w	r2, r2, #3
 800710e:	3204      	adds	r2, #4
 8007110:	f104 0115 	add.w	r1, r4, #21
 8007114:	428f      	cmp	r7, r1
 8007116:	bf38      	it	cc
 8007118:	2204      	movcc	r2, #4
 800711a:	9201      	str	r2, [sp, #4]
 800711c:	9a02      	ldr	r2, [sp, #8]
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	429a      	cmp	r2, r3
 8007122:	d80c      	bhi.n	800713e <__multiply+0x9e>
 8007124:	2e00      	cmp	r6, #0
 8007126:	dd03      	ble.n	8007130 <__multiply+0x90>
 8007128:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800712c:	2b00      	cmp	r3, #0
 800712e:	d05a      	beq.n	80071e6 <__multiply+0x146>
 8007130:	6106      	str	r6, [r0, #16]
 8007132:	b005      	add	sp, #20
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007138:	f843 2b04 	str.w	r2, [r3], #4
 800713c:	e7d8      	b.n	80070f0 <__multiply+0x50>
 800713e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007142:	f1ba 0f00 	cmp.w	sl, #0
 8007146:	d024      	beq.n	8007192 <__multiply+0xf2>
 8007148:	f104 0e14 	add.w	lr, r4, #20
 800714c:	46a9      	mov	r9, r5
 800714e:	f04f 0c00 	mov.w	ip, #0
 8007152:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007156:	f8d9 1000 	ldr.w	r1, [r9]
 800715a:	fa1f fb82 	uxth.w	fp, r2
 800715e:	b289      	uxth	r1, r1
 8007160:	fb0a 110b 	mla	r1, sl, fp, r1
 8007164:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007168:	f8d9 2000 	ldr.w	r2, [r9]
 800716c:	4461      	add	r1, ip
 800716e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007172:	fb0a c20b 	mla	r2, sl, fp, ip
 8007176:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800717a:	b289      	uxth	r1, r1
 800717c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007180:	4577      	cmp	r7, lr
 8007182:	f849 1b04 	str.w	r1, [r9], #4
 8007186:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800718a:	d8e2      	bhi.n	8007152 <__multiply+0xb2>
 800718c:	9a01      	ldr	r2, [sp, #4]
 800718e:	f845 c002 	str.w	ip, [r5, r2]
 8007192:	9a03      	ldr	r2, [sp, #12]
 8007194:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007198:	3304      	adds	r3, #4
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	d020      	beq.n	80071e2 <__multiply+0x142>
 80071a0:	6829      	ldr	r1, [r5, #0]
 80071a2:	f104 0c14 	add.w	ip, r4, #20
 80071a6:	46ae      	mov	lr, r5
 80071a8:	f04f 0a00 	mov.w	sl, #0
 80071ac:	f8bc b000 	ldrh.w	fp, [ip]
 80071b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80071b4:	fb09 220b 	mla	r2, r9, fp, r2
 80071b8:	4492      	add	sl, r2
 80071ba:	b289      	uxth	r1, r1
 80071bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80071c0:	f84e 1b04 	str.w	r1, [lr], #4
 80071c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071c8:	f8be 1000 	ldrh.w	r1, [lr]
 80071cc:	0c12      	lsrs	r2, r2, #16
 80071ce:	fb09 1102 	mla	r1, r9, r2, r1
 80071d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071d6:	4567      	cmp	r7, ip
 80071d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071dc:	d8e6      	bhi.n	80071ac <__multiply+0x10c>
 80071de:	9a01      	ldr	r2, [sp, #4]
 80071e0:	50a9      	str	r1, [r5, r2]
 80071e2:	3504      	adds	r5, #4
 80071e4:	e79a      	b.n	800711c <__multiply+0x7c>
 80071e6:	3e01      	subs	r6, #1
 80071e8:	e79c      	b.n	8007124 <__multiply+0x84>
 80071ea:	bf00      	nop
 80071ec:	08008a07 	.word	0x08008a07
 80071f0:	08008a18 	.word	0x08008a18

080071f4 <__pow5mult>:
 80071f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f8:	4615      	mov	r5, r2
 80071fa:	f012 0203 	ands.w	r2, r2, #3
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	d007      	beq.n	8007214 <__pow5mult+0x20>
 8007204:	4c25      	ldr	r4, [pc, #148]	; (800729c <__pow5mult+0xa8>)
 8007206:	3a01      	subs	r2, #1
 8007208:	2300      	movs	r3, #0
 800720a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800720e:	f7ff fe9b 	bl	8006f48 <__multadd>
 8007212:	4607      	mov	r7, r0
 8007214:	10ad      	asrs	r5, r5, #2
 8007216:	d03d      	beq.n	8007294 <__pow5mult+0xa0>
 8007218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800721a:	b97c      	cbnz	r4, 800723c <__pow5mult+0x48>
 800721c:	2010      	movs	r0, #16
 800721e:	f7fe fa0d 	bl	800563c <malloc>
 8007222:	4602      	mov	r2, r0
 8007224:	6270      	str	r0, [r6, #36]	; 0x24
 8007226:	b928      	cbnz	r0, 8007234 <__pow5mult+0x40>
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <__pow5mult+0xac>)
 800722a:	481e      	ldr	r0, [pc, #120]	; (80072a4 <__pow5mult+0xb0>)
 800722c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007230:	f000 fb4c 	bl	80078cc <__assert_func>
 8007234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007238:	6004      	str	r4, [r0, #0]
 800723a:	60c4      	str	r4, [r0, #12]
 800723c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007244:	b94c      	cbnz	r4, 800725a <__pow5mult+0x66>
 8007246:	f240 2171 	movw	r1, #625	; 0x271
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ff12 	bl	8007074 <__i2b>
 8007250:	2300      	movs	r3, #0
 8007252:	f8c8 0008 	str.w	r0, [r8, #8]
 8007256:	4604      	mov	r4, r0
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	f04f 0900 	mov.w	r9, #0
 800725e:	07eb      	lsls	r3, r5, #31
 8007260:	d50a      	bpl.n	8007278 <__pow5mult+0x84>
 8007262:	4639      	mov	r1, r7
 8007264:	4622      	mov	r2, r4
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff ff1a 	bl	80070a0 <__multiply>
 800726c:	4639      	mov	r1, r7
 800726e:	4680      	mov	r8, r0
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff fe47 	bl	8006f04 <_Bfree>
 8007276:	4647      	mov	r7, r8
 8007278:	106d      	asrs	r5, r5, #1
 800727a:	d00b      	beq.n	8007294 <__pow5mult+0xa0>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	b938      	cbnz	r0, 8007290 <__pow5mult+0x9c>
 8007280:	4622      	mov	r2, r4
 8007282:	4621      	mov	r1, r4
 8007284:	4630      	mov	r0, r6
 8007286:	f7ff ff0b 	bl	80070a0 <__multiply>
 800728a:	6020      	str	r0, [r4, #0]
 800728c:	f8c0 9000 	str.w	r9, [r0]
 8007290:	4604      	mov	r4, r0
 8007292:	e7e4      	b.n	800725e <__pow5mult+0x6a>
 8007294:	4638      	mov	r0, r7
 8007296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800729a:	bf00      	nop
 800729c:	08008b68 	.word	0x08008b68
 80072a0:	08008995 	.word	0x08008995
 80072a4:	08008a18 	.word	0x08008a18

080072a8 <__lshift>:
 80072a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	6849      	ldr	r1, [r1, #4]
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	4607      	mov	r7, r0
 80072ba:	4691      	mov	r9, r2
 80072bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072c0:	f108 0601 	add.w	r6, r8, #1
 80072c4:	42b3      	cmp	r3, r6
 80072c6:	db0b      	blt.n	80072e0 <__lshift+0x38>
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff fddb 	bl	8006e84 <_Balloc>
 80072ce:	4605      	mov	r5, r0
 80072d0:	b948      	cbnz	r0, 80072e6 <__lshift+0x3e>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <__lshift+0xd8>)
 80072d6:	482b      	ldr	r0, [pc, #172]	; (8007384 <__lshift+0xdc>)
 80072d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072dc:	f000 faf6 	bl	80078cc <__assert_func>
 80072e0:	3101      	adds	r1, #1
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	e7ee      	b.n	80072c4 <__lshift+0x1c>
 80072e6:	2300      	movs	r3, #0
 80072e8:	f100 0114 	add.w	r1, r0, #20
 80072ec:	f100 0210 	add.w	r2, r0, #16
 80072f0:	4618      	mov	r0, r3
 80072f2:	4553      	cmp	r3, sl
 80072f4:	db37      	blt.n	8007366 <__lshift+0xbe>
 80072f6:	6920      	ldr	r0, [r4, #16]
 80072f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072fc:	f104 0314 	add.w	r3, r4, #20
 8007300:	f019 091f 	ands.w	r9, r9, #31
 8007304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007308:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800730c:	d02f      	beq.n	800736e <__lshift+0xc6>
 800730e:	f1c9 0e20 	rsb	lr, r9, #32
 8007312:	468a      	mov	sl, r1
 8007314:	f04f 0c00 	mov.w	ip, #0
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	fa02 f209 	lsl.w	r2, r2, r9
 800731e:	ea42 020c 	orr.w	r2, r2, ip
 8007322:	f84a 2b04 	str.w	r2, [sl], #4
 8007326:	f853 2b04 	ldr.w	r2, [r3], #4
 800732a:	4298      	cmp	r0, r3
 800732c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007330:	d8f2      	bhi.n	8007318 <__lshift+0x70>
 8007332:	1b03      	subs	r3, r0, r4
 8007334:	3b15      	subs	r3, #21
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	3304      	adds	r3, #4
 800733c:	f104 0215 	add.w	r2, r4, #21
 8007340:	4290      	cmp	r0, r2
 8007342:	bf38      	it	cc
 8007344:	2304      	movcc	r3, #4
 8007346:	f841 c003 	str.w	ip, [r1, r3]
 800734a:	f1bc 0f00 	cmp.w	ip, #0
 800734e:	d001      	beq.n	8007354 <__lshift+0xac>
 8007350:	f108 0602 	add.w	r6, r8, #2
 8007354:	3e01      	subs	r6, #1
 8007356:	4638      	mov	r0, r7
 8007358:	612e      	str	r6, [r5, #16]
 800735a:	4621      	mov	r1, r4
 800735c:	f7ff fdd2 	bl	8006f04 <_Bfree>
 8007360:	4628      	mov	r0, r5
 8007362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007366:	f842 0f04 	str.w	r0, [r2, #4]!
 800736a:	3301      	adds	r3, #1
 800736c:	e7c1      	b.n	80072f2 <__lshift+0x4a>
 800736e:	3904      	subs	r1, #4
 8007370:	f853 2b04 	ldr.w	r2, [r3], #4
 8007374:	f841 2f04 	str.w	r2, [r1, #4]!
 8007378:	4298      	cmp	r0, r3
 800737a:	d8f9      	bhi.n	8007370 <__lshift+0xc8>
 800737c:	e7ea      	b.n	8007354 <__lshift+0xac>
 800737e:	bf00      	nop
 8007380:	08008a07 	.word	0x08008a07
 8007384:	08008a18 	.word	0x08008a18

08007388 <__mcmp>:
 8007388:	b530      	push	{r4, r5, lr}
 800738a:	6902      	ldr	r2, [r0, #16]
 800738c:	690c      	ldr	r4, [r1, #16]
 800738e:	1b12      	subs	r2, r2, r4
 8007390:	d10e      	bne.n	80073b0 <__mcmp+0x28>
 8007392:	f100 0314 	add.w	r3, r0, #20
 8007396:	3114      	adds	r1, #20
 8007398:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800739c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073a8:	42a5      	cmp	r5, r4
 80073aa:	d003      	beq.n	80073b4 <__mcmp+0x2c>
 80073ac:	d305      	bcc.n	80073ba <__mcmp+0x32>
 80073ae:	2201      	movs	r2, #1
 80073b0:	4610      	mov	r0, r2
 80073b2:	bd30      	pop	{r4, r5, pc}
 80073b4:	4283      	cmp	r3, r0
 80073b6:	d3f3      	bcc.n	80073a0 <__mcmp+0x18>
 80073b8:	e7fa      	b.n	80073b0 <__mcmp+0x28>
 80073ba:	f04f 32ff 	mov.w	r2, #4294967295
 80073be:	e7f7      	b.n	80073b0 <__mcmp+0x28>

080073c0 <__mdiff>:
 80073c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	460c      	mov	r4, r1
 80073c6:	4606      	mov	r6, r0
 80073c8:	4611      	mov	r1, r2
 80073ca:	4620      	mov	r0, r4
 80073cc:	4690      	mov	r8, r2
 80073ce:	f7ff ffdb 	bl	8007388 <__mcmp>
 80073d2:	1e05      	subs	r5, r0, #0
 80073d4:	d110      	bne.n	80073f8 <__mdiff+0x38>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4630      	mov	r0, r6
 80073da:	f7ff fd53 	bl	8006e84 <_Balloc>
 80073de:	b930      	cbnz	r0, 80073ee <__mdiff+0x2e>
 80073e0:	4b3a      	ldr	r3, [pc, #232]	; (80074cc <__mdiff+0x10c>)
 80073e2:	4602      	mov	r2, r0
 80073e4:	f240 2132 	movw	r1, #562	; 0x232
 80073e8:	4839      	ldr	r0, [pc, #228]	; (80074d0 <__mdiff+0x110>)
 80073ea:	f000 fa6f 	bl	80078cc <__assert_func>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	bfa4      	itt	ge
 80073fa:	4643      	movge	r3, r8
 80073fc:	46a0      	movge	r8, r4
 80073fe:	4630      	mov	r0, r6
 8007400:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007404:	bfa6      	itte	ge
 8007406:	461c      	movge	r4, r3
 8007408:	2500      	movge	r5, #0
 800740a:	2501      	movlt	r5, #1
 800740c:	f7ff fd3a 	bl	8006e84 <_Balloc>
 8007410:	b920      	cbnz	r0, 800741c <__mdiff+0x5c>
 8007412:	4b2e      	ldr	r3, [pc, #184]	; (80074cc <__mdiff+0x10c>)
 8007414:	4602      	mov	r2, r0
 8007416:	f44f 7110 	mov.w	r1, #576	; 0x240
 800741a:	e7e5      	b.n	80073e8 <__mdiff+0x28>
 800741c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007420:	6926      	ldr	r6, [r4, #16]
 8007422:	60c5      	str	r5, [r0, #12]
 8007424:	f104 0914 	add.w	r9, r4, #20
 8007428:	f108 0514 	add.w	r5, r8, #20
 800742c:	f100 0e14 	add.w	lr, r0, #20
 8007430:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007434:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007438:	f108 0210 	add.w	r2, r8, #16
 800743c:	46f2      	mov	sl, lr
 800743e:	2100      	movs	r1, #0
 8007440:	f859 3b04 	ldr.w	r3, [r9], #4
 8007444:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007448:	fa1f f883 	uxth.w	r8, r3
 800744c:	fa11 f18b 	uxtah	r1, r1, fp
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	eba1 0808 	sub.w	r8, r1, r8
 8007456:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800745a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800745e:	fa1f f888 	uxth.w	r8, r8
 8007462:	1419      	asrs	r1, r3, #16
 8007464:	454e      	cmp	r6, r9
 8007466:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800746a:	f84a 3b04 	str.w	r3, [sl], #4
 800746e:	d8e7      	bhi.n	8007440 <__mdiff+0x80>
 8007470:	1b33      	subs	r3, r6, r4
 8007472:	3b15      	subs	r3, #21
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	3304      	adds	r3, #4
 800747a:	3415      	adds	r4, #21
 800747c:	42a6      	cmp	r6, r4
 800747e:	bf38      	it	cc
 8007480:	2304      	movcc	r3, #4
 8007482:	441d      	add	r5, r3
 8007484:	4473      	add	r3, lr
 8007486:	469e      	mov	lr, r3
 8007488:	462e      	mov	r6, r5
 800748a:	4566      	cmp	r6, ip
 800748c:	d30e      	bcc.n	80074ac <__mdiff+0xec>
 800748e:	f10c 0203 	add.w	r2, ip, #3
 8007492:	1b52      	subs	r2, r2, r5
 8007494:	f022 0203 	bic.w	r2, r2, #3
 8007498:	3d03      	subs	r5, #3
 800749a:	45ac      	cmp	ip, r5
 800749c:	bf38      	it	cc
 800749e:	2200      	movcc	r2, #0
 80074a0:	441a      	add	r2, r3
 80074a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074a6:	b17b      	cbz	r3, 80074c8 <__mdiff+0x108>
 80074a8:	6107      	str	r7, [r0, #16]
 80074aa:	e7a3      	b.n	80073f4 <__mdiff+0x34>
 80074ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80074b0:	fa11 f288 	uxtah	r2, r1, r8
 80074b4:	1414      	asrs	r4, r2, #16
 80074b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80074ba:	b292      	uxth	r2, r2
 80074bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80074c0:	f84e 2b04 	str.w	r2, [lr], #4
 80074c4:	1421      	asrs	r1, r4, #16
 80074c6:	e7e0      	b.n	800748a <__mdiff+0xca>
 80074c8:	3f01      	subs	r7, #1
 80074ca:	e7ea      	b.n	80074a2 <__mdiff+0xe2>
 80074cc:	08008a07 	.word	0x08008a07
 80074d0:	08008a18 	.word	0x08008a18

080074d4 <__d2b>:
 80074d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074d8:	4689      	mov	r9, r1
 80074da:	2101      	movs	r1, #1
 80074dc:	ec57 6b10 	vmov	r6, r7, d0
 80074e0:	4690      	mov	r8, r2
 80074e2:	f7ff fccf 	bl	8006e84 <_Balloc>
 80074e6:	4604      	mov	r4, r0
 80074e8:	b930      	cbnz	r0, 80074f8 <__d2b+0x24>
 80074ea:	4602      	mov	r2, r0
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <__d2b+0xb0>)
 80074ee:	4826      	ldr	r0, [pc, #152]	; (8007588 <__d2b+0xb4>)
 80074f0:	f240 310a 	movw	r1, #778	; 0x30a
 80074f4:	f000 f9ea 	bl	80078cc <__assert_func>
 80074f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007500:	bb35      	cbnz	r5, 8007550 <__d2b+0x7c>
 8007502:	2e00      	cmp	r6, #0
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	d028      	beq.n	800755a <__d2b+0x86>
 8007508:	4668      	mov	r0, sp
 800750a:	9600      	str	r6, [sp, #0]
 800750c:	f7ff fd82 	bl	8007014 <__lo0bits>
 8007510:	9900      	ldr	r1, [sp, #0]
 8007512:	b300      	cbz	r0, 8007556 <__d2b+0x82>
 8007514:	9a01      	ldr	r2, [sp, #4]
 8007516:	f1c0 0320 	rsb	r3, r0, #32
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	430b      	orrs	r3, r1
 8007520:	40c2      	lsrs	r2, r0
 8007522:	6163      	str	r3, [r4, #20]
 8007524:	9201      	str	r2, [sp, #4]
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	61a3      	str	r3, [r4, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2202      	movne	r2, #2
 8007530:	2201      	moveq	r2, #1
 8007532:	6122      	str	r2, [r4, #16]
 8007534:	b1d5      	cbz	r5, 800756c <__d2b+0x98>
 8007536:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800753a:	4405      	add	r5, r0
 800753c:	f8c9 5000 	str.w	r5, [r9]
 8007540:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007544:	f8c8 0000 	str.w	r0, [r8]
 8007548:	4620      	mov	r0, r4
 800754a:	b003      	add	sp, #12
 800754c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007554:	e7d5      	b.n	8007502 <__d2b+0x2e>
 8007556:	6161      	str	r1, [r4, #20]
 8007558:	e7e5      	b.n	8007526 <__d2b+0x52>
 800755a:	a801      	add	r0, sp, #4
 800755c:	f7ff fd5a 	bl	8007014 <__lo0bits>
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	6163      	str	r3, [r4, #20]
 8007564:	2201      	movs	r2, #1
 8007566:	6122      	str	r2, [r4, #16]
 8007568:	3020      	adds	r0, #32
 800756a:	e7e3      	b.n	8007534 <__d2b+0x60>
 800756c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007574:	f8c9 0000 	str.w	r0, [r9]
 8007578:	6918      	ldr	r0, [r3, #16]
 800757a:	f7ff fd2b 	bl	8006fd4 <__hi0bits>
 800757e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007582:	e7df      	b.n	8007544 <__d2b+0x70>
 8007584:	08008a07 	.word	0x08008a07
 8007588:	08008a18 	.word	0x08008a18

0800758c <_calloc_r>:
 800758c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758e:	fba1 2402 	umull	r2, r4, r1, r2
 8007592:	b94c      	cbnz	r4, 80075a8 <_calloc_r+0x1c>
 8007594:	4611      	mov	r1, r2
 8007596:	9201      	str	r2, [sp, #4]
 8007598:	f7fe f8da 	bl	8005750 <_malloc_r>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	4605      	mov	r5, r0
 80075a0:	b930      	cbnz	r0, 80075b0 <_calloc_r+0x24>
 80075a2:	4628      	mov	r0, r5
 80075a4:	b003      	add	sp, #12
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	220c      	movs	r2, #12
 80075aa:	6002      	str	r2, [r0, #0]
 80075ac:	2500      	movs	r5, #0
 80075ae:	e7f8      	b.n	80075a2 <_calloc_r+0x16>
 80075b0:	4621      	mov	r1, r4
 80075b2:	f7fe f859 	bl	8005668 <memset>
 80075b6:	e7f4      	b.n	80075a2 <_calloc_r+0x16>

080075b8 <_realloc_r>:
 80075b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	4680      	mov	r8, r0
 80075be:	4614      	mov	r4, r2
 80075c0:	460e      	mov	r6, r1
 80075c2:	b921      	cbnz	r1, 80075ce <_realloc_r+0x16>
 80075c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c8:	4611      	mov	r1, r2
 80075ca:	f7fe b8c1 	b.w	8005750 <_malloc_r>
 80075ce:	b92a      	cbnz	r2, 80075dc <_realloc_r+0x24>
 80075d0:	f7fe f852 	bl	8005678 <_free_r>
 80075d4:	4625      	mov	r5, r4
 80075d6:	4628      	mov	r0, r5
 80075d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075dc:	f000 f9d5 	bl	800798a <_malloc_usable_size_r>
 80075e0:	4284      	cmp	r4, r0
 80075e2:	4607      	mov	r7, r0
 80075e4:	d802      	bhi.n	80075ec <_realloc_r+0x34>
 80075e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075ea:	d812      	bhi.n	8007612 <_realloc_r+0x5a>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4640      	mov	r0, r8
 80075f0:	f7fe f8ae 	bl	8005750 <_malloc_r>
 80075f4:	4605      	mov	r5, r0
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d0ed      	beq.n	80075d6 <_realloc_r+0x1e>
 80075fa:	42bc      	cmp	r4, r7
 80075fc:	4622      	mov	r2, r4
 80075fe:	4631      	mov	r1, r6
 8007600:	bf28      	it	cs
 8007602:	463a      	movcs	r2, r7
 8007604:	f7fe f822 	bl	800564c <memcpy>
 8007608:	4631      	mov	r1, r6
 800760a:	4640      	mov	r0, r8
 800760c:	f7fe f834 	bl	8005678 <_free_r>
 8007610:	e7e1      	b.n	80075d6 <_realloc_r+0x1e>
 8007612:	4635      	mov	r5, r6
 8007614:	e7df      	b.n	80075d6 <_realloc_r+0x1e>

08007616 <__ssputs_r>:
 8007616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761a:	688e      	ldr	r6, [r1, #8]
 800761c:	429e      	cmp	r6, r3
 800761e:	4682      	mov	sl, r0
 8007620:	460c      	mov	r4, r1
 8007622:	4690      	mov	r8, r2
 8007624:	461f      	mov	r7, r3
 8007626:	d838      	bhi.n	800769a <__ssputs_r+0x84>
 8007628:	898a      	ldrh	r2, [r1, #12]
 800762a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800762e:	d032      	beq.n	8007696 <__ssputs_r+0x80>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	6909      	ldr	r1, [r1, #16]
 8007634:	eba5 0901 	sub.w	r9, r5, r1
 8007638:	6965      	ldr	r5, [r4, #20]
 800763a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800763e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007642:	3301      	adds	r3, #1
 8007644:	444b      	add	r3, r9
 8007646:	106d      	asrs	r5, r5, #1
 8007648:	429d      	cmp	r5, r3
 800764a:	bf38      	it	cc
 800764c:	461d      	movcc	r5, r3
 800764e:	0553      	lsls	r3, r2, #21
 8007650:	d531      	bpl.n	80076b6 <__ssputs_r+0xa0>
 8007652:	4629      	mov	r1, r5
 8007654:	f7fe f87c 	bl	8005750 <_malloc_r>
 8007658:	4606      	mov	r6, r0
 800765a:	b950      	cbnz	r0, 8007672 <__ssputs_r+0x5c>
 800765c:	230c      	movs	r3, #12
 800765e:	f8ca 3000 	str.w	r3, [sl]
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	6921      	ldr	r1, [r4, #16]
 8007674:	464a      	mov	r2, r9
 8007676:	f7fd ffe9 	bl	800564c <memcpy>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	6126      	str	r6, [r4, #16]
 8007688:	6165      	str	r5, [r4, #20]
 800768a:	444e      	add	r6, r9
 800768c:	eba5 0509 	sub.w	r5, r5, r9
 8007690:	6026      	str	r6, [r4, #0]
 8007692:	60a5      	str	r5, [r4, #8]
 8007694:	463e      	mov	r6, r7
 8007696:	42be      	cmp	r6, r7
 8007698:	d900      	bls.n	800769c <__ssputs_r+0x86>
 800769a:	463e      	mov	r6, r7
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	4632      	mov	r2, r6
 80076a0:	4641      	mov	r1, r8
 80076a2:	f000 f958 	bl	8007956 <memmove>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	1b9b      	subs	r3, r3, r6
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	4433      	add	r3, r6
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	2000      	movs	r0, #0
 80076b4:	e7db      	b.n	800766e <__ssputs_r+0x58>
 80076b6:	462a      	mov	r2, r5
 80076b8:	f7ff ff7e 	bl	80075b8 <_realloc_r>
 80076bc:	4606      	mov	r6, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	d1e1      	bne.n	8007686 <__ssputs_r+0x70>
 80076c2:	6921      	ldr	r1, [r4, #16]
 80076c4:	4650      	mov	r0, sl
 80076c6:	f7fd ffd7 	bl	8005678 <_free_r>
 80076ca:	e7c7      	b.n	800765c <__ssputs_r+0x46>

080076cc <_svfiprintf_r>:
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4698      	mov	r8, r3
 80076d2:	898b      	ldrh	r3, [r1, #12]
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	b09d      	sub	sp, #116	; 0x74
 80076d8:	4607      	mov	r7, r0
 80076da:	460d      	mov	r5, r1
 80076dc:	4614      	mov	r4, r2
 80076de:	d50e      	bpl.n	80076fe <_svfiprintf_r+0x32>
 80076e0:	690b      	ldr	r3, [r1, #16]
 80076e2:	b963      	cbnz	r3, 80076fe <_svfiprintf_r+0x32>
 80076e4:	2140      	movs	r1, #64	; 0x40
 80076e6:	f7fe f833 	bl	8005750 <_malloc_r>
 80076ea:	6028      	str	r0, [r5, #0]
 80076ec:	6128      	str	r0, [r5, #16]
 80076ee:	b920      	cbnz	r0, 80076fa <_svfiprintf_r+0x2e>
 80076f0:	230c      	movs	r3, #12
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e0d1      	b.n	800789e <_svfiprintf_r+0x1d2>
 80076fa:	2340      	movs	r3, #64	; 0x40
 80076fc:	616b      	str	r3, [r5, #20]
 80076fe:	2300      	movs	r3, #0
 8007700:	9309      	str	r3, [sp, #36]	; 0x24
 8007702:	2320      	movs	r3, #32
 8007704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007708:	f8cd 800c 	str.w	r8, [sp, #12]
 800770c:	2330      	movs	r3, #48	; 0x30
 800770e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078b8 <_svfiprintf_r+0x1ec>
 8007712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007716:	f04f 0901 	mov.w	r9, #1
 800771a:	4623      	mov	r3, r4
 800771c:	469a      	mov	sl, r3
 800771e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007722:	b10a      	cbz	r2, 8007728 <_svfiprintf_r+0x5c>
 8007724:	2a25      	cmp	r2, #37	; 0x25
 8007726:	d1f9      	bne.n	800771c <_svfiprintf_r+0x50>
 8007728:	ebba 0b04 	subs.w	fp, sl, r4
 800772c:	d00b      	beq.n	8007746 <_svfiprintf_r+0x7a>
 800772e:	465b      	mov	r3, fp
 8007730:	4622      	mov	r2, r4
 8007732:	4629      	mov	r1, r5
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ff6e 	bl	8007616 <__ssputs_r>
 800773a:	3001      	adds	r0, #1
 800773c:	f000 80aa 	beq.w	8007894 <_svfiprintf_r+0x1c8>
 8007740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007742:	445a      	add	r2, fp
 8007744:	9209      	str	r2, [sp, #36]	; 0x24
 8007746:	f89a 3000 	ldrb.w	r3, [sl]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80a2 	beq.w	8007894 <_svfiprintf_r+0x1c8>
 8007750:	2300      	movs	r3, #0
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800775a:	f10a 0a01 	add.w	sl, sl, #1
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007766:	931a      	str	r3, [sp, #104]	; 0x68
 8007768:	4654      	mov	r4, sl
 800776a:	2205      	movs	r2, #5
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	4851      	ldr	r0, [pc, #324]	; (80078b8 <_svfiprintf_r+0x1ec>)
 8007772:	f7f8 fd45 	bl	8000200 <memchr>
 8007776:	9a04      	ldr	r2, [sp, #16]
 8007778:	b9d8      	cbnz	r0, 80077b2 <_svfiprintf_r+0xe6>
 800777a:	06d0      	lsls	r0, r2, #27
 800777c:	bf44      	itt	mi
 800777e:	2320      	movmi	r3, #32
 8007780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007784:	0711      	lsls	r1, r2, #28
 8007786:	bf44      	itt	mi
 8007788:	232b      	movmi	r3, #43	; 0x2b
 800778a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778e:	f89a 3000 	ldrb.w	r3, [sl]
 8007792:	2b2a      	cmp	r3, #42	; 0x2a
 8007794:	d015      	beq.n	80077c2 <_svfiprintf_r+0xf6>
 8007796:	9a07      	ldr	r2, [sp, #28]
 8007798:	4654      	mov	r4, sl
 800779a:	2000      	movs	r0, #0
 800779c:	f04f 0c0a 	mov.w	ip, #10
 80077a0:	4621      	mov	r1, r4
 80077a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a6:	3b30      	subs	r3, #48	; 0x30
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d94e      	bls.n	800784a <_svfiprintf_r+0x17e>
 80077ac:	b1b0      	cbz	r0, 80077dc <_svfiprintf_r+0x110>
 80077ae:	9207      	str	r2, [sp, #28]
 80077b0:	e014      	b.n	80077dc <_svfiprintf_r+0x110>
 80077b2:	eba0 0308 	sub.w	r3, r0, r8
 80077b6:	fa09 f303 	lsl.w	r3, r9, r3
 80077ba:	4313      	orrs	r3, r2
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	46a2      	mov	sl, r4
 80077c0:	e7d2      	b.n	8007768 <_svfiprintf_r+0x9c>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	1d19      	adds	r1, r3, #4
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	9103      	str	r1, [sp, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bfbb      	ittet	lt
 80077ce:	425b      	neglt	r3, r3
 80077d0:	f042 0202 	orrlt.w	r2, r2, #2
 80077d4:	9307      	strge	r3, [sp, #28]
 80077d6:	9307      	strlt	r3, [sp, #28]
 80077d8:	bfb8      	it	lt
 80077da:	9204      	strlt	r2, [sp, #16]
 80077dc:	7823      	ldrb	r3, [r4, #0]
 80077de:	2b2e      	cmp	r3, #46	; 0x2e
 80077e0:	d10c      	bne.n	80077fc <_svfiprintf_r+0x130>
 80077e2:	7863      	ldrb	r3, [r4, #1]
 80077e4:	2b2a      	cmp	r3, #42	; 0x2a
 80077e6:	d135      	bne.n	8007854 <_svfiprintf_r+0x188>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	1d1a      	adds	r2, r3, #4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	9203      	str	r2, [sp, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bfb8      	it	lt
 80077f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80077f8:	3402      	adds	r4, #2
 80077fa:	9305      	str	r3, [sp, #20]
 80077fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078c8 <_svfiprintf_r+0x1fc>
 8007800:	7821      	ldrb	r1, [r4, #0]
 8007802:	2203      	movs	r2, #3
 8007804:	4650      	mov	r0, sl
 8007806:	f7f8 fcfb 	bl	8000200 <memchr>
 800780a:	b140      	cbz	r0, 800781e <_svfiprintf_r+0x152>
 800780c:	2340      	movs	r3, #64	; 0x40
 800780e:	eba0 000a 	sub.w	r0, r0, sl
 8007812:	fa03 f000 	lsl.w	r0, r3, r0
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	4303      	orrs	r3, r0
 800781a:	3401      	adds	r4, #1
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007822:	4826      	ldr	r0, [pc, #152]	; (80078bc <_svfiprintf_r+0x1f0>)
 8007824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007828:	2206      	movs	r2, #6
 800782a:	f7f8 fce9 	bl	8000200 <memchr>
 800782e:	2800      	cmp	r0, #0
 8007830:	d038      	beq.n	80078a4 <_svfiprintf_r+0x1d8>
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <_svfiprintf_r+0x1f4>)
 8007834:	bb1b      	cbnz	r3, 800787e <_svfiprintf_r+0x1b2>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	3307      	adds	r3, #7
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	3308      	adds	r3, #8
 8007840:	9303      	str	r3, [sp, #12]
 8007842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007844:	4433      	add	r3, r6
 8007846:	9309      	str	r3, [sp, #36]	; 0x24
 8007848:	e767      	b.n	800771a <_svfiprintf_r+0x4e>
 800784a:	fb0c 3202 	mla	r2, ip, r2, r3
 800784e:	460c      	mov	r4, r1
 8007850:	2001      	movs	r0, #1
 8007852:	e7a5      	b.n	80077a0 <_svfiprintf_r+0xd4>
 8007854:	2300      	movs	r3, #0
 8007856:	3401      	adds	r4, #1
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	4619      	mov	r1, r3
 800785c:	f04f 0c0a 	mov.w	ip, #10
 8007860:	4620      	mov	r0, r4
 8007862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007866:	3a30      	subs	r2, #48	; 0x30
 8007868:	2a09      	cmp	r2, #9
 800786a:	d903      	bls.n	8007874 <_svfiprintf_r+0x1a8>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0c5      	beq.n	80077fc <_svfiprintf_r+0x130>
 8007870:	9105      	str	r1, [sp, #20]
 8007872:	e7c3      	b.n	80077fc <_svfiprintf_r+0x130>
 8007874:	fb0c 2101 	mla	r1, ip, r1, r2
 8007878:	4604      	mov	r4, r0
 800787a:	2301      	movs	r3, #1
 800787c:	e7f0      	b.n	8007860 <_svfiprintf_r+0x194>
 800787e:	ab03      	add	r3, sp, #12
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	462a      	mov	r2, r5
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <_svfiprintf_r+0x1f8>)
 8007886:	a904      	add	r1, sp, #16
 8007888:	4638      	mov	r0, r7
 800788a:	f7fe f875 	bl	8005978 <_printf_float>
 800788e:	1c42      	adds	r2, r0, #1
 8007890:	4606      	mov	r6, r0
 8007892:	d1d6      	bne.n	8007842 <_svfiprintf_r+0x176>
 8007894:	89ab      	ldrh	r3, [r5, #12]
 8007896:	065b      	lsls	r3, r3, #25
 8007898:	f53f af2c 	bmi.w	80076f4 <_svfiprintf_r+0x28>
 800789c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800789e:	b01d      	add	sp, #116	; 0x74
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	ab03      	add	r3, sp, #12
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	462a      	mov	r2, r5
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <_svfiprintf_r+0x1f8>)
 80078ac:	a904      	add	r1, sp, #16
 80078ae:	4638      	mov	r0, r7
 80078b0:	f7fe fb06 	bl	8005ec0 <_printf_i>
 80078b4:	e7eb      	b.n	800788e <_svfiprintf_r+0x1c2>
 80078b6:	bf00      	nop
 80078b8:	08008b74 	.word	0x08008b74
 80078bc:	08008b7e 	.word	0x08008b7e
 80078c0:	08005979 	.word	0x08005979
 80078c4:	08007617 	.word	0x08007617
 80078c8:	08008b7a 	.word	0x08008b7a

080078cc <__assert_func>:
 80078cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ce:	4614      	mov	r4, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <__assert_func+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4605      	mov	r5, r0
 80078d8:	68d8      	ldr	r0, [r3, #12]
 80078da:	b14c      	cbz	r4, 80078f0 <__assert_func+0x24>
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <__assert_func+0x30>)
 80078de:	9100      	str	r1, [sp, #0]
 80078e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <__assert_func+0x34>)
 80078e6:	462b      	mov	r3, r5
 80078e8:	f000 f80e 	bl	8007908 <fiprintf>
 80078ec:	f000 fa7c 	bl	8007de8 <abort>
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <__assert_func+0x38>)
 80078f2:	461c      	mov	r4, r3
 80078f4:	e7f3      	b.n	80078de <__assert_func+0x12>
 80078f6:	bf00      	nop
 80078f8:	200006c0 	.word	0x200006c0
 80078fc:	08008b85 	.word	0x08008b85
 8007900:	08008b92 	.word	0x08008b92
 8007904:	08008bc0 	.word	0x08008bc0

08007908 <fiprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b503      	push	{r0, r1, lr}
 800790c:	4601      	mov	r1, r0
 800790e:	ab03      	add	r3, sp, #12
 8007910:	4805      	ldr	r0, [pc, #20]	; (8007928 <fiprintf+0x20>)
 8007912:	f853 2b04 	ldr.w	r2, [r3], #4
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f000 f867 	bl	80079ec <_vfiprintf_r>
 800791e:	b002      	add	sp, #8
 8007920:	f85d eb04 	ldr.w	lr, [sp], #4
 8007924:	b003      	add	sp, #12
 8007926:	4770      	bx	lr
 8007928:	200006c0 	.word	0x200006c0

0800792c <__retarget_lock_init_recursive>:
 800792c:	4770      	bx	lr

0800792e <__retarget_lock_acquire_recursive>:
 800792e:	4770      	bx	lr

08007930 <__retarget_lock_release_recursive>:
 8007930:	4770      	bx	lr

08007932 <__ascii_mbtowc>:
 8007932:	b082      	sub	sp, #8
 8007934:	b901      	cbnz	r1, 8007938 <__ascii_mbtowc+0x6>
 8007936:	a901      	add	r1, sp, #4
 8007938:	b142      	cbz	r2, 800794c <__ascii_mbtowc+0x1a>
 800793a:	b14b      	cbz	r3, 8007950 <__ascii_mbtowc+0x1e>
 800793c:	7813      	ldrb	r3, [r2, #0]
 800793e:	600b      	str	r3, [r1, #0]
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	1e10      	subs	r0, r2, #0
 8007944:	bf18      	it	ne
 8007946:	2001      	movne	r0, #1
 8007948:	b002      	add	sp, #8
 800794a:	4770      	bx	lr
 800794c:	4610      	mov	r0, r2
 800794e:	e7fb      	b.n	8007948 <__ascii_mbtowc+0x16>
 8007950:	f06f 0001 	mvn.w	r0, #1
 8007954:	e7f8      	b.n	8007948 <__ascii_mbtowc+0x16>

08007956 <memmove>:
 8007956:	4288      	cmp	r0, r1
 8007958:	b510      	push	{r4, lr}
 800795a:	eb01 0402 	add.w	r4, r1, r2
 800795e:	d902      	bls.n	8007966 <memmove+0x10>
 8007960:	4284      	cmp	r4, r0
 8007962:	4623      	mov	r3, r4
 8007964:	d807      	bhi.n	8007976 <memmove+0x20>
 8007966:	1e43      	subs	r3, r0, #1
 8007968:	42a1      	cmp	r1, r4
 800796a:	d008      	beq.n	800797e <memmove+0x28>
 800796c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007970:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007974:	e7f8      	b.n	8007968 <memmove+0x12>
 8007976:	4402      	add	r2, r0
 8007978:	4601      	mov	r1, r0
 800797a:	428a      	cmp	r2, r1
 800797c:	d100      	bne.n	8007980 <memmove+0x2a>
 800797e:	bd10      	pop	{r4, pc}
 8007980:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007984:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007988:	e7f7      	b.n	800797a <memmove+0x24>

0800798a <_malloc_usable_size_r>:
 800798a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800798e:	1f18      	subs	r0, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfbc      	itt	lt
 8007994:	580b      	ldrlt	r3, [r1, r0]
 8007996:	18c0      	addlt	r0, r0, r3
 8007998:	4770      	bx	lr

0800799a <__sfputc_r>:
 800799a:	6893      	ldr	r3, [r2, #8]
 800799c:	3b01      	subs	r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	b410      	push	{r4}
 80079a2:	6093      	str	r3, [r2, #8]
 80079a4:	da08      	bge.n	80079b8 <__sfputc_r+0x1e>
 80079a6:	6994      	ldr	r4, [r2, #24]
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	db01      	blt.n	80079b0 <__sfputc_r+0x16>
 80079ac:	290a      	cmp	r1, #10
 80079ae:	d103      	bne.n	80079b8 <__sfputc_r+0x1e>
 80079b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b4:	f000 b94a 	b.w	8007c4c <__swbuf_r>
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	1c58      	adds	r0, r3, #1
 80079bc:	6010      	str	r0, [r2, #0]
 80079be:	7019      	strb	r1, [r3, #0]
 80079c0:	4608      	mov	r0, r1
 80079c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <__sfputs_r>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	4606      	mov	r6, r0
 80079cc:	460f      	mov	r7, r1
 80079ce:	4614      	mov	r4, r2
 80079d0:	18d5      	adds	r5, r2, r3
 80079d2:	42ac      	cmp	r4, r5
 80079d4:	d101      	bne.n	80079da <__sfputs_r+0x12>
 80079d6:	2000      	movs	r0, #0
 80079d8:	e007      	b.n	80079ea <__sfputs_r+0x22>
 80079da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079de:	463a      	mov	r2, r7
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff ffda 	bl	800799a <__sfputc_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d1f3      	bne.n	80079d2 <__sfputs_r+0xa>
 80079ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079ec <_vfiprintf_r>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	460d      	mov	r5, r1
 80079f2:	b09d      	sub	sp, #116	; 0x74
 80079f4:	4614      	mov	r4, r2
 80079f6:	4698      	mov	r8, r3
 80079f8:	4606      	mov	r6, r0
 80079fa:	b118      	cbz	r0, 8007a04 <_vfiprintf_r+0x18>
 80079fc:	6983      	ldr	r3, [r0, #24]
 80079fe:	b90b      	cbnz	r3, 8007a04 <_vfiprintf_r+0x18>
 8007a00:	f000 fb14 	bl	800802c <__sinit>
 8007a04:	4b89      	ldr	r3, [pc, #548]	; (8007c2c <_vfiprintf_r+0x240>)
 8007a06:	429d      	cmp	r5, r3
 8007a08:	d11b      	bne.n	8007a42 <_vfiprintf_r+0x56>
 8007a0a:	6875      	ldr	r5, [r6, #4]
 8007a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a0e:	07d9      	lsls	r1, r3, #31
 8007a10:	d405      	bmi.n	8007a1e <_vfiprintf_r+0x32>
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	059a      	lsls	r2, r3, #22
 8007a16:	d402      	bmi.n	8007a1e <_vfiprintf_r+0x32>
 8007a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1a:	f7ff ff88 	bl	800792e <__retarget_lock_acquire_recursive>
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	071b      	lsls	r3, r3, #28
 8007a22:	d501      	bpl.n	8007a28 <_vfiprintf_r+0x3c>
 8007a24:	692b      	ldr	r3, [r5, #16]
 8007a26:	b9eb      	cbnz	r3, 8007a64 <_vfiprintf_r+0x78>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f000 f96e 	bl	8007d0c <__swsetup_r>
 8007a30:	b1c0      	cbz	r0, 8007a64 <_vfiprintf_r+0x78>
 8007a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a34:	07dc      	lsls	r4, r3, #31
 8007a36:	d50e      	bpl.n	8007a56 <_vfiprintf_r+0x6a>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	b01d      	add	sp, #116	; 0x74
 8007a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a42:	4b7b      	ldr	r3, [pc, #492]	; (8007c30 <_vfiprintf_r+0x244>)
 8007a44:	429d      	cmp	r5, r3
 8007a46:	d101      	bne.n	8007a4c <_vfiprintf_r+0x60>
 8007a48:	68b5      	ldr	r5, [r6, #8]
 8007a4a:	e7df      	b.n	8007a0c <_vfiprintf_r+0x20>
 8007a4c:	4b79      	ldr	r3, [pc, #484]	; (8007c34 <_vfiprintf_r+0x248>)
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf08      	it	eq
 8007a52:	68f5      	ldreq	r5, [r6, #12]
 8007a54:	e7da      	b.n	8007a0c <_vfiprintf_r+0x20>
 8007a56:	89ab      	ldrh	r3, [r5, #12]
 8007a58:	0598      	lsls	r0, r3, #22
 8007a5a:	d4ed      	bmi.n	8007a38 <_vfiprintf_r+0x4c>
 8007a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a5e:	f7ff ff67 	bl	8007930 <__retarget_lock_release_recursive>
 8007a62:	e7e9      	b.n	8007a38 <_vfiprintf_r+0x4c>
 8007a64:	2300      	movs	r3, #0
 8007a66:	9309      	str	r3, [sp, #36]	; 0x24
 8007a68:	2320      	movs	r3, #32
 8007a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a72:	2330      	movs	r3, #48	; 0x30
 8007a74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c38 <_vfiprintf_r+0x24c>
 8007a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a7c:	f04f 0901 	mov.w	r9, #1
 8007a80:	4623      	mov	r3, r4
 8007a82:	469a      	mov	sl, r3
 8007a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a88:	b10a      	cbz	r2, 8007a8e <_vfiprintf_r+0xa2>
 8007a8a:	2a25      	cmp	r2, #37	; 0x25
 8007a8c:	d1f9      	bne.n	8007a82 <_vfiprintf_r+0x96>
 8007a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a92:	d00b      	beq.n	8007aac <_vfiprintf_r+0xc0>
 8007a94:	465b      	mov	r3, fp
 8007a96:	4622      	mov	r2, r4
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff ff94 	bl	80079c8 <__sfputs_r>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	f000 80aa 	beq.w	8007bfa <_vfiprintf_r+0x20e>
 8007aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa8:	445a      	add	r2, fp
 8007aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007aac:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80a2 	beq.w	8007bfa <_vfiprintf_r+0x20e>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac0:	f10a 0a01 	add.w	sl, sl, #1
 8007ac4:	9304      	str	r3, [sp, #16]
 8007ac6:	9307      	str	r3, [sp, #28]
 8007ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007acc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ace:	4654      	mov	r4, sl
 8007ad0:	2205      	movs	r2, #5
 8007ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad6:	4858      	ldr	r0, [pc, #352]	; (8007c38 <_vfiprintf_r+0x24c>)
 8007ad8:	f7f8 fb92 	bl	8000200 <memchr>
 8007adc:	9a04      	ldr	r2, [sp, #16]
 8007ade:	b9d8      	cbnz	r0, 8007b18 <_vfiprintf_r+0x12c>
 8007ae0:	06d1      	lsls	r1, r2, #27
 8007ae2:	bf44      	itt	mi
 8007ae4:	2320      	movmi	r3, #32
 8007ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aea:	0713      	lsls	r3, r2, #28
 8007aec:	bf44      	itt	mi
 8007aee:	232b      	movmi	r3, #43	; 0x2b
 8007af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af4:	f89a 3000 	ldrb.w	r3, [sl]
 8007af8:	2b2a      	cmp	r3, #42	; 0x2a
 8007afa:	d015      	beq.n	8007b28 <_vfiprintf_r+0x13c>
 8007afc:	9a07      	ldr	r2, [sp, #28]
 8007afe:	4654      	mov	r4, sl
 8007b00:	2000      	movs	r0, #0
 8007b02:	f04f 0c0a 	mov.w	ip, #10
 8007b06:	4621      	mov	r1, r4
 8007b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b0c:	3b30      	subs	r3, #48	; 0x30
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d94e      	bls.n	8007bb0 <_vfiprintf_r+0x1c4>
 8007b12:	b1b0      	cbz	r0, 8007b42 <_vfiprintf_r+0x156>
 8007b14:	9207      	str	r2, [sp, #28]
 8007b16:	e014      	b.n	8007b42 <_vfiprintf_r+0x156>
 8007b18:	eba0 0308 	sub.w	r3, r0, r8
 8007b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b20:	4313      	orrs	r3, r2
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	46a2      	mov	sl, r4
 8007b26:	e7d2      	b.n	8007ace <_vfiprintf_r+0xe2>
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	1d19      	adds	r1, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	9103      	str	r1, [sp, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfbb      	ittet	lt
 8007b34:	425b      	neglt	r3, r3
 8007b36:	f042 0202 	orrlt.w	r2, r2, #2
 8007b3a:	9307      	strge	r3, [sp, #28]
 8007b3c:	9307      	strlt	r3, [sp, #28]
 8007b3e:	bfb8      	it	lt
 8007b40:	9204      	strlt	r2, [sp, #16]
 8007b42:	7823      	ldrb	r3, [r4, #0]
 8007b44:	2b2e      	cmp	r3, #46	; 0x2e
 8007b46:	d10c      	bne.n	8007b62 <_vfiprintf_r+0x176>
 8007b48:	7863      	ldrb	r3, [r4, #1]
 8007b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4c:	d135      	bne.n	8007bba <_vfiprintf_r+0x1ce>
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	9203      	str	r2, [sp, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bfb8      	it	lt
 8007b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b5e:	3402      	adds	r4, #2
 8007b60:	9305      	str	r3, [sp, #20]
 8007b62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c48 <_vfiprintf_r+0x25c>
 8007b66:	7821      	ldrb	r1, [r4, #0]
 8007b68:	2203      	movs	r2, #3
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f7f8 fb48 	bl	8000200 <memchr>
 8007b70:	b140      	cbz	r0, 8007b84 <_vfiprintf_r+0x198>
 8007b72:	2340      	movs	r3, #64	; 0x40
 8007b74:	eba0 000a 	sub.w	r0, r0, sl
 8007b78:	fa03 f000 	lsl.w	r0, r3, r0
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	4303      	orrs	r3, r0
 8007b80:	3401      	adds	r4, #1
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b88:	482c      	ldr	r0, [pc, #176]	; (8007c3c <_vfiprintf_r+0x250>)
 8007b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b8e:	2206      	movs	r2, #6
 8007b90:	f7f8 fb36 	bl	8000200 <memchr>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d03f      	beq.n	8007c18 <_vfiprintf_r+0x22c>
 8007b98:	4b29      	ldr	r3, [pc, #164]	; (8007c40 <_vfiprintf_r+0x254>)
 8007b9a:	bb1b      	cbnz	r3, 8007be4 <_vfiprintf_r+0x1f8>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	3307      	adds	r3, #7
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	443b      	add	r3, r7
 8007bac:	9309      	str	r3, [sp, #36]	; 0x24
 8007bae:	e767      	b.n	8007a80 <_vfiprintf_r+0x94>
 8007bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	e7a5      	b.n	8007b06 <_vfiprintf_r+0x11a>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	3401      	adds	r4, #1
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f04f 0c0a 	mov.w	ip, #10
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bcc:	3a30      	subs	r2, #48	; 0x30
 8007bce:	2a09      	cmp	r2, #9
 8007bd0:	d903      	bls.n	8007bda <_vfiprintf_r+0x1ee>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0c5      	beq.n	8007b62 <_vfiprintf_r+0x176>
 8007bd6:	9105      	str	r1, [sp, #20]
 8007bd8:	e7c3      	b.n	8007b62 <_vfiprintf_r+0x176>
 8007bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bde:	4604      	mov	r4, r0
 8007be0:	2301      	movs	r3, #1
 8007be2:	e7f0      	b.n	8007bc6 <_vfiprintf_r+0x1da>
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4b16      	ldr	r3, [pc, #88]	; (8007c44 <_vfiprintf_r+0x258>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7fd fec2 	bl	8005978 <_printf_float>
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	1c78      	adds	r0, r7, #1
 8007bf8:	d1d6      	bne.n	8007ba8 <_vfiprintf_r+0x1bc>
 8007bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bfc:	07d9      	lsls	r1, r3, #31
 8007bfe:	d405      	bmi.n	8007c0c <_vfiprintf_r+0x220>
 8007c00:	89ab      	ldrh	r3, [r5, #12]
 8007c02:	059a      	lsls	r2, r3, #22
 8007c04:	d402      	bmi.n	8007c0c <_vfiprintf_r+0x220>
 8007c06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c08:	f7ff fe92 	bl	8007930 <__retarget_lock_release_recursive>
 8007c0c:	89ab      	ldrh	r3, [r5, #12]
 8007c0e:	065b      	lsls	r3, r3, #25
 8007c10:	f53f af12 	bmi.w	8007a38 <_vfiprintf_r+0x4c>
 8007c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c16:	e711      	b.n	8007a3c <_vfiprintf_r+0x50>
 8007c18:	ab03      	add	r3, sp, #12
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <_vfiprintf_r+0x258>)
 8007c20:	a904      	add	r1, sp, #16
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7fe f94c 	bl	8005ec0 <_printf_i>
 8007c28:	e7e4      	b.n	8007bf4 <_vfiprintf_r+0x208>
 8007c2a:	bf00      	nop
 8007c2c:	08008cec 	.word	0x08008cec
 8007c30:	08008d0c 	.word	0x08008d0c
 8007c34:	08008ccc 	.word	0x08008ccc
 8007c38:	08008b74 	.word	0x08008b74
 8007c3c:	08008b7e 	.word	0x08008b7e
 8007c40:	08005979 	.word	0x08005979
 8007c44:	080079c9 	.word	0x080079c9
 8007c48:	08008b7a 	.word	0x08008b7a

08007c4c <__swbuf_r>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	460e      	mov	r6, r1
 8007c50:	4614      	mov	r4, r2
 8007c52:	4605      	mov	r5, r0
 8007c54:	b118      	cbz	r0, 8007c5e <__swbuf_r+0x12>
 8007c56:	6983      	ldr	r3, [r0, #24]
 8007c58:	b90b      	cbnz	r3, 8007c5e <__swbuf_r+0x12>
 8007c5a:	f000 f9e7 	bl	800802c <__sinit>
 8007c5e:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <__swbuf_r+0x98>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	d12b      	bne.n	8007cbc <__swbuf_r+0x70>
 8007c64:	686c      	ldr	r4, [r5, #4]
 8007c66:	69a3      	ldr	r3, [r4, #24]
 8007c68:	60a3      	str	r3, [r4, #8]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	071a      	lsls	r2, r3, #28
 8007c6e:	d52f      	bpl.n	8007cd0 <__swbuf_r+0x84>
 8007c70:	6923      	ldr	r3, [r4, #16]
 8007c72:	b36b      	cbz	r3, 8007cd0 <__swbuf_r+0x84>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	6820      	ldr	r0, [r4, #0]
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	6963      	ldr	r3, [r4, #20]
 8007c7c:	b2f6      	uxtb	r6, r6
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	4637      	mov	r7, r6
 8007c82:	dc04      	bgt.n	8007c8e <__swbuf_r+0x42>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 f93c 	bl	8007f04 <_fflush_r>
 8007c8c:	bb30      	cbnz	r0, 8007cdc <__swbuf_r+0x90>
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	60a3      	str	r3, [r4, #8]
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	701e      	strb	r6, [r3, #0]
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	4283      	cmp	r3, r0
 8007ca2:	d004      	beq.n	8007cae <__swbuf_r+0x62>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	07db      	lsls	r3, r3, #31
 8007ca8:	d506      	bpl.n	8007cb8 <__swbuf_r+0x6c>
 8007caa:	2e0a      	cmp	r6, #10
 8007cac:	d104      	bne.n	8007cb8 <__swbuf_r+0x6c>
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 f927 	bl	8007f04 <_fflush_r>
 8007cb6:	b988      	cbnz	r0, 8007cdc <__swbuf_r+0x90>
 8007cb8:	4638      	mov	r0, r7
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <__swbuf_r+0x9c>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	d101      	bne.n	8007cc6 <__swbuf_r+0x7a>
 8007cc2:	68ac      	ldr	r4, [r5, #8]
 8007cc4:	e7cf      	b.n	8007c66 <__swbuf_r+0x1a>
 8007cc6:	4b09      	ldr	r3, [pc, #36]	; (8007cec <__swbuf_r+0xa0>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	bf08      	it	eq
 8007ccc:	68ec      	ldreq	r4, [r5, #12]
 8007cce:	e7ca      	b.n	8007c66 <__swbuf_r+0x1a>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 f81a 	bl	8007d0c <__swsetup_r>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d0cb      	beq.n	8007c74 <__swbuf_r+0x28>
 8007cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce0:	e7ea      	b.n	8007cb8 <__swbuf_r+0x6c>
 8007ce2:	bf00      	nop
 8007ce4:	08008cec 	.word	0x08008cec
 8007ce8:	08008d0c 	.word	0x08008d0c
 8007cec:	08008ccc 	.word	0x08008ccc

08007cf0 <__ascii_wctomb>:
 8007cf0:	b149      	cbz	r1, 8007d06 <__ascii_wctomb+0x16>
 8007cf2:	2aff      	cmp	r2, #255	; 0xff
 8007cf4:	bf85      	ittet	hi
 8007cf6:	238a      	movhi	r3, #138	; 0x8a
 8007cf8:	6003      	strhi	r3, [r0, #0]
 8007cfa:	700a      	strbls	r2, [r1, #0]
 8007cfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d00:	bf98      	it	ls
 8007d02:	2001      	movls	r0, #1
 8007d04:	4770      	bx	lr
 8007d06:	4608      	mov	r0, r1
 8007d08:	4770      	bx	lr
	...

08007d0c <__swsetup_r>:
 8007d0c:	4b32      	ldr	r3, [pc, #200]	; (8007dd8 <__swsetup_r+0xcc>)
 8007d0e:	b570      	push	{r4, r5, r6, lr}
 8007d10:	681d      	ldr	r5, [r3, #0]
 8007d12:	4606      	mov	r6, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	b125      	cbz	r5, 8007d22 <__swsetup_r+0x16>
 8007d18:	69ab      	ldr	r3, [r5, #24]
 8007d1a:	b913      	cbnz	r3, 8007d22 <__swsetup_r+0x16>
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 f985 	bl	800802c <__sinit>
 8007d22:	4b2e      	ldr	r3, [pc, #184]	; (8007ddc <__swsetup_r+0xd0>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d10f      	bne.n	8007d48 <__swsetup_r+0x3c>
 8007d28:	686c      	ldr	r4, [r5, #4]
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d30:	0719      	lsls	r1, r3, #28
 8007d32:	d42c      	bmi.n	8007d8e <__swsetup_r+0x82>
 8007d34:	06dd      	lsls	r5, r3, #27
 8007d36:	d411      	bmi.n	8007d5c <__swsetup_r+0x50>
 8007d38:	2309      	movs	r3, #9
 8007d3a:	6033      	str	r3, [r6, #0]
 8007d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	e03e      	b.n	8007dc6 <__swsetup_r+0xba>
 8007d48:	4b25      	ldr	r3, [pc, #148]	; (8007de0 <__swsetup_r+0xd4>)
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	d101      	bne.n	8007d52 <__swsetup_r+0x46>
 8007d4e:	68ac      	ldr	r4, [r5, #8]
 8007d50:	e7eb      	b.n	8007d2a <__swsetup_r+0x1e>
 8007d52:	4b24      	ldr	r3, [pc, #144]	; (8007de4 <__swsetup_r+0xd8>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	bf08      	it	eq
 8007d58:	68ec      	ldreq	r4, [r5, #12]
 8007d5a:	e7e6      	b.n	8007d2a <__swsetup_r+0x1e>
 8007d5c:	0758      	lsls	r0, r3, #29
 8007d5e:	d512      	bpl.n	8007d86 <__swsetup_r+0x7a>
 8007d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d62:	b141      	cbz	r1, 8007d76 <__swsetup_r+0x6a>
 8007d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	d002      	beq.n	8007d72 <__swsetup_r+0x66>
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7fd fc83 	bl	8005678 <_free_r>
 8007d72:	2300      	movs	r3, #0
 8007d74:	6363      	str	r3, [r4, #52]	; 0x34
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	6063      	str	r3, [r4, #4]
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f043 0308 	orr.w	r3, r3, #8
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	b94b      	cbnz	r3, 8007da6 <__swsetup_r+0x9a>
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9c:	d003      	beq.n	8007da6 <__swsetup_r+0x9a>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4630      	mov	r0, r6
 8007da2:	f000 fa05 	bl	80081b0 <__smakebuf_r>
 8007da6:	89a0      	ldrh	r0, [r4, #12]
 8007da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dac:	f010 0301 	ands.w	r3, r0, #1
 8007db0:	d00a      	beq.n	8007dc8 <__swsetup_r+0xbc>
 8007db2:	2300      	movs	r3, #0
 8007db4:	60a3      	str	r3, [r4, #8]
 8007db6:	6963      	ldr	r3, [r4, #20]
 8007db8:	425b      	negs	r3, r3
 8007dba:	61a3      	str	r3, [r4, #24]
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	b943      	cbnz	r3, 8007dd2 <__swsetup_r+0xc6>
 8007dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dc4:	d1ba      	bne.n	8007d3c <__swsetup_r+0x30>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	0781      	lsls	r1, r0, #30
 8007dca:	bf58      	it	pl
 8007dcc:	6963      	ldrpl	r3, [r4, #20]
 8007dce:	60a3      	str	r3, [r4, #8]
 8007dd0:	e7f4      	b.n	8007dbc <__swsetup_r+0xb0>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	e7f7      	b.n	8007dc6 <__swsetup_r+0xba>
 8007dd6:	bf00      	nop
 8007dd8:	200006c0 	.word	0x200006c0
 8007ddc:	08008cec 	.word	0x08008cec
 8007de0:	08008d0c 	.word	0x08008d0c
 8007de4:	08008ccc 	.word	0x08008ccc

08007de8 <abort>:
 8007de8:	b508      	push	{r3, lr}
 8007dea:	2006      	movs	r0, #6
 8007dec:	f000 fa48 	bl	8008280 <raise>
 8007df0:	2001      	movs	r0, #1
 8007df2:	f7f9 fc59 	bl	80016a8 <_exit>
	...

08007df8 <__sflush_r>:
 8007df8:	898a      	ldrh	r2, [r1, #12]
 8007dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfe:	4605      	mov	r5, r0
 8007e00:	0710      	lsls	r0, r2, #28
 8007e02:	460c      	mov	r4, r1
 8007e04:	d458      	bmi.n	8007eb8 <__sflush_r+0xc0>
 8007e06:	684b      	ldr	r3, [r1, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc05      	bgt.n	8007e18 <__sflush_r+0x20>
 8007e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dc02      	bgt.n	8007e18 <__sflush_r+0x20>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d0f9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e24:	682f      	ldr	r7, [r5, #0]
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	d032      	beq.n	8007e90 <__sflush_r+0x98>
 8007e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	075a      	lsls	r2, r3, #29
 8007e30:	d505      	bpl.n	8007e3e <__sflush_r+0x46>
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	1ac0      	subs	r0, r0, r3
 8007e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e38:	b10b      	cbz	r3, 8007e3e <__sflush_r+0x46>
 8007e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e3c:	1ac0      	subs	r0, r0, r3
 8007e3e:	2300      	movs	r3, #0
 8007e40:	4602      	mov	r2, r0
 8007e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b0      	blx	r6
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	d106      	bne.n	8007e5e <__sflush_r+0x66>
 8007e50:	6829      	ldr	r1, [r5, #0]
 8007e52:	291d      	cmp	r1, #29
 8007e54:	d82c      	bhi.n	8007eb0 <__sflush_r+0xb8>
 8007e56:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <__sflush_r+0x108>)
 8007e58:	40ca      	lsrs	r2, r1
 8007e5a:	07d6      	lsls	r6, r2, #31
 8007e5c:	d528      	bpl.n	8007eb0 <__sflush_r+0xb8>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6062      	str	r2, [r4, #4]
 8007e62:	04d9      	lsls	r1, r3, #19
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	d504      	bpl.n	8007e74 <__sflush_r+0x7c>
 8007e6a:	1c42      	adds	r2, r0, #1
 8007e6c:	d101      	bne.n	8007e72 <__sflush_r+0x7a>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	b903      	cbnz	r3, 8007e74 <__sflush_r+0x7c>
 8007e72:	6560      	str	r0, [r4, #84]	; 0x54
 8007e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e76:	602f      	str	r7, [r5, #0]
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	d0ca      	beq.n	8007e12 <__sflush_r+0x1a>
 8007e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e80:	4299      	cmp	r1, r3
 8007e82:	d002      	beq.n	8007e8a <__sflush_r+0x92>
 8007e84:	4628      	mov	r0, r5
 8007e86:	f7fd fbf7 	bl	8005678 <_free_r>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e8e:	e7c1      	b.n	8007e14 <__sflush_r+0x1c>
 8007e90:	6a21      	ldr	r1, [r4, #32]
 8007e92:	2301      	movs	r3, #1
 8007e94:	4628      	mov	r0, r5
 8007e96:	47b0      	blx	r6
 8007e98:	1c41      	adds	r1, r0, #1
 8007e9a:	d1c7      	bne.n	8007e2c <__sflush_r+0x34>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0c4      	beq.n	8007e2c <__sflush_r+0x34>
 8007ea2:	2b1d      	cmp	r3, #29
 8007ea4:	d001      	beq.n	8007eaa <__sflush_r+0xb2>
 8007ea6:	2b16      	cmp	r3, #22
 8007ea8:	d101      	bne.n	8007eae <__sflush_r+0xb6>
 8007eaa:	602f      	str	r7, [r5, #0]
 8007eac:	e7b1      	b.n	8007e12 <__sflush_r+0x1a>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	e7ad      	b.n	8007e14 <__sflush_r+0x1c>
 8007eb8:	690f      	ldr	r7, [r1, #16]
 8007eba:	2f00      	cmp	r7, #0
 8007ebc:	d0a9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007ebe:	0793      	lsls	r3, r2, #30
 8007ec0:	680e      	ldr	r6, [r1, #0]
 8007ec2:	bf08      	it	eq
 8007ec4:	694b      	ldreq	r3, [r1, #20]
 8007ec6:	600f      	str	r7, [r1, #0]
 8007ec8:	bf18      	it	ne
 8007eca:	2300      	movne	r3, #0
 8007ecc:	eba6 0807 	sub.w	r8, r6, r7
 8007ed0:	608b      	str	r3, [r1, #8]
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	dd9c      	ble.n	8007e12 <__sflush_r+0x1a>
 8007ed8:	6a21      	ldr	r1, [r4, #32]
 8007eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007edc:	4643      	mov	r3, r8
 8007ede:	463a      	mov	r2, r7
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b0      	blx	r6
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	dc06      	bgt.n	8007ef6 <__sflush_r+0xfe>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e78e      	b.n	8007e14 <__sflush_r+0x1c>
 8007ef6:	4407      	add	r7, r0
 8007ef8:	eba8 0800 	sub.w	r8, r8, r0
 8007efc:	e7e9      	b.n	8007ed2 <__sflush_r+0xda>
 8007efe:	bf00      	nop
 8007f00:	20400001 	.word	0x20400001

08007f04 <_fflush_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	b913      	cbnz	r3, 8007f14 <_fflush_r+0x10>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	4628      	mov	r0, r5
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	b118      	cbz	r0, 8007f1e <_fflush_r+0x1a>
 8007f16:	6983      	ldr	r3, [r0, #24]
 8007f18:	b90b      	cbnz	r3, 8007f1e <_fflush_r+0x1a>
 8007f1a:	f000 f887 	bl	800802c <__sinit>
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <_fflush_r+0x6c>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d11b      	bne.n	8007f5c <_fflush_r+0x58>
 8007f24:	686c      	ldr	r4, [r5, #4]
 8007f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0ef      	beq.n	8007f0e <_fflush_r+0xa>
 8007f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f30:	07d0      	lsls	r0, r2, #31
 8007f32:	d404      	bmi.n	8007f3e <_fflush_r+0x3a>
 8007f34:	0599      	lsls	r1, r3, #22
 8007f36:	d402      	bmi.n	8007f3e <_fflush_r+0x3a>
 8007f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f3a:	f7ff fcf8 	bl	800792e <__retarget_lock_acquire_recursive>
 8007f3e:	4628      	mov	r0, r5
 8007f40:	4621      	mov	r1, r4
 8007f42:	f7ff ff59 	bl	8007df8 <__sflush_r>
 8007f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f48:	07da      	lsls	r2, r3, #31
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	d4e0      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	059b      	lsls	r3, r3, #22
 8007f52:	d4dd      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f56:	f7ff fceb 	bl	8007930 <__retarget_lock_release_recursive>
 8007f5a:	e7d9      	b.n	8007f10 <_fflush_r+0xc>
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <_fflush_r+0x70>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d101      	bne.n	8007f66 <_fflush_r+0x62>
 8007f62:	68ac      	ldr	r4, [r5, #8]
 8007f64:	e7df      	b.n	8007f26 <_fflush_r+0x22>
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <_fflush_r+0x74>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	bf08      	it	eq
 8007f6c:	68ec      	ldreq	r4, [r5, #12]
 8007f6e:	e7da      	b.n	8007f26 <_fflush_r+0x22>
 8007f70:	08008cec 	.word	0x08008cec
 8007f74:	08008d0c 	.word	0x08008d0c
 8007f78:	08008ccc 	.word	0x08008ccc

08007f7c <std>:
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0
 8007f82:	e9c0 3300 	strd	r3, r3, [r0]
 8007f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f8a:	6083      	str	r3, [r0, #8]
 8007f8c:	8181      	strh	r1, [r0, #12]
 8007f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f90:	81c2      	strh	r2, [r0, #14]
 8007f92:	6183      	str	r3, [r0, #24]
 8007f94:	4619      	mov	r1, r3
 8007f96:	2208      	movs	r2, #8
 8007f98:	305c      	adds	r0, #92	; 0x5c
 8007f9a:	f7fd fb65 	bl	8005668 <memset>
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std+0x38>)
 8007fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <std+0x3c>)
 8007fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <std+0x40>)
 8007fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007faa:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <std+0x44>)
 8007fac:	6224      	str	r4, [r4, #32]
 8007fae:	6323      	str	r3, [r4, #48]	; 0x30
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	bf00      	nop
 8007fb4:	080082b9 	.word	0x080082b9
 8007fb8:	080082db 	.word	0x080082db
 8007fbc:	08008313 	.word	0x08008313
 8007fc0:	08008337 	.word	0x08008337

08007fc4 <_cleanup_r>:
 8007fc4:	4901      	ldr	r1, [pc, #4]	; (8007fcc <_cleanup_r+0x8>)
 8007fc6:	f000 b8af 	b.w	8008128 <_fwalk_reent>
 8007fca:	bf00      	nop
 8007fcc:	08007f05 	.word	0x08007f05

08007fd0 <__sfmoreglue>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	2268      	movs	r2, #104	; 0x68
 8007fd4:	1e4d      	subs	r5, r1, #1
 8007fd6:	4355      	muls	r5, r2
 8007fd8:	460e      	mov	r6, r1
 8007fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fde:	f7fd fbb7 	bl	8005750 <_malloc_r>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	b140      	cbz	r0, 8007ff8 <__sfmoreglue+0x28>
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8007fec:	300c      	adds	r0, #12
 8007fee:	60a0      	str	r0, [r4, #8]
 8007ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ff4:	f7fd fb38 	bl	8005668 <memset>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}

08007ffc <__sfp_lock_acquire>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__sfp_lock_acquire+0x8>)
 8007ffe:	f7ff bc96 	b.w	800792e <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20000a3d 	.word	0x20000a3d

08008008 <__sfp_lock_release>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__sfp_lock_release+0x8>)
 800800a:	f7ff bc91 	b.w	8007930 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20000a3d 	.word	0x20000a3d

08008014 <__sinit_lock_acquire>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__sinit_lock_acquire+0x8>)
 8008016:	f7ff bc8a 	b.w	800792e <__retarget_lock_acquire_recursive>
 800801a:	bf00      	nop
 800801c:	20000a3e 	.word	0x20000a3e

08008020 <__sinit_lock_release>:
 8008020:	4801      	ldr	r0, [pc, #4]	; (8008028 <__sinit_lock_release+0x8>)
 8008022:	f7ff bc85 	b.w	8007930 <__retarget_lock_release_recursive>
 8008026:	bf00      	nop
 8008028:	20000a3e 	.word	0x20000a3e

0800802c <__sinit>:
 800802c:	b510      	push	{r4, lr}
 800802e:	4604      	mov	r4, r0
 8008030:	f7ff fff0 	bl	8008014 <__sinit_lock_acquire>
 8008034:	69a3      	ldr	r3, [r4, #24]
 8008036:	b11b      	cbz	r3, 8008040 <__sinit+0x14>
 8008038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803c:	f7ff bff0 	b.w	8008020 <__sinit_lock_release>
 8008040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008044:	6523      	str	r3, [r4, #80]	; 0x50
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <__sinit+0x68>)
 8008048:	4a13      	ldr	r2, [pc, #76]	; (8008098 <__sinit+0x6c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	62a2      	str	r2, [r4, #40]	; 0x28
 800804e:	42a3      	cmp	r3, r4
 8008050:	bf04      	itt	eq
 8008052:	2301      	moveq	r3, #1
 8008054:	61a3      	streq	r3, [r4, #24]
 8008056:	4620      	mov	r0, r4
 8008058:	f000 f820 	bl	800809c <__sfp>
 800805c:	6060      	str	r0, [r4, #4]
 800805e:	4620      	mov	r0, r4
 8008060:	f000 f81c 	bl	800809c <__sfp>
 8008064:	60a0      	str	r0, [r4, #8]
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f818 	bl	800809c <__sfp>
 800806c:	2200      	movs	r2, #0
 800806e:	60e0      	str	r0, [r4, #12]
 8008070:	2104      	movs	r1, #4
 8008072:	6860      	ldr	r0, [r4, #4]
 8008074:	f7ff ff82 	bl	8007f7c <std>
 8008078:	68a0      	ldr	r0, [r4, #8]
 800807a:	2201      	movs	r2, #1
 800807c:	2109      	movs	r1, #9
 800807e:	f7ff ff7d 	bl	8007f7c <std>
 8008082:	68e0      	ldr	r0, [r4, #12]
 8008084:	2202      	movs	r2, #2
 8008086:	2112      	movs	r1, #18
 8008088:	f7ff ff78 	bl	8007f7c <std>
 800808c:	2301      	movs	r3, #1
 800808e:	61a3      	str	r3, [r4, #24]
 8008090:	e7d2      	b.n	8008038 <__sinit+0xc>
 8008092:	bf00      	nop
 8008094:	08008950 	.word	0x08008950
 8008098:	08007fc5 	.word	0x08007fc5

0800809c <__sfp>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	4607      	mov	r7, r0
 80080a0:	f7ff ffac 	bl	8007ffc <__sfp_lock_acquire>
 80080a4:	4b1e      	ldr	r3, [pc, #120]	; (8008120 <__sfp+0x84>)
 80080a6:	681e      	ldr	r6, [r3, #0]
 80080a8:	69b3      	ldr	r3, [r6, #24]
 80080aa:	b913      	cbnz	r3, 80080b2 <__sfp+0x16>
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff ffbd 	bl	800802c <__sinit>
 80080b2:	3648      	adds	r6, #72	; 0x48
 80080b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	d503      	bpl.n	80080c4 <__sfp+0x28>
 80080bc:	6833      	ldr	r3, [r6, #0]
 80080be:	b30b      	cbz	r3, 8008104 <__sfp+0x68>
 80080c0:	6836      	ldr	r6, [r6, #0]
 80080c2:	e7f7      	b.n	80080b4 <__sfp+0x18>
 80080c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080c8:	b9d5      	cbnz	r5, 8008100 <__sfp+0x64>
 80080ca:	4b16      	ldr	r3, [pc, #88]	; (8008124 <__sfp+0x88>)
 80080cc:	60e3      	str	r3, [r4, #12]
 80080ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080d2:	6665      	str	r5, [r4, #100]	; 0x64
 80080d4:	f7ff fc2a 	bl	800792c <__retarget_lock_init_recursive>
 80080d8:	f7ff ff96 	bl	8008008 <__sfp_lock_release>
 80080dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080e4:	6025      	str	r5, [r4, #0]
 80080e6:	61a5      	str	r5, [r4, #24]
 80080e8:	2208      	movs	r2, #8
 80080ea:	4629      	mov	r1, r5
 80080ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080f0:	f7fd faba 	bl	8005668 <memset>
 80080f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080fc:	4620      	mov	r0, r4
 80080fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008100:	3468      	adds	r4, #104	; 0x68
 8008102:	e7d9      	b.n	80080b8 <__sfp+0x1c>
 8008104:	2104      	movs	r1, #4
 8008106:	4638      	mov	r0, r7
 8008108:	f7ff ff62 	bl	8007fd0 <__sfmoreglue>
 800810c:	4604      	mov	r4, r0
 800810e:	6030      	str	r0, [r6, #0]
 8008110:	2800      	cmp	r0, #0
 8008112:	d1d5      	bne.n	80080c0 <__sfp+0x24>
 8008114:	f7ff ff78 	bl	8008008 <__sfp_lock_release>
 8008118:	230c      	movs	r3, #12
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	e7ee      	b.n	80080fc <__sfp+0x60>
 800811e:	bf00      	nop
 8008120:	08008950 	.word	0x08008950
 8008124:	ffff0001 	.word	0xffff0001

08008128 <_fwalk_reent>:
 8008128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800812c:	4606      	mov	r6, r0
 800812e:	4688      	mov	r8, r1
 8008130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008134:	2700      	movs	r7, #0
 8008136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800813a:	f1b9 0901 	subs.w	r9, r9, #1
 800813e:	d505      	bpl.n	800814c <_fwalk_reent+0x24>
 8008140:	6824      	ldr	r4, [r4, #0]
 8008142:	2c00      	cmp	r4, #0
 8008144:	d1f7      	bne.n	8008136 <_fwalk_reent+0xe>
 8008146:	4638      	mov	r0, r7
 8008148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814c:	89ab      	ldrh	r3, [r5, #12]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d907      	bls.n	8008162 <_fwalk_reent+0x3a>
 8008152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008156:	3301      	adds	r3, #1
 8008158:	d003      	beq.n	8008162 <_fwalk_reent+0x3a>
 800815a:	4629      	mov	r1, r5
 800815c:	4630      	mov	r0, r6
 800815e:	47c0      	blx	r8
 8008160:	4307      	orrs	r7, r0
 8008162:	3568      	adds	r5, #104	; 0x68
 8008164:	e7e9      	b.n	800813a <_fwalk_reent+0x12>

08008166 <__swhatbuf_r>:
 8008166:	b570      	push	{r4, r5, r6, lr}
 8008168:	460e      	mov	r6, r1
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	2900      	cmp	r1, #0
 8008170:	b096      	sub	sp, #88	; 0x58
 8008172:	4614      	mov	r4, r2
 8008174:	461d      	mov	r5, r3
 8008176:	da08      	bge.n	800818a <__swhatbuf_r+0x24>
 8008178:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	602a      	str	r2, [r5, #0]
 8008180:	061a      	lsls	r2, r3, #24
 8008182:	d410      	bmi.n	80081a6 <__swhatbuf_r+0x40>
 8008184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008188:	e00e      	b.n	80081a8 <__swhatbuf_r+0x42>
 800818a:	466a      	mov	r2, sp
 800818c:	f000 f8fa 	bl	8008384 <_fstat_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	dbf1      	blt.n	8008178 <__swhatbuf_r+0x12>
 8008194:	9a01      	ldr	r2, [sp, #4]
 8008196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800819a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800819e:	425a      	negs	r2, r3
 80081a0:	415a      	adcs	r2, r3
 80081a2:	602a      	str	r2, [r5, #0]
 80081a4:	e7ee      	b.n	8008184 <__swhatbuf_r+0x1e>
 80081a6:	2340      	movs	r3, #64	; 0x40
 80081a8:	2000      	movs	r0, #0
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	b016      	add	sp, #88	; 0x58
 80081ae:	bd70      	pop	{r4, r5, r6, pc}

080081b0 <__smakebuf_r>:
 80081b0:	898b      	ldrh	r3, [r1, #12]
 80081b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081b4:	079d      	lsls	r5, r3, #30
 80081b6:	4606      	mov	r6, r0
 80081b8:	460c      	mov	r4, r1
 80081ba:	d507      	bpl.n	80081cc <__smakebuf_r+0x1c>
 80081bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	6123      	str	r3, [r4, #16]
 80081c4:	2301      	movs	r3, #1
 80081c6:	6163      	str	r3, [r4, #20]
 80081c8:	b002      	add	sp, #8
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	ab01      	add	r3, sp, #4
 80081ce:	466a      	mov	r2, sp
 80081d0:	f7ff ffc9 	bl	8008166 <__swhatbuf_r>
 80081d4:	9900      	ldr	r1, [sp, #0]
 80081d6:	4605      	mov	r5, r0
 80081d8:	4630      	mov	r0, r6
 80081da:	f7fd fab9 	bl	8005750 <_malloc_r>
 80081de:	b948      	cbnz	r0, 80081f4 <__smakebuf_r+0x44>
 80081e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e4:	059a      	lsls	r2, r3, #22
 80081e6:	d4ef      	bmi.n	80081c8 <__smakebuf_r+0x18>
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	f043 0302 	orr.w	r3, r3, #2
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	e7e3      	b.n	80081bc <__smakebuf_r+0xc>
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <__smakebuf_r+0x7c>)
 80081f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	6020      	str	r0, [r4, #0]
 80081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	6163      	str	r3, [r4, #20]
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	6120      	str	r0, [r4, #16]
 800820a:	b15b      	cbz	r3, 8008224 <__smakebuf_r+0x74>
 800820c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008210:	4630      	mov	r0, r6
 8008212:	f000 f8c9 	bl	80083a8 <_isatty_r>
 8008216:	b128      	cbz	r0, 8008224 <__smakebuf_r+0x74>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	f043 0301 	orr.w	r3, r3, #1
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	89a0      	ldrh	r0, [r4, #12]
 8008226:	4305      	orrs	r5, r0
 8008228:	81a5      	strh	r5, [r4, #12]
 800822a:	e7cd      	b.n	80081c8 <__smakebuf_r+0x18>
 800822c:	08007fc5 	.word	0x08007fc5

08008230 <_raise_r>:
 8008230:	291f      	cmp	r1, #31
 8008232:	b538      	push	{r3, r4, r5, lr}
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	d904      	bls.n	8008244 <_raise_r+0x14>
 800823a:	2316      	movs	r3, #22
 800823c:	6003      	str	r3, [r0, #0]
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008246:	b112      	cbz	r2, 800824e <_raise_r+0x1e>
 8008248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800824c:	b94b      	cbnz	r3, 8008262 <_raise_r+0x32>
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f830 	bl	80082b4 <_getpid_r>
 8008254:	462a      	mov	r2, r5
 8008256:	4601      	mov	r1, r0
 8008258:	4620      	mov	r0, r4
 800825a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825e:	f000 b817 	b.w	8008290 <_kill_r>
 8008262:	2b01      	cmp	r3, #1
 8008264:	d00a      	beq.n	800827c <_raise_r+0x4c>
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	d103      	bne.n	8008272 <_raise_r+0x42>
 800826a:	2316      	movs	r3, #22
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	2001      	movs	r0, #1
 8008270:	e7e7      	b.n	8008242 <_raise_r+0x12>
 8008272:	2400      	movs	r4, #0
 8008274:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008278:	4628      	mov	r0, r5
 800827a:	4798      	blx	r3
 800827c:	2000      	movs	r0, #0
 800827e:	e7e0      	b.n	8008242 <_raise_r+0x12>

08008280 <raise>:
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <raise+0xc>)
 8008282:	4601      	mov	r1, r0
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f7ff bfd3 	b.w	8008230 <_raise_r>
 800828a:	bf00      	nop
 800828c:	200006c0 	.word	0x200006c0

08008290 <_kill_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	; (80082b0 <_kill_r+0x20>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	f7f9 f9f3 	bl	8001688 <_kill>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d102      	bne.n	80082ac <_kill_r+0x1c>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b103      	cbz	r3, 80082ac <_kill_r+0x1c>
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	bf00      	nop
 80082b0:	20000a38 	.word	0x20000a38

080082b4 <_getpid_r>:
 80082b4:	f7f9 b9e0 	b.w	8001678 <_getpid>

080082b8 <__sread>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	460c      	mov	r4, r1
 80082bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c0:	f000 f894 	bl	80083ec <_read_r>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	bfab      	itete	ge
 80082c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ca:	89a3      	ldrhlt	r3, [r4, #12]
 80082cc:	181b      	addge	r3, r3, r0
 80082ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082d2:	bfac      	ite	ge
 80082d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082d6:	81a3      	strhlt	r3, [r4, #12]
 80082d8:	bd10      	pop	{r4, pc}

080082da <__swrite>:
 80082da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	461f      	mov	r7, r3
 80082e0:	898b      	ldrh	r3, [r1, #12]
 80082e2:	05db      	lsls	r3, r3, #23
 80082e4:	4605      	mov	r5, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	4616      	mov	r6, r2
 80082ea:	d505      	bpl.n	80082f8 <__swrite+0x1e>
 80082ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f0:	2302      	movs	r3, #2
 80082f2:	2200      	movs	r2, #0
 80082f4:	f000 f868 	bl	80083c8 <_lseek_r>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830e:	f000 b817 	b.w	8008340 <_write_r>

08008312 <__sseek>:
 8008312:	b510      	push	{r4, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831a:	f000 f855 	bl	80083c8 <_lseek_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	bf15      	itete	ne
 8008324:	6560      	strne	r0, [r4, #84]	; 0x54
 8008326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800832a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800832e:	81a3      	strheq	r3, [r4, #12]
 8008330:	bf18      	it	ne
 8008332:	81a3      	strhne	r3, [r4, #12]
 8008334:	bd10      	pop	{r4, pc}

08008336 <__sclose>:
 8008336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833a:	f000 b813 	b.w	8008364 <_close_r>
	...

08008340 <_write_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d07      	ldr	r5, [pc, #28]	; (8008360 <_write_r+0x20>)
 8008344:	4604      	mov	r4, r0
 8008346:	4608      	mov	r0, r1
 8008348:	4611      	mov	r1, r2
 800834a:	2200      	movs	r2, #0
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f7f9 f9d1 	bl	80016f6 <_write>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_write_r+0x1e>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_write_r+0x1e>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000a38 	.word	0x20000a38

08008364 <_close_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d06      	ldr	r5, [pc, #24]	; (8008380 <_close_r+0x1c>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7f9 f9dd 	bl	800172e <_close>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_close_r+0x1a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_close_r+0x1a>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20000a38 	.word	0x20000a38

08008384 <_fstat_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	; (80083a4 <_fstat_r+0x20>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f7f9 f9d8 	bl	8001746 <_fstat>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d102      	bne.n	80083a0 <_fstat_r+0x1c>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b103      	cbz	r3, 80083a0 <_fstat_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	20000a38 	.word	0x20000a38

080083a8 <_isatty_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	; (80083c4 <_isatty_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f9 f9d7 	bl	8001766 <_isatty>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_isatty_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_isatty_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	20000a38 	.word	0x20000a38

080083c8 <_lseek_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d07      	ldr	r5, [pc, #28]	; (80083e8 <_lseek_r+0x20>)
 80083cc:	4604      	mov	r4, r0
 80083ce:	4608      	mov	r0, r1
 80083d0:	4611      	mov	r1, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7f9 f9d0 	bl	800177c <_lseek>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_lseek_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_lseek_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000a38 	.word	0x20000a38

080083ec <_read_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	; (800840c <_read_r+0x20>)
 80083f0:	4604      	mov	r4, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7f9 f95e 	bl	80016bc <_read>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_read_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_read_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20000a38 	.word	0x20000a38

08008410 <expf>:
 8008410:	b508      	push	{r3, lr}
 8008412:	ed2d 8b02 	vpush	{d8}
 8008416:	eef0 8a40 	vmov.f32	s17, s0
 800841a:	f000 f82f 	bl	800847c <__ieee754_expf>
 800841e:	eeb0 8a40 	vmov.f32	s16, s0
 8008422:	eeb0 0a68 	vmov.f32	s0, s17
 8008426:	f000 f919 	bl	800865c <finitef>
 800842a:	b160      	cbz	r0, 8008446 <expf+0x36>
 800842c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800846c <expf+0x5c>
 8008430:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008438:	dd0a      	ble.n	8008450 <expf+0x40>
 800843a:	f7fd f8d5 	bl	80055e8 <__errno>
 800843e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008470 <expf+0x60>
 8008442:	2322      	movs	r3, #34	; 0x22
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	eeb0 0a48 	vmov.f32	s0, s16
 800844a:	ecbd 8b02 	vpop	{d8}
 800844e:	bd08      	pop	{r3, pc}
 8008450:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008474 <expf+0x64>
 8008454:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845c:	d5f3      	bpl.n	8008446 <expf+0x36>
 800845e:	f7fd f8c3 	bl	80055e8 <__errno>
 8008462:	2322      	movs	r3, #34	; 0x22
 8008464:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008478 <expf+0x68>
 8008468:	6003      	str	r3, [r0, #0]
 800846a:	e7ec      	b.n	8008446 <expf+0x36>
 800846c:	42b17180 	.word	0x42b17180
 8008470:	7f800000 	.word	0x7f800000
 8008474:	c2cff1b5 	.word	0xc2cff1b5
 8008478:	00000000 	.word	0x00000000

0800847c <__ieee754_expf>:
 800847c:	ee10 2a10 	vmov	r2, s0
 8008480:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008484:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008488:	d902      	bls.n	8008490 <__ieee754_expf+0x14>
 800848a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800848e:	4770      	bx	lr
 8008490:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8008494:	d106      	bne.n	80084a4 <__ieee754_expf+0x28>
 8008496:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80085d0 <__ieee754_expf+0x154>
 800849a:	2b00      	cmp	r3, #0
 800849c:	bf18      	it	ne
 800849e:	eeb0 0a67 	vmovne.f32	s0, s15
 80084a2:	4770      	bx	lr
 80084a4:	484b      	ldr	r0, [pc, #300]	; (80085d4 <__ieee754_expf+0x158>)
 80084a6:	4282      	cmp	r2, r0
 80084a8:	dd02      	ble.n	80084b0 <__ieee754_expf+0x34>
 80084aa:	2000      	movs	r0, #0
 80084ac:	f000 b8d0 	b.w	8008650 <__math_oflowf>
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	da05      	bge.n	80084c0 <__ieee754_expf+0x44>
 80084b4:	4a48      	ldr	r2, [pc, #288]	; (80085d8 <__ieee754_expf+0x15c>)
 80084b6:	4291      	cmp	r1, r2
 80084b8:	d902      	bls.n	80084c0 <__ieee754_expf+0x44>
 80084ba:	2000      	movs	r0, #0
 80084bc:	f000 b8c2 	b.w	8008644 <__math_uflowf>
 80084c0:	4a46      	ldr	r2, [pc, #280]	; (80085dc <__ieee754_expf+0x160>)
 80084c2:	4291      	cmp	r1, r2
 80084c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80084c8:	d952      	bls.n	8008570 <__ieee754_expf+0xf4>
 80084ca:	4a45      	ldr	r2, [pc, #276]	; (80085e0 <__ieee754_expf+0x164>)
 80084cc:	4291      	cmp	r1, r2
 80084ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80084d2:	d834      	bhi.n	800853e <__ieee754_expf+0xc2>
 80084d4:	4943      	ldr	r1, [pc, #268]	; (80085e4 <__ieee754_expf+0x168>)
 80084d6:	4411      	add	r1, r2
 80084d8:	ed91 7a00 	vldr	s14, [r1]
 80084dc:	4942      	ldr	r1, [pc, #264]	; (80085e8 <__ieee754_expf+0x16c>)
 80084de:	440a      	add	r2, r1
 80084e0:	edd2 7a00 	vldr	s15, [r2]
 80084e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80084e8:	f1c3 0201 	rsb	r2, r3, #1
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80084f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80084f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80085ec <__ieee754_expf+0x170>
 80084fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80085f0 <__ieee754_expf+0x174>
 80084fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008502:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80085f4 <__ieee754_expf+0x178>
 8008506:	eea6 5a86 	vfma.f32	s10, s13, s12
 800850a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80085f8 <__ieee754_expf+0x17c>
 800850e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008512:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80085fc <__ieee754_expf+0x180>
 8008516:	eea6 5a86 	vfma.f32	s10, s13, s12
 800851a:	eef0 6a40 	vmov.f32	s13, s0
 800851e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008522:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008526:	ee20 5a26 	vmul.f32	s10, s0, s13
 800852a:	bb92      	cbnz	r2, 8008592 <__ieee754_expf+0x116>
 800852c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008530:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008534:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008538:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800853c:	4770      	bx	lr
 800853e:	4b30      	ldr	r3, [pc, #192]	; (8008600 <__ieee754_expf+0x184>)
 8008540:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008604 <__ieee754_expf+0x188>
 8008544:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008608 <__ieee754_expf+0x18c>
 8008548:	4413      	add	r3, r2
 800854a:	edd3 7a00 	vldr	s15, [r3]
 800854e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008552:	eeb0 7a40 	vmov.f32	s14, s0
 8008556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800855a:	ee17 2a90 	vmov	r2, s15
 800855e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008562:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008566:	eddf 6a29 	vldr	s13, [pc, #164]	; 800860c <__ieee754_expf+0x190>
 800856a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800856e:	e7be      	b.n	80084ee <__ieee754_expf+0x72>
 8008570:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8008574:	d20b      	bcs.n	800858e <__ieee754_expf+0x112>
 8008576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008610 <__ieee754_expf+0x194>
 800857a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800857e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008586:	dd02      	ble.n	800858e <__ieee754_expf+0x112>
 8008588:	ee30 0a25 	vadd.f32	s0, s0, s11
 800858c:	4770      	bx	lr
 800858e:	2200      	movs	r2, #0
 8008590:	e7af      	b.n	80084f2 <__ieee754_expf+0x76>
 8008592:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008596:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800859a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800859e:	bfb8      	it	lt
 80085a0:	3264      	addlt	r2, #100	; 0x64
 80085a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085a6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80085aa:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80085ae:	ee17 3a90 	vmov	r3, s15
 80085b2:	bfab      	itete	ge
 80085b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80085b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80085bc:	ee00 3a10 	vmovge	s0, r3
 80085c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8008614 <__ieee754_expf+0x198>
 80085c4:	bfbc      	itt	lt
 80085c6:	ee00 3a10 	vmovlt	s0, r3
 80085ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80085ce:	4770      	bx	lr
 80085d0:	00000000 	.word	0x00000000
 80085d4:	42b17217 	.word	0x42b17217
 80085d8:	42cff1b5 	.word	0x42cff1b5
 80085dc:	3eb17218 	.word	0x3eb17218
 80085e0:	3f851591 	.word	0x3f851591
 80085e4:	08008d34 	.word	0x08008d34
 80085e8:	08008d3c 	.word	0x08008d3c
 80085ec:	3331bb4c 	.word	0x3331bb4c
 80085f0:	b5ddea0e 	.word	0xb5ddea0e
 80085f4:	388ab355 	.word	0x388ab355
 80085f8:	bb360b61 	.word	0xbb360b61
 80085fc:	3e2aaaab 	.word	0x3e2aaaab
 8008600:	08008d2c 	.word	0x08008d2c
 8008604:	3fb8aa3b 	.word	0x3fb8aa3b
 8008608:	3f317180 	.word	0x3f317180
 800860c:	3717f7d1 	.word	0x3717f7d1
 8008610:	7149f2ca 	.word	0x7149f2ca
 8008614:	0d800000 	.word	0x0d800000

08008618 <with_errnof>:
 8008618:	b513      	push	{r0, r1, r4, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008620:	f7fc ffe2 	bl	80055e8 <__errno>
 8008624:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008628:	6004      	str	r4, [r0, #0]
 800862a:	b002      	add	sp, #8
 800862c:	bd10      	pop	{r4, pc}

0800862e <xflowf>:
 800862e:	b130      	cbz	r0, 800863e <xflowf+0x10>
 8008630:	eef1 7a40 	vneg.f32	s15, s0
 8008634:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008638:	2022      	movs	r0, #34	; 0x22
 800863a:	f7ff bfed 	b.w	8008618 <with_errnof>
 800863e:	eef0 7a40 	vmov.f32	s15, s0
 8008642:	e7f7      	b.n	8008634 <xflowf+0x6>

08008644 <__math_uflowf>:
 8008644:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800864c <__math_uflowf+0x8>
 8008648:	f7ff bff1 	b.w	800862e <xflowf>
 800864c:	10000000 	.word	0x10000000

08008650 <__math_oflowf>:
 8008650:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008658 <__math_oflowf+0x8>
 8008654:	f7ff bfeb 	b.w	800862e <xflowf>
 8008658:	70000000 	.word	0x70000000

0800865c <finitef>:
 800865c:	b082      	sub	sp, #8
 800865e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008662:	9801      	ldr	r0, [sp, #4]
 8008664:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008668:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800866c:	bfac      	ite	ge
 800866e:	2000      	movge	r0, #0
 8008670:	2001      	movlt	r0, #1
 8008672:	b002      	add	sp, #8
 8008674:	4770      	bx	lr
	...

08008678 <_init>:
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867a:	bf00      	nop
 800867c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867e:	bc08      	pop	{r3}
 8008680:	469e      	mov	lr, r3
 8008682:	4770      	bx	lr

08008684 <_fini>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	bf00      	nop
 8008688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868a:	bc08      	pop	{r3}
 800868c:	469e      	mov	lr, r3
 800868e:	4770      	bx	lr
