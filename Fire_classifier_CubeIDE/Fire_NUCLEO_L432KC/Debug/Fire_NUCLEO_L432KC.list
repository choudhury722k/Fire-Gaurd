
Fire_NUCLEO_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cac  08008cac  00020890  2**0
                  CONTENTS
  4 .ARM          00000008  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb4  08008cb4  00020890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000890  20000000  08008cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000890  0800954c  00020890  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000a40  0800954c  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ac0  00000000  00000000  000208c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000344b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002373e  00000000  00000000  00035210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f45  00000000  00000000  0005894e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d87bd  00000000  00000000  00069893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00142050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  0014211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000890 	.word	0x20000890
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e0 	.word	0x080085e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000894 	.word	0x20000894
 80001cc:	080085e0 	.word	0x080085e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <main>:
char Stext[] = "AT+CMGF=1";
char Cnum[] = "AT+CMGS=\"+918144109993\"\r";
char Msg[] = "Fire Alert";
char End[] = "26";

int main(void){
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b0c0      	sub	sp, #256	; 0x100
 8000ed4:	af02      	add	r7, sp, #8

  char buf[50];
  int buf_len = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_FIRE_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_FIRE_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle fire_model = AI_HANDLE_NULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_FIRE_IN_NUM] = AI_FIRE_IN;
 8000ee0:	4ba1      	ldr	r3, [pc, #644]	; (8001168 <main+0x298>)
 8000ee2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef0:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_FIRE_OUT_NUM] = AI_FIRE_OUT;
 8000ef4:	4b9d      	ldr	r3, [pc, #628]	; (800116c <main+0x29c>)
 8000ef6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000efa:	461d      	mov	r5, r3
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f04:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f08:	4b99      	ldr	r3, [pc, #612]	; (8001170 <main+0x2a0>)
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	813b      	strh	r3, [r7, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	817b      	strh	r3, [r7, #10]
 8000f14:	2301      	movs	r3, #1
 8000f16:	81bb      	strh	r3, [r7, #12]
 8000f18:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8000f1c:	613b      	str	r3, [r7, #16]
		  AI_FIRE_DATA_WEIGHTS(ai_fire_data_weights_get()),
 8000f1e:	f003 f98f 	bl	8004240 <ai_fire_data_weights_get>
 8000f22:	4603      	mov	r3, r0
  ai_network_params ai_params = {
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	4b92      	ldr	r3, [pc, #584]	; (8001174 <main+0x2a4>)
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	843b      	strh	r3, [r7, #32]
 8000f32:	2301      	movs	r3, #1
 8000f34:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f36:	2301      	movs	r3, #1
 8000f38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f3a:	2334      	movs	r3, #52	; 0x34
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
		  AI_FIRE_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000f4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f52:	65fb      	str	r3, [r7, #92]	; 0x5c
  ai_output[0].n_batches = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	873b      	strh	r3, [r7, #56]	; 0x38
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000f58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fc40 	bl	80017e2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f92b 	bl	80011bc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9f3 	bl	8001350 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6a:	f000 f9c1 	bl	80012f0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000f6e:	f000 f977 	bl	8001260 <MX_CRC_Init>
  MX_TIM16_Init();
 8000f72:	f000 f997 	bl	80012a4 <MX_TIM16_Init>

  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8000f76:	4880      	ldr	r0, [pc, #512]	; (8001178 <main+0x2a8>)
 8000f78:	f002 f9fa 	bl	8003370 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000f7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f80:	497e      	ldr	r1, [pc, #504]	; (800117c <main+0x2ac>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 f886 	bl	8006094 <siprintf>
 8000f88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	4879      	ldr	r0, [pc, #484]	; (8001180 <main+0x2b0>)
 8000f9a:	f002 fae7 	bl	800356c <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_fire_create(&fire_model, AI_FIRE_DATA_CONFIG);
 8000f9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f8e5 	bl	8004174 <ai_fire_create>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (ai_err.type != AI_ERROR_NONE)
 8000fb0:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d011      	beq.n	8000fdc <main+0x10c>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fb8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fbc:	4971      	ldr	r1, [pc, #452]	; (8001184 <main+0x2b4>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 f868 	bl	8006094 <siprintf>
 8000fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	486a      	ldr	r0, [pc, #424]	; (8001180 <main+0x2b0>)
 8000fd6:	f002 fac9 	bl	800356c <HAL_UART_Transmit>
    while(1);
 8000fda:	e7fe      	b.n	8000fda <main+0x10a>
  }

  // Initialize neural network
  if (!ai_fire_init(fire_model, &ai_params))
 8000fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fde:	1d3a      	adds	r2, r7, #4
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 f8dc 	bl	80041a0 <ai_fire_init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d011      	beq.n	8001018 <main+0x148>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000ff4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ff8:	4963      	ldr	r1, [pc, #396]	; (8001188 <main+0x2b8>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 f84a 	bl	8006094 <siprintf>
 8001000:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001008:	b29a      	uxth	r2, r3
 800100a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	485b      	ldr	r0, [pc, #364]	; (8001180 <main+0x2b0>)
 8001012:	f002 faab 	bl	800356c <HAL_UART_Transmit>
    while(1);
 8001016:	e7fe      	b.n	8001016 <main+0x146>
//	  Room
//	  ((ai_float *)in_data)[0] = 0.34;
//	  ((ai_float *)in_data)[1] = 0.32;
//	  ((ai_float *)in_data)[2] = 0.32;
//	  Fire
	  ((ai_float *)in_data)[0] = 0.54;
 8001018:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800101c:	4a5b      	ldr	r2, [pc, #364]	; (800118c <main+0x2bc>)
 800101e:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[1] = 0.28;
 8001020:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001024:	3304      	adds	r3, #4
 8001026:	4a5a      	ldr	r2, [pc, #360]	; (8001190 <main+0x2c0>)
 8001028:	601a      	str	r2, [r3, #0]
	  ((ai_float *)in_data)[2] = 0.18;
 800102a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800102e:	3308      	adds	r3, #8
 8001030:	4a58      	ldr	r2, [pc, #352]	; (8001194 <main+0x2c4>)
 8001032:	601a      	str	r2, [r3, #0]


	  // Get current timestamp
	  timestamp = htim16.Instance->CNT;
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <main+0x2a8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	  // Perform inference
	  nbatch = ai_fire_run(fire_model, &ai_input[0], &ai_output[0]);
 800103e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001040:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001044:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f8e8 	bl	800421e <ai_fire_run>
 800104e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	  if (nbatch != 1) {
 8001052:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001056:	2b01      	cmp	r3, #1
 8001058:	d010      	beq.n	800107c <main+0x1ac>
		buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800105a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800105e:	494e      	ldr	r1, [pc, #312]	; (8001198 <main+0x2c8>)
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f817 	bl	8006094 <siprintf>
 8001066:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800106a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	4842      	ldr	r0, [pc, #264]	; (8001180 <main+0x2b0>)
 8001078:	f002 fa78 	bl	800356c <HAL_UART_Transmit>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 800107c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf,
 8001086:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800108a:	f7ff fa6d 	bl	8000568 <__aeabi_f2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
						"Output: %f | Duration: %lu\r\n",
						y_val,
						htim16.Instance->CNT - timestamp);
 8001092:	4939      	ldr	r1, [pc, #228]	; (8001178 <main+0x2a8>)
 8001094:	6809      	ldr	r1, [r1, #0]
 8001096:	6a48      	ldr	r0, [r1, #36]	; 0x24
	  buf_len = sprintf(buf,
 8001098:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800109c:	1a41      	subs	r1, r0, r1
 800109e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80010a2:	9100      	str	r1, [sp, #0]
 80010a4:	493d      	ldr	r1, [pc, #244]	; (800119c <main+0x2cc>)
 80010a6:	f004 fff5 	bl	8006094 <siprintf>
 80010aa:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	4831      	ldr	r0, [pc, #196]	; (8001180 <main+0x2b0>)
 80010bc:	f002 fa56 	bl	800356c <HAL_UART_Transmit>

	  if(y_val > 0.9){
 80010c0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80010c4:	f7ff fa50 	bl	8000568 <__aeabi_f2d>
 80010c8:	a325      	add	r3, pc, #148	; (adr r3, 8001160 <main+0x290>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fd33 	bl	8000b38 <__aeabi_dcmpgt>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d03e      	beq.n	8001156 <main+0x286>
		  HAL_UART_Transmit(&huart2, (uint8_t *)Test, 2, 10);
 80010d8:	230a      	movs	r3, #10
 80010da:	2202      	movs	r2, #2
 80010dc:	4930      	ldr	r1, [pc, #192]	; (80011a0 <main+0x2d0>)
 80010de:	4828      	ldr	r0, [pc, #160]	; (8001180 <main+0x2b0>)
 80010e0:	f002 fa44 	bl	800356c <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart2, (uint8_t *)Reply, 2, 10);
 80010e4:	230a      	movs	r3, #10
 80010e6:	2202      	movs	r2, #2
 80010e8:	492e      	ldr	r1, [pc, #184]	; (80011a4 <main+0x2d4>)
 80010ea:	4825      	ldr	r0, [pc, #148]	; (8001180 <main+0x2b0>)
 80010ec:	f002 fad2 	bl	8003694 <HAL_UART_Receive>
		  if (strcmp(Reply, "OK")){
 80010f0:	492d      	ldr	r1, [pc, #180]	; (80011a8 <main+0x2d8>)
 80010f2:	482c      	ldr	r0, [pc, #176]	; (80011a4 <main+0x2d4>)
 80010f4:	f7ff f86c 	bl	80001d0 <strcmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d02b      	beq.n	8001156 <main+0x286>
			  HAL_UART_Transmit(&huart2, (uint8_t *)Stext, strlen(Stext), 10);
 80010fe:	482b      	ldr	r0, [pc, #172]	; (80011ac <main+0x2dc>)
 8001100:	f7ff f870 	bl	80001e4 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	230a      	movs	r3, #10
 800110a:	4928      	ldr	r1, [pc, #160]	; (80011ac <main+0x2dc>)
 800110c:	481c      	ldr	r0, [pc, #112]	; (8001180 <main+0x2b0>)
 800110e:	f002 fa2d 	bl	800356c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)Cnum, strlen(Cnum), 10);
 8001112:	4827      	ldr	r0, [pc, #156]	; (80011b0 <main+0x2e0>)
 8001114:	f7ff f866 	bl	80001e4 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	230a      	movs	r3, #10
 800111e:	4924      	ldr	r1, [pc, #144]	; (80011b0 <main+0x2e0>)
 8001120:	4817      	ldr	r0, [pc, #92]	; (8001180 <main+0x2b0>)
 8001122:	f002 fa23 	bl	800356c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)Msg, strlen(Msg), 10);
 8001126:	4823      	ldr	r0, [pc, #140]	; (80011b4 <main+0x2e4>)
 8001128:	f7ff f85c 	bl	80001e4 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	230a      	movs	r3, #10
 8001132:	4920      	ldr	r1, [pc, #128]	; (80011b4 <main+0x2e4>)
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <main+0x2b0>)
 8001136:	f002 fa19 	bl	800356c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)End, strlen(End), 10);
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <main+0x2e8>)
 800113c:	f7ff f852 	bl	80001e4 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	230a      	movs	r3, #10
 8001146:	491c      	ldr	r1, [pc, #112]	; (80011b8 <main+0x2e8>)
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <main+0x2b0>)
 800114a:	f002 fa0f 	bl	800356c <HAL_UART_Transmit>
			  HAL_Delay(1000);
 800114e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001152:	f000 fbbb 	bl	80018cc <HAL_Delay>




	  // Wait before doing it again
	  HAL_Delay(500);
 8001156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115a:	f000 fbb7 	bl	80018cc <HAL_Delay>
	  ((ai_float *)in_data)[0] = 0.54;
 800115e:	e75b      	b.n	8001018 <main+0x148>
 8001160:	cccccccd 	.word	0xcccccccd
 8001164:	3feccccc 	.word	0x3feccccc
 8001168:	080086a8 	.word	0x080086a8
 800116c:	080086c0 	.word	0x080086c0
 8001170:	40040440 	.word	0x40040440
 8001174:	00040440 	.word	0x00040440
 8001178:	200008d0 	.word	0x200008d0
 800117c:	080085f8 	.word	0x080085f8
 8001180:	2000091c 	.word	0x2000091c
 8001184:	08008614 	.word	0x08008614
 8001188:	0800863c 	.word	0x0800863c
 800118c:	3f0a3d71 	.word	0x3f0a3d71
 8001190:	3e8f5c29 	.word	0x3e8f5c29
 8001194:	3e3851ec 	.word	0x3e3851ec
 8001198:	08008660 	.word	0x08008660
 800119c:	08008684 	.word	0x08008684
 80011a0:	20000000 	.word	0x20000000
 80011a4:	200009a0 	.word	0x200009a0
 80011a8:	080086a4 	.word	0x080086a4
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000010 	.word	0x20000010
 80011b4:	2000002c 	.word	0x2000002c
 80011b8:	20000038 	.word	0x20000038

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2244      	movs	r2, #68	; 0x44
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fa00 	bl	80055d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011e2:	f000 fef7 	bl	8001fd4 <HAL_PWREx_ControlVoltageScaling>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011ec:	f000 f8fa 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fa:	2310      	movs	r3, #16
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800120a:	230a      	movs	r3, #10
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800120e:	2307      	movs	r3, #7
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4618      	mov	r0, r3
 8001220:	f000 ff2e 	bl	8002080 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800122a:	f000 f8db 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2303      	movs	r3, #3
 8001234:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	2104      	movs	r1, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fb2e 	bl	80028a8 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001252:	f000 f8c7 	bl	80013e4 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3758      	adds	r7, #88	; 0x58
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_CRC_Init+0x3c>)
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <MX_CRC_Init+0x40>)
 8001268:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_CRC_Init+0x3c>)
 800126c:	2200      	movs	r2, #0
 800126e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_CRC_Init+0x3c>)
 8001272:	2200      	movs	r2, #0
 8001274:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_CRC_Init+0x3c>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_CRC_Init+0x3c>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_CRC_Init+0x3c>)
 8001284:	2201      	movs	r2, #1
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_CRC_Init+0x3c>)
 800128a:	f000 fc29 	bl	8001ae0 <HAL_CRC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001294:	f000 f8a6 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200008ac 	.word	0x200008ac
 80012a0:	40023000 	.word	0x40023000

080012a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <MX_TIM16_Init+0x48>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012b0:	224f      	movs	r2, #79	; 0x4f
 80012b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_TIM16_Init+0x44>)
 80012d6:	f001 fff3 	bl	80032c0 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80012e0:	f000 f880 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200008d0 	.word	0x200008d0
 80012ec:	40014400 	.word	0x40014400

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_USART2_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <MX_USART2_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_USART2_UART_Init+0x58>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART2_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_USART2_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART2_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART2_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART2_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART2_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART2_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART2_UART_Init+0x58>)
 8001334:	f002 f8cc 	bl	80034d0 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 f851 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000091c 	.word	0x2000091c
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_GPIO_Init+0x8c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_GPIO_Init+0x8c>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_GPIO_Init+0x8c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_GPIO_Init+0x8c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <MX_GPIO_Init+0x8c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_GPIO_Init+0x8c>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_GPIO_Init+0x8c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <MX_GPIO_Init+0x8c>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_GPIO_Init+0x8c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2108      	movs	r1, #8
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <MX_GPIO_Init+0x90>)
 80013b4:	f000 fde8 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013b8:	2308      	movs	r3, #8
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_GPIO_Init+0x90>)
 80013d0:	f000 fc70 	bl	8001cb4 <HAL_GPIO_Init>

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x44>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x44>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6613      	str	r3, [r2, #96]	; 0x60
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x44>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x44>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x44>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6593      	str	r3, [r2, #88]	; 0x58
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x44>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_CRC_MspInit+0x38>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10b      	bne.n	8001462 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_CRC_MspInit+0x3c>)
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_CRC_MspInit+0x3c>)
 8001450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001454:	6493      	str	r3, [r2, #72]	; 0x48
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_CRC_MspInit+0x3c>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023000 	.word	0x40023000
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_TIM_Base_MspInit+0x38>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10b      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_TIM_Base_MspInit+0x3c>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40014400 	.word	0x40014400
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09e      	sub	sp, #120	; 0x78
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2254      	movs	r2, #84	; 0x54
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 f879 	bl	80055d0 <memset>
  if(huart->Instance==USART2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_UART_MspInit+0xcc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d148      	bne.n	800157a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fbfb 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001500:	f7ff ff70 	bl	80013e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_UART_MspInit+0xd0>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_UART_MspInit+0xd0>)
 800150a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150e:	6593      	str	r3, [r2, #88]	; 0x58
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_UART_MspInit+0xd0>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_UART_MspInit+0xd0>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_MspInit+0xd0>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_UART_MspInit+0xd0>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001534:	2304      	movs	r3, #4
 8001536:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001544:	2307      	movs	r3, #7
 8001546:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f000 fbaf 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800155a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001568:	2303      	movs	r3, #3
 800156a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f000 fb9d 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3778      	adds	r7, #120	; 0x78
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40021000 	.word	0x40021000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f958 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015fa:	f003 ffa9 	bl	8005550 <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
	return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001622:	e7fe      	b.n	8001622 <_exit+0x12>

08001624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e00a      	b.n	800164c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001636:	f3af 8000 	nop.w
 800163a:	4601      	mov	r1, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf0      	blt.n	8001636 <_read+0x12>
	}

return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x12>
	}
	return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_close>:

int _close(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	return -1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	605a      	str	r2, [r3, #4]
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_isatty>:

int _isatty(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f003 ff0e 	bl	8005550 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20010000 	.word	0x20010000
 8001760:	00000800 	.word	0x00000800
 8001764:	200009a4 	.word	0x200009a4
 8001768:	20000a40 	.word	0x20000a40

0800176c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f003 fecd 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fb85 	bl	8000ed0 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000890 	.word	0x20000890
  ldr r2, =_sidata
 80017d4:	08008cbc 	.word	0x08008cbc
  ldr r2, =_sbss
 80017d8:	20000890 	.word	0x20000890
  ldr r4, =_ebss
 80017dc:	20000a40 	.word	0x20000a40

080017e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_IRQHandler>

080017e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f943 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f80e 	bl	8001814 <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	e001      	b.n	8001808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001804:	f7ff fdf4 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001808:	79fb      	ldrb	r3, [r7, #7]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_InitTick+0x6c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_InitTick+0x70>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_InitTick+0x6c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f941 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d809      	bhi.n	8001864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f919 	bl	8001a8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_InitTick+0x74>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e007      	b.n	8001874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e004      	b.n	8001874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e001      	b.n	8001874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000044 	.word	0x20000044
 8001884:	2000003c 	.word	0x2000003c
 8001888:	20000040 	.word	0x20000040

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000044 	.word	0x20000044
 80018b0:	200009a8 	.word	0x200009a8

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200009a8 	.word	0x200009a8

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000044 	.word	0x20000044

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff47 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff5c 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff8e 	bl	80019cc <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5d 	bl	8001978 <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffb0 	bl	8001a34 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e054      	b.n	8001b9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7f5b      	ldrb	r3, [r3, #29]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fc98 	bl	8001438 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	791b      	ldrb	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_CRC_Init+0xc4>)
 8001b1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0218 	bic.w	r2, r2, #24
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	e00c      	b.n	8001b4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6899      	ldr	r1, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f834 	bl	8001ba8 <HAL_CRCEx_Polynomial_Set>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e028      	b.n	8001b9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	795b      	ldrb	r3, [r3, #5]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	e004      	b.n	8001b68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6912      	ldr	r2, [r2, #16]
 8001b66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	04c11db7 	.word	0x04c11db7

08001ba8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001bb8:	231f      	movs	r3, #31
 8001bba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001bbc:	bf00      	nop
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	613a      	str	r2, [r7, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_CRCEx_Polynomial_Set+0x34>
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b18      	cmp	r3, #24
 8001be0:	d846      	bhi.n	8001c70 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c77 	.word	0x08001c77
 8001bec:	08001c71 	.word	0x08001c71
 8001bf0:	08001c71 	.word	0x08001c71
 8001bf4:	08001c71 	.word	0x08001c71
 8001bf8:	08001c71 	.word	0x08001c71
 8001bfc:	08001c71 	.word	0x08001c71
 8001c00:	08001c71 	.word	0x08001c71
 8001c04:	08001c71 	.word	0x08001c71
 8001c08:	08001c65 	.word	0x08001c65
 8001c0c:	08001c71 	.word	0x08001c71
 8001c10:	08001c71 	.word	0x08001c71
 8001c14:	08001c71 	.word	0x08001c71
 8001c18:	08001c71 	.word	0x08001c71
 8001c1c:	08001c71 	.word	0x08001c71
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001c71 	.word	0x08001c71
 8001c28:	08001c59 	.word	0x08001c59
 8001c2c:	08001c71 	.word	0x08001c71
 8001c30:	08001c71 	.word	0x08001c71
 8001c34:	08001c71 	.word	0x08001c71
 8001c38:	08001c71 	.word	0x08001c71
 8001c3c:	08001c71 	.word	0x08001c71
 8001c40:	08001c71 	.word	0x08001c71
 8001c44:	08001c71 	.word	0x08001c71
 8001c48:	08001c4d 	.word	0x08001c4d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d913      	bls.n	8001c7a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c56:	e010      	b.n	8001c7a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b07      	cmp	r3, #7
 8001c5c:	d90f      	bls.n	8001c7e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c62:	e00c      	b.n	8001c7e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	d90b      	bls.n	8001c82 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001c6e:	e008      	b.n	8001c82 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
      break;
 8001c74:	e006      	b.n	8001c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c76:	bf00      	nop
 8001c78:	e004      	b.n	8001c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e002      	b.n	8001c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001c82:	bf00      	nop
  }
  if (status == HAL_OK)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 0118 	bic.w	r1, r3, #24
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	e148      	b.n	8001f56 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 813a 	beq.w	8001f50 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d005      	beq.n	8001cf4 <HAL_GPIO_Init+0x40>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d130      	bne.n	8001d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0201 	and.w	r2, r3, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d017      	beq.n	8001d92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d123      	bne.n	8001de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0203 	and.w	r2, r3, #3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8094 	beq.w	8001f50 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e28:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2c:	4a51      	ldr	r2, [pc, #324]	; (8001f74 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6613      	str	r3, [r2, #96]	; 0x60
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x2c0>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e40:	4a4d      	ldr	r2, [pc, #308]	; (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e6a:	d00d      	beq.n	8001e88 <HAL_GPIO_Init+0x1d4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a43      	ldr	r2, [pc, #268]	; (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d007      	beq.n	8001e84 <HAL_GPIO_Init+0x1d0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a42      	ldr	r2, [pc, #264]	; (8001f80 <HAL_GPIO_Init+0x2cc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_GPIO_Init+0x1cc>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e004      	b.n	8001e8a <HAL_GPIO_Init+0x1d6>
 8001e80:	2307      	movs	r3, #7
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x1d6>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_GPIO_Init+0x1d6>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	f002 0203 	and.w	r2, r2, #3
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	4093      	lsls	r3, r2
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e9a:	4937      	ldr	r1, [pc, #220]	; (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f47f aeaf 	bne.w	8001cc4 <HAL_GPIO_Init+0x10>
  }
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	48000800 	.word	0x48000800
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe2:	d130      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d038      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9b      	lsrs	r3, r3, #18
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002018:	e002      	b.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3b01      	subs	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d102      	bne.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x60>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f2      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002040:	d110      	bne.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e00f      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d007      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000
 8002078:	2000003c 	.word	0x2000003c
 800207c:	431bde83 	.word	0x431bde83

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f000 bc02 	b.w	8002898 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002094:	4b96      	ldr	r3, [pc, #600]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209e:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80e4 	beq.w	800227e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_RCC_OscConfig+0x4c>
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	f040 808b 	bne.w	80021da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 8087 	bne.w	80021da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x64>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e3d9      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_RCC_OscConfig+0x7e>
 80020f4:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fc:	e005      	b.n	800210a <HAL_RCC_OscConfig+0x8a>
 80020fe:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800210a:	4293      	cmp	r3, r2
 800210c:	d223      	bcs.n	8002156 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fd8c 	bl	8002c30 <RCC_SetFlashLatencyFromMSIRange>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e3ba      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	496d      	ldr	r1, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002140:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4968      	ldr	r1, [pc, #416]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e025      	b.n	80021a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002156:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4960      	ldr	r1, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002174:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	495b      	ldr	r1, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fd4c 	bl	8002c30 <RCC_SetFlashLatencyFromMSIRange>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e37a      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a2:	f000 fc81 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4950      	ldr	r1, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x274>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x278>)
 80021c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021c2:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <HAL_RCC_OscConfig+0x27c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fb24 	bl	8001814 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d052      	beq.n	800227c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	e35e      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d032      	beq.n	8002248 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fb61 	bl	80018b4 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f6:	f7ff fb5d 	bl	80018b4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e347      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a35      	ldr	r2, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	492b      	ldr	r1, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
 8002246:	e01a      	b.n	800227e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002254:	f7ff fb2e 	bl	80018b4 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225c:	f7ff fb2a 	bl	80018b4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e314      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1dc>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d073      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x21c>
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d10e      	bne.n	80022b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d063      	beq.n	8002370 <HAL_RCC_OscConfig+0x2f0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d15f      	bne.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e2f1      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x24c>
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d114      	bne.n	8002300 <HAL_RCC_OscConfig+0x280>
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	080086dc 	.word	0x080086dc
 80022f8:	2000003c 	.word	0x2000003c
 80022fc:	20000040 	.word	0x20000040
 8002300:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9f      	ldr	r2, [pc, #636]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b9d      	ldr	r3, [pc, #628]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a9c      	ldr	r2, [pc, #624]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fac8 	bl	80018b4 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fac4 	bl	80018b4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e2ae      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x2a8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fab4 	bl	80018b4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fab0 	bl	80018b4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e29a      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x2d0>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d060      	beq.n	8002440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x310>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d119      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x328>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e277      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4973      	ldr	r1, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	e040      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d023      	beq.n	800240e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c6:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7ff fa6f 	bl	80018b4 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023da:	f7ff fa6b 	bl	80018b4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e255      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	495f      	ldr	r1, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5c      	ldr	r2, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff fa4b 	bl	80018b4 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fa47 	bl	80018b4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e231      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d03c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff fa26 	bl	80018b4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fa22 	bl	80018b4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e20c      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCC_OscConfig+0x3ec>
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff fa09 	bl	80018b4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fa05 	bl	80018b4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1ef      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80a6 	beq.w	8002620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d118      	bne.n	800253e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002518:	f7ff f9cc 	bl	80018b4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7ff f9c8 	bl	80018b4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1b2      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x4d8>
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002556:	e029      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x50c>
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	4b9a      	ldr	r3, [pc, #616]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a99      	ldr	r2, [pc, #612]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259c:	4b96      	ldr	r3, [pc, #600]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	4a95      	ldr	r2, [pc, #596]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff f97e 	bl	80018b4 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff f97a 	bl	80018b4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e162      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ed      	beq.n	80025bc <HAL_RCC_OscConfig+0x53c>
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff f967 	bl	80018b4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7ff f963 	bl	80018b4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e14b      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002600:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ed      	bne.n	80025ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a77      	ldr	r2, [pc, #476]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d03c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01c      	beq.n	800266e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002634:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800263a:	4a6f      	ldr	r2, [pc, #444]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7ff f936 	bl	80018b4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264c:	f7ff f932 	bl	80018b4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e11c      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800265e:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCC_OscConfig+0x5cc>
 800266c:	e01b      	b.n	80026a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800266e:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002674:	4a60      	ldr	r2, [pc, #384]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7ff f919 	bl	80018b4 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002686:	f7ff f915 	bl	80018b4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0ff      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 800269a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ef      	bne.n	8002686 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80f3 	beq.w	8002896 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 80c9 	bne.w	800284c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0203 	and.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d12c      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	3b01      	subs	r3, #1
 80026da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d123      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11b      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d113      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d109      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d06b      	beq.n	8002800 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d062      	beq.n	80027f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0ac      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002748:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800274a:	f7ff f8b3 	bl	80018b4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7ff f8af 	bl	80018b4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e099      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_RCC_OscConfig+0x77c>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002780:	3a01      	subs	r2, #1
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800278a:	0212      	lsls	r2, r2, #8
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002792:	0852      	lsrs	r2, r2, #1
 8002794:	3a01      	subs	r2, #1
 8002796:	0552      	lsls	r2, r2, #21
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0652      	lsls	r2, r2, #25
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027aa:	06d2      	lsls	r2, r2, #27
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4912      	ldr	r1, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027cc:	f7ff f872 	bl	80018b4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f86e 	bl	80018b4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e058      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_OscConfig+0x778>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f2:	e050      	b.n	8002896 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04f      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d144      	bne.n	8002896 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002824:	f7ff f846 	bl	80018b4 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7ff f842 	bl	80018b4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e02c      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x7ac>
 800284a:	e024      	b.n	8002896 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d01f      	beq.n	8002892 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 8002858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff f829 	bl	80018b4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7ff f825 	bl	80018b4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e00f      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4905      	ldr	r1, [pc, #20]	; (80028a0 <HAL_RCC_OscConfig+0x820>)
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_OscConfig+0x824>)
 800288c:	4013      	ands	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
 8002890:	e001      	b.n	8002896 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	feeefffc 	.word	0xfeeefffc

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0e7      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	4970      	ldr	r1, [pc, #448]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0cf      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d010      	beq.n	800291a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	429a      	cmp	r2, r3
 8002906:	d908      	bls.n	800291a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4960      	ldr	r1, [pc, #384]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d04c      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292e:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d121      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0a6      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e09a      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295e:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e08e      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e086      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4943      	ldr	r1, [pc, #268]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe ff90 	bl	80018b4 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe ff8c 	bl	80018b4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e06e      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d010      	beq.n	80029ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d8:	429a      	cmp	r2, r3
 80029da:	d208      	bcs.n	80029ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	492b      	ldr	r1, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d210      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 0207 	bic.w	r2, r3, #7
 8002a04:	4923      	ldr	r1, [pc, #140]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e036      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4918      	ldr	r1, [pc, #96]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4910      	ldr	r1, [pc, #64]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a5c:	f000 f824 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	490b      	ldr	r1, [pc, #44]	; (8002a9c <HAL_RCC_ClockConfig+0x1f4>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fec7 	bl	8001814 <HAL_InitTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	080086dc 	.word	0x080086dc
 8002aa0:	2000003c 	.word	0x2000003c
 8002aa4:	20000040 	.word	0x20000040

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d11e      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d134      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d003      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0xac>
 8002b4c:	e005      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b50:	617b      	str	r3, [r7, #20]
      break;
 8002b52:	e005      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b56:	617b      	str	r3, [r7, #20]
      break;
 8002b58:	e002      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	617b      	str	r3, [r7, #20]
      break;
 8002b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	0e5b      	lsrs	r3, r3, #25
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	3301      	adds	r3, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	080086f4 	.word	0x080086f4
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	007a1200 	.word	0x007a1200

08002bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000003c 	.word	0x2000003c

08002bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bdc:	f7ff fff0 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4904      	ldr	r1, [pc, #16]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	080086ec 	.word	0x080086ec

08002c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c08:	f7ff ffda 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0adb      	lsrs	r3, r3, #11
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4904      	ldr	r1, [pc, #16]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	080086ec 	.word	0x080086ec

08002c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f9b6 	bl	8001fb8 <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
 8002c4e:	e014      	b.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c68:	f7ff f9a6 	bl	8001fb8 <HAL_PWREx_GetVoltageRange>
 8002c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c80:	d10b      	bne.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d919      	bls.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c8c:	d902      	bls.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8e:	2302      	movs	r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e013      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	e010      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d902      	bls.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e00a      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d102      	bne.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cac:	2302      	movs	r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e004      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d101      	bne.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 0207 	bic.w	r2, r3, #7
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40022000 	.word	0x40022000

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d031      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d14:	d01a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d1a:	d814      	bhi.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4a5c      	ldr	r2, [pc, #368]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d32:	e00c      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f9ce 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d44:	e003      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	74fb      	strb	r3, [r7, #19]
      break;
 8002d4a:	e000      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d54:	4b51      	ldr	r3, [pc, #324]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	494e      	ldr	r1, [pc, #312]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d6a:	e001      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 809e 	beq.w	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a39      	ldr	r2, [pc, #228]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fd78 	bl	80018b4 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc6:	e009      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7fe fd74 	bl	80018b4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d902      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dda:	e005      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ef      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d15a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01e      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d019      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e36:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d016      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fd34 	bl	80018b4 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe fd30 	bl	80018b4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d902      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	74fb      	strb	r3, [r7, #19]
            break;
 8002e66:	e006      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0ec      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e92:	e009      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
 8002e98:	e006      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea8:	7c7b      	ldrb	r3, [r7, #17]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec6:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f023 0203 	bic.w	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4980      	ldr	r1, [pc, #512]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 020c 	bic.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	4978      	ldr	r1, [pc, #480]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	496f      	ldr	r1, [pc, #444]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	4967      	ldr	r1, [pc, #412]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	495e      	ldr	r1, [pc, #376]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	4956      	ldr	r1, [pc, #344]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d028      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb4:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4945      	ldr	r1, [pc, #276]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd4:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fde:	60d3      	str	r3, [r2, #12]
 8002fe0:	e011      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fea:	d10c      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f872 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d028      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	492d      	ldr	r1, [pc, #180]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003030:	d106      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800303c:	60d3      	str	r3, [r2, #12]
 800303e:	e011      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f843 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d10c      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f820 	bl	80030dc <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	4904      	ldr	r1, [pc, #16]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000

080030dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ea:	4b74      	ldr	r3, [pc, #464]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030f6:	4b71      	ldr	r3, [pc, #452]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
       ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800310e:	4b6b      	ldr	r3, [pc, #428]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
       ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d047      	beq.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e044      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d018      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x86>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCCEx_PLLSAI1_Config+0xa4>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x62>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d009      	beq.n	8003150 <RCCEx_PLLSAI1_Config+0x74>
 800313c:	e020      	b.n	8003180 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e01a      	b.n	8003186 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003150:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e013      	b.n	800318a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	4b53      	ldr	r3, [pc, #332]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317e:	e006      	b.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003196:	4b49      	ldr	r3, [pc, #292]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4943      	ldr	r1, [pc, #268]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d17c      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fe fb76 	bl	80018b4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031cc:	f7fe fb72 	bl	80018b4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
        break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ef      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d15f      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d110      	bne.n	800321a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	06d2      	lsls	r2, r2, #27
 8003210:	430a      	orrs	r2, r1
 8003212:	492a      	ldr	r1, [pc, #168]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	610b      	str	r3, [r1, #16]
 8003218:	e027      	b.n	800326a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d112      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003228:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6892      	ldr	r2, [r2, #8]
 8003230:	0211      	lsls	r1, r2, #8
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6912      	ldr	r2, [r2, #16]
 8003236:	0852      	lsrs	r2, r2, #1
 8003238:	3a01      	subs	r2, #1
 800323a:	0552      	lsls	r2, r2, #21
 800323c:	430a      	orrs	r2, r1
 800323e:	491f      	ldr	r1, [pc, #124]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	610b      	str	r3, [r1, #16]
 8003244:	e011      	b.n	800326a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003246:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800324e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	0211      	lsls	r1, r2, #8
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6952      	ldr	r2, [r2, #20]
 800325c:	0852      	lsrs	r2, r2, #1
 800325e:	3a01      	subs	r2, #1
 8003260:	0652      	lsls	r2, r2, #25
 8003262:	430a      	orrs	r2, r1
 8003264:	4915      	ldr	r1, [pc, #84]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003274:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fb1d 	bl	80018b4 <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800327c:	e009      	b.n	8003292 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327e:	f7fe fb19 	bl	80018b4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d902      	bls.n	8003292 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	73fb      	strb	r3, [r7, #15]
          break;
 8003290:	e005      	b.n	800329e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ef      	beq.n	800327e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e049      	b.n	8003366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe f8c6 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 f882 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e033      	b.n	80033f0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_TIM_Base_Start+0x8c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_TIM_Base_Start+0x3e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a2:	d004      	beq.n	80033ae <HAL_TIM_Base_Start+0x3e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <HAL_TIM_Base_Start+0x90>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d115      	bne.n	80033da <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_TIM_Base_Start+0x94>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d015      	beq.n	80033ec <HAL_TIM_Base_Start+0x7c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d011      	beq.n	80033ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	e008      	b.n	80033ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e000      	b.n	80033ee <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40014000 	.word	0x40014000
 8003404:	00010007 	.word	0x00010007

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2a      	ldr	r2, [pc, #168]	; (80034c4 <TIM_Base_SetConfig+0xbc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0x20>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d108      	bne.n	800343a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <TIM_Base_SetConfig+0xbc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_Base_SetConfig+0x52>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003448:	d007      	beq.n	800345a <TIM_Base_SetConfig+0x52>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <TIM_Base_SetConfig+0xc0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_Base_SetConfig+0x52>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <TIM_Base_SetConfig+0xc4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <TIM_Base_SetConfig+0xbc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_Base_SetConfig+0xa0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <TIM_Base_SetConfig+0xc0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0xa0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <TIM_Base_SetConfig+0xc4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40014400 	.word	0x40014400

080034d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e040      	b.n	8003564 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd ffe0 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f992 	bl	8003838 <UART_SetConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fbb2 	bl	8003c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fc39 	bl	8003dd4 <UART_CheckIdleState>
 8003562:	4603      	mov	r3, r0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003580:	2b20      	cmp	r3, #32
 8003582:	f040 8082 	bne.w	800368a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_UART_Transmit+0x26>
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07a      	b.n	800368c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_UART_Transmit+0x38>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e073      	b.n	800368c <HAL_UART_Transmit+0x120>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2221      	movs	r2, #33	; 0x21
 80035b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ba:	f7fe f97b 	bl	80018b4 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d108      	bne.n	80035ec <HAL_UART_Transmit+0x80>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e003      	b.n	80035f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80035fc:	e02d      	b.n	800365a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fc2c 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e039      	b.n	800368c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362a:	b292      	uxth	r2, r2
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3302      	adds	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e008      	b.n	8003648 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b292      	uxth	r2, r2
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3301      	adds	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1cb      	bne.n	80035fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2140      	movs	r1, #64	; 0x40
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fbf8 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e005      	b.n	800368c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	f040 80bf 	bne.w	800382c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_UART_Receive+0x26>
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0b7      	b.n	800382e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Receive+0x38>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0b0      	b.n	800382e <HAL_UART_Receive+0x19a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2222      	movs	r2, #34	; 0x22
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e8:	f7fe f8e4 	bl	80018b4 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	d10e      	bne.n	8003726 <HAL_UART_Receive+0x92>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_UART_Receive+0x88>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800371a:	e02d      	b.n	8003778 <HAL_UART_Receive+0xe4>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	22ff      	movs	r2, #255	; 0xff
 8003720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003724:	e028      	b.n	8003778 <HAL_UART_Receive+0xe4>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_UART_Receive+0xb6>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Receive+0xac>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373e:	e01b      	b.n	8003778 <HAL_UART_Receive+0xe4>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	227f      	movs	r2, #127	; 0x7f
 8003744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003748:	e016      	b.n	8003778 <HAL_UART_Receive+0xe4>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003752:	d10d      	bne.n	8003770 <HAL_UART_Receive+0xdc>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <HAL_UART_Receive+0xd2>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	227f      	movs	r2, #127	; 0x7f
 8003760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003764:	e008      	b.n	8003778 <HAL_UART_Receive+0xe4>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	223f      	movs	r2, #63	; 0x3f
 800376a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800376e:	e003      	b.n	8003778 <HAL_UART_Receive+0xe4>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800377e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Receive+0x108>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80037ac:	e033      	b.n	8003816 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2120      	movs	r1, #32
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fb54 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e032      	b.n	800382e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	8a7b      	ldrh	r3, [r7, #18]
 80037d8:	4013      	ands	r3, r2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	3302      	adds	r3, #2
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e00d      	b.n	8003804 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	8a7b      	ldrh	r3, [r7, #18]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4013      	ands	r3, r2
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1c5      	bne.n	80037ae <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b08a      	sub	sp, #40	; 0x28
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	4313      	orrs	r3, r2
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4bb4      	ldr	r3, [pc, #720]	; (8003b38 <UART_SetConfig+0x300>)
 8003868:	4013      	ands	r3, r2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003870:	430b      	orrs	r3, r1
 8003872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4aa9      	ldr	r2, [pc, #676]	; (8003b3c <UART_SetConfig+0x304>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	4313      	orrs	r3, r2
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4aa0      	ldr	r2, [pc, #640]	; (8003b40 <UART_SetConfig+0x308>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d126      	bne.n	8003910 <UART_SetConfig+0xd8>
 80038c2:	4ba0      	ldr	r3, [pc, #640]	; (8003b44 <UART_SetConfig+0x30c>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d81b      	bhi.n	8003908 <UART_SetConfig+0xd0>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <UART_SetConfig+0xa0>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	080038f1 	.word	0x080038f1
 80038e4:	08003901 	.word	0x08003901
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ee:	e080      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80038f0:	2302      	movs	r3, #2
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e07c      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80038f8:	2304      	movs	r3, #4
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e078      	b.n	80039f2 <UART_SetConfig+0x1ba>
 8003900:	2308      	movs	r3, #8
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003906:	e074      	b.n	80039f2 <UART_SetConfig+0x1ba>
 8003908:	2310      	movs	r3, #16
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e070      	b.n	80039f2 <UART_SetConfig+0x1ba>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a8c      	ldr	r2, [pc, #560]	; (8003b48 <UART_SetConfig+0x310>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d138      	bne.n	800398c <UART_SetConfig+0x154>
 800391a:	4b8a      	ldr	r3, [pc, #552]	; (8003b44 <UART_SetConfig+0x30c>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d82d      	bhi.n	8003984 <UART_SetConfig+0x14c>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <UART_SetConfig+0xf8>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003965 	.word	0x08003965
 8003934:	08003985 	.word	0x08003985
 8003938:	08003985 	.word	0x08003985
 800393c:	08003985 	.word	0x08003985
 8003940:	08003975 	.word	0x08003975
 8003944:	08003985 	.word	0x08003985
 8003948:	08003985 	.word	0x08003985
 800394c:	08003985 	.word	0x08003985
 8003950:	0800396d 	.word	0x0800396d
 8003954:	08003985 	.word	0x08003985
 8003958:	08003985 	.word	0x08003985
 800395c:	08003985 	.word	0x08003985
 8003960:	0800397d 	.word	0x0800397d
 8003964:	2300      	movs	r3, #0
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e042      	b.n	80039f2 <UART_SetConfig+0x1ba>
 800396c:	2302      	movs	r3, #2
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e03e      	b.n	80039f2 <UART_SetConfig+0x1ba>
 8003974:	2304      	movs	r3, #4
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e03a      	b.n	80039f2 <UART_SetConfig+0x1ba>
 800397c:	2308      	movs	r3, #8
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e036      	b.n	80039f2 <UART_SetConfig+0x1ba>
 8003984:	2310      	movs	r3, #16
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e032      	b.n	80039f2 <UART_SetConfig+0x1ba>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <UART_SetConfig+0x304>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d12a      	bne.n	80039ec <UART_SetConfig+0x1b4>
 8003996:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <UART_SetConfig+0x30c>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a4:	d01a      	beq.n	80039dc <UART_SetConfig+0x1a4>
 80039a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039aa:	d81b      	bhi.n	80039e4 <UART_SetConfig+0x1ac>
 80039ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b0:	d00c      	beq.n	80039cc <UART_SetConfig+0x194>
 80039b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b6:	d815      	bhi.n	80039e4 <UART_SetConfig+0x1ac>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <UART_SetConfig+0x18c>
 80039bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c0:	d008      	beq.n	80039d4 <UART_SetConfig+0x19c>
 80039c2:	e00f      	b.n	80039e4 <UART_SetConfig+0x1ac>
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e012      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e00e      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80039d4:	2304      	movs	r3, #4
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e00a      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80039dc:	2308      	movs	r3, #8
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e006      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e002      	b.n	80039f2 <UART_SetConfig+0x1ba>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a51      	ldr	r2, [pc, #324]	; (8003b3c <UART_SetConfig+0x304>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d17a      	bne.n	8003af2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d824      	bhi.n	8003a4e <UART_SetConfig+0x216>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <UART_SetConfig+0x1d4>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a4f 	.word	0x08003a4f
 8003a1c:	08003a3f 	.word	0x08003a3f
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a4f 	.word	0x08003a4f
 8003a28:	08003a4f 	.word	0x08003a4f
 8003a2c:	08003a47 	.word	0x08003a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7ff f8d2 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8003a34:	61f8      	str	r0, [r7, #28]
        break;
 8003a36:	e010      	b.n	8003a5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a38:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <UART_SetConfig+0x314>)
 8003a3a:	61fb      	str	r3, [r7, #28]
        break;
 8003a3c:	e00d      	b.n	8003a5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3e:	f7ff f833 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8003a42:	61f8      	str	r0, [r7, #28]
        break;
 8003a44:	e009      	b.n	8003a5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	61fb      	str	r3, [r7, #28]
        break;
 8003a4c:	e005      	b.n	8003a5a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8107 	beq.w	8003c70 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d305      	bcc.n	8003a7e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d903      	bls.n	8003a86 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a84:	e0f4      	b.n	8003c70 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	4615      	mov	r5, r2
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	022b      	lsls	r3, r5, #8
 8003a98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a9c:	0222      	lsls	r2, r4, #8
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	6849      	ldr	r1, [r1, #4]
 8003aa2:	0849      	lsrs	r1, r1, #1
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	4688      	mov	r8, r1
 8003aa8:	4681      	mov	r9, r0
 8003aaa:	eb12 0a08 	adds.w	sl, r2, r8
 8003aae:	eb43 0b09 	adc.w	fp, r3, r9
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac0:	4650      	mov	r0, sl
 8003ac2:	4659      	mov	r1, fp
 8003ac4:	f7fd f880 	bl	8000bc8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad6:	d308      	bcc.n	8003aea <UART_SetConfig+0x2b2>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ade:	d204      	bcs.n	8003aea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e0c2      	b.n	8003c70 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003af0:	e0be      	b.n	8003c70 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afa:	d16a      	bne.n	8003bd2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d834      	bhi.n	8003b6e <UART_SetConfig+0x336>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0x2d4>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b59 	.word	0x08003b59
 8003b18:	08003b6f 	.word	0x08003b6f
 8003b1c:	08003b5f 	.word	0x08003b5f
 8003b20:	08003b6f 	.word	0x08003b6f
 8003b24:	08003b6f 	.word	0x08003b6f
 8003b28:	08003b6f 	.word	0x08003b6f
 8003b2c:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7ff f852 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8003b34:	61f8      	str	r0, [r7, #28]
        break;
 8003b36:	e020      	b.n	8003b7a <UART_SetConfig+0x342>
 8003b38:	efff69f3 	.word	0xefff69f3
 8003b3c:	40008000 	.word	0x40008000
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40004400 	.word	0x40004400
 8003b4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7ff f858 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 8003b54:	61f8      	str	r0, [r7, #28]
        break;
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <UART_SetConfig+0x454>)
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e00d      	b.n	8003b7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7fe ffa3 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8003b62:	61f8      	str	r0, [r7, #28]
        break;
 8003b64:	e009      	b.n	8003b7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6a:	61fb      	str	r3, [r7, #28]
        break;
 8003b6c:	e005      	b.n	8003b7a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d077      	beq.n	8003c70 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005a      	lsls	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d916      	bls.n	8003bca <UART_SetConfig+0x392>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba2:	d212      	bcs.n	8003bca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	8afa      	ldrh	r2, [r7, #22]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e052      	b.n	8003c70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd0:	e04e      	b.n	8003c70 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d827      	bhi.n	8003c2a <UART_SetConfig+0x3f2>
 8003bda:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <UART_SetConfig+0x3a8>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c05 	.word	0x08003c05
 8003be4:	08003c0d 	.word	0x08003c0d
 8003be8:	08003c15 	.word	0x08003c15
 8003bec:	08003c2b 	.word	0x08003c2b
 8003bf0:	08003c1b 	.word	0x08003c1b
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c2b 	.word	0x08003c2b
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe ffe8 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8003c08:	61f8      	str	r0, [r7, #28]
        break;
 8003c0a:	e014      	b.n	8003c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe fffa 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 8003c10:	61f8      	str	r0, [r7, #28]
        break;
 8003c12:	e010      	b.n	8003c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <UART_SetConfig+0x454>)
 8003c16:	61fb      	str	r3, [r7, #28]
        break;
 8003c18:	e00d      	b.n	8003c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe ff45 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8003c1e:	61f8      	str	r0, [r7, #28]
        break;
 8003c20:	e009      	b.n	8003c36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	61fb      	str	r3, [r7, #28]
        break;
 8003c28:	e005      	b.n	8003c36 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c34:	bf00      	nop
    }

    if (pclk != 0U)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d019      	beq.n	8003c70 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	085a      	lsrs	r2, r3, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	441a      	add	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d909      	bls.n	8003c6a <UART_SetConfig+0x432>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d205      	bcs.n	8003c6a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e002      	b.n	8003c70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	00f42400 	.word	0x00f42400

08003c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d10a      	bne.n	8003da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de4:	f7fd fd66 	bl	80018b4 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d10e      	bne.n	8003e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f82d 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e023      	b.n	8003e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d10e      	bne.n	8003e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f817 	bl	8003e66 <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e00d      	b.n	8003e5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b09c      	sub	sp, #112	; 0x70
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e76:	e0a5      	b.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	f000 80a1 	beq.w	8003fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e82:	f7fd fd17 	bl	80018b4 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d302      	bcc.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d13e      	bne.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eac:	667b      	str	r3, [r7, #100]	; 0x64
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e6      	bne.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eea:	64ba      	str	r2, [r7, #72]	; 0x48
 8003eec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e067      	b.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d04f      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f32:	d147      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e6      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f90:	623a      	str	r2, [r7, #32]
 8003f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e5      	bne.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e010      	b.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	f43f af4a 	beq.w	8003e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3770      	adds	r7, #112	; 0x70
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <fire_configure_activations>:


AI_DECLARE_STATIC
ai_bool fire_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	3303      	adds	r3, #3
 8004000:	f023 0303 	bic.w	r3, r3, #3
 8004004:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <fire_configure_activations+0x80>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <fire_configure_activations+0x80>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <fire_configure_activations+0x84>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <fire_configure_activations+0x84>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <fire_configure_activations+0x88>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <fire_configure_activations+0x88>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 32);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3320      	adds	r3, #32
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <fire_configure_activations+0x8c>)
 8004030:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 32);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3320      	adds	r3, #32
 8004036:	4a11      	ldr	r2, [pc, #68]	; (800407c <fire_configure_activations+0x8c>)
 8004038:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 800403a:	4a11      	ldr	r2, [pc, #68]	; (8004080 <fire_configure_activations+0x90>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8004040:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <fire_configure_activations+0x90>)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 20);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3314      	adds	r3, #20
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <fire_configure_activations+0x94>)
 800404c:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 20);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3314      	adds	r3, #20
 8004052:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <fire_configure_activations+0x94>)
 8004054:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(NULL);
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <fire_configure_activations+0x98>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
    nl_3_output_array.data_start = AI_PTR(NULL);
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <fire_configure_activations+0x98>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004062:	2301      	movs	r3, #1
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	20000108 	.word	0x20000108
 8004074:	20000118 	.word	0x20000118
 8004078:	20000128 	.word	0x20000128
 800407c:	20000138 	.word	0x20000138
 8004080:	20000148 	.word	0x20000148
 8004084:	20000158 	.word	0x20000158
 8004088:	20000168 	.word	0x20000168

0800408c <fire_configure_weights>:


AI_DECLARE_STATIC
ai_bool fire_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <fire_configure_weights+0xd0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040a4:	4a2d      	ldr	r2, [pc, #180]	; (800415c <fire_configure_weights+0xd0>)
 80040a6:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 348);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <fire_configure_weights+0xd0>)
 80040b0:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 348);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80040b8:	4a28      	ldr	r2, [pc, #160]	; (800415c <fire_configure_weights+0xd0>)
 80040ba:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <fire_configure_weights+0xd4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040c4:	4a26      	ldr	r2, [pc, #152]	; (8004160 <fire_configure_weights+0xd4>)
 80040c6:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 308);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80040ce:	4a24      	ldr	r2, [pc, #144]	; (8004160 <fire_configure_weights+0xd4>)
 80040d0:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 308);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80040d8:	4a21      	ldr	r2, [pc, #132]	; (8004160 <fire_configure_weights+0xd4>)
 80040da:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <fire_configure_weights+0xd8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040e4:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <fire_configure_weights+0xd8>)
 80040e6:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 288);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <fire_configure_weights+0xd8>)
 80040f0:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 288);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80040f8:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <fire_configure_weights+0xd8>)
 80040fa:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <fire_configure_weights+0xdc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004104:	4a18      	ldr	r2, [pc, #96]	; (8004168 <fire_configure_weights+0xdc>)
 8004106:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3380      	adds	r3, #128	; 0x80
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <fire_configure_weights+0xdc>)
 800410e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3380      	adds	r3, #128	; 0x80
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <fire_configure_weights+0xdc>)
 8004116:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <fire_configure_weights+0xe0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <fire_configure_weights+0xe0>)
 8004122:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 96);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3360      	adds	r3, #96	; 0x60
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <fire_configure_weights+0xe0>)
 800412a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 96);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3360      	adds	r3, #96	; 0x60
 8004130:	4a0e      	ldr	r2, [pc, #56]	; (800416c <fire_configure_weights+0xe0>)
 8004132:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <fire_configure_weights+0xe4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <fire_configure_weights+0xe4>)
 800413e:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8004140:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <fire_configure_weights+0xe4>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <fire_configure_weights+0xe4>)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	200000a8 	.word	0x200000a8
 8004160:	200000b8 	.word	0x200000b8
 8004164:	200000c8 	.word	0x200000c8
 8004168:	200000d8 	.word	0x200000d8
 800416c:	200000e8 	.word	0x200000e8
 8004170:	200000f8 	.word	0x200000f8

08004174 <ai_fire_create>:
}

AI_API_ENTRY
ai_error ai_fire_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af02      	add	r7, sp, #8
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800417e:	2300      	movs	r3, #0
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2303      	movs	r3, #3
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2301      	movs	r3, #1
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <ai_fire_create+0x28>)
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f881 	bl	8004294 <ai_platform_network_create>
 8004192:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000048 	.word	0x20000048

080041a0 <ai_fire_init>:
}

AI_API_ENTRY
ai_bool ai_fire_init(
  ai_handle network, const ai_network_params* params)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8c9 	bl	8004344 <ai_platform_network_init>
 80041b2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <ai_fire_init+0x1e>
 80041ba:	2300      	movs	r3, #0
 80041bc:	e02b      	b.n	8004216 <ai_fire_init+0x76>

  ai_bool ok = true;
 80041be:	2301      	movs	r3, #1
 80041c0:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_weights(net_ctx, &params->params);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7ff ff60 	bl	800408c <fire_configure_weights>
 80041cc:	4603      	mov	r3, r0
 80041ce:	461a      	mov	r2, r3
 80041d0:	7afb      	ldrb	r3, [r7, #11]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	72fb      	strb	r3, [r7, #11]
  ok &= fire_configure_activations(net_ctx, &params->activations);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	3318      	adds	r3, #24
 80041e2:	4619      	mov	r1, r3
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff03 	bl	8003ff0 <fire_configure_activations>
 80041ea:	4603      	mov	r3, r0
 80041ec:	461a      	mov	r2, r3
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f91f 	bl	8004440 <ai_platform_network_post_init>
 8004202:	4603      	mov	r3, r0
 8004204:	461a      	mov	r2, r3
 8004206:	7afb      	ldrb	r3, [r7, #11]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004214:	7afb      	ldrb	r3, [r7, #11]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <ai_fire_run>:


AI_API_ENTRY
ai_i32 ai_fire_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f94e 	bl	80044d0 <ai_platform_network_process>
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <ai_fire_data_weights_get>:
#include "fire_data.h"

ai_handle ai_fire_data_weights_get(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
    0x92, 0xe6, 0x3f, 0x10, 0x57, 0x49, 0xbf, 0x93, 0xd9,
    0x7a, 0x3f, 0x86, 0xfd, 0xd0, 0xbf, 0xfd, 0x48, 0x0e,
    0xbf, 0xdb, 0xbb, 0x2b, 0x3d, 0xdb, 0xbb, 0x2b, 0xbd
  };

  return AI_HANDLE_PTR(s_fire_weights);
 8004244:	4b02      	ldr	r3, [pc, #8]	; (8004250 <ai_fire_data_weights_get+0x10>)

}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	08008754 	.word	0x08008754

08004254 <_platform_network_state_setup.isra.1>:
 8004254:	b430      	push	{r4, r5}
 8004256:	68dd      	ldr	r5, [r3, #12]
 8004258:	695c      	ldr	r4, [r3, #20]
 800425a:	68ed      	ldr	r5, [r5, #12]
 800425c:	68e4      	ldr	r4, [r4, #12]
 800425e:	fb04 f405 	mul.w	r4, r4, r5
 8004262:	6084      	str	r4, [r0, #8]
 8004264:	8809      	ldrh	r1, [r1, #0]
 8004266:	fb04 f401 	mul.w	r4, r4, r1
 800426a:	60c4      	str	r4, [r0, #12]
 800426c:	6811      	ldr	r1, [r2, #0]
 800426e:	6041      	str	r1, [r0, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	4414      	add	r4, r2
 8004274:	6004      	str	r4, [r0, #0]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	6814      	ldr	r4, [r2, #0]
 800427a:	00a4      	lsls	r4, r4, #2
 800427c:	d407      	bmi.n	800428e <_platform_network_state_setup.isra.1+0x3a>
 800427e:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8004282:	1b64      	subs	r4, r4, r5
 8004284:	4421      	add	r1, r4
 8004286:	6091      	str	r1, [r2, #8]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	6842      	ldr	r2, [r0, #4]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	bc30      	pop	{r4, r5}
 8004290:	4770      	bx	lr
	...

08004294 <ai_platform_network_create>:
 8004294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	4e23      	ldr	r6, [pc, #140]	; (8004328 <ai_platform_network_create+0x94>)
 800429a:	4924      	ldr	r1, [pc, #144]	; (800432c <ai_platform_network_create+0x98>)
 800429c:	6835      	ldr	r5, [r6, #0]
 800429e:	b082      	sub	sp, #8
 80042a0:	f025 0501 	bic.w	r5, r5, #1
 80042a4:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80042a8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80042ac:	6035      	str	r5, [r6, #0]
 80042ae:	2501      	movs	r5, #1
 80042b0:	600d      	str	r5, [r1, #0]
 80042b2:	680d      	ldr	r5, [r1, #0]
 80042b4:	2d00      	cmp	r5, #0
 80042b6:	d1fc      	bne.n	80042b2 <ai_platform_network_create+0x1e>
 80042b8:	491d      	ldr	r1, [pc, #116]	; (8004330 <ai_platform_network_create+0x9c>)
 80042ba:	4e1e      	ldr	r6, [pc, #120]	; (8004334 <ai_platform_network_create+0xa0>)
 80042bc:	600e      	str	r6, [r1, #0]
 80042be:	680e      	ldr	r6, [r1, #0]
 80042c0:	491d      	ldr	r1, [pc, #116]	; (8004338 <ai_platform_network_create+0xa4>)
 80042c2:	428e      	cmp	r6, r1
 80042c4:	d000      	beq.n	80042c8 <ai_platform_network_create+0x34>
 80042c6:	e7fe      	b.n	80042c6 <ai_platform_network_create+0x32>
 80042c8:	b1d0      	cbz	r0, 8004300 <ai_platform_network_create+0x6c>
 80042ca:	4698      	mov	r8, r3
 80042cc:	4613      	mov	r3, r2
 80042ce:	4a1b      	ldr	r2, [pc, #108]	; (800433c <ai_platform_network_create+0xa8>)
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	6003      	str	r3, [r0, #0]
 80042d4:	4606      	mov	r6, r0
 80042d6:	f000 fb05 	bl	80048e4 <core_init>
 80042da:	b1b0      	cbz	r0, 800430a <ai_platform_network_create+0x76>
 80042dc:	0223      	lsls	r3, r4, #8
 80042de:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80042e2:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80042e6:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80042ea:	d910      	bls.n	800430e <ai_platform_network_create+0x7a>
 80042ec:	2201      	movs	r2, #1
 80042ee:	2300      	movs	r3, #0
 80042f0:	6033      	str	r3, [r6, #0]
 80042f2:	2310      	movs	r3, #16
 80042f4:	2000      	movs	r0, #0
 80042f6:	f362 0007 	bfi	r0, r2, #0, #8
 80042fa:	f363 201f 	bfi	r0, r3, #8, #24
 80042fe:	e001      	b.n	8004304 <ai_platform_network_create+0x70>
 8004300:	f241 0010 	movw	r0, #4112	; 0x1010
 8004304:	b002      	add	sp, #8
 8004306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430a:	2230      	movs	r2, #48	; 0x30
 800430c:	e7ef      	b.n	80042ee <ai_platform_network_create+0x5a>
 800430e:	a802      	add	r0, sp, #8
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <ai_platform_network_create+0xac>)
 8004312:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004316:	f001 f849 	bl	80053ac <ai_check_custom_types>
 800431a:	b110      	cbz	r0, 8004322 <ai_platform_network_create+0x8e>
 800431c:	462b      	mov	r3, r5
 800431e:	462a      	mov	r2, r5
 8004320:	e7e8      	b.n	80042f4 <ai_platform_network_create+0x60>
 8004322:	2202      	movs	r2, #2
 8004324:	e7e3      	b.n	80042ee <ai_platform_network_create+0x5a>
 8004326:	bf00      	nop
 8004328:	e0002000 	.word	0xe0002000
 800432c:	40023008 	.word	0x40023008
 8004330:	40023000 	.word	0x40023000
 8004334:	f407a5c2 	.word	0xf407a5c2
 8004338:	b5e8b5cd 	.word	0xb5e8b5cd
 800433c:	a1c00100 	.word	0xa1c00100
 8004340:	84048403 	.word	0x84048403

08004344 <ai_platform_network_init>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	460c      	mov	r4, r1
 8004348:	4605      	mov	r5, r0
 800434a:	b120      	cbz	r0, 8004356 <ai_platform_network_init+0x12>
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <ai_platform_network_init+0xe4>)
 800434e:	6802      	ldr	r2, [r0, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	bf18      	it	ne
 8004354:	2500      	movne	r5, #0
 8004356:	4935      	ldr	r1, [pc, #212]	; (800442c <ai_platform_network_init+0xe8>)
 8004358:	4a35      	ldr	r2, [pc, #212]	; (8004430 <ai_platform_network_init+0xec>)
 800435a:	680b      	ldr	r3, [r1, #0]
 800435c:	2001      	movs	r0, #1
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	6010      	str	r0, [r2, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2a00      	cmp	r2, #0
 800436c:	d1fc      	bne.n	8004368 <ai_platform_network_init+0x24>
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <ai_platform_network_init+0xf0>)
 8004370:	4a31      	ldr	r2, [pc, #196]	; (8004438 <ai_platform_network_init+0xf4>)
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b31      	ldr	r3, [pc, #196]	; (800443c <ai_platform_network_init+0xf8>)
 8004378:	429a      	cmp	r2, r3
 800437a:	d000      	beq.n	800437e <ai_platform_network_init+0x3a>
 800437c:	e7fe      	b.n	800437c <ai_platform_network_init+0x38>
 800437e:	b33d      	cbz	r5, 80043d0 <ai_platform_network_init+0x8c>
 8004380:	b344      	cbz	r4, 80043d4 <ai_platform_network_init+0x90>
 8004382:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004384:	6926      	ldr	r6, [r4, #16]
 8004386:	2f00      	cmp	r7, #0
 8004388:	d03d      	beq.n	8004406 <ai_platform_network_init+0xc2>
 800438a:	b35e      	cbz	r6, 80043e4 <ai_platform_network_init+0xa0>
 800438c:	4627      	mov	r7, r4
 800438e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004390:	f105 0618 	add.w	r6, r5, #24
 8004394:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004396:	e897 0003 	ldmia.w	r7, {r0, r1}
 800439a:	e886 0003 	stmia.w	r6, {r0, r1}
 800439e:	3418      	adds	r4, #24
 80043a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80043a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043ac:	e886 0003 	stmia.w	r6, {r0, r1}
 80043b0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80043b2:	2303      	movs	r3, #3
 80043b4:	60eb      	str	r3, [r5, #12]
 80043b6:	b15a      	cbz	r2, 80043d0 <ai_platform_network_init+0x8c>
 80043b8:	68d3      	ldr	r3, [r2, #12]
 80043ba:	6095      	str	r5, [r2, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d007      	beq.n	80043d0 <ai_platform_network_init+0x8c>
 80043c0:	b133      	cbz	r3, 80043d0 <ai_platform_network_init+0x8c>
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	609d      	str	r5, [r3, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d002      	beq.n	80043d0 <ai_platform_network_init+0x8c>
 80043ca:	4613      	mov	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f8      	bne.n	80043c2 <ai_platform_network_init+0x7e>
 80043d0:	4628      	mov	r0, r5
 80043d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d4:	f105 0010 	add.w	r0, r5, #16
 80043d8:	2211      	movs	r2, #17
 80043da:	2110      	movs	r1, #16
 80043dc:	f000 fa84 	bl	80048e8 <core_set_error>
 80043e0:	4625      	mov	r5, r4
 80043e2:	e7f5      	b.n	80043d0 <ai_platform_network_init+0x8c>
 80043e4:	8921      	ldrh	r1, [r4, #8]
 80043e6:	88e2      	ldrh	r2, [r4, #6]
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	fb02 f201 	mul.w	r2, r2, r1
 80043ee:	fb03 f302 	mul.w	r3, r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ca      	beq.n	800438c <ai_platform_network_init+0x48>
 80043f6:	f105 0010 	add.w	r0, r5, #16
 80043fa:	2212      	movs	r2, #18
 80043fc:	2110      	movs	r1, #16
 80043fe:	f000 fa73 	bl	80048e8 <core_set_error>
 8004402:	4635      	mov	r5, r6
 8004404:	e7e4      	b.n	80043d0 <ai_platform_network_init+0x8c>
 8004406:	8c21      	ldrh	r1, [r4, #32]
 8004408:	8be2      	ldrh	r2, [r4, #30]
 800440a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800440c:	fb02 f201 	mul.w	r2, r2, r1
 8004410:	fb03 f302 	mul.w	r3, r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0b8      	beq.n	800438a <ai_platform_network_init+0x46>
 8004418:	f105 0010 	add.w	r0, r5, #16
 800441c:	2213      	movs	r2, #19
 800441e:	2110      	movs	r1, #16
 8004420:	f000 fa62 	bl	80048e8 <core_set_error>
 8004424:	463d      	mov	r5, r7
 8004426:	e7d3      	b.n	80043d0 <ai_platform_network_init+0x8c>
 8004428:	a1c00100 	.word	0xa1c00100
 800442c:	e0002000 	.word	0xe0002000
 8004430:	40023008 	.word	0x40023008
 8004434:	40023000 	.word	0x40023000
 8004438:	f407a5c2 	.word	0xf407a5c2
 800443c:	b5e8b5cd 	.word	0xb5e8b5cd

08004440 <ai_platform_network_post_init>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4604      	mov	r4, r0
 8004444:	b120      	cbz	r0, 8004450 <ai_platform_network_post_init+0x10>
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <ai_platform_network_post_init+0x78>)
 8004448:	6802      	ldr	r2, [r0, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	bf18      	it	ne
 800444e:	2400      	movne	r4, #0
 8004450:	491a      	ldr	r1, [pc, #104]	; (80044bc <ai_platform_network_post_init+0x7c>)
 8004452:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <ai_platform_network_post_init+0x80>)
 8004454:	680b      	ldr	r3, [r1, #0]
 8004456:	2001      	movs	r0, #1
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	6010      	str	r0, [r2, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2a00      	cmp	r2, #0
 8004466:	d1fc      	bne.n	8004462 <ai_platform_network_post_init+0x22>
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <ai_platform_network_post_init+0x84>)
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <ai_platform_network_post_init+0x88>)
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b16      	ldr	r3, [pc, #88]	; (80044cc <ai_platform_network_post_init+0x8c>)
 8004472:	429a      	cmp	r2, r3
 8004474:	d000      	beq.n	8004478 <ai_platform_network_post_init+0x38>
 8004476:	e7fe      	b.n	8004476 <ai_platform_network_post_init+0x36>
 8004478:	b1a4      	cbz	r4, 80044a4 <ai_platform_network_post_init+0x64>
 800447a:	68e3      	ldr	r3, [r4, #12]
 800447c:	f013 0502 	ands.w	r5, r3, #2
 8004480:	d012      	beq.n	80044a8 <ai_platform_network_post_init+0x68>
 8004482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004484:	b163      	cbz	r3, 80044a0 <ai_platform_network_post_init+0x60>
 8004486:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004488:	b91d      	cbnz	r5, 8004492 <ai_platform_network_post_init+0x52>
 800448a:	e009      	b.n	80044a0 <ai_platform_network_post_init+0x60>
 800448c:	461d      	mov	r5, r3
 800448e:	b13b      	cbz	r3, 80044a0 <ai_platform_network_post_init+0x60>
 8004490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004492:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004494:	4629      	mov	r1, r5
 8004496:	2000      	movs	r0, #0
 8004498:	4798      	blx	r3
 800449a:	68eb      	ldr	r3, [r5, #12]
 800449c:	42ab      	cmp	r3, r5
 800449e:	d1f5      	bne.n	800448c <ai_platform_network_post_init+0x4c>
 80044a0:	2001      	movs	r0, #1
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	4620      	mov	r0, r4
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	f104 0010 	add.w	r0, r4, #16
 80044ac:	2210      	movs	r2, #16
 80044ae:	2111      	movs	r1, #17
 80044b0:	f000 fa1a 	bl	80048e8 <core_set_error>
 80044b4:	4628      	mov	r0, r5
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	a1c00100 	.word	0xa1c00100
 80044bc:	e0002000 	.word	0xe0002000
 80044c0:	40023008 	.word	0x40023008
 80044c4:	40023000 	.word	0x40023000
 80044c8:	f407a5c2 	.word	0xf407a5c2
 80044cc:	b5e8b5cd 	.word	0xb5e8b5cd

080044d0 <ai_platform_network_process>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	b083      	sub	sp, #12
 80044d6:	4604      	mov	r4, r0
 80044d8:	9201      	str	r2, [sp, #4]
 80044da:	b120      	cbz	r0, 80044e6 <ai_platform_network_process+0x16>
 80044dc:	4ba5      	ldr	r3, [pc, #660]	; (8004774 <ai_platform_network_process+0x2a4>)
 80044de:	6802      	ldr	r2, [r0, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	bf18      	it	ne
 80044e4:	2400      	movne	r4, #0
 80044e6:	48a4      	ldr	r0, [pc, #656]	; (8004778 <ai_platform_network_process+0x2a8>)
 80044e8:	4ba4      	ldr	r3, [pc, #656]	; (800477c <ai_platform_network_process+0x2ac>)
 80044ea:	6802      	ldr	r2, [r0, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	6002      	str	r2, [r0, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	d1fc      	bne.n	80044f6 <ai_platform_network_process+0x26>
 80044fc:	4ba0      	ldr	r3, [pc, #640]	; (8004780 <ai_platform_network_process+0x2b0>)
 80044fe:	4aa1      	ldr	r2, [pc, #644]	; (8004784 <ai_platform_network_process+0x2b4>)
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4ba0      	ldr	r3, [pc, #640]	; (8004788 <ai_platform_network_process+0x2b8>)
 8004506:	429a      	cmp	r2, r3
 8004508:	d000      	beq.n	800450c <ai_platform_network_process+0x3c>
 800450a:	e7fe      	b.n	800450a <ai_platform_network_process+0x3a>
 800450c:	2c00      	cmp	r4, #0
 800450e:	d066      	beq.n	80045de <ai_platform_network_process+0x10e>
 8004510:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8004514:	b107      	cbz	r7, 8004518 <ai_platform_network_process+0x48>
 8004516:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004518:	68e3      	ldr	r3, [r4, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2600      	movs	r6, #0
 8004520:	2b03      	cmp	r3, #3
 8004522:	6166      	str	r6, [r4, #20]
 8004524:	f040 80fe 	bne.w	8004724 <ai_platform_network_process+0x254>
 8004528:	2900      	cmp	r1, #0
 800452a:	d07f      	beq.n	800462c <ai_platform_network_process+0x15c>
 800452c:	2f00      	cmp	r7, #0
 800452e:	d07d      	beq.n	800462c <ai_platform_network_process+0x15c>
 8004530:	883b      	ldrh	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d07a      	beq.n	800462c <ai_platform_network_process+0x15c>
 8004536:	460d      	mov	r5, r1
 8004538:	46a0      	mov	r8, r4
 800453a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800453e:	429e      	cmp	r6, r3
 8004540:	d27d      	bcs.n	800463e <ai_platform_network_process+0x16e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d07a      	beq.n	800463e <ai_platform_network_process+0x16e>
 8004548:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800454c:	2c00      	cmp	r4, #0
 800454e:	d076      	beq.n	800463e <ai_platform_network_process+0x16e>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8004558:	d067      	beq.n	800462a <ai_platform_network_process+0x15a>
 800455a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800455e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004562:	69a0      	ldr	r0, [r4, #24]
 8004564:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004568:	6841      	ldr	r1, [r0, #4]
 800456a:	fb0b f30e 	mul.w	r3, fp, lr
 800456e:	fb0c f303 	mul.w	r3, ip, r3
 8004572:	4299      	cmp	r1, r3
 8004574:	d350      	bcc.n	8004618 <ai_platform_network_process+0x148>
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	455a      	cmp	r2, fp
 800457c:	d14c      	bne.n	8004618 <ai_platform_network_process+0x148>
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4572      	cmp	r2, lr
 8004582:	d149      	bne.n	8004618 <ai_platform_network_process+0x148>
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	459c      	cmp	ip, r3
 8004588:	d146      	bne.n	8004618 <ai_platform_network_process+0x148>
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	f000 ffbe 	bl	800550c <ai_array_get_byte_size>
 8004590:	68e2      	ldr	r2, [r4, #12]
 8004592:	6963      	ldr	r3, [r4, #20]
 8004594:	68d2      	ldr	r2, [r2, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	fb03 f302 	mul.w	r3, r3, r2
 800459c:	4298      	cmp	r0, r3
 800459e:	d33b      	bcc.n	8004618 <ai_platform_network_process+0x148>
 80045a0:	69a3      	ldr	r3, [r4, #24]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	f000 ff66 	bl	8005474 <ai_array_to_buffer_fmt>
 80045a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80045ac:	4043      	eors	r3, r0
 80045ae:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80045b2:	d128      	bne.n	8004606 <ai_platform_network_process+0x136>
 80045b4:	68eb      	ldr	r3, [r5, #12]
 80045b6:	b1f3      	cbz	r3, 80045f6 <ai_platform_network_process+0x126>
 80045b8:	f8b5 b000 	ldrh.w	fp, [r5]
 80045bc:	f1bb 0f00 	cmp.w	fp, #0
 80045c0:	d012      	beq.n	80045e8 <ai_platform_network_process+0x118>
 80045c2:	4623      	mov	r3, r4
 80045c4:	f105 020c 	add.w	r2, r5, #12
 80045c8:	4629      	mov	r1, r5
 80045ca:	4650      	mov	r0, sl
 80045cc:	f7ff fe42 	bl	8004254 <_platform_network_state_setup.isra.1>
 80045d0:	45d9      	cmp	r9, fp
 80045d2:	883b      	ldrh	r3, [r7, #0]
 80045d4:	bf38      	it	cc
 80045d6:	46d9      	movcc	r9, fp
 80045d8:	3601      	adds	r6, #1
 80045da:	3518      	adds	r5, #24
 80045dc:	e7af      	b.n	800453e <ai_platform_network_process+0x6e>
 80045de:	46a3      	mov	fp, r4
 80045e0:	4658      	mov	r0, fp
 80045e2:	b003      	add	sp, #12
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	f108 0010 	add.w	r0, r8, #16
 80045ec:	2221      	movs	r2, #33	; 0x21
 80045ee:	2112      	movs	r1, #18
 80045f0:	f000 f97a 	bl	80048e8 <core_set_error>
 80045f4:	e7f4      	b.n	80045e0 <ai_platform_network_process+0x110>
 80045f6:	f108 0010 	add.w	r0, r8, #16
 80045fa:	2217      	movs	r2, #23
 80045fc:	2112      	movs	r1, #18
 80045fe:	469b      	mov	fp, r3
 8004600:	f000 f972 	bl	80048e8 <core_set_error>
 8004604:	e7ec      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004606:	f108 0010 	add.w	r0, r8, #16
 800460a:	2219      	movs	r2, #25
 800460c:	2112      	movs	r1, #18
 800460e:	f000 f96b 	bl	80048e8 <core_set_error>
 8004612:	f04f 0b00 	mov.w	fp, #0
 8004616:	e7e3      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004618:	f108 0010 	add.w	r0, r8, #16
 800461c:	2218      	movs	r2, #24
 800461e:	2112      	movs	r1, #18
 8004620:	f000 f962 	bl	80048e8 <core_set_error>
 8004624:	f04f 0b00 	mov.w	fp, #0
 8004628:	e7da      	b.n	80045e0 <ai_platform_network_process+0x110>
 800462a:	4644      	mov	r4, r8
 800462c:	f104 0010 	add.w	r0, r4, #16
 8004630:	2217      	movs	r2, #23
 8004632:	2112      	movs	r1, #18
 8004634:	f000 f958 	bl	80048e8 <core_set_error>
 8004638:	f04f 0b00 	mov.w	fp, #0
 800463c:	e7d0      	b.n	80045e0 <ai_platform_network_process+0x110>
 800463e:	9a01      	ldr	r2, [sp, #4]
 8004640:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8004644:	4644      	mov	r4, r8
 8004646:	2a00      	cmp	r2, #0
 8004648:	f000 80a4 	beq.w	8004794 <ai_platform_network_process+0x2c4>
 800464c:	2b01      	cmp	r3, #1
 800464e:	f240 8140 	bls.w	80048d2 <ai_platform_network_process+0x402>
 8004652:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8004656:	f118 0f0c 	cmn.w	r8, #12
 800465a:	f000 813a 	beq.w	80048d2 <ai_platform_network_process+0x402>
 800465e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8135 	beq.w	80048d2 <ai_platform_network_process+0x402>
 8004668:	3204      	adds	r2, #4
 800466a:	4615      	mov	r5, r2
 800466c:	2700      	movs	r7, #0
 800466e:	429f      	cmp	r7, r3
 8004670:	f080 808c 	bcs.w	800478c <ai_platform_network_process+0x2bc>
 8004674:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8087 	beq.w	800478c <ai_platform_network_process+0x2bc>
 800467e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8004682:	2e00      	cmp	r6, #0
 8004684:	f000 8082 	beq.w	800478c <ai_platform_network_process+0x2bc>
 8004688:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8004692:	d067      	beq.n	8004764 <ai_platform_network_process+0x294>
 8004694:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004698:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800469c:	69b0      	ldr	r0, [r6, #24]
 800469e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80046a2:	6841      	ldr	r1, [r0, #4]
 80046a4:	fb0b f30e 	mul.w	r3, fp, lr
 80046a8:	fb0c f303 	mul.w	r3, ip, r3
 80046ac:	4299      	cmp	r1, r3
 80046ae:	f0c0 8110 	bcc.w	80048d2 <ai_platform_network_process+0x402>
 80046b2:	68f3      	ldr	r3, [r6, #12]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	455a      	cmp	r2, fp
 80046b8:	f040 810b 	bne.w	80048d2 <ai_platform_network_process+0x402>
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	4572      	cmp	r2, lr
 80046c0:	f040 8107 	bne.w	80048d2 <ai_platform_network_process+0x402>
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	459c      	cmp	ip, r3
 80046c8:	f040 8103 	bne.w	80048d2 <ai_platform_network_process+0x402>
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	f000 ff1d 	bl	800550c <ai_array_get_byte_size>
 80046d2:	68f2      	ldr	r2, [r6, #12]
 80046d4:	6973      	ldr	r3, [r6, #20]
 80046d6:	68d2      	ldr	r2, [r2, #12]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	fb03 f302 	mul.w	r3, r3, r2
 80046de:	4298      	cmp	r0, r3
 80046e0:	f0c0 80f7 	bcc.w	80048d2 <ai_platform_network_process+0x402>
 80046e4:	69b3      	ldr	r3, [r6, #24]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	f000 fec4 	bl	8005474 <ai_array_to_buffer_fmt>
 80046ec:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80046f0:	4043      	eors	r3, r0
 80046f2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80046f6:	d12c      	bne.n	8004752 <ai_platform_network_process+0x282>
 80046f8:	68eb      	ldr	r3, [r5, #12]
 80046fa:	b313      	cbz	r3, 8004742 <ai_platform_network_process+0x272>
 80046fc:	f8b5 b000 	ldrh.w	fp, [r5]
 8004700:	f1bb 0f00 	cmp.w	fp, #0
 8004704:	d016      	beq.n	8004734 <ai_platform_network_process+0x264>
 8004706:	4633      	mov	r3, r6
 8004708:	f105 020c 	add.w	r2, r5, #12
 800470c:	4629      	mov	r1, r5
 800470e:	4650      	mov	r0, sl
 8004710:	f7ff fda0 	bl	8004254 <_platform_network_state_setup.isra.1>
 8004714:	45d9      	cmp	r9, fp
 8004716:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800471a:	bf38      	it	cc
 800471c:	46d9      	movcc	r9, fp
 800471e:	3701      	adds	r7, #1
 8004720:	3518      	adds	r5, #24
 8004722:	e7a4      	b.n	800466e <ai_platform_network_process+0x19e>
 8004724:	f104 0010 	add.w	r0, r4, #16
 8004728:	2230      	movs	r2, #48	; 0x30
 800472a:	2111      	movs	r1, #17
 800472c:	f000 f8dc 	bl	80048e8 <core_set_error>
 8004730:	46b3      	mov	fp, r6
 8004732:	e755      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004734:	f104 0010 	add.w	r0, r4, #16
 8004738:	2221      	movs	r2, #33	; 0x21
 800473a:	2113      	movs	r1, #19
 800473c:	f000 f8d4 	bl	80048e8 <core_set_error>
 8004740:	e74e      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004742:	f104 0010 	add.w	r0, r4, #16
 8004746:	2217      	movs	r2, #23
 8004748:	2113      	movs	r1, #19
 800474a:	469b      	mov	fp, r3
 800474c:	f000 f8cc 	bl	80048e8 <core_set_error>
 8004750:	e746      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004752:	f104 0010 	add.w	r0, r4, #16
 8004756:	2219      	movs	r2, #25
 8004758:	2113      	movs	r1, #19
 800475a:	f000 f8c5 	bl	80048e8 <core_set_error>
 800475e:	f04f 0b00 	mov.w	fp, #0
 8004762:	e73d      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004764:	f104 0010 	add.w	r0, r4, #16
 8004768:	2217      	movs	r2, #23
 800476a:	2113      	movs	r1, #19
 800476c:	f000 f8bc 	bl	80048e8 <core_set_error>
 8004770:	46d3      	mov	fp, sl
 8004772:	e735      	b.n	80045e0 <ai_platform_network_process+0x110>
 8004774:	a1c00100 	.word	0xa1c00100
 8004778:	e0002000 	.word	0xe0002000
 800477c:	40023008 	.word	0x40023008
 8004780:	40023000 	.word	0x40023000
 8004784:	f407a5c2 	.word	0xf407a5c2
 8004788:	b5e8b5cd 	.word	0xb5e8b5cd
 800478c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8004790:	f8a4 9014 	strh.w	r9, [r4, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8099 	beq.w	80048cc <ai_platform_network_process+0x3fc>
 800479a:	2b01      	cmp	r3, #1
 800479c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800479e:	f240 8093 	bls.w	80048c8 <ai_platform_network_process+0x3f8>
 80047a2:	f105 070c 	add.w	r7, r5, #12
 80047a6:	8ae0      	ldrh	r0, [r4, #22]
 80047a8:	8aa3      	ldrh	r3, [r4, #20]
 80047aa:	4283      	cmp	r3, r0
 80047ac:	d977      	bls.n	800489e <ai_platform_network_process+0x3ce>
 80047ae:	46a3      	mov	fp, r4
 80047b0:	2d00      	cmp	r5, #0
 80047b2:	d032      	beq.n	800481a <ai_platform_network_process+0x34a>
 80047b4:	882b      	ldrh	r3, [r5, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02f      	beq.n	800481a <ai_platform_network_process+0x34a>
 80047ba:	686b      	ldr	r3, [r5, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02c      	beq.n	800481a <ai_platform_network_process+0x34a>
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f04f 0800 	mov.w	r8, #0
 80047c6:	b343      	cbz	r3, 800481a <ai_platform_network_process+0x34a>
 80047c8:	68a9      	ldr	r1, [r5, #8]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	f8d1 a000 	ldr.w	sl, [r1]
 80047d0:	6814      	ldr	r4, [r2, #0]
 80047d2:	6890      	ldr	r0, [r2, #8]
 80047d4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80047d8:	eb0a 0609 	add.w	r6, sl, r9
 80047dc:	00a4      	lsls	r4, r4, #2
 80047de:	6871      	ldr	r1, [r6, #4]
 80047e0:	d45f      	bmi.n	80048a2 <ai_platform_network_process+0x3d2>
 80047e2:	68d4      	ldr	r4, [r2, #12]
 80047e4:	1b00      	subs	r0, r0, r4
 80047e6:	4401      	add	r1, r0
 80047e8:	6091      	str	r1, [r2, #8]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	6872      	ldr	r2, [r6, #4]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80047f4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80047f8:	440b      	add	r3, r1
 80047fa:	4293      	cmp	r3, r2
 80047fc:	bf24      	itt	cs
 80047fe:	68f3      	ldrcs	r3, [r6, #12]
 8004800:	1ad3      	subcs	r3, r2, r3
 8004802:	6073      	str	r3, [r6, #4]
 8004804:	882b      	ldrh	r3, [r5, #0]
 8004806:	f108 0801 	add.w	r8, r8, #1
 800480a:	4598      	cmp	r8, r3
 800480c:	d205      	bcs.n	800481a <ai_platform_network_process+0x34a>
 800480e:	686b      	ldr	r3, [r5, #4]
 8004810:	b11b      	cbz	r3, 800481a <ai_platform_network_process+0x34a>
 8004812:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d6      	bne.n	80047c8 <ai_platform_network_process+0x2f8>
 800481a:	4658      	mov	r0, fp
 800481c:	f000 fdf0 	bl	8005400 <ai_layers_forward_all>
 8004820:	2f00      	cmp	r7, #0
 8004822:	d032      	beq.n	800488a <ai_platform_network_process+0x3ba>
 8004824:	883b      	ldrh	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d02f      	beq.n	800488a <ai_platform_network_process+0x3ba>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	b36b      	cbz	r3, 800488a <ai_platform_network_process+0x3ba>
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	b358      	cbz	r0, 800488a <ai_platform_network_process+0x3ba>
 8004832:	f04f 0800 	mov.w	r8, #0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6981      	ldr	r1, [r0, #24]
 800483a:	f8d3 a000 	ldr.w	sl, [r3]
 800483e:	680c      	ldr	r4, [r1, #0]
 8004840:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004844:	eb0a 0609 	add.w	r6, sl, r9
 8004848:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800484c:	00a4      	lsls	r4, r4, #2
 800484e:	eb0c 0302 	add.w	r3, ip, r2
 8004852:	d42a      	bmi.n	80048aa <ai_platform_network_process+0x3da>
 8004854:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004858:	4293      	cmp	r3, r2
 800485a:	bf24      	itt	cs
 800485c:	68f3      	ldrcs	r3, [r6, #12]
 800485e:	1ad3      	subcs	r3, r2, r3
 8004860:	6073      	str	r3, [r6, #4]
 8004862:	6981      	ldr	r1, [r0, #24]
 8004864:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8004868:	1b12      	subs	r2, r2, r4
 800486a:	4413      	add	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	6983      	ldr	r3, [r0, #24]
 8004870:	6872      	ldr	r2, [r6, #4]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	883b      	ldrh	r3, [r7, #0]
 8004876:	f108 0801 	add.w	r8, r8, #1
 800487a:	4598      	cmp	r8, r3
 800487c:	d205      	bcs.n	800488a <ai_platform_network_process+0x3ba>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	b11b      	cbz	r3, 800488a <ai_platform_network_process+0x3ba>
 8004882:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004886:	2800      	cmp	r0, #0
 8004888:	d1d5      	bne.n	8004836 <ai_platform_network_process+0x366>
 800488a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 800488e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8004892:	3001      	adds	r0, #1
 8004894:	b280      	uxth	r0, r0
 8004896:	4283      	cmp	r3, r0
 8004898:	f8ab 0016 	strh.w	r0, [fp, #22]
 800489c:	d888      	bhi.n	80047b0 <ai_platform_network_process+0x2e0>
 800489e:	4683      	mov	fp, r0
 80048a0:	e69e      	b.n	80045e0 <ai_platform_network_process+0x110>
 80048a2:	68b2      	ldr	r2, [r6, #8]
 80048a4:	f000 fe86 	bl	80055b4 <memcpy>
 80048a8:	e7a2      	b.n	80047f0 <ai_platform_network_process+0x320>
 80048aa:	6889      	ldr	r1, [r1, #8]
 80048ac:	4660      	mov	r0, ip
 80048ae:	f000 fe81 	bl	80055b4 <memcpy>
 80048b2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80048b6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80048ba:	440b      	add	r3, r1
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf24      	itt	cs
 80048c0:	68f3      	ldrcs	r3, [r6, #12]
 80048c2:	1ad3      	subcs	r3, r2, r3
 80048c4:	6073      	str	r3, [r6, #4]
 80048c6:	e7d5      	b.n	8004874 <ai_platform_network_process+0x3a4>
 80048c8:	2700      	movs	r7, #0
 80048ca:	e76c      	b.n	80047a6 <ai_platform_network_process+0x2d6>
 80048cc:	461d      	mov	r5, r3
 80048ce:	461f      	mov	r7, r3
 80048d0:	e769      	b.n	80047a6 <ai_platform_network_process+0x2d6>
 80048d2:	f104 0010 	add.w	r0, r4, #16
 80048d6:	2218      	movs	r2, #24
 80048d8:	2113      	movs	r1, #19
 80048da:	f000 f805 	bl	80048e8 <core_set_error>
 80048de:	f04f 0b00 	mov.w	fp, #0
 80048e2:	e67d      	b.n	80045e0 <ai_platform_network_process+0x110>

080048e4 <core_init>:
 80048e4:	2001      	movs	r0, #1
 80048e6:	4770      	bx	lr

080048e8 <core_set_error>:
 80048e8:	7803      	ldrb	r3, [r0, #0]
 80048ea:	b933      	cbnz	r3, 80048fa <core_set_error+0x12>
 80048ec:	7001      	strb	r1, [r0, #0]
 80048ee:	6803      	ldr	r3, [r0, #0]
 80048f0:	f362 231f 	bfi	r3, r2, #8, #24
 80048f4:	6003      	str	r3, [r0, #0]
 80048f6:	2001      	movs	r0, #1
 80048f8:	4770      	bx	lr
 80048fa:	2000      	movs	r0, #0
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop

08004900 <ai_dict8_dot_array_f32>:
 8004900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004904:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004908:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800490c:	f000 80c0 	beq.w	8004a90 <ai_dict8_dot_array_f32+0x190>
 8004910:	f101 0408 	add.w	r4, r1, #8
 8004914:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004918:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004a98 <ai_dict8_dot_array_f32+0x198>
 800491c:	eb04 0e09 	add.w	lr, r4, r9
 8004920:	f103 0520 	add.w	r5, r3, #32
 8004924:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004928:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800492c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8004930:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8004934:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004938:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800493c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8004940:	ed55 3a04 	vldr	s7, [r5, #-16]
 8004944:	ed55 4a03 	vldr	s9, [r5, #-12]
 8004948:	ed55 5a02 	vldr	s11, [r5, #-8]
 800494c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004950:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004954:	edd6 7a00 	vldr	s15, [r6]
 8004958:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800495c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004960:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004964:	ed9a 3a00 	vldr	s6, [sl]
 8004968:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800496c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8004970:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004974:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004978:	ed97 3a00 	vldr	s6, [r7]
 800497c:	ed96 5a00 	vldr	s10, [r6]
 8004980:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8004984:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8004988:	eee3 7a04 	vfma.f32	s15, s6, s8
 800498c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004990:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004994:	ed9a 3a00 	vldr	s6, [sl]
 8004998:	ed96 4a00 	vldr	s8, [r6]
 800499c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80049a0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80049a4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80049a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80049ac:	ed97 5a00 	vldr	s10, [r7]
 80049b0:	ed96 6a00 	vldr	s12, [r6]
 80049b4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80049b8:	3408      	adds	r4, #8
 80049ba:	45a6      	cmp	lr, r4
 80049bc:	f105 0520 	add.w	r5, r5, #32
 80049c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80049c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80049cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049d0:	d1a8      	bne.n	8004924 <ai_dict8_dot_array_f32+0x24>
 80049d2:	4449      	add	r1, r9
 80049d4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80049d8:	f01c 0c07 	ands.w	ip, ip, #7
 80049dc:	d050      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 80049de:	780c      	ldrb	r4, [r1, #0]
 80049e0:	edd3 6a00 	vldr	s13, [r3]
 80049e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80049e8:	edd4 7a00 	vldr	s15, [r4]
 80049ec:	f1bc 0f01 	cmp.w	ip, #1
 80049f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80049f4:	d044      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 80049f6:	784c      	ldrb	r4, [r1, #1]
 80049f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80049fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a00:	edd4 7a00 	vldr	s15, [r4]
 8004a04:	f1bc 0f02 	cmp.w	ip, #2
 8004a08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a0c:	d038      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 8004a0e:	788c      	ldrb	r4, [r1, #2]
 8004a10:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a14:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a18:	edd4 7a00 	vldr	s15, [r4]
 8004a1c:	f1bc 0f03 	cmp.w	ip, #3
 8004a20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a24:	d02c      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 8004a26:	78cc      	ldrb	r4, [r1, #3]
 8004a28:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a2c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a30:	edd4 7a00 	vldr	s15, [r4]
 8004a34:	f1bc 0f04 	cmp.w	ip, #4
 8004a38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a3c:	d020      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 8004a3e:	790c      	ldrb	r4, [r1, #4]
 8004a40:	edd3 6a04 	vldr	s13, [r3, #16]
 8004a44:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a48:	edd4 7a00 	vldr	s15, [r4]
 8004a4c:	f1bc 0f05 	cmp.w	ip, #5
 8004a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a54:	d014      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 8004a56:	794c      	ldrb	r4, [r1, #5]
 8004a58:	edd3 6a05 	vldr	s13, [r3, #20]
 8004a5c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a60:	edd4 7a00 	vldr	s15, [r4]
 8004a64:	f1bc 0f06 	cmp.w	ip, #6
 8004a68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a6c:	d008      	beq.n	8004a80 <ai_dict8_dot_array_f32+0x180>
 8004a6e:	7989      	ldrb	r1, [r1, #6]
 8004a70:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004a78:	edd2 6a00 	vldr	s13, [r2]
 8004a7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a80:	edd0 7a00 	vldr	s15, [r0]
 8004a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a88:	ed80 7a00 	vstr	s14, [r0]
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004a98 <ai_dict8_dot_array_f32+0x198>
 8004a94:	e7a0      	b.n	80049d8 <ai_dict8_dot_array_f32+0xd8>
 8004a96:	bf00      	nop
 8004a98:	00000000 	.word	0x00000000

08004a9c <ai_dict4_dot_array_f32>:
 8004a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004aa2:	f027 0c01 	bic.w	ip, r7, #1
 8004aa6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8004aaa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004aae:	f000 80ae 	beq.w	8004c0e <ai_dict4_dot_array_f32+0x172>
 8004ab2:	1d0d      	adds	r5, r1, #4
 8004ab4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8004ab8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004c14 <ai_dict4_dot_array_f32+0x178>
 8004abc:	eb05 0e09 	add.w	lr, r5, r9
 8004ac0:	f103 0420 	add.w	r4, r3, #32
 8004ac4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004ac8:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8004acc:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8004ad0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8004ad4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004ad8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8004adc:	ed14 5a04 	vldr	s10, [r4, #-16]
 8004ae0:	ed54 5a03 	vldr	s11, [r4, #-12]
 8004ae4:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004ae8:	ed54 6a01 	vldr	s13, [r4, #-4]
 8004aec:	f006 0a0f 	and.w	sl, r6, #15
 8004af0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004af4:	edda 7a00 	vldr	s15, [sl]
 8004af8:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8004afc:	0936      	lsrs	r6, r6, #4
 8004afe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b02:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004b06:	ed96 3a00 	vldr	s6, [r6]
 8004b0a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8004b0e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004b12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b16:	f00b 0b0f 	and.w	fp, fp, #15
 8004b1a:	edd6 3a00 	vldr	s7, [r6]
 8004b1e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8004b22:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004b26:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004b2a:	3504      	adds	r5, #4
 8004b2c:	ed9b 4a00 	vldr	s8, [fp]
 8004b30:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8004b34:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004b38:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004b3c:	f00a 0a0f 	and.w	sl, sl, #15
 8004b40:	eddb 4a00 	vldr	s9, [fp]
 8004b44:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004b48:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b4c:	45ae      	cmp	lr, r5
 8004b4e:	ed9a 5a00 	vldr	s10, [sl]
 8004b52:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8004b56:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004b5a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b5e:	f006 060f 	and.w	r6, r6, #15
 8004b62:	edda 5a00 	vldr	s11, [sl]
 8004b66:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004b6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b6e:	f104 0420 	add.w	r4, r4, #32
 8004b72:	ed96 6a00 	vldr	s12, [r6]
 8004b76:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b7e:	d1a1      	bne.n	8004ac4 <ai_dict4_dot_array_f32+0x28>
 8004b80:	4449      	add	r1, r9
 8004b82:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004b86:	459c      	cmp	ip, r3
 8004b88:	d92d      	bls.n	8004be6 <ai_dict4_dot_array_f32+0x14a>
 8004b8a:	f10c 0c07 	add.w	ip, ip, #7
 8004b8e:	f103 0508 	add.w	r5, r3, #8
 8004b92:	ebac 0c05 	sub.w	ip, ip, r5
 8004b96:	f02c 0407 	bic.w	r4, ip, #7
 8004b9a:	f103 0810 	add.w	r8, r3, #16
 8004b9e:	44a0      	add	r8, r4
 8004ba0:	f101 3eff 	add.w	lr, r1, #4294967295
 8004ba4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8004ba8:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004bac:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004bb0:	f004 060f 	and.w	r6, r4, #15
 8004bb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004bb8:	0924      	lsrs	r4, r4, #4
 8004bba:	edd6 7a00 	vldr	s15, [r6]
 8004bbe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004bc2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004bc6:	ed94 6a00 	vldr	s12, [r4]
 8004bca:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bce:	3508      	adds	r5, #8
 8004bd0:	45a8      	cmp	r8, r5
 8004bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bd6:	d1e5      	bne.n	8004ba4 <ai_dict4_dot_array_f32+0x108>
 8004bd8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004bdc:	f10c 0c01 	add.w	ip, ip, #1
 8004be0:	4461      	add	r1, ip
 8004be2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004be6:	07fc      	lsls	r4, r7, #31
 8004be8:	d509      	bpl.n	8004bfe <ai_dict4_dot_array_f32+0x162>
 8004bea:	7809      	ldrb	r1, [r1, #0]
 8004bec:	edd3 7a00 	vldr	s15, [r3]
 8004bf0:	090b      	lsrs	r3, r1, #4
 8004bf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004bf6:	edd2 6a00 	vldr	s13, [r2]
 8004bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bfe:	edd0 7a00 	vldr	s15, [r0]
 8004c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c06:	ed80 7a00 	vstr	s14, [r0]
 8004c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004c14 <ai_dict4_dot_array_f32+0x178>
 8004c12:	e7b8      	b.n	8004b86 <ai_dict4_dot_array_f32+0xea>
 8004c14:	00000000 	.word	0x00000000

08004c18 <forward_dense>:
 8004c18:	6942      	ldr	r2, [r0, #20]
 8004c1a:	8813      	ldrh	r3, [r2, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 81ca 	beq.w	8004fb6 <forward_dense+0x39e>
 8004c22:	6852      	ldr	r2, [r2, #4]
 8004c24:	6850      	ldr	r0, [r2, #4]
 8004c26:	b100      	cbz	r0, 8004c2a <forward_dense+0x12>
 8004c28:	6800      	ldr	r0, [r0, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	f240 81c0 	bls.w	8004fb0 <forward_dense+0x398>
 8004c30:	6911      	ldr	r1, [r2, #16]
 8004c32:	b101      	cbz	r1, 8004c36 <forward_dense+0x1e>
 8004c34:	6809      	ldr	r1, [r1, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	f000 81bf 	beq.w	8004fba <forward_dense+0x3a2>
 8004c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c40:	ed2d 8b10 	vpush	{d8-d15}
 8004c44:	69d3      	ldr	r3, [r2, #28]
 8004c46:	b091      	sub	sp, #68	; 0x44
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 820b 	beq.w	8005064 <forward_dense+0x44c>
 8004c4e:	681c      	ldr	r4, [r3, #0]
 8004c50:	9408      	str	r4, [sp, #32]
 8004c52:	f112 0418 	adds.w	r4, r2, #24
 8004c56:	f000 81df 	beq.w	8005018 <forward_dense+0x400>
 8004c5a:	8b12      	ldrh	r2, [r2, #24]
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	f240 81fe 	bls.w	800505e <forward_dense+0x446>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 81da 	beq.w	800501c <forward_dense+0x404>
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	9306      	str	r3, [sp, #24]
 8004c6c:	9b08      	ldr	r3, [sp, #32]
 8004c6e:	68cc      	ldr	r4, [r1, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	68c5      	ldr	r5, [r0, #12]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8004c7a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004c7e:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8004c82:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8004c86:	fa4c f505 	asr.w	r5, ip, r5
 8004c8a:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8004c8e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004c90:	2a04      	cmp	r2, #4
 8004c92:	fb07 f506 	mul.w	r5, r7, r6
 8004c96:	6864      	ldr	r4, [r4, #4]
 8004c98:	9507      	str	r5, [sp, #28]
 8004c9a:	f000 81dd 	beq.w	8005058 <forward_dense+0x440>
 8004c9e:	2a08      	cmp	r2, #8
 8004ca0:	f000 81da 	beq.w	8005058 <forward_dense+0x440>
 8004ca4:	f04f 0a00 	mov.w	sl, #0
 8004ca8:	698a      	ldr	r2, [r1, #24]
 8004caa:	6981      	ldr	r1, [r0, #24]
 8004cac:	6890      	ldr	r0, [r2, #8]
 8004cae:	9a08      	ldr	r2, [sp, #32]
 8004cb0:	9004      	str	r0, [sp, #16]
 8004cb2:	6952      	ldr	r2, [r2, #20]
 8004cb4:	688f      	ldr	r7, [r1, #8]
 8004cb6:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004cba:	00a2      	lsls	r2, r4, #2
 8004cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cbe:	1886      	adds	r6, r0, r2
 8004cc0:	9a07      	ldr	r2, [sp, #28]
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	f000 81c3 	beq.w	800504e <forward_dense+0x436>
 8004cc8:	f1a8 0210 	sub.w	r2, r8, #16
 8004ccc:	0912      	lsrs	r2, r2, #4
 8004cce:	3201      	adds	r2, #1
 8004cd0:	0192      	lsls	r2, r2, #6
 8004cd2:	920c      	str	r2, [sp, #48]	; 0x30
 8004cd4:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8004cda:	689d      	ldr	r5, [r3, #8]
 8004cdc:	9b06      	ldr	r3, [sp, #24]
 8004cde:	eddf aad0 	vldr	s21, [pc, #832]	; 8005020 <forward_dense+0x408>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	9205      	str	r2, [sp, #20]
 8004ce6:	f008 020f 	and.w	r2, r8, #15
 8004cea:	920d      	str	r2, [sp, #52]	; 0x34
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d043      	beq.n	8004d78 <forward_dense+0x160>
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	689c      	ldr	r4, [r3, #8]
 8004cf4:	9b04      	ldr	r3, [sp, #16]
 8004cf6:	f1ba 0f00 	cmp.w	sl, #0
 8004cfa:	d042      	beq.n	8004d82 <forward_dense+0x16a>
 8004cfc:	42b3      	cmp	r3, r6
 8004cfe:	d22a      	bcs.n	8004d56 <forward_dense+0x13e>
 8004d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d02:	469b      	mov	fp, r3
 8004d04:	ab0f      	add	r3, sp, #60	; 0x3c
 8004d06:	9303      	str	r3, [sp, #12]
 8004d08:	2a04      	cmp	r2, #4
 8004d0a:	4633      	mov	r3, r6
 8004d0c:	4646      	mov	r6, r8
 8004d0e:	4698      	mov	r8, r3
 8004d10:	f000 8156 	beq.w	8004fc0 <forward_dense+0x3a8>
 8004d14:	2c00      	cmp	r4, #0
 8004d16:	f000 8185 	beq.w	8005024 <forward_dense+0x40c>
 8004d1a:	f8d4 c000 	ldr.w	ip, [r4]
 8004d1e:	9803      	ldr	r0, [sp, #12]
 8004d20:	9600      	str	r6, [sp, #0]
 8004d22:	463b      	mov	r3, r7
 8004d24:	4629      	mov	r1, r5
 8004d26:	4652      	mov	r2, sl
 8004d28:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004d2c:	f7ff fde8 	bl	8004900 <ai_dict8_dot_array_f32>
 8004d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d32:	f84b 3b04 	str.w	r3, [fp], #4
 8004d36:	45c3      	cmp	fp, r8
 8004d38:	f104 0404 	add.w	r4, r4, #4
 8004d3c:	444d      	add	r5, r9
 8004d3e:	d3e9      	bcc.n	8004d14 <forward_dense+0xfc>
 8004d40:	4643      	mov	r3, r8
 8004d42:	46b0      	mov	r8, r6
 8004d44:	461e      	mov	r6, r3
 8004d46:	9a04      	ldr	r2, [sp, #16]
 8004d48:	43d3      	mvns	r3, r2
 8004d4a:	4433      	add	r3, r6
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	3304      	adds	r3, #4
 8004d52:	18d3      	adds	r3, r2, r3
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d58:	9b05      	ldr	r3, [sp, #20]
 8004d5a:	4417      	add	r7, r2
 8004d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d5e:	4416      	add	r6, r2
 8004d60:	9a07      	ldr	r2, [sp, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	4293      	cmp	r3, r2
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	f000 8171 	beq.w	800504e <forward_dense+0x436>
 8004d6c:	9b08      	ldr	r3, [sp, #32]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	689d      	ldr	r5, [r3, #8]
 8004d72:	9b06      	ldr	r3, [sp, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1bb      	bne.n	8004cf0 <forward_dense+0xd8>
 8004d78:	461c      	mov	r4, r3
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	f1ba 0f00 	cmp.w	sl, #0
 8004d80:	d1bc      	bne.n	8004cfc <forward_dense+0xe4>
 8004d82:	42b3      	cmp	r3, r6
 8004d84:	d2e7      	bcs.n	8004d56 <forward_dense+0x13e>
 8004d86:	4618      	mov	r0, r3
 8004d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d8a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004d8e:	eb07 0c03 	add.w	ip, r7, r3
 8004d92:	469e      	mov	lr, r3
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	f000 80ff 	beq.w	8004f98 <forward_dense+0x380>
 8004d9a:	f1b8 0f0f 	cmp.w	r8, #15
 8004d9e:	edd4 fa00 	vldr	s31, [r4]
 8004da2:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005020 <forward_dense+0x408>
 8004da6:	f104 0404 	add.w	r4, r4, #4
 8004daa:	f240 80fd 	bls.w	8004fa8 <forward_dense+0x390>
 8004dae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004db2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004db6:	4641      	mov	r1, r8
 8004db8:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8004dbc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004dc0:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004dc4:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004dc8:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004dcc:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004dd0:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004dd4:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004dd8:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004ddc:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004de0:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004de4:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004de8:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004dec:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004df0:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004df4:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004df8:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004dfc:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004e00:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004e04:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004e08:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004e0c:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004e10:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004e14:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004e18:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004e1c:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004e20:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004e24:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004e28:	ed13 7a02 	vldr	s14, [r3, #-8]
 8004e2c:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004e30:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004e34:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004e38:	3910      	subs	r1, #16
 8004e3a:	290f      	cmp	r1, #15
 8004e3c:	ed53 ea01 	vldr	s29, [r3, #-4]
 8004e40:	ed12 ea01 	vldr	s28, [r2, #-4]
 8004e44:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8004e48:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004e4c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004e50:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8004e54:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8004e58:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8004e5c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004e60:	eee8 7a88 	vfma.f32	s15, s17, s16
 8004e64:	eee0 7a20 	vfma.f32	s15, s0, s1
 8004e68:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004e6c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004e70:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004e74:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004e78:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004e7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e80:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004e84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e88:	d896      	bhi.n	8004db8 <forward_dense+0x1a0>
 8004e8a:	eb05 010e 	add.w	r1, r5, lr
 8004e8e:	465b      	mov	r3, fp
 8004e90:	4662      	mov	r2, ip
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d075      	beq.n	8004f82 <forward_dense+0x36a>
 8004e96:	ed91 7a00 	vldr	s14, [r1]
 8004e9a:	edd2 7a00 	vldr	s15, [r2]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ea4:	d06d      	beq.n	8004f82 <forward_dense+0x36a>
 8004ea6:	ed91 7a01 	vldr	s14, [r1, #4]
 8004eaa:	edd2 7a01 	vldr	s15, [r2, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004eb4:	d065      	beq.n	8004f82 <forward_dense+0x36a>
 8004eb6:	ed91 7a02 	vldr	s14, [r1, #8]
 8004eba:	edd2 7a02 	vldr	s15, [r2, #8]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ec4:	d05d      	beq.n	8004f82 <forward_dense+0x36a>
 8004ec6:	ed91 7a03 	vldr	s14, [r1, #12]
 8004eca:	edd2 7a03 	vldr	s15, [r2, #12]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ed4:	d055      	beq.n	8004f82 <forward_dense+0x36a>
 8004ed6:	ed91 7a04 	vldr	s14, [r1, #16]
 8004eda:	edd2 7a04 	vldr	s15, [r2, #16]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ee4:	d04d      	beq.n	8004f82 <forward_dense+0x36a>
 8004ee6:	ed91 7a05 	vldr	s14, [r1, #20]
 8004eea:	edd2 7a05 	vldr	s15, [r2, #20]
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ef4:	d045      	beq.n	8004f82 <forward_dense+0x36a>
 8004ef6:	ed91 7a06 	vldr	s14, [r1, #24]
 8004efa:	edd2 7a06 	vldr	s15, [r2, #24]
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f04:	d03d      	beq.n	8004f82 <forward_dense+0x36a>
 8004f06:	ed91 7a07 	vldr	s14, [r1, #28]
 8004f0a:	edd2 7a07 	vldr	s15, [r2, #28]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f14:	d035      	beq.n	8004f82 <forward_dense+0x36a>
 8004f16:	ed91 7a08 	vldr	s14, [r1, #32]
 8004f1a:	edd2 7a08 	vldr	s15, [r2, #32]
 8004f1e:	2b09      	cmp	r3, #9
 8004f20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f24:	d02d      	beq.n	8004f82 <forward_dense+0x36a>
 8004f26:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004f2a:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004f2e:	2b0a      	cmp	r3, #10
 8004f30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f34:	d025      	beq.n	8004f82 <forward_dense+0x36a>
 8004f36:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8004f3a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004f3e:	2b0b      	cmp	r3, #11
 8004f40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f44:	d01d      	beq.n	8004f82 <forward_dense+0x36a>
 8004f46:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8004f4a:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f54:	d015      	beq.n	8004f82 <forward_dense+0x36a>
 8004f56:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8004f5a:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004f5e:	2b0d      	cmp	r3, #13
 8004f60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f64:	d00d      	beq.n	8004f82 <forward_dense+0x36a>
 8004f66:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8004f6a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8004f6e:	2b0e      	cmp	r3, #14
 8004f70:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f74:	d005      	beq.n	8004f82 <forward_dense+0x36a>
 8004f76:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8004f7a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004f7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f82:	444d      	add	r5, r9
 8004f84:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8004f88:	ece0 6a01 	vstmia	r0!, {s13}
 8004f8c:	42b0      	cmp	r0, r6
 8004f8e:	f4bf aeda 	bcs.w	8004d46 <forward_dense+0x12e>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	f47f af01 	bne.w	8004d9a <forward_dense+0x182>
 8004f98:	f1b8 0f0f 	cmp.w	r8, #15
 8004f9c:	eef0 fa6a 	vmov.f32	s31, s21
 8004fa0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005020 <forward_dense+0x408>
 8004fa4:	f63f af03 	bhi.w	8004dae <forward_dense+0x196>
 8004fa8:	4643      	mov	r3, r8
 8004faa:	4629      	mov	r1, r5
 8004fac:	463a      	mov	r2, r7
 8004fae:	e770      	b.n	8004e92 <forward_dense+0x27a>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	deff      	udf	#255	; 0xff
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	deff      	udf	#255	; 0xff
 8004fba:	2300      	movs	r3, #0
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	deff      	udf	#255	; 0xff
 8004fc0:	b1ac      	cbz	r4, 8004fee <forward_dense+0x3d6>
 8004fc2:	f8d4 c000 	ldr.w	ip, [r4]
 8004fc6:	9803      	ldr	r0, [sp, #12]
 8004fc8:	9600      	str	r6, [sp, #0]
 8004fca:	463b      	mov	r3, r7
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4652      	mov	r2, sl
 8004fd0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004fd4:	f7ff fd62 	bl	8004a9c <ai_dict4_dot_array_f32>
 8004fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fda:	f84b 3b04 	str.w	r3, [fp], #4
 8004fde:	45c3      	cmp	fp, r8
 8004fe0:	f104 0404 	add.w	r4, r4, #4
 8004fe4:	444d      	add	r5, r9
 8004fe6:	f4bf aeab 	bcs.w	8004d40 <forward_dense+0x128>
 8004fea:	2c00      	cmp	r4, #0
 8004fec:	d1e9      	bne.n	8004fc2 <forward_dense+0x3aa>
 8004fee:	4634      	mov	r4, r6
 8004ff0:	4646      	mov	r6, r8
 8004ff2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ff6:	9400      	str	r4, [sp, #0]
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4640      	mov	r0, r8
 8005000:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005004:	f7ff fd4a 	bl	8004a9c <ai_dict4_dot_array_f32>
 8005008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800500a:	f84b 3b04 	str.w	r3, [fp], #4
 800500e:	45b3      	cmp	fp, r6
 8005010:	444d      	add	r5, r9
 8005012:	d3f0      	bcc.n	8004ff6 <forward_dense+0x3de>
 8005014:	46a0      	mov	r8, r4
 8005016:	e696      	b.n	8004d46 <forward_dense+0x12e>
 8005018:	9406      	str	r4, [sp, #24]
 800501a:	e627      	b.n	8004c6c <forward_dense+0x54>
 800501c:	9306      	str	r3, [sp, #24]
 800501e:	e625      	b.n	8004c6c <forward_dense+0x54>
 8005020:	00000000 	.word	0x00000000
 8005024:	4634      	mov	r4, r6
 8005026:	4646      	mov	r6, r8
 8005028:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800502c:	9400      	str	r4, [sp, #0]
 800502e:	463b      	mov	r3, r7
 8005030:	4629      	mov	r1, r5
 8005032:	4652      	mov	r2, sl
 8005034:	4640      	mov	r0, r8
 8005036:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800503a:	f7ff fc61 	bl	8004900 <ai_dict8_dot_array_f32>
 800503e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005040:	f84b 3b04 	str.w	r3, [fp], #4
 8005044:	45b3      	cmp	fp, r6
 8005046:	444d      	add	r5, r9
 8005048:	d3f0      	bcc.n	800502c <forward_dense+0x414>
 800504a:	46a0      	mov	r8, r4
 800504c:	e67b      	b.n	8004d46 <forward_dense+0x12e>
 800504e:	b011      	add	sp, #68	; 0x44
 8005050:	ecbd 8b10 	vpop	{d8-d15}
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005058:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800505c:	e624      	b.n	8004ca8 <forward_dense+0x90>
 800505e:	2300      	movs	r3, #0
 8005060:	9306      	str	r3, [sp, #24]
 8005062:	e603      	b.n	8004c6c <forward_dense+0x54>
 8005064:	9308      	str	r3, [sp, #32]
 8005066:	e5f4      	b.n	8004c52 <forward_dense+0x3a>

08005068 <nl_func_relu_generic_array_f32>:
 8005068:	b430      	push	{r4, r5}
 800506a:	edd3 6a02 	vldr	s13, [r3, #8]
 800506e:	6880      	ldr	r0, [r0, #8]
 8005070:	688c      	ldr	r4, [r1, #8]
 8005072:	ed93 7a00 	vldr	s14, [r3]
 8005076:	ed93 6a01 	vldr	s12, [r3, #4]
 800507a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800507e:	3a01      	subs	r2, #1
 8005080:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	4410      	add	r0, r2
 800508c:	4422      	add	r2, r4
 800508e:	d421      	bmi.n	80050d4 <nl_func_relu_generic_array_f32+0x6c>
 8005090:	42a2      	cmp	r2, r4
 8005092:	d33d      	bcc.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 8005094:	1d13      	adds	r3, r2, #4
 8005096:	1d02      	adds	r2, r0, #4
 8005098:	e010      	b.n	80050bc <nl_func_relu_generic_array_f32+0x54>
 800509a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80050a6:	dd01      	ble.n	80050ac <nl_func_relu_generic_array_f32+0x44>
 80050a8:	ee65 7a86 	vmul.f32	s15, s11, s12
 80050ac:	ed62 7a01 	vstmdb	r2!, {s15}
 80050b0:	6888      	ldr	r0, [r1, #8]
 80050b2:	f1a3 0408 	sub.w	r4, r3, #8
 80050b6:	4284      	cmp	r4, r0
 80050b8:	462b      	mov	r3, r5
 80050ba:	d329      	bcc.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 80050bc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050c0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	f1a3 0504 	sub.w	r5, r3, #4
 80050cc:	dce5      	bgt.n	800509a <nl_func_relu_generic_array_f32+0x32>
 80050ce:	eef0 7a66 	vmov.f32	s15, s13
 80050d2:	e7eb      	b.n	80050ac <nl_func_relu_generic_array_f32+0x44>
 80050d4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80050d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050dc:	d01a      	beq.n	8005114 <nl_func_relu_generic_array_f32+0xac>
 80050de:	42a2      	cmp	r2, r4
 80050e0:	d316      	bcc.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 80050e2:	1d13      	adds	r3, r2, #4
 80050e4:	1d02      	adds	r2, r0, #4
 80050e6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050ea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80050ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f2:	f1a3 0408 	sub.w	r4, r3, #8
 80050f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fa:	f1a3 0004 	sub.w	r0, r3, #4
 80050fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005102:	4623      	mov	r3, r4
 8005104:	d51e      	bpl.n	8005144 <nl_func_relu_generic_array_f32+0xdc>
 8005106:	ed62 6a01 	vstmdb	r2!, {s13}
 800510a:	688b      	ldr	r3, [r1, #8]
 800510c:	42a3      	cmp	r3, r4
 800510e:	d91e      	bls.n	800514e <nl_func_relu_generic_array_f32+0xe6>
 8005110:	bc30      	pop	{r4, r5}
 8005112:	4770      	bx	lr
 8005114:	42a2      	cmp	r2, r4
 8005116:	d3fb      	bcc.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 8005118:	1d13      	adds	r3, r2, #4
 800511a:	2500      	movs	r5, #0
 800511c:	1d02      	adds	r2, r0, #4
 800511e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005126:	f1a3 0408 	sub.w	r4, r3, #8
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	f1a3 0004 	sub.w	r0, r3, #4
 8005132:	4623      	mov	r3, r4
 8005134:	d80d      	bhi.n	8005152 <nl_func_relu_generic_array_f32+0xea>
 8005136:	ed62 7a01 	vstmdb	r2!, {s15}
 800513a:	688b      	ldr	r3, [r1, #8]
 800513c:	42a3      	cmp	r3, r4
 800513e:	d8e7      	bhi.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 8005140:	4603      	mov	r3, r0
 8005142:	e7ec      	b.n	800511e <nl_func_relu_generic_array_f32+0xb6>
 8005144:	ed62 7a01 	vstmdb	r2!, {s15}
 8005148:	688c      	ldr	r4, [r1, #8]
 800514a:	429c      	cmp	r4, r3
 800514c:	d8e0      	bhi.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 800514e:	4603      	mov	r3, r0
 8005150:	e7c9      	b.n	80050e6 <nl_func_relu_generic_array_f32+0x7e>
 8005152:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005156:	688c      	ldr	r4, [r1, #8]
 8005158:	429c      	cmp	r4, r3
 800515a:	d8d9      	bhi.n	8005110 <nl_func_relu_generic_array_f32+0xa8>
 800515c:	4603      	mov	r3, r0
 800515e:	e7de      	b.n	800511e <nl_func_relu_generic_array_f32+0xb6>

08005160 <forward_relu>:
 8005160:	6942      	ldr	r2, [r0, #20]
 8005162:	8813      	ldrh	r3, [r2, #0]
 8005164:	b33b      	cbz	r3, 80051b6 <forward_relu+0x56>
 8005166:	b470      	push	{r4, r5, r6}
 8005168:	6852      	ldr	r2, [r2, #4]
 800516a:	6856      	ldr	r6, [r2, #4]
 800516c:	b106      	cbz	r6, 8005170 <forward_relu+0x10>
 800516e:	6836      	ldr	r6, [r6, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d91d      	bls.n	80051b0 <forward_relu+0x50>
 8005174:	6913      	ldr	r3, [r2, #16]
 8005176:	b103      	cbz	r3, 800517a <forward_relu+0x1a>
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6982      	ldr	r2, [r0, #24]
 800517c:	68b4      	ldr	r4, [r6, #8]
 800517e:	6998      	ldr	r0, [r3, #24]
 8005180:	69b1      	ldr	r1, [r6, #24]
 8005182:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005186:	2a00      	cmp	r2, #0
 8005188:	d041      	beq.n	800520e <forward_relu+0xae>
 800518a:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 800518e:	2d01      	cmp	r5, #1
 8005190:	d013      	beq.n	80051ba <forward_relu+0x5a>
 8005192:	2c00      	cmp	r4, #0
 8005194:	d06f      	beq.n	8005276 <forward_relu+0x116>
 8005196:	68f6      	ldr	r6, [r6, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800519e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051a2:	42a6      	cmp	r6, r4
 80051a4:	fb05 f202 	mul.w	r2, r5, r2
 80051a8:	d1f9      	bne.n	800519e <forward_relu+0x3e>
 80051aa:	bc70      	pop	{r4, r5, r6}
 80051ac:	f7ff bf5c 	b.w	8005068 <nl_func_relu_generic_array_f32>
 80051b0:	2300      	movs	r3, #0
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	deff      	udf	#255	; 0xff
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	deff      	udf	#255	; 0xff
 80051ba:	6880      	ldr	r0, [r0, #8]
 80051bc:	688a      	ldr	r2, [r1, #8]
 80051be:	ed93 7a00 	vldr	s14, [r3]
 80051c2:	b184      	cbz	r4, 80051e6 <forward_relu+0x86>
 80051c4:	68f6      	ldr	r6, [r6, #12]
 80051c6:	462b      	mov	r3, r5
 80051c8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80051cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051d0:	42a6      	cmp	r6, r4
 80051d2:	fb05 f303 	mul.w	r3, r5, r3
 80051d6:	d1f9      	bne.n	80051cc <forward_relu+0x6c>
 80051d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051dc:	3b01      	subs	r3, #1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	18d2      	adds	r2, r2, r3
 80051e2:	4418      	add	r0, r3
 80051e4:	d23d      	bcs.n	8005262 <forward_relu+0x102>
 80051e6:	1d13      	adds	r3, r2, #4
 80051e8:	2500      	movs	r5, #0
 80051ea:	1d02      	adds	r2, r0, #4
 80051ec:	ed53 7a01 	vldr	s15, [r3, #-4]
 80051f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	f1a3 0004 	sub.w	r0, r3, #4
 80051fc:	d833      	bhi.n	8005266 <forward_relu+0x106>
 80051fe:	ed62 7a01 	vstmdb	r2!, {s15}
 8005202:	688c      	ldr	r4, [r1, #8]
 8005204:	3b08      	subs	r3, #8
 8005206:	429c      	cmp	r4, r3
 8005208:	d82b      	bhi.n	8005262 <forward_relu+0x102>
 800520a:	4603      	mov	r3, r0
 800520c:	e7ee      	b.n	80051ec <forward_relu+0x8c>
 800520e:	6880      	ldr	r0, [r0, #8]
 8005210:	688b      	ldr	r3, [r1, #8]
 8005212:	b184      	cbz	r4, 8005236 <forward_relu+0xd6>
 8005214:	68f6      	ldr	r6, [r6, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800521c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005220:	42a6      	cmp	r6, r4
 8005222:	fb05 f202 	mul.w	r2, r5, r2
 8005226:	d1f9      	bne.n	800521c <forward_relu+0xbc>
 8005228:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800522c:	3a01      	subs	r2, #1
 800522e:	0092      	lsls	r2, r2, #2
 8005230:	189b      	adds	r3, r3, r2
 8005232:	4410      	add	r0, r2
 8005234:	d215      	bcs.n	8005262 <forward_relu+0x102>
 8005236:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800527c <forward_relu+0x11c>
 800523a:	3304      	adds	r3, #4
 800523c:	3004      	adds	r0, #4
 800523e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	bfb8      	it	lt
 800524c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005250:	ed60 7a01 	vstmdb	r0!, {s15}
 8005254:	688c      	ldr	r4, [r1, #8]
 8005256:	f1a3 0208 	sub.w	r2, r3, #8
 800525a:	4294      	cmp	r4, r2
 800525c:	f1a3 0304 	sub.w	r3, r3, #4
 8005260:	d9ed      	bls.n	800523e <forward_relu+0xde>
 8005262:	bc70      	pop	{r4, r5, r6}
 8005264:	4770      	bx	lr
 8005266:	f842 5d04 	str.w	r5, [r2, #-4]!
 800526a:	688c      	ldr	r4, [r1, #8]
 800526c:	3b08      	subs	r3, #8
 800526e:	429c      	cmp	r4, r3
 8005270:	d8f7      	bhi.n	8005262 <forward_relu+0x102>
 8005272:	4603      	mov	r3, r0
 8005274:	e7ba      	b.n	80051ec <forward_relu+0x8c>
 8005276:	2201      	movs	r2, #1
 8005278:	e797      	b.n	80051aa <forward_relu+0x4a>
 800527a:	bf00      	nop
 800527c:	00000000 	.word	0x00000000

08005280 <forward_sm>:
 8005280:	6942      	ldr	r2, [r0, #20]
 8005282:	8813      	ldrh	r3, [r2, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 808a 	beq.w	800539e <forward_sm+0x11e>
 800528a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528e:	ed2d 8b04 	vpush	{d8-d9}
 8005292:	6852      	ldr	r2, [r2, #4]
 8005294:	6855      	ldr	r5, [r2, #4]
 8005296:	b085      	sub	sp, #20
 8005298:	b105      	cbz	r5, 800529c <forward_sm+0x1c>
 800529a:	682d      	ldr	r5, [r5, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d976      	bls.n	800538e <forward_sm+0x10e>
 80052a0:	6913      	ldr	r3, [r2, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d071      	beq.n	800538a <forward_sm+0x10a>
 80052a6:	681f      	ldr	r7, [r3, #0]
 80052a8:	68ec      	ldr	r4, [r5, #12]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	68ab      	ldr	r3, [r5, #8]
 80052ae:	6850      	ldr	r0, [r2, #4]
 80052b0:	6862      	ldr	r2, [r4, #4]
 80052b2:	9201      	str	r2, [sp, #4]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	d074      	beq.n	80053a2 <forward_sm+0x122>
 80052b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052bc:	2201      	movs	r2, #1
 80052be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80052c2:	429c      	cmp	r4, r3
 80052c4:	fb01 f202 	mul.w	r2, r1, r2
 80052c8:	d1f9      	bne.n	80052be <forward_sm+0x3e>
 80052ca:	69ae      	ldr	r6, [r5, #24]
 80052cc:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80052d0:	9f01      	ldr	r7, [sp, #4]
 80052d2:	68b5      	ldr	r5, [r6, #8]
 80052d4:	68f3      	ldr	r3, [r6, #12]
 80052d6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80052da:	1bd1      	subs	r1, r2, r7
 80052dc:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80052e0:	1a12      	subs	r2, r2, r0
 80052e2:	429d      	cmp	r5, r3
 80052e4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80052e8:	d345      	bcc.n	8005376 <forward_sm+0xf6>
 80052ea:	00bb      	lsls	r3, r7, #2
 80052ec:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f1c8 0200 	rsb	r2, r8, #0
 80052f6:	425b      	negs	r3, r3
 80052f8:	9203      	str	r2, [sp, #12]
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8005300:	60b5      	str	r5, [r6, #8]
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	f8c9 4008 	str.w	r4, [r9, #8]
 8005308:	68b2      	ldr	r2, [r6, #8]
 800530a:	2b01      	cmp	r3, #1
 800530c:	ed92 8a00 	vldr	s16, [r2]
 8005310:	d940      	bls.n	8005394 <forward_sm+0x114>
 8005312:	9900      	ldr	r1, [sp, #0]
 8005314:	1d13      	adds	r3, r2, #4
 8005316:	1857      	adds	r7, r2, r1
 8005318:	ecf3 7a01 	vldmia	r3!, {s15}
 800531c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	bfb8      	it	lt
 8005326:	eeb0 8a67 	vmovlt.f32	s16, s15
 800532a:	429f      	cmp	r7, r3
 800532c:	d1f4      	bne.n	8005318 <forward_sm+0x98>
 800532e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 80053a8 <forward_sm+0x128>
 8005332:	4692      	mov	sl, r2
 8005334:	46a3      	mov	fp, r4
 8005336:	46a0      	mov	r8, r4
 8005338:	ecba 0a01 	vldmia	sl!, {s0}
 800533c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005340:	f003 f81a 	bl	8008378 <expf>
 8005344:	4557      	cmp	r7, sl
 8005346:	eca8 0a01 	vstmia	r8!, {s0}
 800534a:	ee78 8a80 	vadd.f32	s17, s17, s0
 800534e:	d1f3      	bne.n	8005338 <forward_sm+0xb8>
 8005350:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8005354:	9b00      	ldr	r3, [sp, #0]
 8005356:	18e2      	adds	r2, r4, r3
 8005358:	eddb 7a00 	vldr	s15, [fp]
 800535c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005360:	eceb 7a01 	vstmia	fp!, {s15}
 8005364:	455a      	cmp	r2, fp
 8005366:	d1f7      	bne.n	8005358 <forward_sm+0xd8>
 8005368:	9a02      	ldr	r2, [sp, #8]
 800536a:	68f3      	ldr	r3, [r6, #12]
 800536c:	4415      	add	r5, r2
 800536e:	9a03      	ldr	r2, [sp, #12]
 8005370:	429d      	cmp	r5, r3
 8005372:	4414      	add	r4, r2
 8005374:	d2c4      	bcs.n	8005300 <forward_sm+0x80>
 8005376:	60b3      	str	r3, [r6, #8]
 8005378:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800537c:	f8c9 3008 	str.w	r3, [r9, #8]
 8005380:	b005      	add	sp, #20
 8005382:	ecbd 8b04 	vpop	{d8-d9}
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	deff      	udf	#255	; 0xff
 800538e:	2300      	movs	r3, #0
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	deff      	udf	#255	; 0xff
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0e7      	beq.n	8005368 <forward_sm+0xe8>
 8005398:	9b00      	ldr	r3, [sp, #0]
 800539a:	18d7      	adds	r7, r2, r3
 800539c:	e7c7      	b.n	800532e <forward_sm+0xae>
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	deff      	udf	#255	; 0xff
 80053a2:	2201      	movs	r2, #1
 80053a4:	e791      	b.n	80052ca <forward_sm+0x4a>
 80053a6:	bf00      	nop
 80053a8:	00000000 	.word	0x00000000

080053ac <ai_check_custom_types>:
 80053ac:	4b13      	ldr	r3, [pc, #76]	; (80053fc <ai_check_custom_types+0x50>)
 80053ae:	b082      	sub	sp, #8
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	b118      	cbz	r0, 80053be <ai_check_custom_types+0x12>
 80053b6:	7803      	ldrb	r3, [r0, #0]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d002      	beq.n	80053c2 <ai_check_custom_types+0x16>
 80053bc:	2000      	movs	r0, #0
 80053be:	b002      	add	sp, #8
 80053c0:	4770      	bx	lr
 80053c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <ai_check_custom_types+0x28>
 80053ca:	2001      	movs	r0, #1
 80053cc:	f080 0001 	eor.w	r0, r0, #1
 80053d0:	b002      	add	sp, #8
 80053d2:	4770      	bx	lr
 80053d4:	7842      	ldrb	r2, [r0, #1]
 80053d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80053da:	429a      	cmp	r2, r3
 80053dc:	f100 0001 	add.w	r0, r0, #1
 80053e0:	d1f3      	bne.n	80053ca <ai_check_custom_types+0x1e>
 80053e2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80053e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d1ed      	bne.n	80053ca <ai_check_custom_types+0x1e>
 80053ee:	7842      	ldrb	r2, [r0, #1]
 80053f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d1e8      	bne.n	80053ca <ai_check_custom_types+0x1e>
 80053f8:	2000      	movs	r0, #0
 80053fa:	e7e7      	b.n	80053cc <ai_check_custom_types+0x20>
 80053fc:	080086d8 	.word	0x080086d8

08005400 <ai_layers_forward_all>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8005404:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005406:	4604      	mov	r4, r0
 8005408:	b31e      	cbz	r6, 8005452 <ai_layers_forward_all+0x52>
 800540a:	b1cd      	cbz	r5, 8005440 <ai_layers_forward_all+0x40>
 800540c:	6545      	str	r5, [r0, #84]	; 0x54
 800540e:	4629      	mov	r1, r5
 8005410:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005412:	2001      	movs	r0, #1
 8005414:	47b0      	blx	r6
 8005416:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005418:	2700      	movs	r7, #0
 800541a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800541c:	2002      	movs	r0, #2
 800541e:	47b0      	blx	r6
 8005420:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005422:	692b      	ldr	r3, [r5, #16]
 8005424:	4628      	mov	r0, r5
 8005426:	4798      	blx	r3
 8005428:	68eb      	ldr	r3, [r5, #12]
 800542a:	429d      	cmp	r5, r3
 800542c:	f04f 0003 	mov.w	r0, #3
 8005430:	4619      	mov	r1, r3
 8005432:	d006      	beq.n	8005442 <ai_layers_forward_all+0x42>
 8005434:	6563      	str	r3, [r4, #84]	; 0x54
 8005436:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005438:	47b0      	blx	r6
 800543a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800543c:	2900      	cmp	r1, #0
 800543e:	d1ec      	bne.n	800541a <ai_layers_forward_all+0x1a>
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	2100      	movs	r1, #0
 8005444:	6567      	str	r7, [r4, #84]	; 0x54
 8005446:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005448:	47b0      	blx	r6
 800544a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800544c:	2900      	cmp	r1, #0
 800544e:	d1e4      	bne.n	800541a <ai_layers_forward_all+0x1a>
 8005450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005452:	2d00      	cmp	r5, #0
 8005454:	d0f4      	beq.n	8005440 <ai_layers_forward_all+0x40>
 8005456:	6545      	str	r5, [r0, #84]	; 0x54
 8005458:	692b      	ldr	r3, [r5, #16]
 800545a:	4628      	mov	r0, r5
 800545c:	4798      	blx	r3
 800545e:	68eb      	ldr	r3, [r5, #12]
 8005460:	42ab      	cmp	r3, r5
 8005462:	d004      	beq.n	800546e <ai_layers_forward_all+0x6e>
 8005464:	6563      	str	r3, [r4, #84]	; 0x54
 8005466:	461d      	mov	r5, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f5      	bne.n	8005458 <ai_layers_forward_all+0x58>
 800546c:	e7e8      	b.n	8005440 <ai_layers_forward_all+0x40>
 800546e:	2300      	movs	r3, #0
 8005470:	6563      	str	r3, [r4, #84]	; 0x54
 8005472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005474 <ai_array_to_buffer_fmt>:
 8005474:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005478:	2b02      	cmp	r3, #2
 800547a:	d01f      	beq.n	80054bc <ai_array_to_buffer_fmt+0x48>
 800547c:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <ai_array_to_buffer_fmt+0x7c>)
 800547e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005482:	4293      	cmp	r3, r2
 8005484:	d00a      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 8005486:	dc0d      	bgt.n	80054a4 <ai_array_to_buffer_fmt+0x30>
 8005488:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <ai_array_to_buffer_fmt+0x80>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d006      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 800548e:	dd1d      	ble.n	80054cc <ai_array_to_buffer_fmt+0x58>
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <ai_array_to_buffer_fmt+0x84>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d002      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 8005496:	320f      	adds	r2, #15
 8005498:	4293      	cmp	r3, r2
 800549a:	d10d      	bne.n	80054b8 <ai_array_to_buffer_fmt+0x44>
 800549c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80054a0:	4318      	orrs	r0, r3
 80054a2:	4770      	bx	lr
 80054a4:	4a15      	ldr	r2, [pc, #84]	; (80054fc <ai_array_to_buffer_fmt+0x88>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d0f8      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054aa:	dd18      	ble.n	80054de <ai_array_to_buffer_fmt+0x6a>
 80054ac:	4a14      	ldr	r2, [pc, #80]	; (8005500 <ai_array_to_buffer_fmt+0x8c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d0f4      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <ai_array_to_buffer_fmt+0x90>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d0f1      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054b8:	2340      	movs	r3, #64	; 0x40
 80054ba:	e7ef      	b.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054bc:	4b12      	ldr	r3, [pc, #72]	; (8005508 <ai_array_to_buffer_fmt+0x94>)
 80054be:	4003      	ands	r3, r0
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80054c8:	4318      	orrs	r0, r3
 80054ca:	4770      	bx	lr
 80054cc:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d0e3      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d8:	4293      	cmp	r3, r2
 80054da:	d0df      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054dc:	e7ec      	b.n	80054b8 <ai_array_to_buffer_fmt+0x44>
 80054de:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d0da      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054e6:	3207      	adds	r2, #7
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d0d7      	beq.n	800549c <ai_array_to_buffer_fmt+0x28>
 80054ec:	e7e4      	b.n	80054b8 <ai_array_to_buffer_fmt+0x44>
 80054ee:	bf00      	nop
 80054f0:	00840040 	.word	0x00840040
 80054f4:	00040447 	.word	0x00040447
 80054f8:	00040840 	.word	0x00040840
 80054fc:	00840840 	.word	0x00840840
 8005500:	0084084f 	.word	0x0084084f
 8005504:	01821040 	.word	0x01821040
 8005508:	00803fff 	.word	0x00803fff

0800550c <ai_array_get_byte_size>:
 800550c:	b1c1      	cbz	r1, 8005540 <ai_array_get_byte_size+0x34>
 800550e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005512:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005516:	4413      	add	r3, r2
 8005518:	fb01 f103 	mul.w	r1, r1, r3
 800551c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8005520:	3107      	adds	r1, #7
 8005522:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8005526:	f021 0107 	bic.w	r1, r1, #7
 800552a:	2804      	cmp	r0, #4
 800552c:	fa21 f102 	lsr.w	r1, r1, r2
 8005530:	d008      	beq.n	8005544 <ai_array_get_byte_size+0x38>
 8005532:	2808      	cmp	r0, #8
 8005534:	d101      	bne.n	800553a <ai_array_get_byte_size+0x2e>
 8005536:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800553a:	3107      	adds	r1, #7
 800553c:	08c8      	lsrs	r0, r1, #3
 800553e:	4770      	bx	lr
 8005540:	4608      	mov	r0, r1
 8005542:	4770      	bx	lr
 8005544:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005548:	3107      	adds	r1, #7
 800554a:	08c8      	lsrs	r0, r1, #3
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	; (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	200006c0 	.word	0x200006c0

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f003 f836 	bl	80085e0 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08008cb4 	.word	0x08008cb4
 8005598:	08008cb4 	.word	0x08008cb4
 800559c:	08008cb4 	.word	0x08008cb4
 80055a0:	08008cb8 	.word	0x08008cb8

080055a4 <malloc>:
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <malloc+0xc>)
 80055a6:	4601      	mov	r1, r0
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	f000 b885 	b.w	80056b8 <_malloc_r>
 80055ae:	bf00      	nop
 80055b0:	200006c0 	.word	0x200006c0

080055b4 <memcpy>:
 80055b4:	440a      	add	r2, r1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055bc:	d100      	bne.n	80055c0 <memcpy+0xc>
 80055be:	4770      	bx	lr
 80055c0:	b510      	push	{r4, lr}
 80055c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ca:	4291      	cmp	r1, r2
 80055cc:	d1f9      	bne.n	80055c2 <memcpy+0xe>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <memset>:
 80055d0:	4402      	add	r2, r0
 80055d2:	4603      	mov	r3, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <_free_r>:
 80055e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055e2:	2900      	cmp	r1, #0
 80055e4:	d044      	beq.n	8005670 <_free_r+0x90>
 80055e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ea:	9001      	str	r0, [sp, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f1a1 0404 	sub.w	r4, r1, #4
 80055f2:	bfb8      	it	lt
 80055f4:	18e4      	addlt	r4, r4, r3
 80055f6:	f001 fbed 	bl	8006dd4 <__malloc_lock>
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <_free_r+0x94>)
 80055fc:	9801      	ldr	r0, [sp, #4]
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	b933      	cbnz	r3, 8005610 <_free_r+0x30>
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	6014      	str	r4, [r2, #0]
 8005606:	b003      	add	sp, #12
 8005608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800560c:	f001 bbe8 	b.w	8006de0 <__malloc_unlock>
 8005610:	42a3      	cmp	r3, r4
 8005612:	d908      	bls.n	8005626 <_free_r+0x46>
 8005614:	6825      	ldr	r5, [r4, #0]
 8005616:	1961      	adds	r1, r4, r5
 8005618:	428b      	cmp	r3, r1
 800561a:	bf01      	itttt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	1949      	addeq	r1, r1, r5
 8005622:	6021      	streq	r1, [r4, #0]
 8005624:	e7ed      	b.n	8005602 <_free_r+0x22>
 8005626:	461a      	mov	r2, r3
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b10b      	cbz	r3, 8005630 <_free_r+0x50>
 800562c:	42a3      	cmp	r3, r4
 800562e:	d9fa      	bls.n	8005626 <_free_r+0x46>
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	1855      	adds	r5, r2, r1
 8005634:	42a5      	cmp	r5, r4
 8005636:	d10b      	bne.n	8005650 <_free_r+0x70>
 8005638:	6824      	ldr	r4, [r4, #0]
 800563a:	4421      	add	r1, r4
 800563c:	1854      	adds	r4, r2, r1
 800563e:	42a3      	cmp	r3, r4
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	d1e0      	bne.n	8005606 <_free_r+0x26>
 8005644:	681c      	ldr	r4, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	6053      	str	r3, [r2, #4]
 800564a:	4421      	add	r1, r4
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	e7da      	b.n	8005606 <_free_r+0x26>
 8005650:	d902      	bls.n	8005658 <_free_r+0x78>
 8005652:	230c      	movs	r3, #12
 8005654:	6003      	str	r3, [r0, #0]
 8005656:	e7d6      	b.n	8005606 <_free_r+0x26>
 8005658:	6825      	ldr	r5, [r4, #0]
 800565a:	1961      	adds	r1, r4, r5
 800565c:	428b      	cmp	r3, r1
 800565e:	bf04      	itt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	bf04      	itt	eq
 8005668:	1949      	addeq	r1, r1, r5
 800566a:	6021      	streq	r1, [r4, #0]
 800566c:	6054      	str	r4, [r2, #4]
 800566e:	e7ca      	b.n	8005606 <_free_r+0x26>
 8005670:	b003      	add	sp, #12
 8005672:	bd30      	pop	{r4, r5, pc}
 8005674:	20000a30 	.word	0x20000a30

08005678 <sbrk_aligned>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4e0e      	ldr	r6, [pc, #56]	; (80056b4 <sbrk_aligned+0x3c>)
 800567c:	460c      	mov	r4, r1
 800567e:	6831      	ldr	r1, [r6, #0]
 8005680:	4605      	mov	r5, r0
 8005682:	b911      	cbnz	r1, 800568a <sbrk_aligned+0x12>
 8005684:	f000 fcf6 	bl	8006074 <_sbrk_r>
 8005688:	6030      	str	r0, [r6, #0]
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fcf1 	bl	8006074 <_sbrk_r>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	d00a      	beq.n	80056ac <sbrk_aligned+0x34>
 8005696:	1cc4      	adds	r4, r0, #3
 8005698:	f024 0403 	bic.w	r4, r4, #3
 800569c:	42a0      	cmp	r0, r4
 800569e:	d007      	beq.n	80056b0 <sbrk_aligned+0x38>
 80056a0:	1a21      	subs	r1, r4, r0
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 fce6 	bl	8006074 <_sbrk_r>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d101      	bne.n	80056b0 <sbrk_aligned+0x38>
 80056ac:	f04f 34ff 	mov.w	r4, #4294967295
 80056b0:	4620      	mov	r0, r4
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	20000a34 	.word	0x20000a34

080056b8 <_malloc_r>:
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	1ccd      	adds	r5, r1, #3
 80056be:	f025 0503 	bic.w	r5, r5, #3
 80056c2:	3508      	adds	r5, #8
 80056c4:	2d0c      	cmp	r5, #12
 80056c6:	bf38      	it	cc
 80056c8:	250c      	movcc	r5, #12
 80056ca:	2d00      	cmp	r5, #0
 80056cc:	4607      	mov	r7, r0
 80056ce:	db01      	blt.n	80056d4 <_malloc_r+0x1c>
 80056d0:	42a9      	cmp	r1, r5
 80056d2:	d905      	bls.n	80056e0 <_malloc_r+0x28>
 80056d4:	230c      	movs	r3, #12
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	2600      	movs	r6, #0
 80056da:	4630      	mov	r0, r6
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e0:	4e2e      	ldr	r6, [pc, #184]	; (800579c <_malloc_r+0xe4>)
 80056e2:	f001 fb77 	bl	8006dd4 <__malloc_lock>
 80056e6:	6833      	ldr	r3, [r6, #0]
 80056e8:	461c      	mov	r4, r3
 80056ea:	bb34      	cbnz	r4, 800573a <_malloc_r+0x82>
 80056ec:	4629      	mov	r1, r5
 80056ee:	4638      	mov	r0, r7
 80056f0:	f7ff ffc2 	bl	8005678 <sbrk_aligned>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	4604      	mov	r4, r0
 80056f8:	d14d      	bne.n	8005796 <_malloc_r+0xde>
 80056fa:	6834      	ldr	r4, [r6, #0]
 80056fc:	4626      	mov	r6, r4
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d140      	bne.n	8005784 <_malloc_r+0xcc>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	4631      	mov	r1, r6
 8005706:	4638      	mov	r0, r7
 8005708:	eb04 0803 	add.w	r8, r4, r3
 800570c:	f000 fcb2 	bl	8006074 <_sbrk_r>
 8005710:	4580      	cmp	r8, r0
 8005712:	d13a      	bne.n	800578a <_malloc_r+0xd2>
 8005714:	6821      	ldr	r1, [r4, #0]
 8005716:	3503      	adds	r5, #3
 8005718:	1a6d      	subs	r5, r5, r1
 800571a:	f025 0503 	bic.w	r5, r5, #3
 800571e:	3508      	adds	r5, #8
 8005720:	2d0c      	cmp	r5, #12
 8005722:	bf38      	it	cc
 8005724:	250c      	movcc	r5, #12
 8005726:	4629      	mov	r1, r5
 8005728:	4638      	mov	r0, r7
 800572a:	f7ff ffa5 	bl	8005678 <sbrk_aligned>
 800572e:	3001      	adds	r0, #1
 8005730:	d02b      	beq.n	800578a <_malloc_r+0xd2>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	442b      	add	r3, r5
 8005736:	6023      	str	r3, [r4, #0]
 8005738:	e00e      	b.n	8005758 <_malloc_r+0xa0>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	1b52      	subs	r2, r2, r5
 800573e:	d41e      	bmi.n	800577e <_malloc_r+0xc6>
 8005740:	2a0b      	cmp	r2, #11
 8005742:	d916      	bls.n	8005772 <_malloc_r+0xba>
 8005744:	1961      	adds	r1, r4, r5
 8005746:	42a3      	cmp	r3, r4
 8005748:	6025      	str	r5, [r4, #0]
 800574a:	bf18      	it	ne
 800574c:	6059      	strne	r1, [r3, #4]
 800574e:	6863      	ldr	r3, [r4, #4]
 8005750:	bf08      	it	eq
 8005752:	6031      	streq	r1, [r6, #0]
 8005754:	5162      	str	r2, [r4, r5]
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	4638      	mov	r0, r7
 800575a:	f104 060b 	add.w	r6, r4, #11
 800575e:	f001 fb3f 	bl	8006de0 <__malloc_unlock>
 8005762:	f026 0607 	bic.w	r6, r6, #7
 8005766:	1d23      	adds	r3, r4, #4
 8005768:	1af2      	subs	r2, r6, r3
 800576a:	d0b6      	beq.n	80056da <_malloc_r+0x22>
 800576c:	1b9b      	subs	r3, r3, r6
 800576e:	50a3      	str	r3, [r4, r2]
 8005770:	e7b3      	b.n	80056da <_malloc_r+0x22>
 8005772:	6862      	ldr	r2, [r4, #4]
 8005774:	42a3      	cmp	r3, r4
 8005776:	bf0c      	ite	eq
 8005778:	6032      	streq	r2, [r6, #0]
 800577a:	605a      	strne	r2, [r3, #4]
 800577c:	e7ec      	b.n	8005758 <_malloc_r+0xa0>
 800577e:	4623      	mov	r3, r4
 8005780:	6864      	ldr	r4, [r4, #4]
 8005782:	e7b2      	b.n	80056ea <_malloc_r+0x32>
 8005784:	4634      	mov	r4, r6
 8005786:	6876      	ldr	r6, [r6, #4]
 8005788:	e7b9      	b.n	80056fe <_malloc_r+0x46>
 800578a:	230c      	movs	r3, #12
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4638      	mov	r0, r7
 8005790:	f001 fb26 	bl	8006de0 <__malloc_unlock>
 8005794:	e7a1      	b.n	80056da <_malloc_r+0x22>
 8005796:	6025      	str	r5, [r4, #0]
 8005798:	e7de      	b.n	8005758 <_malloc_r+0xa0>
 800579a:	bf00      	nop
 800579c:	20000a30 	.word	0x20000a30

080057a0 <__cvt>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	ec55 4b10 	vmov	r4, r5, d0
 80057a8:	2d00      	cmp	r5, #0
 80057aa:	460e      	mov	r6, r1
 80057ac:	4619      	mov	r1, r3
 80057ae:	462b      	mov	r3, r5
 80057b0:	bfbb      	ittet	lt
 80057b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057b6:	461d      	movlt	r5, r3
 80057b8:	2300      	movge	r3, #0
 80057ba:	232d      	movlt	r3, #45	; 0x2d
 80057bc:	700b      	strb	r3, [r1, #0]
 80057be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057c4:	4691      	mov	r9, r2
 80057c6:	f023 0820 	bic.w	r8, r3, #32
 80057ca:	bfbc      	itt	lt
 80057cc:	4622      	movlt	r2, r4
 80057ce:	4614      	movlt	r4, r2
 80057d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057d4:	d005      	beq.n	80057e2 <__cvt+0x42>
 80057d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057da:	d100      	bne.n	80057de <__cvt+0x3e>
 80057dc:	3601      	adds	r6, #1
 80057de:	2102      	movs	r1, #2
 80057e0:	e000      	b.n	80057e4 <__cvt+0x44>
 80057e2:	2103      	movs	r1, #3
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	ab02      	add	r3, sp, #8
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	ec45 4b10 	vmov	d0, r4, r5
 80057f0:	4653      	mov	r3, sl
 80057f2:	4632      	mov	r2, r6
 80057f4:	f000 fcfc 	bl	80061f0 <_dtoa_r>
 80057f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057fc:	4607      	mov	r7, r0
 80057fe:	d102      	bne.n	8005806 <__cvt+0x66>
 8005800:	f019 0f01 	tst.w	r9, #1
 8005804:	d022      	beq.n	800584c <__cvt+0xac>
 8005806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800580a:	eb07 0906 	add.w	r9, r7, r6
 800580e:	d110      	bne.n	8005832 <__cvt+0x92>
 8005810:	783b      	ldrb	r3, [r7, #0]
 8005812:	2b30      	cmp	r3, #48	; 0x30
 8005814:	d10a      	bne.n	800582c <__cvt+0x8c>
 8005816:	2200      	movs	r2, #0
 8005818:	2300      	movs	r3, #0
 800581a:	4620      	mov	r0, r4
 800581c:	4629      	mov	r1, r5
 800581e:	f7fb f963 	bl	8000ae8 <__aeabi_dcmpeq>
 8005822:	b918      	cbnz	r0, 800582c <__cvt+0x8c>
 8005824:	f1c6 0601 	rsb	r6, r6, #1
 8005828:	f8ca 6000 	str.w	r6, [sl]
 800582c:	f8da 3000 	ldr.w	r3, [sl]
 8005830:	4499      	add	r9, r3
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fb f955 	bl	8000ae8 <__aeabi_dcmpeq>
 800583e:	b108      	cbz	r0, 8005844 <__cvt+0xa4>
 8005840:	f8cd 900c 	str.w	r9, [sp, #12]
 8005844:	2230      	movs	r2, #48	; 0x30
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	454b      	cmp	r3, r9
 800584a:	d307      	bcc.n	800585c <__cvt+0xbc>
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005850:	1bdb      	subs	r3, r3, r7
 8005852:	4638      	mov	r0, r7
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	b004      	add	sp, #16
 8005858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585c:	1c59      	adds	r1, r3, #1
 800585e:	9103      	str	r1, [sp, #12]
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e7f0      	b.n	8005846 <__cvt+0xa6>

08005864 <__exponent>:
 8005864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005866:	4603      	mov	r3, r0
 8005868:	2900      	cmp	r1, #0
 800586a:	bfb8      	it	lt
 800586c:	4249      	neglt	r1, r1
 800586e:	f803 2b02 	strb.w	r2, [r3], #2
 8005872:	bfb4      	ite	lt
 8005874:	222d      	movlt	r2, #45	; 0x2d
 8005876:	222b      	movge	r2, #43	; 0x2b
 8005878:	2909      	cmp	r1, #9
 800587a:	7042      	strb	r2, [r0, #1]
 800587c:	dd2a      	ble.n	80058d4 <__exponent+0x70>
 800587e:	f10d 0407 	add.w	r4, sp, #7
 8005882:	46a4      	mov	ip, r4
 8005884:	270a      	movs	r7, #10
 8005886:	46a6      	mov	lr, r4
 8005888:	460a      	mov	r2, r1
 800588a:	fb91 f6f7 	sdiv	r6, r1, r7
 800588e:	fb07 1516 	mls	r5, r7, r6, r1
 8005892:	3530      	adds	r5, #48	; 0x30
 8005894:	2a63      	cmp	r2, #99	; 0x63
 8005896:	f104 34ff 	add.w	r4, r4, #4294967295
 800589a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800589e:	4631      	mov	r1, r6
 80058a0:	dcf1      	bgt.n	8005886 <__exponent+0x22>
 80058a2:	3130      	adds	r1, #48	; 0x30
 80058a4:	f1ae 0502 	sub.w	r5, lr, #2
 80058a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058ac:	1c44      	adds	r4, r0, #1
 80058ae:	4629      	mov	r1, r5
 80058b0:	4561      	cmp	r1, ip
 80058b2:	d30a      	bcc.n	80058ca <__exponent+0x66>
 80058b4:	f10d 0209 	add.w	r2, sp, #9
 80058b8:	eba2 020e 	sub.w	r2, r2, lr
 80058bc:	4565      	cmp	r5, ip
 80058be:	bf88      	it	hi
 80058c0:	2200      	movhi	r2, #0
 80058c2:	4413      	add	r3, r2
 80058c4:	1a18      	subs	r0, r3, r0
 80058c6:	b003      	add	sp, #12
 80058c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058d2:	e7ed      	b.n	80058b0 <__exponent+0x4c>
 80058d4:	2330      	movs	r3, #48	; 0x30
 80058d6:	3130      	adds	r1, #48	; 0x30
 80058d8:	7083      	strb	r3, [r0, #2]
 80058da:	70c1      	strb	r1, [r0, #3]
 80058dc:	1d03      	adds	r3, r0, #4
 80058de:	e7f1      	b.n	80058c4 <__exponent+0x60>

080058e0 <_printf_float>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	ed2d 8b02 	vpush	{d8}
 80058e8:	b08d      	sub	sp, #52	; 0x34
 80058ea:	460c      	mov	r4, r1
 80058ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058f0:	4616      	mov	r6, r2
 80058f2:	461f      	mov	r7, r3
 80058f4:	4605      	mov	r5, r0
 80058f6:	f001 fa69 	bl	8006dcc <_localeconv_r>
 80058fa:	f8d0 a000 	ldr.w	sl, [r0]
 80058fe:	4650      	mov	r0, sl
 8005900:	f7fa fc70 	bl	80001e4 <strlen>
 8005904:	2300      	movs	r3, #0
 8005906:	930a      	str	r3, [sp, #40]	; 0x28
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	f8d8 3000 	ldr.w	r3, [r8]
 8005910:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005914:	3307      	adds	r3, #7
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	f103 0208 	add.w	r2, r3, #8
 800591e:	f8c8 2000 	str.w	r2, [r8]
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800592a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800592e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005932:	9307      	str	r3, [sp, #28]
 8005934:	f8cd 8018 	str.w	r8, [sp, #24]
 8005938:	ee08 0a10 	vmov	s16, r0
 800593c:	4b9f      	ldr	r3, [pc, #636]	; (8005bbc <_printf_float+0x2dc>)
 800593e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005942:	f04f 32ff 	mov.w	r2, #4294967295
 8005946:	f7fb f901 	bl	8000b4c <__aeabi_dcmpun>
 800594a:	bb88      	cbnz	r0, 80059b0 <_printf_float+0xd0>
 800594c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005950:	4b9a      	ldr	r3, [pc, #616]	; (8005bbc <_printf_float+0x2dc>)
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	f7fb f8db 	bl	8000b10 <__aeabi_dcmple>
 800595a:	bb48      	cbnz	r0, 80059b0 <_printf_float+0xd0>
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	4640      	mov	r0, r8
 8005962:	4649      	mov	r1, r9
 8005964:	f7fb f8ca 	bl	8000afc <__aeabi_dcmplt>
 8005968:	b110      	cbz	r0, 8005970 <_printf_float+0x90>
 800596a:	232d      	movs	r3, #45	; 0x2d
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	4b93      	ldr	r3, [pc, #588]	; (8005bc0 <_printf_float+0x2e0>)
 8005972:	4894      	ldr	r0, [pc, #592]	; (8005bc4 <_printf_float+0x2e4>)
 8005974:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005978:	bf94      	ite	ls
 800597a:	4698      	movls	r8, r3
 800597c:	4680      	movhi	r8, r0
 800597e:	2303      	movs	r3, #3
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	9b05      	ldr	r3, [sp, #20]
 8005984:	f023 0204 	bic.w	r2, r3, #4
 8005988:	6022      	str	r2, [r4, #0]
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	9700      	str	r7, [sp, #0]
 8005990:	4633      	mov	r3, r6
 8005992:	aa0b      	add	r2, sp, #44	; 0x2c
 8005994:	4621      	mov	r1, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f9d8 	bl	8005d4c <_printf_common>
 800599c:	3001      	adds	r0, #1
 800599e:	f040 8090 	bne.w	8005ac2 <_printf_float+0x1e2>
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	b00d      	add	sp, #52	; 0x34
 80059a8:	ecbd 8b02 	vpop	{d8}
 80059ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	4649      	mov	r1, r9
 80059b8:	f7fb f8c8 	bl	8000b4c <__aeabi_dcmpun>
 80059bc:	b140      	cbz	r0, 80059d0 <_printf_float+0xf0>
 80059be:	464b      	mov	r3, r9
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfbc      	itt	lt
 80059c4:	232d      	movlt	r3, #45	; 0x2d
 80059c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059ca:	487f      	ldr	r0, [pc, #508]	; (8005bc8 <_printf_float+0x2e8>)
 80059cc:	4b7f      	ldr	r3, [pc, #508]	; (8005bcc <_printf_float+0x2ec>)
 80059ce:	e7d1      	b.n	8005974 <_printf_float+0x94>
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059d6:	9206      	str	r2, [sp, #24]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	d13f      	bne.n	8005a5c <_printf_float+0x17c>
 80059dc:	2306      	movs	r3, #6
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	9b05      	ldr	r3, [sp, #20]
 80059e2:	6861      	ldr	r1, [r4, #4]
 80059e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059e8:	2300      	movs	r3, #0
 80059ea:	9303      	str	r3, [sp, #12]
 80059ec:	ab0a      	add	r3, sp, #40	; 0x28
 80059ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059f2:	ab09      	add	r3, sp, #36	; 0x24
 80059f4:	ec49 8b10 	vmov	d0, r8, r9
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a00:	4628      	mov	r0, r5
 8005a02:	f7ff fecd 	bl	80057a0 <__cvt>
 8005a06:	9b06      	ldr	r3, [sp, #24]
 8005a08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a0a:	2b47      	cmp	r3, #71	; 0x47
 8005a0c:	4680      	mov	r8, r0
 8005a0e:	d108      	bne.n	8005a22 <_printf_float+0x142>
 8005a10:	1cc8      	adds	r0, r1, #3
 8005a12:	db02      	blt.n	8005a1a <_printf_float+0x13a>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	4299      	cmp	r1, r3
 8005a18:	dd41      	ble.n	8005a9e <_printf_float+0x1be>
 8005a1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a1e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a26:	d820      	bhi.n	8005a6a <_printf_float+0x18a>
 8005a28:	3901      	subs	r1, #1
 8005a2a:	465a      	mov	r2, fp
 8005a2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a30:	9109      	str	r1, [sp, #36]	; 0x24
 8005a32:	f7ff ff17 	bl	8005864 <__exponent>
 8005a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a38:	1813      	adds	r3, r2, r0
 8005a3a:	2a01      	cmp	r2, #1
 8005a3c:	4681      	mov	r9, r0
 8005a3e:	6123      	str	r3, [r4, #16]
 8005a40:	dc02      	bgt.n	8005a48 <_printf_float+0x168>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	07d2      	lsls	r2, r2, #31
 8005a46:	d501      	bpl.n	8005a4c <_printf_float+0x16c>
 8005a48:	3301      	adds	r3, #1
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d09c      	beq.n	800598e <_printf_float+0xae>
 8005a54:	232d      	movs	r3, #45	; 0x2d
 8005a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5a:	e798      	b.n	800598e <_printf_float+0xae>
 8005a5c:	9a06      	ldr	r2, [sp, #24]
 8005a5e:	2a47      	cmp	r2, #71	; 0x47
 8005a60:	d1be      	bne.n	80059e0 <_printf_float+0x100>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1bc      	bne.n	80059e0 <_printf_float+0x100>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7b9      	b.n	80059de <_printf_float+0xfe>
 8005a6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a6e:	d118      	bne.n	8005aa2 <_printf_float+0x1c2>
 8005a70:	2900      	cmp	r1, #0
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	dd0b      	ble.n	8005a8e <_printf_float+0x1ae>
 8005a76:	6121      	str	r1, [r4, #16]
 8005a78:	b913      	cbnz	r3, 8005a80 <_printf_float+0x1a0>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	07d0      	lsls	r0, r2, #31
 8005a7e:	d502      	bpl.n	8005a86 <_printf_float+0x1a6>
 8005a80:	3301      	adds	r3, #1
 8005a82:	440b      	add	r3, r1
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a88:	f04f 0900 	mov.w	r9, #0
 8005a8c:	e7de      	b.n	8005a4c <_printf_float+0x16c>
 8005a8e:	b913      	cbnz	r3, 8005a96 <_printf_float+0x1b6>
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	07d2      	lsls	r2, r2, #31
 8005a94:	d501      	bpl.n	8005a9a <_printf_float+0x1ba>
 8005a96:	3302      	adds	r3, #2
 8005a98:	e7f4      	b.n	8005a84 <_printf_float+0x1a4>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e7f2      	b.n	8005a84 <_printf_float+0x1a4>
 8005a9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa4:	4299      	cmp	r1, r3
 8005aa6:	db05      	blt.n	8005ab4 <_printf_float+0x1d4>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	6121      	str	r1, [r4, #16]
 8005aac:	07d8      	lsls	r0, r3, #31
 8005aae:	d5ea      	bpl.n	8005a86 <_printf_float+0x1a6>
 8005ab0:	1c4b      	adds	r3, r1, #1
 8005ab2:	e7e7      	b.n	8005a84 <_printf_float+0x1a4>
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	bfd4      	ite	le
 8005ab8:	f1c1 0202 	rsble	r2, r1, #2
 8005abc:	2201      	movgt	r2, #1
 8005abe:	4413      	add	r3, r2
 8005ac0:	e7e0      	b.n	8005a84 <_printf_float+0x1a4>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	055a      	lsls	r2, r3, #21
 8005ac6:	d407      	bmi.n	8005ad8 <_printf_float+0x1f8>
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	4642      	mov	r2, r8
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d12c      	bne.n	8005b30 <_printf_float+0x250>
 8005ad6:	e764      	b.n	80059a2 <_printf_float+0xc2>
 8005ad8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005adc:	f240 80e0 	bls.w	8005ca0 <_printf_float+0x3c0>
 8005ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f7fa fffe 	bl	8000ae8 <__aeabi_dcmpeq>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d034      	beq.n	8005b5a <_printf_float+0x27a>
 8005af0:	4a37      	ldr	r2, [pc, #220]	; (8005bd0 <_printf_float+0x2f0>)
 8005af2:	2301      	movs	r3, #1
 8005af4:	4631      	mov	r1, r6
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f af51 	beq.w	80059a2 <_printf_float+0xc2>
 8005b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b04:	429a      	cmp	r2, r3
 8005b06:	db02      	blt.n	8005b0e <_printf_float+0x22e>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	07d8      	lsls	r0, r3, #31
 8005b0c:	d510      	bpl.n	8005b30 <_printf_float+0x250>
 8005b0e:	ee18 3a10 	vmov	r3, s16
 8005b12:	4652      	mov	r2, sl
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af41 	beq.w	80059a2 <_printf_float+0xc2>
 8005b20:	f04f 0800 	mov.w	r8, #0
 8005b24:	f104 091a 	add.w	r9, r4, #26
 8005b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	4543      	cmp	r3, r8
 8005b2e:	dc09      	bgt.n	8005b44 <_printf_float+0x264>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	079b      	lsls	r3, r3, #30
 8005b34:	f100 8105 	bmi.w	8005d42 <_printf_float+0x462>
 8005b38:	68e0      	ldr	r0, [r4, #12]
 8005b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b3c:	4298      	cmp	r0, r3
 8005b3e:	bfb8      	it	lt
 8005b40:	4618      	movlt	r0, r3
 8005b42:	e730      	b.n	80059a6 <_printf_float+0xc6>
 8005b44:	2301      	movs	r3, #1
 8005b46:	464a      	mov	r2, r9
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f af27 	beq.w	80059a2 <_printf_float+0xc2>
 8005b54:	f108 0801 	add.w	r8, r8, #1
 8005b58:	e7e6      	b.n	8005b28 <_printf_float+0x248>
 8005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dc39      	bgt.n	8005bd4 <_printf_float+0x2f4>
 8005b60:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <_printf_float+0x2f0>)
 8005b62:	2301      	movs	r3, #1
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f af19 	beq.w	80059a2 <_printf_float+0xc2>
 8005b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d102      	bne.n	8005b7e <_printf_float+0x29e>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	07d9      	lsls	r1, r3, #31
 8005b7c:	d5d8      	bpl.n	8005b30 <_printf_float+0x250>
 8005b7e:	ee18 3a10 	vmov	r3, s16
 8005b82:	4652      	mov	r2, sl
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af09 	beq.w	80059a2 <_printf_float+0xc2>
 8005b90:	f04f 0900 	mov.w	r9, #0
 8005b94:	f104 0a1a 	add.w	sl, r4, #26
 8005b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9a:	425b      	negs	r3, r3
 8005b9c:	454b      	cmp	r3, r9
 8005b9e:	dc01      	bgt.n	8005ba4 <_printf_float+0x2c4>
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba2:	e792      	b.n	8005aca <_printf_float+0x1ea>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f aef7 	beq.w	80059a2 <_printf_float+0xc2>
 8005bb4:	f109 0901 	add.w	r9, r9, #1
 8005bb8:	e7ee      	b.n	8005b98 <_printf_float+0x2b8>
 8005bba:	bf00      	nop
 8005bbc:	7fefffff 	.word	0x7fefffff
 8005bc0:	080088bc 	.word	0x080088bc
 8005bc4:	080088c0 	.word	0x080088c0
 8005bc8:	080088c8 	.word	0x080088c8
 8005bcc:	080088c4 	.word	0x080088c4
 8005bd0:	080088cc 	.word	0x080088cc
 8005bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bfa8      	it	ge
 8005bdc:	461a      	movge	r2, r3
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	4691      	mov	r9, r2
 8005be2:	dc37      	bgt.n	8005c54 <_printf_float+0x374>
 8005be4:	f04f 0b00 	mov.w	fp, #0
 8005be8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bec:	f104 021a 	add.w	r2, r4, #26
 8005bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	eba3 0309 	sub.w	r3, r3, r9
 8005bf8:	455b      	cmp	r3, fp
 8005bfa:	dc33      	bgt.n	8005c64 <_printf_float+0x384>
 8005bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c00:	429a      	cmp	r2, r3
 8005c02:	db3b      	blt.n	8005c7c <_printf_float+0x39c>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07da      	lsls	r2, r3, #31
 8005c08:	d438      	bmi.n	8005c7c <_printf_float+0x39c>
 8005c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0c:	9a05      	ldr	r2, [sp, #20]
 8005c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c10:	1a9a      	subs	r2, r3, r2
 8005c12:	eba3 0901 	sub.w	r9, r3, r1
 8005c16:	4591      	cmp	r9, r2
 8005c18:	bfa8      	it	ge
 8005c1a:	4691      	movge	r9, r2
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	dc35      	bgt.n	8005c8e <_printf_float+0x3ae>
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c2a:	f104 0a1a 	add.w	sl, r4, #26
 8005c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	eba3 0309 	sub.w	r3, r3, r9
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	f77f af79 	ble.w	8005b30 <_printf_float+0x250>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4652      	mov	r2, sl
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f aeaa 	beq.w	80059a2 <_printf_float+0xc2>
 8005c4e:	f108 0801 	add.w	r8, r8, #1
 8005c52:	e7ec      	b.n	8005c2e <_printf_float+0x34e>
 8005c54:	4613      	mov	r3, r2
 8005c56:	4631      	mov	r1, r6
 8005c58:	4642      	mov	r2, r8
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d1c0      	bne.n	8005be4 <_printf_float+0x304>
 8005c62:	e69e      	b.n	80059a2 <_printf_float+0xc2>
 8005c64:	2301      	movs	r3, #1
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	9205      	str	r2, [sp, #20]
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f43f ae97 	beq.w	80059a2 <_printf_float+0xc2>
 8005c74:	9a05      	ldr	r2, [sp, #20]
 8005c76:	f10b 0b01 	add.w	fp, fp, #1
 8005c7a:	e7b9      	b.n	8005bf0 <_printf_float+0x310>
 8005c7c:	ee18 3a10 	vmov	r3, s16
 8005c80:	4652      	mov	r2, sl
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d1be      	bne.n	8005c0a <_printf_float+0x32a>
 8005c8c:	e689      	b.n	80059a2 <_printf_float+0xc2>
 8005c8e:	9a05      	ldr	r2, [sp, #20]
 8005c90:	464b      	mov	r3, r9
 8005c92:	4442      	add	r2, r8
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d1c1      	bne.n	8005c22 <_printf_float+0x342>
 8005c9e:	e680      	b.n	80059a2 <_printf_float+0xc2>
 8005ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ca2:	2a01      	cmp	r2, #1
 8005ca4:	dc01      	bgt.n	8005caa <_printf_float+0x3ca>
 8005ca6:	07db      	lsls	r3, r3, #31
 8005ca8:	d538      	bpl.n	8005d1c <_printf_float+0x43c>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4642      	mov	r2, r8
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f ae74 	beq.w	80059a2 <_printf_float+0xc2>
 8005cba:	ee18 3a10 	vmov	r3, s16
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f ae6b 	beq.w	80059a2 <_printf_float+0xc2>
 8005ccc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f7fa ff08 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cd8:	b9d8      	cbnz	r0, 8005d12 <_printf_float+0x432>
 8005cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cdc:	f108 0201 	add.w	r2, r8, #1
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d10e      	bne.n	8005d0a <_printf_float+0x42a>
 8005cec:	e659      	b.n	80059a2 <_printf_float+0xc2>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f ae52 	beq.w	80059a2 <_printf_float+0xc2>
 8005cfe:	f108 0801 	add.w	r8, r8, #1
 8005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	4543      	cmp	r3, r8
 8005d08:	dcf1      	bgt.n	8005cee <_printf_float+0x40e>
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d10:	e6dc      	b.n	8005acc <_printf_float+0x1ec>
 8005d12:	f04f 0800 	mov.w	r8, #0
 8005d16:	f104 0a1a 	add.w	sl, r4, #26
 8005d1a:	e7f2      	b.n	8005d02 <_printf_float+0x422>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4642      	mov	r2, r8
 8005d20:	e7df      	b.n	8005ce2 <_printf_float+0x402>
 8005d22:	2301      	movs	r3, #1
 8005d24:	464a      	mov	r2, r9
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f ae38 	beq.w	80059a2 <_printf_float+0xc2>
 8005d32:	f108 0801 	add.w	r8, r8, #1
 8005d36:	68e3      	ldr	r3, [r4, #12]
 8005d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d3a:	1a5b      	subs	r3, r3, r1
 8005d3c:	4543      	cmp	r3, r8
 8005d3e:	dcf0      	bgt.n	8005d22 <_printf_float+0x442>
 8005d40:	e6fa      	b.n	8005b38 <_printf_float+0x258>
 8005d42:	f04f 0800 	mov.w	r8, #0
 8005d46:	f104 0919 	add.w	r9, r4, #25
 8005d4a:	e7f4      	b.n	8005d36 <_printf_float+0x456>

08005d4c <_printf_common>:
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	4616      	mov	r6, r2
 8005d52:	4699      	mov	r9, r3
 8005d54:	688a      	ldr	r2, [r1, #8]
 8005d56:	690b      	ldr	r3, [r1, #16]
 8005d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfb8      	it	lt
 8005d60:	4613      	movlt	r3, r2
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d68:	4607      	mov	r7, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	b10a      	cbz	r2, 8005d72 <_printf_common+0x26>
 8005d6e:	3301      	adds	r3, #1
 8005d70:	6033      	str	r3, [r6, #0]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	0699      	lsls	r1, r3, #26
 8005d76:	bf42      	ittt	mi
 8005d78:	6833      	ldrmi	r3, [r6, #0]
 8005d7a:	3302      	addmi	r3, #2
 8005d7c:	6033      	strmi	r3, [r6, #0]
 8005d7e:	6825      	ldr	r5, [r4, #0]
 8005d80:	f015 0506 	ands.w	r5, r5, #6
 8005d84:	d106      	bne.n	8005d94 <_printf_common+0x48>
 8005d86:	f104 0a19 	add.w	sl, r4, #25
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	6832      	ldr	r2, [r6, #0]
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dc26      	bgt.n	8005de2 <_printf_common+0x96>
 8005d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d98:	1e13      	subs	r3, r2, #0
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	bf18      	it	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	0692      	lsls	r2, r2, #26
 8005da2:	d42b      	bmi.n	8005dfc <_printf_common+0xb0>
 8005da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da8:	4649      	mov	r1, r9
 8005daa:	4638      	mov	r0, r7
 8005dac:	47c0      	blx	r8
 8005dae:	3001      	adds	r0, #1
 8005db0:	d01e      	beq.n	8005df0 <_printf_common+0xa4>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	68e5      	ldr	r5, [r4, #12]
 8005db6:	6832      	ldr	r2, [r6, #0]
 8005db8:	f003 0306 	and.w	r3, r3, #6
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	bf08      	it	eq
 8005dc0:	1aad      	subeq	r5, r5, r2
 8005dc2:	68a3      	ldr	r3, [r4, #8]
 8005dc4:	6922      	ldr	r2, [r4, #16]
 8005dc6:	bf0c      	ite	eq
 8005dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dcc:	2500      	movne	r5, #0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bfc4      	itt	gt
 8005dd2:	1a9b      	subgt	r3, r3, r2
 8005dd4:	18ed      	addgt	r5, r5, r3
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	341a      	adds	r4, #26
 8005dda:	42b5      	cmp	r5, r6
 8005ddc:	d11a      	bne.n	8005e14 <_printf_common+0xc8>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e008      	b.n	8005df4 <_printf_common+0xa8>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4652      	mov	r2, sl
 8005de6:	4649      	mov	r1, r9
 8005de8:	4638      	mov	r0, r7
 8005dea:	47c0      	blx	r8
 8005dec:	3001      	adds	r0, #1
 8005dee:	d103      	bne.n	8005df8 <_printf_common+0xac>
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	3501      	adds	r5, #1
 8005dfa:	e7c6      	b.n	8005d8a <_printf_common+0x3e>
 8005dfc:	18e1      	adds	r1, r4, r3
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	2030      	movs	r0, #48	; 0x30
 8005e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e06:	4422      	add	r2, r4
 8005e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e10:	3302      	adds	r3, #2
 8005e12:	e7c7      	b.n	8005da4 <_printf_common+0x58>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4622      	mov	r2, r4
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c0      	blx	r8
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d0e6      	beq.n	8005df0 <_printf_common+0xa4>
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7d9      	b.n	8005dda <_printf_common+0x8e>
	...

08005e28 <_printf_i>:
 8005e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	7e0f      	ldrb	r7, [r1, #24]
 8005e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e30:	2f78      	cmp	r7, #120	; 0x78
 8005e32:	4691      	mov	r9, r2
 8005e34:	4680      	mov	r8, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	469a      	mov	sl, r3
 8005e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e3e:	d807      	bhi.n	8005e50 <_printf_i+0x28>
 8005e40:	2f62      	cmp	r7, #98	; 0x62
 8005e42:	d80a      	bhi.n	8005e5a <_printf_i+0x32>
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	f000 80d8 	beq.w	8005ffa <_printf_i+0x1d2>
 8005e4a:	2f58      	cmp	r7, #88	; 0x58
 8005e4c:	f000 80a3 	beq.w	8005f96 <_printf_i+0x16e>
 8005e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e58:	e03a      	b.n	8005ed0 <_printf_i+0xa8>
 8005e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e5e:	2b15      	cmp	r3, #21
 8005e60:	d8f6      	bhi.n	8005e50 <_printf_i+0x28>
 8005e62:	a101      	add	r1, pc, #4	; (adr r1, 8005e68 <_printf_i+0x40>)
 8005e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e68:	08005ec1 	.word	0x08005ec1
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005e51 	.word	0x08005e51
 8005e74:	08005e51 	.word	0x08005e51
 8005e78:	08005e51 	.word	0x08005e51
 8005e7c:	08005e51 	.word	0x08005e51
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005e51 	.word	0x08005e51
 8005e88:	08005e51 	.word	0x08005e51
 8005e8c:	08005e51 	.word	0x08005e51
 8005e90:	08005e51 	.word	0x08005e51
 8005e94:	08005fe1 	.word	0x08005fe1
 8005e98:	08005f05 	.word	0x08005f05
 8005e9c:	08005fc3 	.word	0x08005fc3
 8005ea0:	08005e51 	.word	0x08005e51
 8005ea4:	08005e51 	.word	0x08005e51
 8005ea8:	08006003 	.word	0x08006003
 8005eac:	08005e51 	.word	0x08005e51
 8005eb0:	08005f05 	.word	0x08005f05
 8005eb4:	08005e51 	.word	0x08005e51
 8005eb8:	08005e51 	.word	0x08005e51
 8005ebc:	08005fcb 	.word	0x08005fcb
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	602a      	str	r2, [r5, #0]
 8005ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0a3      	b.n	800601c <_printf_i+0x1f4>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	6829      	ldr	r1, [r5, #0]
 8005ed8:	0606      	lsls	r6, r0, #24
 8005eda:	f101 0304 	add.w	r3, r1, #4
 8005ede:	d50a      	bpl.n	8005ef6 <_printf_i+0xce>
 8005ee0:	680e      	ldr	r6, [r1, #0]
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	da03      	bge.n	8005ef0 <_printf_i+0xc8>
 8005ee8:	232d      	movs	r3, #45	; 0x2d
 8005eea:	4276      	negs	r6, r6
 8005eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef0:	485e      	ldr	r0, [pc, #376]	; (800606c <_printf_i+0x244>)
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	e019      	b.n	8005f2a <_printf_i+0x102>
 8005ef6:	680e      	ldr	r6, [r1, #0]
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005efe:	bf18      	it	ne
 8005f00:	b236      	sxthne	r6, r6
 8005f02:	e7ef      	b.n	8005ee4 <_printf_i+0xbc>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	1d19      	adds	r1, r3, #4
 8005f0a:	6029      	str	r1, [r5, #0]
 8005f0c:	0601      	lsls	r1, r0, #24
 8005f0e:	d501      	bpl.n	8005f14 <_printf_i+0xec>
 8005f10:	681e      	ldr	r6, [r3, #0]
 8005f12:	e002      	b.n	8005f1a <_printf_i+0xf2>
 8005f14:	0646      	lsls	r6, r0, #25
 8005f16:	d5fb      	bpl.n	8005f10 <_printf_i+0xe8>
 8005f18:	881e      	ldrh	r6, [r3, #0]
 8005f1a:	4854      	ldr	r0, [pc, #336]	; (800606c <_printf_i+0x244>)
 8005f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f1e:	bf0c      	ite	eq
 8005f20:	2308      	moveq	r3, #8
 8005f22:	230a      	movne	r3, #10
 8005f24:	2100      	movs	r1, #0
 8005f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f2a:	6865      	ldr	r5, [r4, #4]
 8005f2c:	60a5      	str	r5, [r4, #8]
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	bfa2      	ittt	ge
 8005f32:	6821      	ldrge	r1, [r4, #0]
 8005f34:	f021 0104 	bicge.w	r1, r1, #4
 8005f38:	6021      	strge	r1, [r4, #0]
 8005f3a:	b90e      	cbnz	r6, 8005f40 <_printf_i+0x118>
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d04d      	beq.n	8005fdc <_printf_i+0x1b4>
 8005f40:	4615      	mov	r5, r2
 8005f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f46:	fb03 6711 	mls	r7, r3, r1, r6
 8005f4a:	5dc7      	ldrb	r7, [r0, r7]
 8005f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f50:	4637      	mov	r7, r6
 8005f52:	42bb      	cmp	r3, r7
 8005f54:	460e      	mov	r6, r1
 8005f56:	d9f4      	bls.n	8005f42 <_printf_i+0x11a>
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d10b      	bne.n	8005f74 <_printf_i+0x14c>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	07de      	lsls	r6, r3, #31
 8005f60:	d508      	bpl.n	8005f74 <_printf_i+0x14c>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	6861      	ldr	r1, [r4, #4]
 8005f66:	4299      	cmp	r1, r3
 8005f68:	bfde      	ittt	le
 8005f6a:	2330      	movle	r3, #48	; 0x30
 8005f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f74:	1b52      	subs	r2, r2, r5
 8005f76:	6122      	str	r2, [r4, #16]
 8005f78:	f8cd a000 	str.w	sl, [sp]
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	aa03      	add	r2, sp, #12
 8005f80:	4621      	mov	r1, r4
 8005f82:	4640      	mov	r0, r8
 8005f84:	f7ff fee2 	bl	8005d4c <_printf_common>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d14c      	bne.n	8006026 <_printf_i+0x1fe>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	b004      	add	sp, #16
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f96:	4835      	ldr	r0, [pc, #212]	; (800606c <_printf_i+0x244>)
 8005f98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f9c:	6829      	ldr	r1, [r5, #0]
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fa4:	6029      	str	r1, [r5, #0]
 8005fa6:	061d      	lsls	r5, r3, #24
 8005fa8:	d514      	bpl.n	8005fd4 <_printf_i+0x1ac>
 8005faa:	07df      	lsls	r7, r3, #31
 8005fac:	bf44      	itt	mi
 8005fae:	f043 0320 	orrmi.w	r3, r3, #32
 8005fb2:	6023      	strmi	r3, [r4, #0]
 8005fb4:	b91e      	cbnz	r6, 8005fbe <_printf_i+0x196>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	f023 0320 	bic.w	r3, r3, #32
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	2310      	movs	r3, #16
 8005fc0:	e7b0      	b.n	8005f24 <_printf_i+0xfc>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	f043 0320 	orr.w	r3, r3, #32
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	2378      	movs	r3, #120	; 0x78
 8005fcc:	4828      	ldr	r0, [pc, #160]	; (8006070 <_printf_i+0x248>)
 8005fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fd2:	e7e3      	b.n	8005f9c <_printf_i+0x174>
 8005fd4:	0659      	lsls	r1, r3, #25
 8005fd6:	bf48      	it	mi
 8005fd8:	b2b6      	uxthmi	r6, r6
 8005fda:	e7e6      	b.n	8005faa <_printf_i+0x182>
 8005fdc:	4615      	mov	r5, r2
 8005fde:	e7bb      	b.n	8005f58 <_printf_i+0x130>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	6826      	ldr	r6, [r4, #0]
 8005fe4:	6961      	ldr	r1, [r4, #20]
 8005fe6:	1d18      	adds	r0, r3, #4
 8005fe8:	6028      	str	r0, [r5, #0]
 8005fea:	0635      	lsls	r5, r6, #24
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	d501      	bpl.n	8005ff4 <_printf_i+0x1cc>
 8005ff0:	6019      	str	r1, [r3, #0]
 8005ff2:	e002      	b.n	8005ffa <_printf_i+0x1d2>
 8005ff4:	0670      	lsls	r0, r6, #25
 8005ff6:	d5fb      	bpl.n	8005ff0 <_printf_i+0x1c8>
 8005ff8:	8019      	strh	r1, [r3, #0]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	4615      	mov	r5, r2
 8006000:	e7ba      	b.n	8005f78 <_printf_i+0x150>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	602a      	str	r2, [r5, #0]
 8006008:	681d      	ldr	r5, [r3, #0]
 800600a:	6862      	ldr	r2, [r4, #4]
 800600c:	2100      	movs	r1, #0
 800600e:	4628      	mov	r0, r5
 8006010:	f7fa f8f6 	bl	8000200 <memchr>
 8006014:	b108      	cbz	r0, 800601a <_printf_i+0x1f2>
 8006016:	1b40      	subs	r0, r0, r5
 8006018:	6060      	str	r0, [r4, #4]
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	2300      	movs	r3, #0
 8006020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006024:	e7a8      	b.n	8005f78 <_printf_i+0x150>
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	462a      	mov	r2, r5
 800602a:	4649      	mov	r1, r9
 800602c:	4640      	mov	r0, r8
 800602e:	47d0      	blx	sl
 8006030:	3001      	adds	r0, #1
 8006032:	d0ab      	beq.n	8005f8c <_printf_i+0x164>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	079b      	lsls	r3, r3, #30
 8006038:	d413      	bmi.n	8006062 <_printf_i+0x23a>
 800603a:	68e0      	ldr	r0, [r4, #12]
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	4298      	cmp	r0, r3
 8006040:	bfb8      	it	lt
 8006042:	4618      	movlt	r0, r3
 8006044:	e7a4      	b.n	8005f90 <_printf_i+0x168>
 8006046:	2301      	movs	r3, #1
 8006048:	4632      	mov	r2, r6
 800604a:	4649      	mov	r1, r9
 800604c:	4640      	mov	r0, r8
 800604e:	47d0      	blx	sl
 8006050:	3001      	adds	r0, #1
 8006052:	d09b      	beq.n	8005f8c <_printf_i+0x164>
 8006054:	3501      	adds	r5, #1
 8006056:	68e3      	ldr	r3, [r4, #12]
 8006058:	9903      	ldr	r1, [sp, #12]
 800605a:	1a5b      	subs	r3, r3, r1
 800605c:	42ab      	cmp	r3, r5
 800605e:	dcf2      	bgt.n	8006046 <_printf_i+0x21e>
 8006060:	e7eb      	b.n	800603a <_printf_i+0x212>
 8006062:	2500      	movs	r5, #0
 8006064:	f104 0619 	add.w	r6, r4, #25
 8006068:	e7f5      	b.n	8006056 <_printf_i+0x22e>
 800606a:	bf00      	nop
 800606c:	080088ce 	.word	0x080088ce
 8006070:	080088df 	.word	0x080088df

08006074 <_sbrk_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4d06      	ldr	r5, [pc, #24]	; (8006090 <_sbrk_r+0x1c>)
 8006078:	2300      	movs	r3, #0
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	f7fb fb3e 	bl	8001700 <_sbrk>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_sbrk_r+0x1a>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_sbrk_r+0x1a>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000a38 	.word	0x20000a38

08006094 <siprintf>:
 8006094:	b40e      	push	{r1, r2, r3}
 8006096:	b500      	push	{lr}
 8006098:	b09c      	sub	sp, #112	; 0x70
 800609a:	ab1d      	add	r3, sp, #116	; 0x74
 800609c:	9002      	str	r0, [sp, #8]
 800609e:	9006      	str	r0, [sp, #24]
 80060a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060a4:	4809      	ldr	r0, [pc, #36]	; (80060cc <siprintf+0x38>)
 80060a6:	9107      	str	r1, [sp, #28]
 80060a8:	9104      	str	r1, [sp, #16]
 80060aa:	4909      	ldr	r1, [pc, #36]	; (80060d0 <siprintf+0x3c>)
 80060ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b0:	9105      	str	r1, [sp, #20]
 80060b2:	6800      	ldr	r0, [r0, #0]
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	a902      	add	r1, sp, #8
 80060b8:	f001 fabc 	bl	8007634 <_svfiprintf_r>
 80060bc:	9b02      	ldr	r3, [sp, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	b01c      	add	sp, #112	; 0x70
 80060c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c8:	b003      	add	sp, #12
 80060ca:	4770      	bx	lr
 80060cc:	200006c0 	.word	0x200006c0
 80060d0:	ffff0208 	.word	0xffff0208

080060d4 <quorem>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	6903      	ldr	r3, [r0, #16]
 80060da:	690c      	ldr	r4, [r1, #16]
 80060dc:	42a3      	cmp	r3, r4
 80060de:	4607      	mov	r7, r0
 80060e0:	f2c0 8081 	blt.w	80061e6 <quorem+0x112>
 80060e4:	3c01      	subs	r4, #1
 80060e6:	f101 0814 	add.w	r8, r1, #20
 80060ea:	f100 0514 	add.w	r5, r0, #20
 80060ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060fc:	3301      	adds	r3, #1
 80060fe:	429a      	cmp	r2, r3
 8006100:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006108:	fbb2 f6f3 	udiv	r6, r2, r3
 800610c:	d331      	bcc.n	8006172 <quorem+0x9e>
 800610e:	f04f 0e00 	mov.w	lr, #0
 8006112:	4640      	mov	r0, r8
 8006114:	46ac      	mov	ip, r5
 8006116:	46f2      	mov	sl, lr
 8006118:	f850 2b04 	ldr.w	r2, [r0], #4
 800611c:	b293      	uxth	r3, r2
 800611e:	fb06 e303 	mla	r3, r6, r3, lr
 8006122:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006126:	b29b      	uxth	r3, r3
 8006128:	ebaa 0303 	sub.w	r3, sl, r3
 800612c:	f8dc a000 	ldr.w	sl, [ip]
 8006130:	0c12      	lsrs	r2, r2, #16
 8006132:	fa13 f38a 	uxtah	r3, r3, sl
 8006136:	fb06 e202 	mla	r2, r6, r2, lr
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006142:	b292      	uxth	r2, r2
 8006144:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800614c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006150:	4581      	cmp	r9, r0
 8006152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006156:	f84c 3b04 	str.w	r3, [ip], #4
 800615a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800615e:	d2db      	bcs.n	8006118 <quorem+0x44>
 8006160:	f855 300b 	ldr.w	r3, [r5, fp]
 8006164:	b92b      	cbnz	r3, 8006172 <quorem+0x9e>
 8006166:	9b01      	ldr	r3, [sp, #4]
 8006168:	3b04      	subs	r3, #4
 800616a:	429d      	cmp	r5, r3
 800616c:	461a      	mov	r2, r3
 800616e:	d32e      	bcc.n	80061ce <quorem+0xfa>
 8006170:	613c      	str	r4, [r7, #16]
 8006172:	4638      	mov	r0, r7
 8006174:	f001 f8bc 	bl	80072f0 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	db24      	blt.n	80061c6 <quorem+0xf2>
 800617c:	3601      	adds	r6, #1
 800617e:	4628      	mov	r0, r5
 8006180:	f04f 0c00 	mov.w	ip, #0
 8006184:	f858 2b04 	ldr.w	r2, [r8], #4
 8006188:	f8d0 e000 	ldr.w	lr, [r0]
 800618c:	b293      	uxth	r3, r2
 800618e:	ebac 0303 	sub.w	r3, ip, r3
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	fa13 f38e 	uxtah	r3, r3, lr
 8006198:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800619c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a6:	45c1      	cmp	r9, r8
 80061a8:	f840 3b04 	str.w	r3, [r0], #4
 80061ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061b0:	d2e8      	bcs.n	8006184 <quorem+0xb0>
 80061b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ba:	b922      	cbnz	r2, 80061c6 <quorem+0xf2>
 80061bc:	3b04      	subs	r3, #4
 80061be:	429d      	cmp	r5, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	d30a      	bcc.n	80061da <quorem+0x106>
 80061c4:	613c      	str	r4, [r7, #16]
 80061c6:	4630      	mov	r0, r6
 80061c8:	b003      	add	sp, #12
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1cc      	bne.n	8006170 <quorem+0x9c>
 80061d6:	3c01      	subs	r4, #1
 80061d8:	e7c7      	b.n	800616a <quorem+0x96>
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	3b04      	subs	r3, #4
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d1f0      	bne.n	80061c4 <quorem+0xf0>
 80061e2:	3c01      	subs	r4, #1
 80061e4:	e7eb      	b.n	80061be <quorem+0xea>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e7ee      	b.n	80061c8 <quorem+0xf4>
 80061ea:	0000      	movs	r0, r0
 80061ec:	0000      	movs	r0, r0
	...

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ed2d 8b04 	vpush	{d8-d9}
 80061f8:	ec57 6b10 	vmov	r6, r7, d0
 80061fc:	b093      	sub	sp, #76	; 0x4c
 80061fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006200:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006204:	9106      	str	r1, [sp, #24]
 8006206:	ee10 aa10 	vmov	sl, s0
 800620a:	4604      	mov	r4, r0
 800620c:	9209      	str	r2, [sp, #36]	; 0x24
 800620e:	930c      	str	r3, [sp, #48]	; 0x30
 8006210:	46bb      	mov	fp, r7
 8006212:	b975      	cbnz	r5, 8006232 <_dtoa_r+0x42>
 8006214:	2010      	movs	r0, #16
 8006216:	f7ff f9c5 	bl	80055a4 <malloc>
 800621a:	4602      	mov	r2, r0
 800621c:	6260      	str	r0, [r4, #36]	; 0x24
 800621e:	b920      	cbnz	r0, 800622a <_dtoa_r+0x3a>
 8006220:	4ba7      	ldr	r3, [pc, #668]	; (80064c0 <_dtoa_r+0x2d0>)
 8006222:	21ea      	movs	r1, #234	; 0xea
 8006224:	48a7      	ldr	r0, [pc, #668]	; (80064c4 <_dtoa_r+0x2d4>)
 8006226:	f001 fb05 	bl	8007834 <__assert_func>
 800622a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800622e:	6005      	str	r5, [r0, #0]
 8006230:	60c5      	str	r5, [r0, #12]
 8006232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	b151      	cbz	r1, 800624e <_dtoa_r+0x5e>
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	604a      	str	r2, [r1, #4]
 800623c:	2301      	movs	r3, #1
 800623e:	4093      	lsls	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
 8006242:	4620      	mov	r0, r4
 8006244:	f000 fe12 	bl	8006e6c <_Bfree>
 8006248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	1e3b      	subs	r3, r7, #0
 8006250:	bfaa      	itet	ge
 8006252:	2300      	movge	r3, #0
 8006254:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006258:	f8c8 3000 	strge.w	r3, [r8]
 800625c:	4b9a      	ldr	r3, [pc, #616]	; (80064c8 <_dtoa_r+0x2d8>)
 800625e:	bfbc      	itt	lt
 8006260:	2201      	movlt	r2, #1
 8006262:	f8c8 2000 	strlt.w	r2, [r8]
 8006266:	ea33 030b 	bics.w	r3, r3, fp
 800626a:	d11b      	bne.n	80062a4 <_dtoa_r+0xb4>
 800626c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800626e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006278:	4333      	orrs	r3, r6
 800627a:	f000 8592 	beq.w	8006da2 <_dtoa_r+0xbb2>
 800627e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006280:	b963      	cbnz	r3, 800629c <_dtoa_r+0xac>
 8006282:	4b92      	ldr	r3, [pc, #584]	; (80064cc <_dtoa_r+0x2dc>)
 8006284:	e022      	b.n	80062cc <_dtoa_r+0xdc>
 8006286:	4b92      	ldr	r3, [pc, #584]	; (80064d0 <_dtoa_r+0x2e0>)
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	3308      	adds	r3, #8
 800628c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	9801      	ldr	r0, [sp, #4]
 8006292:	b013      	add	sp, #76	; 0x4c
 8006294:	ecbd 8b04 	vpop	{d8-d9}
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	4b8b      	ldr	r3, [pc, #556]	; (80064cc <_dtoa_r+0x2dc>)
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	3303      	adds	r3, #3
 80062a2:	e7f3      	b.n	800628c <_dtoa_r+0x9c>
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa fc1c 	bl	8000ae8 <__aeabi_dcmpeq>
 80062b0:	ec4b ab19 	vmov	d9, sl, fp
 80062b4:	4680      	mov	r8, r0
 80062b6:	b158      	cbz	r0, 80062d0 <_dtoa_r+0xe0>
 80062b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ba:	2301      	movs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 856b 	beq.w	8006d9c <_dtoa_r+0xbac>
 80062c6:	4883      	ldr	r0, [pc, #524]	; (80064d4 <_dtoa_r+0x2e4>)
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	1e43      	subs	r3, r0, #1
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	e7df      	b.n	8006290 <_dtoa_r+0xa0>
 80062d0:	ec4b ab10 	vmov	d0, sl, fp
 80062d4:	aa10      	add	r2, sp, #64	; 0x40
 80062d6:	a911      	add	r1, sp, #68	; 0x44
 80062d8:	4620      	mov	r0, r4
 80062da:	f001 f8af 	bl	800743c <__d2b>
 80062de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80062e2:	ee08 0a10 	vmov	s16, r0
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 8084 	beq.w	80063f4 <_dtoa_r+0x204>
 80062ec:	ee19 3a90 	vmov	r3, s19
 80062f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80062f8:	4656      	mov	r6, sl
 80062fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80062fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006302:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006306:	4b74      	ldr	r3, [pc, #464]	; (80064d8 <_dtoa_r+0x2e8>)
 8006308:	2200      	movs	r2, #0
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7f9 ffcb 	bl	80002a8 <__aeabi_dsub>
 8006312:	a365      	add	r3, pc, #404	; (adr r3, 80064a8 <_dtoa_r+0x2b8>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa f97e 	bl	8000618 <__aeabi_dmul>
 800631c:	a364      	add	r3, pc, #400	; (adr r3, 80064b0 <_dtoa_r+0x2c0>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ffc3 	bl	80002ac <__adddf3>
 8006326:	4606      	mov	r6, r0
 8006328:	4628      	mov	r0, r5
 800632a:	460f      	mov	r7, r1
 800632c:	f7fa f90a 	bl	8000544 <__aeabi_i2d>
 8006330:	a361      	add	r3, pc, #388	; (adr r3, 80064b8 <_dtoa_r+0x2c8>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7fa f96f 	bl	8000618 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7f9 ffb3 	bl	80002ac <__adddf3>
 8006346:	4606      	mov	r6, r0
 8006348:	460f      	mov	r7, r1
 800634a:	f7fa fc15 	bl	8000b78 <__aeabi_d2iz>
 800634e:	2200      	movs	r2, #0
 8006350:	9000      	str	r0, [sp, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7fa fbd0 	bl	8000afc <__aeabi_dcmplt>
 800635c:	b150      	cbz	r0, 8006374 <_dtoa_r+0x184>
 800635e:	9800      	ldr	r0, [sp, #0]
 8006360:	f7fa f8f0 	bl	8000544 <__aeabi_i2d>
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	f7fa fbbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800636c:	b910      	cbnz	r0, 8006374 <_dtoa_r+0x184>
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	3b01      	subs	r3, #1
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	9b00      	ldr	r3, [sp, #0]
 8006376:	2b16      	cmp	r3, #22
 8006378:	d85a      	bhi.n	8006430 <_dtoa_r+0x240>
 800637a:	9a00      	ldr	r2, [sp, #0]
 800637c:	4b57      	ldr	r3, [pc, #348]	; (80064dc <_dtoa_r+0x2ec>)
 800637e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	ec51 0b19 	vmov	r0, r1, d9
 800638a:	f7fa fbb7 	bl	8000afc <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	d050      	beq.n	8006434 <_dtoa_r+0x244>
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	930b      	str	r3, [sp, #44]	; 0x2c
 800639c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800639e:	1b5d      	subs	r5, r3, r5
 80063a0:	1e6b      	subs	r3, r5, #1
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	bf45      	ittet	mi
 80063a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80063aa:	9304      	strmi	r3, [sp, #16]
 80063ac:	2300      	movpl	r3, #0
 80063ae:	2300      	movmi	r3, #0
 80063b0:	bf4c      	ite	mi
 80063b2:	9305      	strmi	r3, [sp, #20]
 80063b4:	9304      	strpl	r3, [sp, #16]
 80063b6:	9b00      	ldr	r3, [sp, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	db3d      	blt.n	8006438 <_dtoa_r+0x248>
 80063bc:	9b05      	ldr	r3, [sp, #20]
 80063be:	9a00      	ldr	r2, [sp, #0]
 80063c0:	920a      	str	r2, [sp, #40]	; 0x28
 80063c2:	4413      	add	r3, r2
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	2300      	movs	r3, #0
 80063c8:	9307      	str	r3, [sp, #28]
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	f200 8089 	bhi.w	80064e4 <_dtoa_r+0x2f4>
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	bfc4      	itt	gt
 80063d6:	3b04      	subgt	r3, #4
 80063d8:	9306      	strgt	r3, [sp, #24]
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	f1a3 0302 	sub.w	r3, r3, #2
 80063e0:	bfcc      	ite	gt
 80063e2:	2500      	movgt	r5, #0
 80063e4:	2501      	movle	r5, #1
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	f200 8087 	bhi.w	80064fa <_dtoa_r+0x30a>
 80063ec:	e8df f003 	tbb	[pc, r3]
 80063f0:	59383a2d 	.word	0x59383a2d
 80063f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80063f8:	441d      	add	r5, r3
 80063fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063fe:	2b20      	cmp	r3, #32
 8006400:	bfc1      	itttt	gt
 8006402:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006406:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800640a:	fa0b f303 	lslgt.w	r3, fp, r3
 800640e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006412:	bfda      	itte	le
 8006414:	f1c3 0320 	rsble	r3, r3, #32
 8006418:	fa06 f003 	lslle.w	r0, r6, r3
 800641c:	4318      	orrgt	r0, r3
 800641e:	f7fa f881 	bl	8000524 <__aeabi_ui2d>
 8006422:	2301      	movs	r3, #1
 8006424:	4606      	mov	r6, r0
 8006426:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800642a:	3d01      	subs	r5, #1
 800642c:	930e      	str	r3, [sp, #56]	; 0x38
 800642e:	e76a      	b.n	8006306 <_dtoa_r+0x116>
 8006430:	2301      	movs	r3, #1
 8006432:	e7b2      	b.n	800639a <_dtoa_r+0x1aa>
 8006434:	900b      	str	r0, [sp, #44]	; 0x2c
 8006436:	e7b1      	b.n	800639c <_dtoa_r+0x1ac>
 8006438:	9b04      	ldr	r3, [sp, #16]
 800643a:	9a00      	ldr	r2, [sp, #0]
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	9304      	str	r3, [sp, #16]
 8006440:	4253      	negs	r3, r2
 8006442:	9307      	str	r3, [sp, #28]
 8006444:	2300      	movs	r3, #0
 8006446:	930a      	str	r3, [sp, #40]	; 0x28
 8006448:	e7bf      	b.n	80063ca <_dtoa_r+0x1da>
 800644a:	2300      	movs	r3, #0
 800644c:	9308      	str	r3, [sp, #32]
 800644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	dc55      	bgt.n	8006500 <_dtoa_r+0x310>
 8006454:	2301      	movs	r3, #1
 8006456:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800645a:	461a      	mov	r2, r3
 800645c:	9209      	str	r2, [sp, #36]	; 0x24
 800645e:	e00c      	b.n	800647a <_dtoa_r+0x28a>
 8006460:	2301      	movs	r3, #1
 8006462:	e7f3      	b.n	800644c <_dtoa_r+0x25c>
 8006464:	2300      	movs	r3, #0
 8006466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b00      	ldr	r3, [sp, #0]
 800646c:	4413      	add	r3, r2
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	3301      	adds	r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	9303      	str	r3, [sp, #12]
 8006476:	bfb8      	it	lt
 8006478:	2301      	movlt	r3, #1
 800647a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800647c:	2200      	movs	r2, #0
 800647e:	6042      	str	r2, [r0, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	f102 0614 	add.w	r6, r2, #20
 8006486:	429e      	cmp	r6, r3
 8006488:	6841      	ldr	r1, [r0, #4]
 800648a:	d93d      	bls.n	8006508 <_dtoa_r+0x318>
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fcad 	bl	8006dec <_Balloc>
 8006492:	9001      	str	r0, [sp, #4]
 8006494:	2800      	cmp	r0, #0
 8006496:	d13b      	bne.n	8006510 <_dtoa_r+0x320>
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <_dtoa_r+0x2f0>)
 800649a:	4602      	mov	r2, r0
 800649c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064a0:	e6c0      	b.n	8006224 <_dtoa_r+0x34>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7df      	b.n	8006466 <_dtoa_r+0x276>
 80064a6:	bf00      	nop
 80064a8:	636f4361 	.word	0x636f4361
 80064ac:	3fd287a7 	.word	0x3fd287a7
 80064b0:	8b60c8b3 	.word	0x8b60c8b3
 80064b4:	3fc68a28 	.word	0x3fc68a28
 80064b8:	509f79fb 	.word	0x509f79fb
 80064bc:	3fd34413 	.word	0x3fd34413
 80064c0:	080088fd 	.word	0x080088fd
 80064c4:	08008914 	.word	0x08008914
 80064c8:	7ff00000 	.word	0x7ff00000
 80064cc:	080088f9 	.word	0x080088f9
 80064d0:	080088f0 	.word	0x080088f0
 80064d4:	080088cd 	.word	0x080088cd
 80064d8:	3ff80000 	.word	0x3ff80000
 80064dc:	08008a08 	.word	0x08008a08
 80064e0:	0800896f 	.word	0x0800896f
 80064e4:	2501      	movs	r5, #1
 80064e6:	2300      	movs	r3, #0
 80064e8:	9306      	str	r3, [sp, #24]
 80064ea:	9508      	str	r5, [sp, #32]
 80064ec:	f04f 33ff 	mov.w	r3, #4294967295
 80064f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2312      	movs	r3, #18
 80064f8:	e7b0      	b.n	800645c <_dtoa_r+0x26c>
 80064fa:	2301      	movs	r3, #1
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	e7f5      	b.n	80064ec <_dtoa_r+0x2fc>
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006506:	e7b8      	b.n	800647a <_dtoa_r+0x28a>
 8006508:	3101      	adds	r1, #1
 800650a:	6041      	str	r1, [r0, #4]
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	e7b8      	b.n	8006482 <_dtoa_r+0x292>
 8006510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006512:	9a01      	ldr	r2, [sp, #4]
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	2b0e      	cmp	r3, #14
 800651a:	f200 809d 	bhi.w	8006658 <_dtoa_r+0x468>
 800651e:	2d00      	cmp	r5, #0
 8006520:	f000 809a 	beq.w	8006658 <_dtoa_r+0x468>
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	dd32      	ble.n	8006590 <_dtoa_r+0x3a0>
 800652a:	4ab7      	ldr	r2, [pc, #732]	; (8006808 <_dtoa_r+0x618>)
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	05d8      	lsls	r0, r3, #23
 800653c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006540:	d516      	bpl.n	8006570 <_dtoa_r+0x380>
 8006542:	4bb2      	ldr	r3, [pc, #712]	; (800680c <_dtoa_r+0x61c>)
 8006544:	ec51 0b19 	vmov	r0, r1, d9
 8006548:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800654c:	f7fa f98e 	bl	800086c <__aeabi_ddiv>
 8006550:	f007 070f 	and.w	r7, r7, #15
 8006554:	4682      	mov	sl, r0
 8006556:	468b      	mov	fp, r1
 8006558:	2503      	movs	r5, #3
 800655a:	4eac      	ldr	r6, [pc, #688]	; (800680c <_dtoa_r+0x61c>)
 800655c:	b957      	cbnz	r7, 8006574 <_dtoa_r+0x384>
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	4650      	mov	r0, sl
 8006564:	4659      	mov	r1, fp
 8006566:	f7fa f981 	bl	800086c <__aeabi_ddiv>
 800656a:	4682      	mov	sl, r0
 800656c:	468b      	mov	fp, r1
 800656e:	e028      	b.n	80065c2 <_dtoa_r+0x3d2>
 8006570:	2502      	movs	r5, #2
 8006572:	e7f2      	b.n	800655a <_dtoa_r+0x36a>
 8006574:	07f9      	lsls	r1, r7, #31
 8006576:	d508      	bpl.n	800658a <_dtoa_r+0x39a>
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006580:	f7fa f84a 	bl	8000618 <__aeabi_dmul>
 8006584:	3501      	adds	r5, #1
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	107f      	asrs	r7, r7, #1
 800658c:	3608      	adds	r6, #8
 800658e:	e7e5      	b.n	800655c <_dtoa_r+0x36c>
 8006590:	f000 809b 	beq.w	80066ca <_dtoa_r+0x4da>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	4f9d      	ldr	r7, [pc, #628]	; (800680c <_dtoa_r+0x61c>)
 8006598:	425e      	negs	r6, r3
 800659a:	4b9b      	ldr	r3, [pc, #620]	; (8006808 <_dtoa_r+0x618>)
 800659c:	f006 020f 	and.w	r2, r6, #15
 80065a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	ec51 0b19 	vmov	r0, r1, d9
 80065ac:	f7fa f834 	bl	8000618 <__aeabi_dmul>
 80065b0:	1136      	asrs	r6, r6, #4
 80065b2:	4682      	mov	sl, r0
 80065b4:	468b      	mov	fp, r1
 80065b6:	2300      	movs	r3, #0
 80065b8:	2502      	movs	r5, #2
 80065ba:	2e00      	cmp	r6, #0
 80065bc:	d17a      	bne.n	80066b4 <_dtoa_r+0x4c4>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1d3      	bne.n	800656a <_dtoa_r+0x37a>
 80065c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8082 	beq.w	80066ce <_dtoa_r+0x4de>
 80065ca:	4b91      	ldr	r3, [pc, #580]	; (8006810 <_dtoa_r+0x620>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	4650      	mov	r0, sl
 80065d0:	4659      	mov	r1, fp
 80065d2:	f7fa fa93 	bl	8000afc <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d079      	beq.n	80066ce <_dtoa_r+0x4de>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d076      	beq.n	80066ce <_dtoa_r+0x4de>
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd36      	ble.n	8006654 <_dtoa_r+0x464>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	4650      	mov	r0, sl
 80065ea:	4659      	mov	r1, fp
 80065ec:	1e5f      	subs	r7, r3, #1
 80065ee:	2200      	movs	r2, #0
 80065f0:	4b88      	ldr	r3, [pc, #544]	; (8006814 <_dtoa_r+0x624>)
 80065f2:	f7fa f811 	bl	8000618 <__aeabi_dmul>
 80065f6:	9e02      	ldr	r6, [sp, #8]
 80065f8:	4682      	mov	sl, r0
 80065fa:	468b      	mov	fp, r1
 80065fc:	3501      	adds	r5, #1
 80065fe:	4628      	mov	r0, r5
 8006600:	f7f9 ffa0 	bl	8000544 <__aeabi_i2d>
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	f7fa f806 	bl	8000618 <__aeabi_dmul>
 800660c:	4b82      	ldr	r3, [pc, #520]	; (8006818 <_dtoa_r+0x628>)
 800660e:	2200      	movs	r2, #0
 8006610:	f7f9 fe4c 	bl	80002ac <__adddf3>
 8006614:	46d0      	mov	r8, sl
 8006616:	46d9      	mov	r9, fp
 8006618:	4682      	mov	sl, r0
 800661a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800661e:	2e00      	cmp	r6, #0
 8006620:	d158      	bne.n	80066d4 <_dtoa_r+0x4e4>
 8006622:	4b7e      	ldr	r3, [pc, #504]	; (800681c <_dtoa_r+0x62c>)
 8006624:	2200      	movs	r2, #0
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f7f9 fe3d 	bl	80002a8 <__aeabi_dsub>
 800662e:	4652      	mov	r2, sl
 8006630:	465b      	mov	r3, fp
 8006632:	4680      	mov	r8, r0
 8006634:	4689      	mov	r9, r1
 8006636:	f7fa fa7f 	bl	8000b38 <__aeabi_dcmpgt>
 800663a:	2800      	cmp	r0, #0
 800663c:	f040 8295 	bne.w	8006b6a <_dtoa_r+0x97a>
 8006640:	4652      	mov	r2, sl
 8006642:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	f7fa fa57 	bl	8000afc <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	f040 8289 	bne.w	8006b66 <_dtoa_r+0x976>
 8006654:	ec5b ab19 	vmov	sl, fp, d9
 8006658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800665a:	2b00      	cmp	r3, #0
 800665c:	f2c0 8148 	blt.w	80068f0 <_dtoa_r+0x700>
 8006660:	9a00      	ldr	r2, [sp, #0]
 8006662:	2a0e      	cmp	r2, #14
 8006664:	f300 8144 	bgt.w	80068f0 <_dtoa_r+0x700>
 8006668:	4b67      	ldr	r3, [pc, #412]	; (8006808 <_dtoa_r+0x618>)
 800666a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800666e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	f280 80d5 	bge.w	8006824 <_dtoa_r+0x634>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f300 80d1 	bgt.w	8006824 <_dtoa_r+0x634>
 8006682:	f040 826f 	bne.w	8006b64 <_dtoa_r+0x974>
 8006686:	4b65      	ldr	r3, [pc, #404]	; (800681c <_dtoa_r+0x62c>)
 8006688:	2200      	movs	r2, #0
 800668a:	4640      	mov	r0, r8
 800668c:	4649      	mov	r1, r9
 800668e:	f7f9 ffc3 	bl	8000618 <__aeabi_dmul>
 8006692:	4652      	mov	r2, sl
 8006694:	465b      	mov	r3, fp
 8006696:	f7fa fa45 	bl	8000b24 <__aeabi_dcmpge>
 800669a:	9e03      	ldr	r6, [sp, #12]
 800669c:	4637      	mov	r7, r6
 800669e:	2800      	cmp	r0, #0
 80066a0:	f040 8245 	bne.w	8006b2e <_dtoa_r+0x93e>
 80066a4:	9d01      	ldr	r5, [sp, #4]
 80066a6:	2331      	movs	r3, #49	; 0x31
 80066a8:	f805 3b01 	strb.w	r3, [r5], #1
 80066ac:	9b00      	ldr	r3, [sp, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	e240      	b.n	8006b36 <_dtoa_r+0x946>
 80066b4:	07f2      	lsls	r2, r6, #31
 80066b6:	d505      	bpl.n	80066c4 <_dtoa_r+0x4d4>
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	f7f9 ffac 	bl	8000618 <__aeabi_dmul>
 80066c0:	3501      	adds	r5, #1
 80066c2:	2301      	movs	r3, #1
 80066c4:	1076      	asrs	r6, r6, #1
 80066c6:	3708      	adds	r7, #8
 80066c8:	e777      	b.n	80065ba <_dtoa_r+0x3ca>
 80066ca:	2502      	movs	r5, #2
 80066cc:	e779      	b.n	80065c2 <_dtoa_r+0x3d2>
 80066ce:	9f00      	ldr	r7, [sp, #0]
 80066d0:	9e03      	ldr	r6, [sp, #12]
 80066d2:	e794      	b.n	80065fe <_dtoa_r+0x40e>
 80066d4:	9901      	ldr	r1, [sp, #4]
 80066d6:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <_dtoa_r+0x618>)
 80066d8:	4431      	add	r1, r6
 80066da:	910d      	str	r1, [sp, #52]	; 0x34
 80066dc:	9908      	ldr	r1, [sp, #32]
 80066de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066e6:	2900      	cmp	r1, #0
 80066e8:	d043      	beq.n	8006772 <_dtoa_r+0x582>
 80066ea:	494d      	ldr	r1, [pc, #308]	; (8006820 <_dtoa_r+0x630>)
 80066ec:	2000      	movs	r0, #0
 80066ee:	f7fa f8bd 	bl	800086c <__aeabi_ddiv>
 80066f2:	4652      	mov	r2, sl
 80066f4:	465b      	mov	r3, fp
 80066f6:	f7f9 fdd7 	bl	80002a8 <__aeabi_dsub>
 80066fa:	9d01      	ldr	r5, [sp, #4]
 80066fc:	4682      	mov	sl, r0
 80066fe:	468b      	mov	fp, r1
 8006700:	4649      	mov	r1, r9
 8006702:	4640      	mov	r0, r8
 8006704:	f7fa fa38 	bl	8000b78 <__aeabi_d2iz>
 8006708:	4606      	mov	r6, r0
 800670a:	f7f9 ff1b 	bl	8000544 <__aeabi_i2d>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fdc7 	bl	80002a8 <__aeabi_dsub>
 800671a:	3630      	adds	r6, #48	; 0x30
 800671c:	f805 6b01 	strb.w	r6, [r5], #1
 8006720:	4652      	mov	r2, sl
 8006722:	465b      	mov	r3, fp
 8006724:	4680      	mov	r8, r0
 8006726:	4689      	mov	r9, r1
 8006728:	f7fa f9e8 	bl	8000afc <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	d163      	bne.n	80067f8 <_dtoa_r+0x608>
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	4936      	ldr	r1, [pc, #216]	; (8006810 <_dtoa_r+0x620>)
 8006736:	2000      	movs	r0, #0
 8006738:	f7f9 fdb6 	bl	80002a8 <__aeabi_dsub>
 800673c:	4652      	mov	r2, sl
 800673e:	465b      	mov	r3, fp
 8006740:	f7fa f9dc 	bl	8000afc <__aeabi_dcmplt>
 8006744:	2800      	cmp	r0, #0
 8006746:	f040 80b5 	bne.w	80068b4 <_dtoa_r+0x6c4>
 800674a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674c:	429d      	cmp	r5, r3
 800674e:	d081      	beq.n	8006654 <_dtoa_r+0x464>
 8006750:	4b30      	ldr	r3, [pc, #192]	; (8006814 <_dtoa_r+0x624>)
 8006752:	2200      	movs	r2, #0
 8006754:	4650      	mov	r0, sl
 8006756:	4659      	mov	r1, fp
 8006758:	f7f9 ff5e 	bl	8000618 <__aeabi_dmul>
 800675c:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <_dtoa_r+0x624>)
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	2200      	movs	r2, #0
 8006768:	f7f9 ff56 	bl	8000618 <__aeabi_dmul>
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	e7c6      	b.n	8006700 <_dtoa_r+0x510>
 8006772:	4650      	mov	r0, sl
 8006774:	4659      	mov	r1, fp
 8006776:	f7f9 ff4f 	bl	8000618 <__aeabi_dmul>
 800677a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800677c:	9d01      	ldr	r5, [sp, #4]
 800677e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006780:	4682      	mov	sl, r0
 8006782:	468b      	mov	fp, r1
 8006784:	4649      	mov	r1, r9
 8006786:	4640      	mov	r0, r8
 8006788:	f7fa f9f6 	bl	8000b78 <__aeabi_d2iz>
 800678c:	4606      	mov	r6, r0
 800678e:	f7f9 fed9 	bl	8000544 <__aeabi_i2d>
 8006792:	3630      	adds	r6, #48	; 0x30
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4640      	mov	r0, r8
 800679a:	4649      	mov	r1, r9
 800679c:	f7f9 fd84 	bl	80002a8 <__aeabi_dsub>
 80067a0:	f805 6b01 	strb.w	r6, [r5], #1
 80067a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a6:	429d      	cmp	r5, r3
 80067a8:	4680      	mov	r8, r0
 80067aa:	4689      	mov	r9, r1
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	d124      	bne.n	80067fc <_dtoa_r+0x60c>
 80067b2:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <_dtoa_r+0x630>)
 80067b4:	4650      	mov	r0, sl
 80067b6:	4659      	mov	r1, fp
 80067b8:	f7f9 fd78 	bl	80002ac <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	f7fa f9b8 	bl	8000b38 <__aeabi_dcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d173      	bne.n	80068b4 <_dtoa_r+0x6c4>
 80067cc:	4652      	mov	r2, sl
 80067ce:	465b      	mov	r3, fp
 80067d0:	4913      	ldr	r1, [pc, #76]	; (8006820 <_dtoa_r+0x630>)
 80067d2:	2000      	movs	r0, #0
 80067d4:	f7f9 fd68 	bl	80002a8 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7fa f98c 	bl	8000afc <__aeabi_dcmplt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f43f af35 	beq.w	8006654 <_dtoa_r+0x464>
 80067ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80067ec:	1e6b      	subs	r3, r5, #1
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d0f8      	beq.n	80067ea <_dtoa_r+0x5fa>
 80067f8:	9700      	str	r7, [sp, #0]
 80067fa:	e049      	b.n	8006890 <_dtoa_r+0x6a0>
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <_dtoa_r+0x624>)
 80067fe:	f7f9 ff0b 	bl	8000618 <__aeabi_dmul>
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	e7bd      	b.n	8006784 <_dtoa_r+0x594>
 8006808:	08008a08 	.word	0x08008a08
 800680c:	080089e0 	.word	0x080089e0
 8006810:	3ff00000 	.word	0x3ff00000
 8006814:	40240000 	.word	0x40240000
 8006818:	401c0000 	.word	0x401c0000
 800681c:	40140000 	.word	0x40140000
 8006820:	3fe00000 	.word	0x3fe00000
 8006824:	9d01      	ldr	r5, [sp, #4]
 8006826:	4656      	mov	r6, sl
 8006828:	465f      	mov	r7, fp
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	4630      	mov	r0, r6
 8006830:	4639      	mov	r1, r7
 8006832:	f7fa f81b 	bl	800086c <__aeabi_ddiv>
 8006836:	f7fa f99f 	bl	8000b78 <__aeabi_d2iz>
 800683a:	4682      	mov	sl, r0
 800683c:	f7f9 fe82 	bl	8000544 <__aeabi_i2d>
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	f7f9 fee8 	bl	8000618 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006854:	f7f9 fd28 	bl	80002a8 <__aeabi_dsub>
 8006858:	f805 6b01 	strb.w	r6, [r5], #1
 800685c:	9e01      	ldr	r6, [sp, #4]
 800685e:	9f03      	ldr	r7, [sp, #12]
 8006860:	1bae      	subs	r6, r5, r6
 8006862:	42b7      	cmp	r7, r6
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	d135      	bne.n	80068d6 <_dtoa_r+0x6e6>
 800686a:	f7f9 fd1f 	bl	80002ac <__adddf3>
 800686e:	4642      	mov	r2, r8
 8006870:	464b      	mov	r3, r9
 8006872:	4606      	mov	r6, r0
 8006874:	460f      	mov	r7, r1
 8006876:	f7fa f95f 	bl	8000b38 <__aeabi_dcmpgt>
 800687a:	b9d0      	cbnz	r0, 80068b2 <_dtoa_r+0x6c2>
 800687c:	4642      	mov	r2, r8
 800687e:	464b      	mov	r3, r9
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	f7fa f930 	bl	8000ae8 <__aeabi_dcmpeq>
 8006888:	b110      	cbz	r0, 8006890 <_dtoa_r+0x6a0>
 800688a:	f01a 0f01 	tst.w	sl, #1
 800688e:	d110      	bne.n	80068b2 <_dtoa_r+0x6c2>
 8006890:	4620      	mov	r0, r4
 8006892:	ee18 1a10 	vmov	r1, s16
 8006896:	f000 fae9 	bl	8006e6c <_Bfree>
 800689a:	2300      	movs	r3, #0
 800689c:	9800      	ldr	r0, [sp, #0]
 800689e:	702b      	strb	r3, [r5, #0]
 80068a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068a2:	3001      	adds	r0, #1
 80068a4:	6018      	str	r0, [r3, #0]
 80068a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f43f acf1 	beq.w	8006290 <_dtoa_r+0xa0>
 80068ae:	601d      	str	r5, [r3, #0]
 80068b0:	e4ee      	b.n	8006290 <_dtoa_r+0xa0>
 80068b2:	9f00      	ldr	r7, [sp, #0]
 80068b4:	462b      	mov	r3, r5
 80068b6:	461d      	mov	r5, r3
 80068b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068bc:	2a39      	cmp	r2, #57	; 0x39
 80068be:	d106      	bne.n	80068ce <_dtoa_r+0x6de>
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d1f7      	bne.n	80068b6 <_dtoa_r+0x6c6>
 80068c6:	9901      	ldr	r1, [sp, #4]
 80068c8:	2230      	movs	r2, #48	; 0x30
 80068ca:	3701      	adds	r7, #1
 80068cc:	700a      	strb	r2, [r1, #0]
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	3201      	adds	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e790      	b.n	80067f8 <_dtoa_r+0x608>
 80068d6:	4ba6      	ldr	r3, [pc, #664]	; (8006b70 <_dtoa_r+0x980>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fe9d 	bl	8000618 <__aeabi_dmul>
 80068de:	2200      	movs	r2, #0
 80068e0:	2300      	movs	r3, #0
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	f7fa f8ff 	bl	8000ae8 <__aeabi_dcmpeq>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d09d      	beq.n	800682a <_dtoa_r+0x63a>
 80068ee:	e7cf      	b.n	8006890 <_dtoa_r+0x6a0>
 80068f0:	9a08      	ldr	r2, [sp, #32]
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	f000 80d7 	beq.w	8006aa6 <_dtoa_r+0x8b6>
 80068f8:	9a06      	ldr	r2, [sp, #24]
 80068fa:	2a01      	cmp	r2, #1
 80068fc:	f300 80ba 	bgt.w	8006a74 <_dtoa_r+0x884>
 8006900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006902:	2a00      	cmp	r2, #0
 8006904:	f000 80b2 	beq.w	8006a6c <_dtoa_r+0x87c>
 8006908:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800690c:	9e07      	ldr	r6, [sp, #28]
 800690e:	9d04      	ldr	r5, [sp, #16]
 8006910:	9a04      	ldr	r2, [sp, #16]
 8006912:	441a      	add	r2, r3
 8006914:	9204      	str	r2, [sp, #16]
 8006916:	9a05      	ldr	r2, [sp, #20]
 8006918:	2101      	movs	r1, #1
 800691a:	441a      	add	r2, r3
 800691c:	4620      	mov	r0, r4
 800691e:	9205      	str	r2, [sp, #20]
 8006920:	f000 fb5c 	bl	8006fdc <__i2b>
 8006924:	4607      	mov	r7, r0
 8006926:	2d00      	cmp	r5, #0
 8006928:	dd0c      	ble.n	8006944 <_dtoa_r+0x754>
 800692a:	9b05      	ldr	r3, [sp, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd09      	ble.n	8006944 <_dtoa_r+0x754>
 8006930:	42ab      	cmp	r3, r5
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	bfa8      	it	ge
 8006936:	462b      	movge	r3, r5
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	9204      	str	r2, [sp, #16]
 800693c:	9a05      	ldr	r2, [sp, #20]
 800693e:	1aed      	subs	r5, r5, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	b31b      	cbz	r3, 8006990 <_dtoa_r+0x7a0>
 8006948:	9b08      	ldr	r3, [sp, #32]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80af 	beq.w	8006aae <_dtoa_r+0x8be>
 8006950:	2e00      	cmp	r6, #0
 8006952:	dd13      	ble.n	800697c <_dtoa_r+0x78c>
 8006954:	4639      	mov	r1, r7
 8006956:	4632      	mov	r2, r6
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fbff 	bl	800715c <__pow5mult>
 800695e:	ee18 2a10 	vmov	r2, s16
 8006962:	4601      	mov	r1, r0
 8006964:	4607      	mov	r7, r0
 8006966:	4620      	mov	r0, r4
 8006968:	f000 fb4e 	bl	8007008 <__multiply>
 800696c:	ee18 1a10 	vmov	r1, s16
 8006970:	4680      	mov	r8, r0
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fa7a 	bl	8006e6c <_Bfree>
 8006978:	ee08 8a10 	vmov	s16, r8
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	1b9a      	subs	r2, r3, r6
 8006980:	d006      	beq.n	8006990 <_dtoa_r+0x7a0>
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	4620      	mov	r0, r4
 8006988:	f000 fbe8 	bl	800715c <__pow5mult>
 800698c:	ee08 0a10 	vmov	s16, r0
 8006990:	2101      	movs	r1, #1
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fb22 	bl	8006fdc <__i2b>
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	2b00      	cmp	r3, #0
 800699c:	4606      	mov	r6, r0
 800699e:	f340 8088 	ble.w	8006ab2 <_dtoa_r+0x8c2>
 80069a2:	461a      	mov	r2, r3
 80069a4:	4601      	mov	r1, r0
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 fbd8 	bl	800715c <__pow5mult>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	4606      	mov	r6, r0
 80069b2:	f340 8081 	ble.w	8006ab8 <_dtoa_r+0x8c8>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	6933      	ldr	r3, [r6, #16]
 80069bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069c0:	6918      	ldr	r0, [r3, #16]
 80069c2:	f000 fabb 	bl	8006f3c <__hi0bits>
 80069c6:	f1c0 0020 	rsb	r0, r0, #32
 80069ca:	9b05      	ldr	r3, [sp, #20]
 80069cc:	4418      	add	r0, r3
 80069ce:	f010 001f 	ands.w	r0, r0, #31
 80069d2:	f000 8092 	beq.w	8006afa <_dtoa_r+0x90a>
 80069d6:	f1c0 0320 	rsb	r3, r0, #32
 80069da:	2b04      	cmp	r3, #4
 80069dc:	f340 808a 	ble.w	8006af4 <_dtoa_r+0x904>
 80069e0:	f1c0 001c 	rsb	r0, r0, #28
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	4403      	add	r3, r0
 80069e8:	9304      	str	r3, [sp, #16]
 80069ea:	9b05      	ldr	r3, [sp, #20]
 80069ec:	4403      	add	r3, r0
 80069ee:	4405      	add	r5, r0
 80069f0:	9305      	str	r3, [sp, #20]
 80069f2:	9b04      	ldr	r3, [sp, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd07      	ble.n	8006a08 <_dtoa_r+0x818>
 80069f8:	ee18 1a10 	vmov	r1, s16
 80069fc:	461a      	mov	r2, r3
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fc06 	bl	8007210 <__lshift>
 8006a04:	ee08 0a10 	vmov	s16, r0
 8006a08:	9b05      	ldr	r3, [sp, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dd05      	ble.n	8006a1a <_dtoa_r+0x82a>
 8006a0e:	4631      	mov	r1, r6
 8006a10:	461a      	mov	r2, r3
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fbfc 	bl	8007210 <__lshift>
 8006a18:	4606      	mov	r6, r0
 8006a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d06e      	beq.n	8006afe <_dtoa_r+0x90e>
 8006a20:	ee18 0a10 	vmov	r0, s16
 8006a24:	4631      	mov	r1, r6
 8006a26:	f000 fc63 	bl	80072f0 <__mcmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	da67      	bge.n	8006afe <_dtoa_r+0x90e>
 8006a2e:	9b00      	ldr	r3, [sp, #0]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	220a      	movs	r2, #10
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fa37 	bl	8006eb0 <__multadd>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	ee08 0a10 	vmov	s16, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 81b1 	beq.w	8006db0 <_dtoa_r+0xbc0>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4639      	mov	r1, r7
 8006a52:	220a      	movs	r2, #10
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fa2b 	bl	8006eb0 <__multadd>
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	4607      	mov	r7, r0
 8006a60:	f300 808e 	bgt.w	8006b80 <_dtoa_r+0x990>
 8006a64:	9b06      	ldr	r3, [sp, #24]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	dc51      	bgt.n	8006b0e <_dtoa_r+0x91e>
 8006a6a:	e089      	b.n	8006b80 <_dtoa_r+0x990>
 8006a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a72:	e74b      	b.n	800690c <_dtoa_r+0x71c>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	1e5e      	subs	r6, r3, #1
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	42b3      	cmp	r3, r6
 8006a7c:	bfbf      	itttt	lt
 8006a7e:	9b07      	ldrlt	r3, [sp, #28]
 8006a80:	9607      	strlt	r6, [sp, #28]
 8006a82:	1af2      	sublt	r2, r6, r3
 8006a84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a86:	bfb6      	itet	lt
 8006a88:	189b      	addlt	r3, r3, r2
 8006a8a:	1b9e      	subge	r6, r3, r6
 8006a8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	bfb8      	it	lt
 8006a92:	2600      	movlt	r6, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bfb7      	itett	lt
 8006a98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006a9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006aa0:	1a9d      	sublt	r5, r3, r2
 8006aa2:	2300      	movlt	r3, #0
 8006aa4:	e734      	b.n	8006910 <_dtoa_r+0x720>
 8006aa6:	9e07      	ldr	r6, [sp, #28]
 8006aa8:	9d04      	ldr	r5, [sp, #16]
 8006aaa:	9f08      	ldr	r7, [sp, #32]
 8006aac:	e73b      	b.n	8006926 <_dtoa_r+0x736>
 8006aae:	9a07      	ldr	r2, [sp, #28]
 8006ab0:	e767      	b.n	8006982 <_dtoa_r+0x792>
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	dc18      	bgt.n	8006aea <_dtoa_r+0x8fa>
 8006ab8:	f1ba 0f00 	cmp.w	sl, #0
 8006abc:	d115      	bne.n	8006aea <_dtoa_r+0x8fa>
 8006abe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ac2:	b993      	cbnz	r3, 8006aea <_dtoa_r+0x8fa>
 8006ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	051b      	lsls	r3, r3, #20
 8006acc:	b183      	cbz	r3, 8006af0 <_dtoa_r+0x900>
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	f04f 0801 	mov.w	r8, #1
 8006ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f af6a 	bne.w	80069ba <_dtoa_r+0x7ca>
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	e76f      	b.n	80069ca <_dtoa_r+0x7da>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	e7f6      	b.n	8006ade <_dtoa_r+0x8ee>
 8006af0:	4698      	mov	r8, r3
 8006af2:	e7f4      	b.n	8006ade <_dtoa_r+0x8ee>
 8006af4:	f43f af7d 	beq.w	80069f2 <_dtoa_r+0x802>
 8006af8:	4618      	mov	r0, r3
 8006afa:	301c      	adds	r0, #28
 8006afc:	e772      	b.n	80069e4 <_dtoa_r+0x7f4>
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc37      	bgt.n	8006b74 <_dtoa_r+0x984>
 8006b04:	9b06      	ldr	r3, [sp, #24]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	dd34      	ble.n	8006b74 <_dtoa_r+0x984>
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	b96b      	cbnz	r3, 8006b2e <_dtoa_r+0x93e>
 8006b12:	4631      	mov	r1, r6
 8006b14:	2205      	movs	r2, #5
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 f9ca 	bl	8006eb0 <__multadd>
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4606      	mov	r6, r0
 8006b20:	ee18 0a10 	vmov	r0, s16
 8006b24:	f000 fbe4 	bl	80072f0 <__mcmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	f73f adbb 	bgt.w	80066a4 <_dtoa_r+0x4b4>
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	9d01      	ldr	r5, [sp, #4]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 f995 	bl	8006e6c <_Bfree>
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	f43f aea4 	beq.w	8006890 <_dtoa_r+0x6a0>
 8006b48:	f1b8 0f00 	cmp.w	r8, #0
 8006b4c:	d005      	beq.n	8006b5a <_dtoa_r+0x96a>
 8006b4e:	45b8      	cmp	r8, r7
 8006b50:	d003      	beq.n	8006b5a <_dtoa_r+0x96a>
 8006b52:	4641      	mov	r1, r8
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 f989 	bl	8006e6c <_Bfree>
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f985 	bl	8006e6c <_Bfree>
 8006b62:	e695      	b.n	8006890 <_dtoa_r+0x6a0>
 8006b64:	2600      	movs	r6, #0
 8006b66:	4637      	mov	r7, r6
 8006b68:	e7e1      	b.n	8006b2e <_dtoa_r+0x93e>
 8006b6a:	9700      	str	r7, [sp, #0]
 8006b6c:	4637      	mov	r7, r6
 8006b6e:	e599      	b.n	80066a4 <_dtoa_r+0x4b4>
 8006b70:	40240000 	.word	0x40240000
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 80ca 	beq.w	8006d10 <_dtoa_r+0xb20>
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	9302      	str	r3, [sp, #8]
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	dd05      	ble.n	8006b90 <_dtoa_r+0x9a0>
 8006b84:	4639      	mov	r1, r7
 8006b86:	462a      	mov	r2, r5
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fb41 	bl	8007210 <__lshift>
 8006b8e:	4607      	mov	r7, r0
 8006b90:	f1b8 0f00 	cmp.w	r8, #0
 8006b94:	d05b      	beq.n	8006c4e <_dtoa_r+0xa5e>
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 f927 	bl	8006dec <_Balloc>
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <_dtoa_r+0x9be>
 8006ba2:	4b87      	ldr	r3, [pc, #540]	; (8006dc0 <_dtoa_r+0xbd0>)
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006baa:	f7ff bb3b 	b.w	8006224 <_dtoa_r+0x34>
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	f107 010c 	add.w	r1, r7, #12
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f7fe fcfb 	bl	80055b4 <memcpy>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fb24 	bl	8007210 <__lshift>
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	f103 0901 	add.w	r9, r3, #1
 8006bce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	f00a 0301 	and.w	r3, sl, #1
 8006bda:	46b8      	mov	r8, r7
 8006bdc:	9304      	str	r3, [sp, #16]
 8006bde:	4607      	mov	r7, r0
 8006be0:	4631      	mov	r1, r6
 8006be2:	ee18 0a10 	vmov	r0, s16
 8006be6:	f7ff fa75 	bl	80060d4 <quorem>
 8006bea:	4641      	mov	r1, r8
 8006bec:	9002      	str	r0, [sp, #8]
 8006bee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bf2:	ee18 0a10 	vmov	r0, s16
 8006bf6:	f000 fb7b 	bl	80072f0 <__mcmp>
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	9003      	str	r0, [sp, #12]
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fb91 	bl	8007328 <__mdiff>
 8006c06:	68c2      	ldr	r2, [r0, #12]
 8006c08:	f109 3bff 	add.w	fp, r9, #4294967295
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	bb02      	cbnz	r2, 8006c52 <_dtoa_r+0xa62>
 8006c10:	4601      	mov	r1, r0
 8006c12:	ee18 0a10 	vmov	r0, s16
 8006c16:	f000 fb6b 	bl	80072f0 <__mcmp>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4620      	mov	r0, r4
 8006c20:	9207      	str	r2, [sp, #28]
 8006c22:	f000 f923 	bl	8006e6c <_Bfree>
 8006c26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c2a:	ea43 0102 	orr.w	r1, r3, r2
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	464d      	mov	r5, r9
 8006c34:	d10f      	bne.n	8006c56 <_dtoa_r+0xa66>
 8006c36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c3a:	d02a      	beq.n	8006c92 <_dtoa_r+0xaa2>
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dd02      	ble.n	8006c48 <_dtoa_r+0xa58>
 8006c42:	9b02      	ldr	r3, [sp, #8]
 8006c44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006c48:	f88b a000 	strb.w	sl, [fp]
 8006c4c:	e775      	b.n	8006b3a <_dtoa_r+0x94a>
 8006c4e:	4638      	mov	r0, r7
 8006c50:	e7ba      	b.n	8006bc8 <_dtoa_r+0x9d8>
 8006c52:	2201      	movs	r2, #1
 8006c54:	e7e2      	b.n	8006c1c <_dtoa_r+0xa2c>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	db04      	blt.n	8006c66 <_dtoa_r+0xa76>
 8006c5c:	9906      	ldr	r1, [sp, #24]
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	9904      	ldr	r1, [sp, #16]
 8006c62:	430b      	orrs	r3, r1
 8006c64:	d122      	bne.n	8006cac <_dtoa_r+0xabc>
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	ddee      	ble.n	8006c48 <_dtoa_r+0xa58>
 8006c6a:	ee18 1a10 	vmov	r1, s16
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 facd 	bl	8007210 <__lshift>
 8006c76:	4631      	mov	r1, r6
 8006c78:	ee08 0a10 	vmov	s16, r0
 8006c7c:	f000 fb38 	bl	80072f0 <__mcmp>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	dc03      	bgt.n	8006c8c <_dtoa_r+0xa9c>
 8006c84:	d1e0      	bne.n	8006c48 <_dtoa_r+0xa58>
 8006c86:	f01a 0f01 	tst.w	sl, #1
 8006c8a:	d0dd      	beq.n	8006c48 <_dtoa_r+0xa58>
 8006c8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c90:	d1d7      	bne.n	8006c42 <_dtoa_r+0xa52>
 8006c92:	2339      	movs	r3, #57	; 0x39
 8006c94:	f88b 3000 	strb.w	r3, [fp]
 8006c98:	462b      	mov	r3, r5
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ca2:	2a39      	cmp	r2, #57	; 0x39
 8006ca4:	d071      	beq.n	8006d8a <_dtoa_r+0xb9a>
 8006ca6:	3201      	adds	r2, #1
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e746      	b.n	8006b3a <_dtoa_r+0x94a>
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	dd07      	ble.n	8006cc0 <_dtoa_r+0xad0>
 8006cb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cb4:	d0ed      	beq.n	8006c92 <_dtoa_r+0xaa2>
 8006cb6:	f10a 0301 	add.w	r3, sl, #1
 8006cba:	f88b 3000 	strb.w	r3, [fp]
 8006cbe:	e73c      	b.n	8006b3a <_dtoa_r+0x94a>
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006cc6:	4599      	cmp	r9, r3
 8006cc8:	d047      	beq.n	8006d5a <_dtoa_r+0xb6a>
 8006cca:	ee18 1a10 	vmov	r1, s16
 8006cce:	2300      	movs	r3, #0
 8006cd0:	220a      	movs	r2, #10
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f8ec 	bl	8006eb0 <__multadd>
 8006cd8:	45b8      	cmp	r8, r7
 8006cda:	ee08 0a10 	vmov	s16, r0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	f04f 020a 	mov.w	r2, #10
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	4620      	mov	r0, r4
 8006cea:	d106      	bne.n	8006cfa <_dtoa_r+0xb0a>
 8006cec:	f000 f8e0 	bl	8006eb0 <__multadd>
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	f109 0901 	add.w	r9, r9, #1
 8006cf8:	e772      	b.n	8006be0 <_dtoa_r+0x9f0>
 8006cfa:	f000 f8d9 	bl	8006eb0 <__multadd>
 8006cfe:	4639      	mov	r1, r7
 8006d00:	4680      	mov	r8, r0
 8006d02:	2300      	movs	r3, #0
 8006d04:	220a      	movs	r2, #10
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 f8d2 	bl	8006eb0 <__multadd>
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	e7f1      	b.n	8006cf4 <_dtoa_r+0xb04>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	9d01      	ldr	r5, [sp, #4]
 8006d16:	ee18 0a10 	vmov	r0, s16
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	f7ff f9da 	bl	80060d4 <quorem>
 8006d20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d24:	9b01      	ldr	r3, [sp, #4]
 8006d26:	f805 ab01 	strb.w	sl, [r5], #1
 8006d2a:	1aea      	subs	r2, r5, r3
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	dd09      	ble.n	8006d46 <_dtoa_r+0xb56>
 8006d32:	ee18 1a10 	vmov	r1, s16
 8006d36:	2300      	movs	r3, #0
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 f8b8 	bl	8006eb0 <__multadd>
 8006d40:	ee08 0a10 	vmov	s16, r0
 8006d44:	e7e7      	b.n	8006d16 <_dtoa_r+0xb26>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfc8      	it	gt
 8006d4c:	461d      	movgt	r5, r3
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	bfd8      	it	le
 8006d52:	2501      	movle	r5, #1
 8006d54:	441d      	add	r5, r3
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	ee18 1a10 	vmov	r1, s16
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fa55 	bl	8007210 <__lshift>
 8006d66:	4631      	mov	r1, r6
 8006d68:	ee08 0a10 	vmov	s16, r0
 8006d6c:	f000 fac0 	bl	80072f0 <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	dc91      	bgt.n	8006c98 <_dtoa_r+0xaa8>
 8006d74:	d102      	bne.n	8006d7c <_dtoa_r+0xb8c>
 8006d76:	f01a 0f01 	tst.w	sl, #1
 8006d7a:	d18d      	bne.n	8006c98 <_dtoa_r+0xaa8>
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	461d      	mov	r5, r3
 8006d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d84:	2a30      	cmp	r2, #48	; 0x30
 8006d86:	d0fa      	beq.n	8006d7e <_dtoa_r+0xb8e>
 8006d88:	e6d7      	b.n	8006b3a <_dtoa_r+0x94a>
 8006d8a:	9a01      	ldr	r2, [sp, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d184      	bne.n	8006c9a <_dtoa_r+0xaaa>
 8006d90:	9b00      	ldr	r3, [sp, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2331      	movs	r3, #49	; 0x31
 8006d98:	7013      	strb	r3, [r2, #0]
 8006d9a:	e6ce      	b.n	8006b3a <_dtoa_r+0x94a>
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <_dtoa_r+0xbd4>)
 8006d9e:	f7ff ba95 	b.w	80062cc <_dtoa_r+0xdc>
 8006da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f47f aa6e 	bne.w	8006286 <_dtoa_r+0x96>
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <_dtoa_r+0xbd8>)
 8006dac:	f7ff ba8e 	b.w	80062cc <_dtoa_r+0xdc>
 8006db0:	9b02      	ldr	r3, [sp, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dcae      	bgt.n	8006d14 <_dtoa_r+0xb24>
 8006db6:	9b06      	ldr	r3, [sp, #24]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	f73f aea8 	bgt.w	8006b0e <_dtoa_r+0x91e>
 8006dbe:	e7a9      	b.n	8006d14 <_dtoa_r+0xb24>
 8006dc0:	0800896f 	.word	0x0800896f
 8006dc4:	080088cc 	.word	0x080088cc
 8006dc8:	080088f0 	.word	0x080088f0

08006dcc <_localeconv_r>:
 8006dcc:	4800      	ldr	r0, [pc, #0]	; (8006dd0 <_localeconv_r+0x4>)
 8006dce:	4770      	bx	lr
 8006dd0:	20000814 	.word	0x20000814

08006dd4 <__malloc_lock>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__malloc_lock+0x8>)
 8006dd6:	f000 bd5e 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8006dda:	bf00      	nop
 8006ddc:	20000a3c 	.word	0x20000a3c

08006de0 <__malloc_unlock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__malloc_unlock+0x8>)
 8006de2:	f000 bd59 	b.w	8007898 <__retarget_lock_release_recursive>
 8006de6:	bf00      	nop
 8006de8:	20000a3c 	.word	0x20000a3c

08006dec <_Balloc>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006df0:	4604      	mov	r4, r0
 8006df2:	460d      	mov	r5, r1
 8006df4:	b976      	cbnz	r6, 8006e14 <_Balloc+0x28>
 8006df6:	2010      	movs	r0, #16
 8006df8:	f7fe fbd4 	bl	80055a4 <malloc>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6260      	str	r0, [r4, #36]	; 0x24
 8006e00:	b920      	cbnz	r0, 8006e0c <_Balloc+0x20>
 8006e02:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <_Balloc+0x78>)
 8006e04:	4818      	ldr	r0, [pc, #96]	; (8006e68 <_Balloc+0x7c>)
 8006e06:	2166      	movs	r1, #102	; 0x66
 8006e08:	f000 fd14 	bl	8007834 <__assert_func>
 8006e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e10:	6006      	str	r6, [r0, #0]
 8006e12:	60c6      	str	r6, [r0, #12]
 8006e14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e16:	68f3      	ldr	r3, [r6, #12]
 8006e18:	b183      	cbz	r3, 8006e3c <_Balloc+0x50>
 8006e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e22:	b9b8      	cbnz	r0, 8006e54 <_Balloc+0x68>
 8006e24:	2101      	movs	r1, #1
 8006e26:	fa01 f605 	lsl.w	r6, r1, r5
 8006e2a:	1d72      	adds	r2, r6, #5
 8006e2c:	0092      	lsls	r2, r2, #2
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fb60 	bl	80074f4 <_calloc_r>
 8006e34:	b160      	cbz	r0, 8006e50 <_Balloc+0x64>
 8006e36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e3a:	e00e      	b.n	8006e5a <_Balloc+0x6e>
 8006e3c:	2221      	movs	r2, #33	; 0x21
 8006e3e:	2104      	movs	r1, #4
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fb57 	bl	80074f4 <_calloc_r>
 8006e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e48:	60f0      	str	r0, [r6, #12]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e4      	bne.n	8006e1a <_Balloc+0x2e>
 8006e50:	2000      	movs	r0, #0
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	6802      	ldr	r2, [r0, #0]
 8006e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e60:	e7f7      	b.n	8006e52 <_Balloc+0x66>
 8006e62:	bf00      	nop
 8006e64:	080088fd 	.word	0x080088fd
 8006e68:	08008980 	.word	0x08008980

08006e6c <_Bfree>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e70:	4605      	mov	r5, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b976      	cbnz	r6, 8006e94 <_Bfree+0x28>
 8006e76:	2010      	movs	r0, #16
 8006e78:	f7fe fb94 	bl	80055a4 <malloc>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6268      	str	r0, [r5, #36]	; 0x24
 8006e80:	b920      	cbnz	r0, 8006e8c <_Bfree+0x20>
 8006e82:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <_Bfree+0x3c>)
 8006e84:	4809      	ldr	r0, [pc, #36]	; (8006eac <_Bfree+0x40>)
 8006e86:	218a      	movs	r1, #138	; 0x8a
 8006e88:	f000 fcd4 	bl	8007834 <__assert_func>
 8006e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e90:	6006      	str	r6, [r0, #0]
 8006e92:	60c6      	str	r6, [r0, #12]
 8006e94:	b13c      	cbz	r4, 8006ea6 <_Bfree+0x3a>
 8006e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e98:	6862      	ldr	r2, [r4, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ea0:	6021      	str	r1, [r4, #0]
 8006ea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	080088fd 	.word	0x080088fd
 8006eac:	08008980 	.word	0x08008980

08006eb0 <__multadd>:
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	690d      	ldr	r5, [r1, #16]
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	461e      	mov	r6, r3
 8006ebc:	f101 0c14 	add.w	ip, r1, #20
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ec6:	b299      	uxth	r1, r3
 8006ec8:	fb02 6101 	mla	r1, r2, r1, r6
 8006ecc:	0c1e      	lsrs	r6, r3, #16
 8006ece:	0c0b      	lsrs	r3, r1, #16
 8006ed0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ed4:	b289      	uxth	r1, r1
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006edc:	4285      	cmp	r5, r0
 8006ede:	f84c 1b04 	str.w	r1, [ip], #4
 8006ee2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ee6:	dcec      	bgt.n	8006ec2 <__multadd+0x12>
 8006ee8:	b30e      	cbz	r6, 8006f2e <__multadd+0x7e>
 8006eea:	68a3      	ldr	r3, [r4, #8]
 8006eec:	42ab      	cmp	r3, r5
 8006eee:	dc19      	bgt.n	8006f24 <__multadd+0x74>
 8006ef0:	6861      	ldr	r1, [r4, #4]
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	f7ff ff79 	bl	8006dec <_Balloc>
 8006efa:	4680      	mov	r8, r0
 8006efc:	b928      	cbnz	r0, 8006f0a <__multadd+0x5a>
 8006efe:	4602      	mov	r2, r0
 8006f00:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <__multadd+0x84>)
 8006f02:	480d      	ldr	r0, [pc, #52]	; (8006f38 <__multadd+0x88>)
 8006f04:	21b5      	movs	r1, #181	; 0xb5
 8006f06:	f000 fc95 	bl	8007834 <__assert_func>
 8006f0a:	6922      	ldr	r2, [r4, #16]
 8006f0c:	3202      	adds	r2, #2
 8006f0e:	f104 010c 	add.w	r1, r4, #12
 8006f12:	0092      	lsls	r2, r2, #2
 8006f14:	300c      	adds	r0, #12
 8006f16:	f7fe fb4d 	bl	80055b4 <memcpy>
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff ffa5 	bl	8006e6c <_Bfree>
 8006f22:	4644      	mov	r4, r8
 8006f24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f28:	3501      	adds	r5, #1
 8006f2a:	615e      	str	r6, [r3, #20]
 8006f2c:	6125      	str	r5, [r4, #16]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f34:	0800896f 	.word	0x0800896f
 8006f38:	08008980 	.word	0x08008980

08006f3c <__hi0bits>:
 8006f3c:	0c03      	lsrs	r3, r0, #16
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	b9d3      	cbnz	r3, 8006f78 <__hi0bits+0x3c>
 8006f42:	0400      	lsls	r0, r0, #16
 8006f44:	2310      	movs	r3, #16
 8006f46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f4a:	bf04      	itt	eq
 8006f4c:	0200      	lsleq	r0, r0, #8
 8006f4e:	3308      	addeq	r3, #8
 8006f50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f54:	bf04      	itt	eq
 8006f56:	0100      	lsleq	r0, r0, #4
 8006f58:	3304      	addeq	r3, #4
 8006f5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f5e:	bf04      	itt	eq
 8006f60:	0080      	lsleq	r0, r0, #2
 8006f62:	3302      	addeq	r3, #2
 8006f64:	2800      	cmp	r0, #0
 8006f66:	db05      	blt.n	8006f74 <__hi0bits+0x38>
 8006f68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f6c:	f103 0301 	add.w	r3, r3, #1
 8006f70:	bf08      	it	eq
 8006f72:	2320      	moveq	r3, #32
 8006f74:	4618      	mov	r0, r3
 8006f76:	4770      	bx	lr
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e7e4      	b.n	8006f46 <__hi0bits+0xa>

08006f7c <__lo0bits>:
 8006f7c:	6803      	ldr	r3, [r0, #0]
 8006f7e:	f013 0207 	ands.w	r2, r3, #7
 8006f82:	4601      	mov	r1, r0
 8006f84:	d00b      	beq.n	8006f9e <__lo0bits+0x22>
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d423      	bmi.n	8006fd2 <__lo0bits+0x56>
 8006f8a:	0798      	lsls	r0, r3, #30
 8006f8c:	bf49      	itett	mi
 8006f8e:	085b      	lsrmi	r3, r3, #1
 8006f90:	089b      	lsrpl	r3, r3, #2
 8006f92:	2001      	movmi	r0, #1
 8006f94:	600b      	strmi	r3, [r1, #0]
 8006f96:	bf5c      	itt	pl
 8006f98:	600b      	strpl	r3, [r1, #0]
 8006f9a:	2002      	movpl	r0, #2
 8006f9c:	4770      	bx	lr
 8006f9e:	b298      	uxth	r0, r3
 8006fa0:	b9a8      	cbnz	r0, 8006fce <__lo0bits+0x52>
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	b90a      	cbnz	r2, 8006fae <__lo0bits+0x32>
 8006faa:	3008      	adds	r0, #8
 8006fac:	0a1b      	lsrs	r3, r3, #8
 8006fae:	071a      	lsls	r2, r3, #28
 8006fb0:	bf04      	itt	eq
 8006fb2:	091b      	lsreq	r3, r3, #4
 8006fb4:	3004      	addeq	r0, #4
 8006fb6:	079a      	lsls	r2, r3, #30
 8006fb8:	bf04      	itt	eq
 8006fba:	089b      	lsreq	r3, r3, #2
 8006fbc:	3002      	addeq	r0, #2
 8006fbe:	07da      	lsls	r2, r3, #31
 8006fc0:	d403      	bmi.n	8006fca <__lo0bits+0x4e>
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	f100 0001 	add.w	r0, r0, #1
 8006fc8:	d005      	beq.n	8006fd6 <__lo0bits+0x5a>
 8006fca:	600b      	str	r3, [r1, #0]
 8006fcc:	4770      	bx	lr
 8006fce:	4610      	mov	r0, r2
 8006fd0:	e7e9      	b.n	8006fa6 <__lo0bits+0x2a>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	4770      	bx	lr
 8006fd6:	2020      	movs	r0, #32
 8006fd8:	4770      	bx	lr
	...

08006fdc <__i2b>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	f7ff ff03 	bl	8006dec <_Balloc>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <__i2b+0x1a>
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <__i2b+0x24>)
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <__i2b+0x28>)
 8006fee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ff2:	f000 fc1f 	bl	8007834 <__assert_func>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	6144      	str	r4, [r0, #20]
 8006ffa:	6103      	str	r3, [r0, #16]
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	bf00      	nop
 8007000:	0800896f 	.word	0x0800896f
 8007004:	08008980 	.word	0x08008980

08007008 <__multiply>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	4691      	mov	r9, r2
 800700e:	690a      	ldr	r2, [r1, #16]
 8007010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007014:	429a      	cmp	r2, r3
 8007016:	bfb8      	it	lt
 8007018:	460b      	movlt	r3, r1
 800701a:	460c      	mov	r4, r1
 800701c:	bfbc      	itt	lt
 800701e:	464c      	movlt	r4, r9
 8007020:	4699      	movlt	r9, r3
 8007022:	6927      	ldr	r7, [r4, #16]
 8007024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007028:	68a3      	ldr	r3, [r4, #8]
 800702a:	6861      	ldr	r1, [r4, #4]
 800702c:	eb07 060a 	add.w	r6, r7, sl
 8007030:	42b3      	cmp	r3, r6
 8007032:	b085      	sub	sp, #20
 8007034:	bfb8      	it	lt
 8007036:	3101      	addlt	r1, #1
 8007038:	f7ff fed8 	bl	8006dec <_Balloc>
 800703c:	b930      	cbnz	r0, 800704c <__multiply+0x44>
 800703e:	4602      	mov	r2, r0
 8007040:	4b44      	ldr	r3, [pc, #272]	; (8007154 <__multiply+0x14c>)
 8007042:	4845      	ldr	r0, [pc, #276]	; (8007158 <__multiply+0x150>)
 8007044:	f240 115d 	movw	r1, #349	; 0x15d
 8007048:	f000 fbf4 	bl	8007834 <__assert_func>
 800704c:	f100 0514 	add.w	r5, r0, #20
 8007050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007054:	462b      	mov	r3, r5
 8007056:	2200      	movs	r2, #0
 8007058:	4543      	cmp	r3, r8
 800705a:	d321      	bcc.n	80070a0 <__multiply+0x98>
 800705c:	f104 0314 	add.w	r3, r4, #20
 8007060:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007064:	f109 0314 	add.w	r3, r9, #20
 8007068:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	1b3a      	subs	r2, r7, r4
 8007070:	3a15      	subs	r2, #21
 8007072:	f022 0203 	bic.w	r2, r2, #3
 8007076:	3204      	adds	r2, #4
 8007078:	f104 0115 	add.w	r1, r4, #21
 800707c:	428f      	cmp	r7, r1
 800707e:	bf38      	it	cc
 8007080:	2204      	movcc	r2, #4
 8007082:	9201      	str	r2, [sp, #4]
 8007084:	9a02      	ldr	r2, [sp, #8]
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d80c      	bhi.n	80070a6 <__multiply+0x9e>
 800708c:	2e00      	cmp	r6, #0
 800708e:	dd03      	ble.n	8007098 <__multiply+0x90>
 8007090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007094:	2b00      	cmp	r3, #0
 8007096:	d05a      	beq.n	800714e <__multiply+0x146>
 8007098:	6106      	str	r6, [r0, #16]
 800709a:	b005      	add	sp, #20
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a0:	f843 2b04 	str.w	r2, [r3], #4
 80070a4:	e7d8      	b.n	8007058 <__multiply+0x50>
 80070a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80070aa:	f1ba 0f00 	cmp.w	sl, #0
 80070ae:	d024      	beq.n	80070fa <__multiply+0xf2>
 80070b0:	f104 0e14 	add.w	lr, r4, #20
 80070b4:	46a9      	mov	r9, r5
 80070b6:	f04f 0c00 	mov.w	ip, #0
 80070ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070be:	f8d9 1000 	ldr.w	r1, [r9]
 80070c2:	fa1f fb82 	uxth.w	fp, r2
 80070c6:	b289      	uxth	r1, r1
 80070c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80070cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070d0:	f8d9 2000 	ldr.w	r2, [r9]
 80070d4:	4461      	add	r1, ip
 80070d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070da:	fb0a c20b 	mla	r2, sl, fp, ip
 80070de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070e2:	b289      	uxth	r1, r1
 80070e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070e8:	4577      	cmp	r7, lr
 80070ea:	f849 1b04 	str.w	r1, [r9], #4
 80070ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070f2:	d8e2      	bhi.n	80070ba <__multiply+0xb2>
 80070f4:	9a01      	ldr	r2, [sp, #4]
 80070f6:	f845 c002 	str.w	ip, [r5, r2]
 80070fa:	9a03      	ldr	r2, [sp, #12]
 80070fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007100:	3304      	adds	r3, #4
 8007102:	f1b9 0f00 	cmp.w	r9, #0
 8007106:	d020      	beq.n	800714a <__multiply+0x142>
 8007108:	6829      	ldr	r1, [r5, #0]
 800710a:	f104 0c14 	add.w	ip, r4, #20
 800710e:	46ae      	mov	lr, r5
 8007110:	f04f 0a00 	mov.w	sl, #0
 8007114:	f8bc b000 	ldrh.w	fp, [ip]
 8007118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800711c:	fb09 220b 	mla	r2, r9, fp, r2
 8007120:	4492      	add	sl, r2
 8007122:	b289      	uxth	r1, r1
 8007124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007128:	f84e 1b04 	str.w	r1, [lr], #4
 800712c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007130:	f8be 1000 	ldrh.w	r1, [lr]
 8007134:	0c12      	lsrs	r2, r2, #16
 8007136:	fb09 1102 	mla	r1, r9, r2, r1
 800713a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800713e:	4567      	cmp	r7, ip
 8007140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007144:	d8e6      	bhi.n	8007114 <__multiply+0x10c>
 8007146:	9a01      	ldr	r2, [sp, #4]
 8007148:	50a9      	str	r1, [r5, r2]
 800714a:	3504      	adds	r5, #4
 800714c:	e79a      	b.n	8007084 <__multiply+0x7c>
 800714e:	3e01      	subs	r6, #1
 8007150:	e79c      	b.n	800708c <__multiply+0x84>
 8007152:	bf00      	nop
 8007154:	0800896f 	.word	0x0800896f
 8007158:	08008980 	.word	0x08008980

0800715c <__pow5mult>:
 800715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007160:	4615      	mov	r5, r2
 8007162:	f012 0203 	ands.w	r2, r2, #3
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	d007      	beq.n	800717c <__pow5mult+0x20>
 800716c:	4c25      	ldr	r4, [pc, #148]	; (8007204 <__pow5mult+0xa8>)
 800716e:	3a01      	subs	r2, #1
 8007170:	2300      	movs	r3, #0
 8007172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007176:	f7ff fe9b 	bl	8006eb0 <__multadd>
 800717a:	4607      	mov	r7, r0
 800717c:	10ad      	asrs	r5, r5, #2
 800717e:	d03d      	beq.n	80071fc <__pow5mult+0xa0>
 8007180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007182:	b97c      	cbnz	r4, 80071a4 <__pow5mult+0x48>
 8007184:	2010      	movs	r0, #16
 8007186:	f7fe fa0d 	bl	80055a4 <malloc>
 800718a:	4602      	mov	r2, r0
 800718c:	6270      	str	r0, [r6, #36]	; 0x24
 800718e:	b928      	cbnz	r0, 800719c <__pow5mult+0x40>
 8007190:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <__pow5mult+0xac>)
 8007192:	481e      	ldr	r0, [pc, #120]	; (800720c <__pow5mult+0xb0>)
 8007194:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007198:	f000 fb4c 	bl	8007834 <__assert_func>
 800719c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071a0:	6004      	str	r4, [r0, #0]
 80071a2:	60c4      	str	r4, [r0, #12]
 80071a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071ac:	b94c      	cbnz	r4, 80071c2 <__pow5mult+0x66>
 80071ae:	f240 2171 	movw	r1, #625	; 0x271
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ff12 	bl	8006fdc <__i2b>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80071be:	4604      	mov	r4, r0
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	f04f 0900 	mov.w	r9, #0
 80071c6:	07eb      	lsls	r3, r5, #31
 80071c8:	d50a      	bpl.n	80071e0 <__pow5mult+0x84>
 80071ca:	4639      	mov	r1, r7
 80071cc:	4622      	mov	r2, r4
 80071ce:	4630      	mov	r0, r6
 80071d0:	f7ff ff1a 	bl	8007008 <__multiply>
 80071d4:	4639      	mov	r1, r7
 80071d6:	4680      	mov	r8, r0
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff fe47 	bl	8006e6c <_Bfree>
 80071de:	4647      	mov	r7, r8
 80071e0:	106d      	asrs	r5, r5, #1
 80071e2:	d00b      	beq.n	80071fc <__pow5mult+0xa0>
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	b938      	cbnz	r0, 80071f8 <__pow5mult+0x9c>
 80071e8:	4622      	mov	r2, r4
 80071ea:	4621      	mov	r1, r4
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff ff0b 	bl	8007008 <__multiply>
 80071f2:	6020      	str	r0, [r4, #0]
 80071f4:	f8c0 9000 	str.w	r9, [r0]
 80071f8:	4604      	mov	r4, r0
 80071fa:	e7e4      	b.n	80071c6 <__pow5mult+0x6a>
 80071fc:	4638      	mov	r0, r7
 80071fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007202:	bf00      	nop
 8007204:	08008ad0 	.word	0x08008ad0
 8007208:	080088fd 	.word	0x080088fd
 800720c:	08008980 	.word	0x08008980

08007210 <__lshift>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	460c      	mov	r4, r1
 8007216:	6849      	ldr	r1, [r1, #4]
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	4607      	mov	r7, r0
 8007222:	4691      	mov	r9, r2
 8007224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007228:	f108 0601 	add.w	r6, r8, #1
 800722c:	42b3      	cmp	r3, r6
 800722e:	db0b      	blt.n	8007248 <__lshift+0x38>
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff fddb 	bl	8006dec <_Balloc>
 8007236:	4605      	mov	r5, r0
 8007238:	b948      	cbnz	r0, 800724e <__lshift+0x3e>
 800723a:	4602      	mov	r2, r0
 800723c:	4b2a      	ldr	r3, [pc, #168]	; (80072e8 <__lshift+0xd8>)
 800723e:	482b      	ldr	r0, [pc, #172]	; (80072ec <__lshift+0xdc>)
 8007240:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007244:	f000 faf6 	bl	8007834 <__assert_func>
 8007248:	3101      	adds	r1, #1
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	e7ee      	b.n	800722c <__lshift+0x1c>
 800724e:	2300      	movs	r3, #0
 8007250:	f100 0114 	add.w	r1, r0, #20
 8007254:	f100 0210 	add.w	r2, r0, #16
 8007258:	4618      	mov	r0, r3
 800725a:	4553      	cmp	r3, sl
 800725c:	db37      	blt.n	80072ce <__lshift+0xbe>
 800725e:	6920      	ldr	r0, [r4, #16]
 8007260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007264:	f104 0314 	add.w	r3, r4, #20
 8007268:	f019 091f 	ands.w	r9, r9, #31
 800726c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007274:	d02f      	beq.n	80072d6 <__lshift+0xc6>
 8007276:	f1c9 0e20 	rsb	lr, r9, #32
 800727a:	468a      	mov	sl, r1
 800727c:	f04f 0c00 	mov.w	ip, #0
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	fa02 f209 	lsl.w	r2, r2, r9
 8007286:	ea42 020c 	orr.w	r2, r2, ip
 800728a:	f84a 2b04 	str.w	r2, [sl], #4
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	4298      	cmp	r0, r3
 8007294:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007298:	d8f2      	bhi.n	8007280 <__lshift+0x70>
 800729a:	1b03      	subs	r3, r0, r4
 800729c:	3b15      	subs	r3, #21
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	3304      	adds	r3, #4
 80072a4:	f104 0215 	add.w	r2, r4, #21
 80072a8:	4290      	cmp	r0, r2
 80072aa:	bf38      	it	cc
 80072ac:	2304      	movcc	r3, #4
 80072ae:	f841 c003 	str.w	ip, [r1, r3]
 80072b2:	f1bc 0f00 	cmp.w	ip, #0
 80072b6:	d001      	beq.n	80072bc <__lshift+0xac>
 80072b8:	f108 0602 	add.w	r6, r8, #2
 80072bc:	3e01      	subs	r6, #1
 80072be:	4638      	mov	r0, r7
 80072c0:	612e      	str	r6, [r5, #16]
 80072c2:	4621      	mov	r1, r4
 80072c4:	f7ff fdd2 	bl	8006e6c <_Bfree>
 80072c8:	4628      	mov	r0, r5
 80072ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80072d2:	3301      	adds	r3, #1
 80072d4:	e7c1      	b.n	800725a <__lshift+0x4a>
 80072d6:	3904      	subs	r1, #4
 80072d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80072e0:	4298      	cmp	r0, r3
 80072e2:	d8f9      	bhi.n	80072d8 <__lshift+0xc8>
 80072e4:	e7ea      	b.n	80072bc <__lshift+0xac>
 80072e6:	bf00      	nop
 80072e8:	0800896f 	.word	0x0800896f
 80072ec:	08008980 	.word	0x08008980

080072f0 <__mcmp>:
 80072f0:	b530      	push	{r4, r5, lr}
 80072f2:	6902      	ldr	r2, [r0, #16]
 80072f4:	690c      	ldr	r4, [r1, #16]
 80072f6:	1b12      	subs	r2, r2, r4
 80072f8:	d10e      	bne.n	8007318 <__mcmp+0x28>
 80072fa:	f100 0314 	add.w	r3, r0, #20
 80072fe:	3114      	adds	r1, #20
 8007300:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007304:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007308:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800730c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007310:	42a5      	cmp	r5, r4
 8007312:	d003      	beq.n	800731c <__mcmp+0x2c>
 8007314:	d305      	bcc.n	8007322 <__mcmp+0x32>
 8007316:	2201      	movs	r2, #1
 8007318:	4610      	mov	r0, r2
 800731a:	bd30      	pop	{r4, r5, pc}
 800731c:	4283      	cmp	r3, r0
 800731e:	d3f3      	bcc.n	8007308 <__mcmp+0x18>
 8007320:	e7fa      	b.n	8007318 <__mcmp+0x28>
 8007322:	f04f 32ff 	mov.w	r2, #4294967295
 8007326:	e7f7      	b.n	8007318 <__mcmp+0x28>

08007328 <__mdiff>:
 8007328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	4606      	mov	r6, r0
 8007330:	4611      	mov	r1, r2
 8007332:	4620      	mov	r0, r4
 8007334:	4690      	mov	r8, r2
 8007336:	f7ff ffdb 	bl	80072f0 <__mcmp>
 800733a:	1e05      	subs	r5, r0, #0
 800733c:	d110      	bne.n	8007360 <__mdiff+0x38>
 800733e:	4629      	mov	r1, r5
 8007340:	4630      	mov	r0, r6
 8007342:	f7ff fd53 	bl	8006dec <_Balloc>
 8007346:	b930      	cbnz	r0, 8007356 <__mdiff+0x2e>
 8007348:	4b3a      	ldr	r3, [pc, #232]	; (8007434 <__mdiff+0x10c>)
 800734a:	4602      	mov	r2, r0
 800734c:	f240 2132 	movw	r1, #562	; 0x232
 8007350:	4839      	ldr	r0, [pc, #228]	; (8007438 <__mdiff+0x110>)
 8007352:	f000 fa6f 	bl	8007834 <__assert_func>
 8007356:	2301      	movs	r3, #1
 8007358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800735c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007360:	bfa4      	itt	ge
 8007362:	4643      	movge	r3, r8
 8007364:	46a0      	movge	r8, r4
 8007366:	4630      	mov	r0, r6
 8007368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800736c:	bfa6      	itte	ge
 800736e:	461c      	movge	r4, r3
 8007370:	2500      	movge	r5, #0
 8007372:	2501      	movlt	r5, #1
 8007374:	f7ff fd3a 	bl	8006dec <_Balloc>
 8007378:	b920      	cbnz	r0, 8007384 <__mdiff+0x5c>
 800737a:	4b2e      	ldr	r3, [pc, #184]	; (8007434 <__mdiff+0x10c>)
 800737c:	4602      	mov	r2, r0
 800737e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007382:	e7e5      	b.n	8007350 <__mdiff+0x28>
 8007384:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007388:	6926      	ldr	r6, [r4, #16]
 800738a:	60c5      	str	r5, [r0, #12]
 800738c:	f104 0914 	add.w	r9, r4, #20
 8007390:	f108 0514 	add.w	r5, r8, #20
 8007394:	f100 0e14 	add.w	lr, r0, #20
 8007398:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800739c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073a0:	f108 0210 	add.w	r2, r8, #16
 80073a4:	46f2      	mov	sl, lr
 80073a6:	2100      	movs	r1, #0
 80073a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073b0:	fa1f f883 	uxth.w	r8, r3
 80073b4:	fa11 f18b 	uxtah	r1, r1, fp
 80073b8:	0c1b      	lsrs	r3, r3, #16
 80073ba:	eba1 0808 	sub.w	r8, r1, r8
 80073be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073c6:	fa1f f888 	uxth.w	r8, r8
 80073ca:	1419      	asrs	r1, r3, #16
 80073cc:	454e      	cmp	r6, r9
 80073ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073d2:	f84a 3b04 	str.w	r3, [sl], #4
 80073d6:	d8e7      	bhi.n	80073a8 <__mdiff+0x80>
 80073d8:	1b33      	subs	r3, r6, r4
 80073da:	3b15      	subs	r3, #21
 80073dc:	f023 0303 	bic.w	r3, r3, #3
 80073e0:	3304      	adds	r3, #4
 80073e2:	3415      	adds	r4, #21
 80073e4:	42a6      	cmp	r6, r4
 80073e6:	bf38      	it	cc
 80073e8:	2304      	movcc	r3, #4
 80073ea:	441d      	add	r5, r3
 80073ec:	4473      	add	r3, lr
 80073ee:	469e      	mov	lr, r3
 80073f0:	462e      	mov	r6, r5
 80073f2:	4566      	cmp	r6, ip
 80073f4:	d30e      	bcc.n	8007414 <__mdiff+0xec>
 80073f6:	f10c 0203 	add.w	r2, ip, #3
 80073fa:	1b52      	subs	r2, r2, r5
 80073fc:	f022 0203 	bic.w	r2, r2, #3
 8007400:	3d03      	subs	r5, #3
 8007402:	45ac      	cmp	ip, r5
 8007404:	bf38      	it	cc
 8007406:	2200      	movcc	r2, #0
 8007408:	441a      	add	r2, r3
 800740a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800740e:	b17b      	cbz	r3, 8007430 <__mdiff+0x108>
 8007410:	6107      	str	r7, [r0, #16]
 8007412:	e7a3      	b.n	800735c <__mdiff+0x34>
 8007414:	f856 8b04 	ldr.w	r8, [r6], #4
 8007418:	fa11 f288 	uxtah	r2, r1, r8
 800741c:	1414      	asrs	r4, r2, #16
 800741e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007422:	b292      	uxth	r2, r2
 8007424:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007428:	f84e 2b04 	str.w	r2, [lr], #4
 800742c:	1421      	asrs	r1, r4, #16
 800742e:	e7e0      	b.n	80073f2 <__mdiff+0xca>
 8007430:	3f01      	subs	r7, #1
 8007432:	e7ea      	b.n	800740a <__mdiff+0xe2>
 8007434:	0800896f 	.word	0x0800896f
 8007438:	08008980 	.word	0x08008980

0800743c <__d2b>:
 800743c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007440:	4689      	mov	r9, r1
 8007442:	2101      	movs	r1, #1
 8007444:	ec57 6b10 	vmov	r6, r7, d0
 8007448:	4690      	mov	r8, r2
 800744a:	f7ff fccf 	bl	8006dec <_Balloc>
 800744e:	4604      	mov	r4, r0
 8007450:	b930      	cbnz	r0, 8007460 <__d2b+0x24>
 8007452:	4602      	mov	r2, r0
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <__d2b+0xb0>)
 8007456:	4826      	ldr	r0, [pc, #152]	; (80074f0 <__d2b+0xb4>)
 8007458:	f240 310a 	movw	r1, #778	; 0x30a
 800745c:	f000 f9ea 	bl	8007834 <__assert_func>
 8007460:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007464:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007468:	bb35      	cbnz	r5, 80074b8 <__d2b+0x7c>
 800746a:	2e00      	cmp	r6, #0
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	d028      	beq.n	80074c2 <__d2b+0x86>
 8007470:	4668      	mov	r0, sp
 8007472:	9600      	str	r6, [sp, #0]
 8007474:	f7ff fd82 	bl	8006f7c <__lo0bits>
 8007478:	9900      	ldr	r1, [sp, #0]
 800747a:	b300      	cbz	r0, 80074be <__d2b+0x82>
 800747c:	9a01      	ldr	r2, [sp, #4]
 800747e:	f1c0 0320 	rsb	r3, r0, #32
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	430b      	orrs	r3, r1
 8007488:	40c2      	lsrs	r2, r0
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	61a3      	str	r3, [r4, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2202      	movne	r2, #2
 8007498:	2201      	moveq	r2, #1
 800749a:	6122      	str	r2, [r4, #16]
 800749c:	b1d5      	cbz	r5, 80074d4 <__d2b+0x98>
 800749e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074a2:	4405      	add	r5, r0
 80074a4:	f8c9 5000 	str.w	r5, [r9]
 80074a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074ac:	f8c8 0000 	str.w	r0, [r8]
 80074b0:	4620      	mov	r0, r4
 80074b2:	b003      	add	sp, #12
 80074b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074bc:	e7d5      	b.n	800746a <__d2b+0x2e>
 80074be:	6161      	str	r1, [r4, #20]
 80074c0:	e7e5      	b.n	800748e <__d2b+0x52>
 80074c2:	a801      	add	r0, sp, #4
 80074c4:	f7ff fd5a 	bl	8006f7c <__lo0bits>
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	6163      	str	r3, [r4, #20]
 80074cc:	2201      	movs	r2, #1
 80074ce:	6122      	str	r2, [r4, #16]
 80074d0:	3020      	adds	r0, #32
 80074d2:	e7e3      	b.n	800749c <__d2b+0x60>
 80074d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074dc:	f8c9 0000 	str.w	r0, [r9]
 80074e0:	6918      	ldr	r0, [r3, #16]
 80074e2:	f7ff fd2b 	bl	8006f3c <__hi0bits>
 80074e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074ea:	e7df      	b.n	80074ac <__d2b+0x70>
 80074ec:	0800896f 	.word	0x0800896f
 80074f0:	08008980 	.word	0x08008980

080074f4 <_calloc_r>:
 80074f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f6:	fba1 2402 	umull	r2, r4, r1, r2
 80074fa:	b94c      	cbnz	r4, 8007510 <_calloc_r+0x1c>
 80074fc:	4611      	mov	r1, r2
 80074fe:	9201      	str	r2, [sp, #4]
 8007500:	f7fe f8da 	bl	80056b8 <_malloc_r>
 8007504:	9a01      	ldr	r2, [sp, #4]
 8007506:	4605      	mov	r5, r0
 8007508:	b930      	cbnz	r0, 8007518 <_calloc_r+0x24>
 800750a:	4628      	mov	r0, r5
 800750c:	b003      	add	sp, #12
 800750e:	bd30      	pop	{r4, r5, pc}
 8007510:	220c      	movs	r2, #12
 8007512:	6002      	str	r2, [r0, #0]
 8007514:	2500      	movs	r5, #0
 8007516:	e7f8      	b.n	800750a <_calloc_r+0x16>
 8007518:	4621      	mov	r1, r4
 800751a:	f7fe f859 	bl	80055d0 <memset>
 800751e:	e7f4      	b.n	800750a <_calloc_r+0x16>

08007520 <_realloc_r>:
 8007520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007524:	4680      	mov	r8, r0
 8007526:	4614      	mov	r4, r2
 8007528:	460e      	mov	r6, r1
 800752a:	b921      	cbnz	r1, 8007536 <_realloc_r+0x16>
 800752c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4611      	mov	r1, r2
 8007532:	f7fe b8c1 	b.w	80056b8 <_malloc_r>
 8007536:	b92a      	cbnz	r2, 8007544 <_realloc_r+0x24>
 8007538:	f7fe f852 	bl	80055e0 <_free_r>
 800753c:	4625      	mov	r5, r4
 800753e:	4628      	mov	r0, r5
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007544:	f000 f9d5 	bl	80078f2 <_malloc_usable_size_r>
 8007548:	4284      	cmp	r4, r0
 800754a:	4607      	mov	r7, r0
 800754c:	d802      	bhi.n	8007554 <_realloc_r+0x34>
 800754e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007552:	d812      	bhi.n	800757a <_realloc_r+0x5a>
 8007554:	4621      	mov	r1, r4
 8007556:	4640      	mov	r0, r8
 8007558:	f7fe f8ae 	bl	80056b8 <_malloc_r>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d0ed      	beq.n	800753e <_realloc_r+0x1e>
 8007562:	42bc      	cmp	r4, r7
 8007564:	4622      	mov	r2, r4
 8007566:	4631      	mov	r1, r6
 8007568:	bf28      	it	cs
 800756a:	463a      	movcs	r2, r7
 800756c:	f7fe f822 	bl	80055b4 <memcpy>
 8007570:	4631      	mov	r1, r6
 8007572:	4640      	mov	r0, r8
 8007574:	f7fe f834 	bl	80055e0 <_free_r>
 8007578:	e7e1      	b.n	800753e <_realloc_r+0x1e>
 800757a:	4635      	mov	r5, r6
 800757c:	e7df      	b.n	800753e <_realloc_r+0x1e>

0800757e <__ssputs_r>:
 800757e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007582:	688e      	ldr	r6, [r1, #8]
 8007584:	429e      	cmp	r6, r3
 8007586:	4682      	mov	sl, r0
 8007588:	460c      	mov	r4, r1
 800758a:	4690      	mov	r8, r2
 800758c:	461f      	mov	r7, r3
 800758e:	d838      	bhi.n	8007602 <__ssputs_r+0x84>
 8007590:	898a      	ldrh	r2, [r1, #12]
 8007592:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007596:	d032      	beq.n	80075fe <__ssputs_r+0x80>
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	6909      	ldr	r1, [r1, #16]
 800759c:	eba5 0901 	sub.w	r9, r5, r1
 80075a0:	6965      	ldr	r5, [r4, #20]
 80075a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075aa:	3301      	adds	r3, #1
 80075ac:	444b      	add	r3, r9
 80075ae:	106d      	asrs	r5, r5, #1
 80075b0:	429d      	cmp	r5, r3
 80075b2:	bf38      	it	cc
 80075b4:	461d      	movcc	r5, r3
 80075b6:	0553      	lsls	r3, r2, #21
 80075b8:	d531      	bpl.n	800761e <__ssputs_r+0xa0>
 80075ba:	4629      	mov	r1, r5
 80075bc:	f7fe f87c 	bl	80056b8 <_malloc_r>
 80075c0:	4606      	mov	r6, r0
 80075c2:	b950      	cbnz	r0, 80075da <__ssputs_r+0x5c>
 80075c4:	230c      	movs	r3, #12
 80075c6:	f8ca 3000 	str.w	r3, [sl]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	f04f 30ff 	mov.w	r0, #4294967295
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	6921      	ldr	r1, [r4, #16]
 80075dc:	464a      	mov	r2, r9
 80075de:	f7fd ffe9 	bl	80055b4 <memcpy>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	6126      	str	r6, [r4, #16]
 80075f0:	6165      	str	r5, [r4, #20]
 80075f2:	444e      	add	r6, r9
 80075f4:	eba5 0509 	sub.w	r5, r5, r9
 80075f8:	6026      	str	r6, [r4, #0]
 80075fa:	60a5      	str	r5, [r4, #8]
 80075fc:	463e      	mov	r6, r7
 80075fe:	42be      	cmp	r6, r7
 8007600:	d900      	bls.n	8007604 <__ssputs_r+0x86>
 8007602:	463e      	mov	r6, r7
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	4632      	mov	r2, r6
 8007608:	4641      	mov	r1, r8
 800760a:	f000 f958 	bl	80078be <memmove>
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	1b9b      	subs	r3, r3, r6
 8007612:	60a3      	str	r3, [r4, #8]
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	4433      	add	r3, r6
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	2000      	movs	r0, #0
 800761c:	e7db      	b.n	80075d6 <__ssputs_r+0x58>
 800761e:	462a      	mov	r2, r5
 8007620:	f7ff ff7e 	bl	8007520 <_realloc_r>
 8007624:	4606      	mov	r6, r0
 8007626:	2800      	cmp	r0, #0
 8007628:	d1e1      	bne.n	80075ee <__ssputs_r+0x70>
 800762a:	6921      	ldr	r1, [r4, #16]
 800762c:	4650      	mov	r0, sl
 800762e:	f7fd ffd7 	bl	80055e0 <_free_r>
 8007632:	e7c7      	b.n	80075c4 <__ssputs_r+0x46>

08007634 <_svfiprintf_r>:
 8007634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	4698      	mov	r8, r3
 800763a:	898b      	ldrh	r3, [r1, #12]
 800763c:	061b      	lsls	r3, r3, #24
 800763e:	b09d      	sub	sp, #116	; 0x74
 8007640:	4607      	mov	r7, r0
 8007642:	460d      	mov	r5, r1
 8007644:	4614      	mov	r4, r2
 8007646:	d50e      	bpl.n	8007666 <_svfiprintf_r+0x32>
 8007648:	690b      	ldr	r3, [r1, #16]
 800764a:	b963      	cbnz	r3, 8007666 <_svfiprintf_r+0x32>
 800764c:	2140      	movs	r1, #64	; 0x40
 800764e:	f7fe f833 	bl	80056b8 <_malloc_r>
 8007652:	6028      	str	r0, [r5, #0]
 8007654:	6128      	str	r0, [r5, #16]
 8007656:	b920      	cbnz	r0, 8007662 <_svfiprintf_r+0x2e>
 8007658:	230c      	movs	r3, #12
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	f04f 30ff 	mov.w	r0, #4294967295
 8007660:	e0d1      	b.n	8007806 <_svfiprintf_r+0x1d2>
 8007662:	2340      	movs	r3, #64	; 0x40
 8007664:	616b      	str	r3, [r5, #20]
 8007666:	2300      	movs	r3, #0
 8007668:	9309      	str	r3, [sp, #36]	; 0x24
 800766a:	2320      	movs	r3, #32
 800766c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007670:	f8cd 800c 	str.w	r8, [sp, #12]
 8007674:	2330      	movs	r3, #48	; 0x30
 8007676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007820 <_svfiprintf_r+0x1ec>
 800767a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800767e:	f04f 0901 	mov.w	r9, #1
 8007682:	4623      	mov	r3, r4
 8007684:	469a      	mov	sl, r3
 8007686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800768a:	b10a      	cbz	r2, 8007690 <_svfiprintf_r+0x5c>
 800768c:	2a25      	cmp	r2, #37	; 0x25
 800768e:	d1f9      	bne.n	8007684 <_svfiprintf_r+0x50>
 8007690:	ebba 0b04 	subs.w	fp, sl, r4
 8007694:	d00b      	beq.n	80076ae <_svfiprintf_r+0x7a>
 8007696:	465b      	mov	r3, fp
 8007698:	4622      	mov	r2, r4
 800769a:	4629      	mov	r1, r5
 800769c:	4638      	mov	r0, r7
 800769e:	f7ff ff6e 	bl	800757e <__ssputs_r>
 80076a2:	3001      	adds	r0, #1
 80076a4:	f000 80aa 	beq.w	80077fc <_svfiprintf_r+0x1c8>
 80076a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076aa:	445a      	add	r2, fp
 80076ac:	9209      	str	r2, [sp, #36]	; 0x24
 80076ae:	f89a 3000 	ldrb.w	r3, [sl]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80a2 	beq.w	80077fc <_svfiprintf_r+0x1c8>
 80076b8:	2300      	movs	r3, #0
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c2:	f10a 0a01 	add.w	sl, sl, #1
 80076c6:	9304      	str	r3, [sp, #16]
 80076c8:	9307      	str	r3, [sp, #28]
 80076ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ce:	931a      	str	r3, [sp, #104]	; 0x68
 80076d0:	4654      	mov	r4, sl
 80076d2:	2205      	movs	r2, #5
 80076d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d8:	4851      	ldr	r0, [pc, #324]	; (8007820 <_svfiprintf_r+0x1ec>)
 80076da:	f7f8 fd91 	bl	8000200 <memchr>
 80076de:	9a04      	ldr	r2, [sp, #16]
 80076e0:	b9d8      	cbnz	r0, 800771a <_svfiprintf_r+0xe6>
 80076e2:	06d0      	lsls	r0, r2, #27
 80076e4:	bf44      	itt	mi
 80076e6:	2320      	movmi	r3, #32
 80076e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ec:	0711      	lsls	r1, r2, #28
 80076ee:	bf44      	itt	mi
 80076f0:	232b      	movmi	r3, #43	; 0x2b
 80076f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f6:	f89a 3000 	ldrb.w	r3, [sl]
 80076fa:	2b2a      	cmp	r3, #42	; 0x2a
 80076fc:	d015      	beq.n	800772a <_svfiprintf_r+0xf6>
 80076fe:	9a07      	ldr	r2, [sp, #28]
 8007700:	4654      	mov	r4, sl
 8007702:	2000      	movs	r0, #0
 8007704:	f04f 0c0a 	mov.w	ip, #10
 8007708:	4621      	mov	r1, r4
 800770a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800770e:	3b30      	subs	r3, #48	; 0x30
 8007710:	2b09      	cmp	r3, #9
 8007712:	d94e      	bls.n	80077b2 <_svfiprintf_r+0x17e>
 8007714:	b1b0      	cbz	r0, 8007744 <_svfiprintf_r+0x110>
 8007716:	9207      	str	r2, [sp, #28]
 8007718:	e014      	b.n	8007744 <_svfiprintf_r+0x110>
 800771a:	eba0 0308 	sub.w	r3, r0, r8
 800771e:	fa09 f303 	lsl.w	r3, r9, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	46a2      	mov	sl, r4
 8007728:	e7d2      	b.n	80076d0 <_svfiprintf_r+0x9c>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	1d19      	adds	r1, r3, #4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	9103      	str	r1, [sp, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	bfbb      	ittet	lt
 8007736:	425b      	neglt	r3, r3
 8007738:	f042 0202 	orrlt.w	r2, r2, #2
 800773c:	9307      	strge	r3, [sp, #28]
 800773e:	9307      	strlt	r3, [sp, #28]
 8007740:	bfb8      	it	lt
 8007742:	9204      	strlt	r2, [sp, #16]
 8007744:	7823      	ldrb	r3, [r4, #0]
 8007746:	2b2e      	cmp	r3, #46	; 0x2e
 8007748:	d10c      	bne.n	8007764 <_svfiprintf_r+0x130>
 800774a:	7863      	ldrb	r3, [r4, #1]
 800774c:	2b2a      	cmp	r3, #42	; 0x2a
 800774e:	d135      	bne.n	80077bc <_svfiprintf_r+0x188>
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	1d1a      	adds	r2, r3, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	9203      	str	r2, [sp, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bfb8      	it	lt
 800775c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007760:	3402      	adds	r4, #2
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007830 <_svfiprintf_r+0x1fc>
 8007768:	7821      	ldrb	r1, [r4, #0]
 800776a:	2203      	movs	r2, #3
 800776c:	4650      	mov	r0, sl
 800776e:	f7f8 fd47 	bl	8000200 <memchr>
 8007772:	b140      	cbz	r0, 8007786 <_svfiprintf_r+0x152>
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	eba0 000a 	sub.w	r0, r0, sl
 800777a:	fa03 f000 	lsl.w	r0, r3, r0
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	4303      	orrs	r3, r0
 8007782:	3401      	adds	r4, #1
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778a:	4826      	ldr	r0, [pc, #152]	; (8007824 <_svfiprintf_r+0x1f0>)
 800778c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007790:	2206      	movs	r2, #6
 8007792:	f7f8 fd35 	bl	8000200 <memchr>
 8007796:	2800      	cmp	r0, #0
 8007798:	d038      	beq.n	800780c <_svfiprintf_r+0x1d8>
 800779a:	4b23      	ldr	r3, [pc, #140]	; (8007828 <_svfiprintf_r+0x1f4>)
 800779c:	bb1b      	cbnz	r3, 80077e6 <_svfiprintf_r+0x1b2>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	3307      	adds	r3, #7
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	3308      	adds	r3, #8
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ac:	4433      	add	r3, r6
 80077ae:	9309      	str	r3, [sp, #36]	; 0x24
 80077b0:	e767      	b.n	8007682 <_svfiprintf_r+0x4e>
 80077b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b6:	460c      	mov	r4, r1
 80077b8:	2001      	movs	r0, #1
 80077ba:	e7a5      	b.n	8007708 <_svfiprintf_r+0xd4>
 80077bc:	2300      	movs	r3, #0
 80077be:	3401      	adds	r4, #1
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	4619      	mov	r1, r3
 80077c4:	f04f 0c0a 	mov.w	ip, #10
 80077c8:	4620      	mov	r0, r4
 80077ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ce:	3a30      	subs	r2, #48	; 0x30
 80077d0:	2a09      	cmp	r2, #9
 80077d2:	d903      	bls.n	80077dc <_svfiprintf_r+0x1a8>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0c5      	beq.n	8007764 <_svfiprintf_r+0x130>
 80077d8:	9105      	str	r1, [sp, #20]
 80077da:	e7c3      	b.n	8007764 <_svfiprintf_r+0x130>
 80077dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e0:	4604      	mov	r4, r0
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7f0      	b.n	80077c8 <_svfiprintf_r+0x194>
 80077e6:	ab03      	add	r3, sp, #12
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	462a      	mov	r2, r5
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <_svfiprintf_r+0x1f8>)
 80077ee:	a904      	add	r1, sp, #16
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7fe f875 	bl	80058e0 <_printf_float>
 80077f6:	1c42      	adds	r2, r0, #1
 80077f8:	4606      	mov	r6, r0
 80077fa:	d1d6      	bne.n	80077aa <_svfiprintf_r+0x176>
 80077fc:	89ab      	ldrh	r3, [r5, #12]
 80077fe:	065b      	lsls	r3, r3, #25
 8007800:	f53f af2c 	bmi.w	800765c <_svfiprintf_r+0x28>
 8007804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007806:	b01d      	add	sp, #116	; 0x74
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780c:	ab03      	add	r3, sp, #12
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	462a      	mov	r2, r5
 8007812:	4b06      	ldr	r3, [pc, #24]	; (800782c <_svfiprintf_r+0x1f8>)
 8007814:	a904      	add	r1, sp, #16
 8007816:	4638      	mov	r0, r7
 8007818:	f7fe fb06 	bl	8005e28 <_printf_i>
 800781c:	e7eb      	b.n	80077f6 <_svfiprintf_r+0x1c2>
 800781e:	bf00      	nop
 8007820:	08008adc 	.word	0x08008adc
 8007824:	08008ae6 	.word	0x08008ae6
 8007828:	080058e1 	.word	0x080058e1
 800782c:	0800757f 	.word	0x0800757f
 8007830:	08008ae2 	.word	0x08008ae2

08007834 <__assert_func>:
 8007834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007836:	4614      	mov	r4, r2
 8007838:	461a      	mov	r2, r3
 800783a:	4b09      	ldr	r3, [pc, #36]	; (8007860 <__assert_func+0x2c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4605      	mov	r5, r0
 8007840:	68d8      	ldr	r0, [r3, #12]
 8007842:	b14c      	cbz	r4, 8007858 <__assert_func+0x24>
 8007844:	4b07      	ldr	r3, [pc, #28]	; (8007864 <__assert_func+0x30>)
 8007846:	9100      	str	r1, [sp, #0]
 8007848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800784c:	4906      	ldr	r1, [pc, #24]	; (8007868 <__assert_func+0x34>)
 800784e:	462b      	mov	r3, r5
 8007850:	f000 f80e 	bl	8007870 <fiprintf>
 8007854:	f000 fa7c 	bl	8007d50 <abort>
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <__assert_func+0x38>)
 800785a:	461c      	mov	r4, r3
 800785c:	e7f3      	b.n	8007846 <__assert_func+0x12>
 800785e:	bf00      	nop
 8007860:	200006c0 	.word	0x200006c0
 8007864:	08008aed 	.word	0x08008aed
 8007868:	08008afa 	.word	0x08008afa
 800786c:	08008b28 	.word	0x08008b28

08007870 <fiprintf>:
 8007870:	b40e      	push	{r1, r2, r3}
 8007872:	b503      	push	{r0, r1, lr}
 8007874:	4601      	mov	r1, r0
 8007876:	ab03      	add	r3, sp, #12
 8007878:	4805      	ldr	r0, [pc, #20]	; (8007890 <fiprintf+0x20>)
 800787a:	f853 2b04 	ldr.w	r2, [r3], #4
 800787e:	6800      	ldr	r0, [r0, #0]
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	f000 f867 	bl	8007954 <_vfiprintf_r>
 8007886:	b002      	add	sp, #8
 8007888:	f85d eb04 	ldr.w	lr, [sp], #4
 800788c:	b003      	add	sp, #12
 800788e:	4770      	bx	lr
 8007890:	200006c0 	.word	0x200006c0

08007894 <__retarget_lock_init_recursive>:
 8007894:	4770      	bx	lr

08007896 <__retarget_lock_acquire_recursive>:
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_release_recursive>:
 8007898:	4770      	bx	lr

0800789a <__ascii_mbtowc>:
 800789a:	b082      	sub	sp, #8
 800789c:	b901      	cbnz	r1, 80078a0 <__ascii_mbtowc+0x6>
 800789e:	a901      	add	r1, sp, #4
 80078a0:	b142      	cbz	r2, 80078b4 <__ascii_mbtowc+0x1a>
 80078a2:	b14b      	cbz	r3, 80078b8 <__ascii_mbtowc+0x1e>
 80078a4:	7813      	ldrb	r3, [r2, #0]
 80078a6:	600b      	str	r3, [r1, #0]
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	1e10      	subs	r0, r2, #0
 80078ac:	bf18      	it	ne
 80078ae:	2001      	movne	r0, #1
 80078b0:	b002      	add	sp, #8
 80078b2:	4770      	bx	lr
 80078b4:	4610      	mov	r0, r2
 80078b6:	e7fb      	b.n	80078b0 <__ascii_mbtowc+0x16>
 80078b8:	f06f 0001 	mvn.w	r0, #1
 80078bc:	e7f8      	b.n	80078b0 <__ascii_mbtowc+0x16>

080078be <memmove>:
 80078be:	4288      	cmp	r0, r1
 80078c0:	b510      	push	{r4, lr}
 80078c2:	eb01 0402 	add.w	r4, r1, r2
 80078c6:	d902      	bls.n	80078ce <memmove+0x10>
 80078c8:	4284      	cmp	r4, r0
 80078ca:	4623      	mov	r3, r4
 80078cc:	d807      	bhi.n	80078de <memmove+0x20>
 80078ce:	1e43      	subs	r3, r0, #1
 80078d0:	42a1      	cmp	r1, r4
 80078d2:	d008      	beq.n	80078e6 <memmove+0x28>
 80078d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078dc:	e7f8      	b.n	80078d0 <memmove+0x12>
 80078de:	4402      	add	r2, r0
 80078e0:	4601      	mov	r1, r0
 80078e2:	428a      	cmp	r2, r1
 80078e4:	d100      	bne.n	80078e8 <memmove+0x2a>
 80078e6:	bd10      	pop	{r4, pc}
 80078e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078f0:	e7f7      	b.n	80078e2 <memmove+0x24>

080078f2 <_malloc_usable_size_r>:
 80078f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f6:	1f18      	subs	r0, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfbc      	itt	lt
 80078fc:	580b      	ldrlt	r3, [r1, r0]
 80078fe:	18c0      	addlt	r0, r0, r3
 8007900:	4770      	bx	lr

08007902 <__sfputc_r>:
 8007902:	6893      	ldr	r3, [r2, #8]
 8007904:	3b01      	subs	r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	b410      	push	{r4}
 800790a:	6093      	str	r3, [r2, #8]
 800790c:	da08      	bge.n	8007920 <__sfputc_r+0x1e>
 800790e:	6994      	ldr	r4, [r2, #24]
 8007910:	42a3      	cmp	r3, r4
 8007912:	db01      	blt.n	8007918 <__sfputc_r+0x16>
 8007914:	290a      	cmp	r1, #10
 8007916:	d103      	bne.n	8007920 <__sfputc_r+0x1e>
 8007918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800791c:	f000 b94a 	b.w	8007bb4 <__swbuf_r>
 8007920:	6813      	ldr	r3, [r2, #0]
 8007922:	1c58      	adds	r0, r3, #1
 8007924:	6010      	str	r0, [r2, #0]
 8007926:	7019      	strb	r1, [r3, #0]
 8007928:	4608      	mov	r0, r1
 800792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792e:	4770      	bx	lr

08007930 <__sfputs_r>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	4614      	mov	r4, r2
 8007938:	18d5      	adds	r5, r2, r3
 800793a:	42ac      	cmp	r4, r5
 800793c:	d101      	bne.n	8007942 <__sfputs_r+0x12>
 800793e:	2000      	movs	r0, #0
 8007940:	e007      	b.n	8007952 <__sfputs_r+0x22>
 8007942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007946:	463a      	mov	r2, r7
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff ffda 	bl	8007902 <__sfputc_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d1f3      	bne.n	800793a <__sfputs_r+0xa>
 8007952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007954 <_vfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	460d      	mov	r5, r1
 800795a:	b09d      	sub	sp, #116	; 0x74
 800795c:	4614      	mov	r4, r2
 800795e:	4698      	mov	r8, r3
 8007960:	4606      	mov	r6, r0
 8007962:	b118      	cbz	r0, 800796c <_vfiprintf_r+0x18>
 8007964:	6983      	ldr	r3, [r0, #24]
 8007966:	b90b      	cbnz	r3, 800796c <_vfiprintf_r+0x18>
 8007968:	f000 fb14 	bl	8007f94 <__sinit>
 800796c:	4b89      	ldr	r3, [pc, #548]	; (8007b94 <_vfiprintf_r+0x240>)
 800796e:	429d      	cmp	r5, r3
 8007970:	d11b      	bne.n	80079aa <_vfiprintf_r+0x56>
 8007972:	6875      	ldr	r5, [r6, #4]
 8007974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007976:	07d9      	lsls	r1, r3, #31
 8007978:	d405      	bmi.n	8007986 <_vfiprintf_r+0x32>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d402      	bmi.n	8007986 <_vfiprintf_r+0x32>
 8007980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007982:	f7ff ff88 	bl	8007896 <__retarget_lock_acquire_recursive>
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	071b      	lsls	r3, r3, #28
 800798a:	d501      	bpl.n	8007990 <_vfiprintf_r+0x3c>
 800798c:	692b      	ldr	r3, [r5, #16]
 800798e:	b9eb      	cbnz	r3, 80079cc <_vfiprintf_r+0x78>
 8007990:	4629      	mov	r1, r5
 8007992:	4630      	mov	r0, r6
 8007994:	f000 f96e 	bl	8007c74 <__swsetup_r>
 8007998:	b1c0      	cbz	r0, 80079cc <_vfiprintf_r+0x78>
 800799a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800799c:	07dc      	lsls	r4, r3, #31
 800799e:	d50e      	bpl.n	80079be <_vfiprintf_r+0x6a>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	b01d      	add	sp, #116	; 0x74
 80079a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079aa:	4b7b      	ldr	r3, [pc, #492]	; (8007b98 <_vfiprintf_r+0x244>)
 80079ac:	429d      	cmp	r5, r3
 80079ae:	d101      	bne.n	80079b4 <_vfiprintf_r+0x60>
 80079b0:	68b5      	ldr	r5, [r6, #8]
 80079b2:	e7df      	b.n	8007974 <_vfiprintf_r+0x20>
 80079b4:	4b79      	ldr	r3, [pc, #484]	; (8007b9c <_vfiprintf_r+0x248>)
 80079b6:	429d      	cmp	r5, r3
 80079b8:	bf08      	it	eq
 80079ba:	68f5      	ldreq	r5, [r6, #12]
 80079bc:	e7da      	b.n	8007974 <_vfiprintf_r+0x20>
 80079be:	89ab      	ldrh	r3, [r5, #12]
 80079c0:	0598      	lsls	r0, r3, #22
 80079c2:	d4ed      	bmi.n	80079a0 <_vfiprintf_r+0x4c>
 80079c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c6:	f7ff ff67 	bl	8007898 <__retarget_lock_release_recursive>
 80079ca:	e7e9      	b.n	80079a0 <_vfiprintf_r+0x4c>
 80079cc:	2300      	movs	r3, #0
 80079ce:	9309      	str	r3, [sp, #36]	; 0x24
 80079d0:	2320      	movs	r3, #32
 80079d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079da:	2330      	movs	r3, #48	; 0x30
 80079dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ba0 <_vfiprintf_r+0x24c>
 80079e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079e4:	f04f 0901 	mov.w	r9, #1
 80079e8:	4623      	mov	r3, r4
 80079ea:	469a      	mov	sl, r3
 80079ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f0:	b10a      	cbz	r2, 80079f6 <_vfiprintf_r+0xa2>
 80079f2:	2a25      	cmp	r2, #37	; 0x25
 80079f4:	d1f9      	bne.n	80079ea <_vfiprintf_r+0x96>
 80079f6:	ebba 0b04 	subs.w	fp, sl, r4
 80079fa:	d00b      	beq.n	8007a14 <_vfiprintf_r+0xc0>
 80079fc:	465b      	mov	r3, fp
 80079fe:	4622      	mov	r2, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ff94 	bl	8007930 <__sfputs_r>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f000 80aa 	beq.w	8007b62 <_vfiprintf_r+0x20e>
 8007a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a10:	445a      	add	r2, fp
 8007a12:	9209      	str	r2, [sp, #36]	; 0x24
 8007a14:	f89a 3000 	ldrb.w	r3, [sl]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80a2 	beq.w	8007b62 <_vfiprintf_r+0x20e>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a28:	f10a 0a01 	add.w	sl, sl, #1
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a34:	931a      	str	r3, [sp, #104]	; 0x68
 8007a36:	4654      	mov	r4, sl
 8007a38:	2205      	movs	r2, #5
 8007a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3e:	4858      	ldr	r0, [pc, #352]	; (8007ba0 <_vfiprintf_r+0x24c>)
 8007a40:	f7f8 fbde 	bl	8000200 <memchr>
 8007a44:	9a04      	ldr	r2, [sp, #16]
 8007a46:	b9d8      	cbnz	r0, 8007a80 <_vfiprintf_r+0x12c>
 8007a48:	06d1      	lsls	r1, r2, #27
 8007a4a:	bf44      	itt	mi
 8007a4c:	2320      	movmi	r3, #32
 8007a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a52:	0713      	lsls	r3, r2, #28
 8007a54:	bf44      	itt	mi
 8007a56:	232b      	movmi	r3, #43	; 0x2b
 8007a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a60:	2b2a      	cmp	r3, #42	; 0x2a
 8007a62:	d015      	beq.n	8007a90 <_vfiprintf_r+0x13c>
 8007a64:	9a07      	ldr	r2, [sp, #28]
 8007a66:	4654      	mov	r4, sl
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f04f 0c0a 	mov.w	ip, #10
 8007a6e:	4621      	mov	r1, r4
 8007a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a74:	3b30      	subs	r3, #48	; 0x30
 8007a76:	2b09      	cmp	r3, #9
 8007a78:	d94e      	bls.n	8007b18 <_vfiprintf_r+0x1c4>
 8007a7a:	b1b0      	cbz	r0, 8007aaa <_vfiprintf_r+0x156>
 8007a7c:	9207      	str	r2, [sp, #28]
 8007a7e:	e014      	b.n	8007aaa <_vfiprintf_r+0x156>
 8007a80:	eba0 0308 	sub.w	r3, r0, r8
 8007a84:	fa09 f303 	lsl.w	r3, r9, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	46a2      	mov	sl, r4
 8007a8e:	e7d2      	b.n	8007a36 <_vfiprintf_r+0xe2>
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	1d19      	adds	r1, r3, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	9103      	str	r1, [sp, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfbb      	ittet	lt
 8007a9c:	425b      	neglt	r3, r3
 8007a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa2:	9307      	strge	r3, [sp, #28]
 8007aa4:	9307      	strlt	r3, [sp, #28]
 8007aa6:	bfb8      	it	lt
 8007aa8:	9204      	strlt	r2, [sp, #16]
 8007aaa:	7823      	ldrb	r3, [r4, #0]
 8007aac:	2b2e      	cmp	r3, #46	; 0x2e
 8007aae:	d10c      	bne.n	8007aca <_vfiprintf_r+0x176>
 8007ab0:	7863      	ldrb	r3, [r4, #1]
 8007ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab4:	d135      	bne.n	8007b22 <_vfiprintf_r+0x1ce>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	9203      	str	r2, [sp, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfb8      	it	lt
 8007ac2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ac6:	3402      	adds	r4, #2
 8007ac8:	9305      	str	r3, [sp, #20]
 8007aca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bb0 <_vfiprintf_r+0x25c>
 8007ace:	7821      	ldrb	r1, [r4, #0]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	f7f8 fb94 	bl	8000200 <memchr>
 8007ad8:	b140      	cbz	r0, 8007aec <_vfiprintf_r+0x198>
 8007ada:	2340      	movs	r3, #64	; 0x40
 8007adc:	eba0 000a 	sub.w	r0, r0, sl
 8007ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae4:	9b04      	ldr	r3, [sp, #16]
 8007ae6:	4303      	orrs	r3, r0
 8007ae8:	3401      	adds	r4, #1
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	482c      	ldr	r0, [pc, #176]	; (8007ba4 <_vfiprintf_r+0x250>)
 8007af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007af6:	2206      	movs	r2, #6
 8007af8:	f7f8 fb82 	bl	8000200 <memchr>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d03f      	beq.n	8007b80 <_vfiprintf_r+0x22c>
 8007b00:	4b29      	ldr	r3, [pc, #164]	; (8007ba8 <_vfiprintf_r+0x254>)
 8007b02:	bb1b      	cbnz	r3, 8007b4c <_vfiprintf_r+0x1f8>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	3307      	adds	r3, #7
 8007b08:	f023 0307 	bic.w	r3, r3, #7
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b12:	443b      	add	r3, r7
 8007b14:	9309      	str	r3, [sp, #36]	; 0x24
 8007b16:	e767      	b.n	80079e8 <_vfiprintf_r+0x94>
 8007b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	2001      	movs	r0, #1
 8007b20:	e7a5      	b.n	8007a6e <_vfiprintf_r+0x11a>
 8007b22:	2300      	movs	r3, #0
 8007b24:	3401      	adds	r4, #1
 8007b26:	9305      	str	r3, [sp, #20]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f04f 0c0a 	mov.w	ip, #10
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b34:	3a30      	subs	r2, #48	; 0x30
 8007b36:	2a09      	cmp	r2, #9
 8007b38:	d903      	bls.n	8007b42 <_vfiprintf_r+0x1ee>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0c5      	beq.n	8007aca <_vfiprintf_r+0x176>
 8007b3e:	9105      	str	r1, [sp, #20]
 8007b40:	e7c3      	b.n	8007aca <_vfiprintf_r+0x176>
 8007b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b46:	4604      	mov	r4, r0
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e7f0      	b.n	8007b2e <_vfiprintf_r+0x1da>
 8007b4c:	ab03      	add	r3, sp, #12
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	462a      	mov	r2, r5
 8007b52:	4b16      	ldr	r3, [pc, #88]	; (8007bac <_vfiprintf_r+0x258>)
 8007b54:	a904      	add	r1, sp, #16
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7fd fec2 	bl	80058e0 <_printf_float>
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	1c78      	adds	r0, r7, #1
 8007b60:	d1d6      	bne.n	8007b10 <_vfiprintf_r+0x1bc>
 8007b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b64:	07d9      	lsls	r1, r3, #31
 8007b66:	d405      	bmi.n	8007b74 <_vfiprintf_r+0x220>
 8007b68:	89ab      	ldrh	r3, [r5, #12]
 8007b6a:	059a      	lsls	r2, r3, #22
 8007b6c:	d402      	bmi.n	8007b74 <_vfiprintf_r+0x220>
 8007b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b70:	f7ff fe92 	bl	8007898 <__retarget_lock_release_recursive>
 8007b74:	89ab      	ldrh	r3, [r5, #12]
 8007b76:	065b      	lsls	r3, r3, #25
 8007b78:	f53f af12 	bmi.w	80079a0 <_vfiprintf_r+0x4c>
 8007b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b7e:	e711      	b.n	80079a4 <_vfiprintf_r+0x50>
 8007b80:	ab03      	add	r3, sp, #12
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	462a      	mov	r2, r5
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <_vfiprintf_r+0x258>)
 8007b88:	a904      	add	r1, sp, #16
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7fe f94c 	bl	8005e28 <_printf_i>
 8007b90:	e7e4      	b.n	8007b5c <_vfiprintf_r+0x208>
 8007b92:	bf00      	nop
 8007b94:	08008c54 	.word	0x08008c54
 8007b98:	08008c74 	.word	0x08008c74
 8007b9c:	08008c34 	.word	0x08008c34
 8007ba0:	08008adc 	.word	0x08008adc
 8007ba4:	08008ae6 	.word	0x08008ae6
 8007ba8:	080058e1 	.word	0x080058e1
 8007bac:	08007931 	.word	0x08007931
 8007bb0:	08008ae2 	.word	0x08008ae2

08007bb4 <__swbuf_r>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	460e      	mov	r6, r1
 8007bb8:	4614      	mov	r4, r2
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b118      	cbz	r0, 8007bc6 <__swbuf_r+0x12>
 8007bbe:	6983      	ldr	r3, [r0, #24]
 8007bc0:	b90b      	cbnz	r3, 8007bc6 <__swbuf_r+0x12>
 8007bc2:	f000 f9e7 	bl	8007f94 <__sinit>
 8007bc6:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <__swbuf_r+0x98>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	d12b      	bne.n	8007c24 <__swbuf_r+0x70>
 8007bcc:	686c      	ldr	r4, [r5, #4]
 8007bce:	69a3      	ldr	r3, [r4, #24]
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	071a      	lsls	r2, r3, #28
 8007bd6:	d52f      	bpl.n	8007c38 <__swbuf_r+0x84>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	b36b      	cbz	r3, 8007c38 <__swbuf_r+0x84>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	6963      	ldr	r3, [r4, #20]
 8007be4:	b2f6      	uxtb	r6, r6
 8007be6:	4283      	cmp	r3, r0
 8007be8:	4637      	mov	r7, r6
 8007bea:	dc04      	bgt.n	8007bf6 <__swbuf_r+0x42>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 f93c 	bl	8007e6c <_fflush_r>
 8007bf4:	bb30      	cbnz	r0, 8007c44 <__swbuf_r+0x90>
 8007bf6:	68a3      	ldr	r3, [r4, #8]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	60a3      	str	r3, [r4, #8]
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	701e      	strb	r6, [r3, #0]
 8007c04:	6963      	ldr	r3, [r4, #20]
 8007c06:	3001      	adds	r0, #1
 8007c08:	4283      	cmp	r3, r0
 8007c0a:	d004      	beq.n	8007c16 <__swbuf_r+0x62>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	07db      	lsls	r3, r3, #31
 8007c10:	d506      	bpl.n	8007c20 <__swbuf_r+0x6c>
 8007c12:	2e0a      	cmp	r6, #10
 8007c14:	d104      	bne.n	8007c20 <__swbuf_r+0x6c>
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 f927 	bl	8007e6c <_fflush_r>
 8007c1e:	b988      	cbnz	r0, 8007c44 <__swbuf_r+0x90>
 8007c20:	4638      	mov	r0, r7
 8007c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <__swbuf_r+0x9c>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d101      	bne.n	8007c2e <__swbuf_r+0x7a>
 8007c2a:	68ac      	ldr	r4, [r5, #8]
 8007c2c:	e7cf      	b.n	8007bce <__swbuf_r+0x1a>
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <__swbuf_r+0xa0>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	bf08      	it	eq
 8007c34:	68ec      	ldreq	r4, [r5, #12]
 8007c36:	e7ca      	b.n	8007bce <__swbuf_r+0x1a>
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f81a 	bl	8007c74 <__swsetup_r>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d0cb      	beq.n	8007bdc <__swbuf_r+0x28>
 8007c44:	f04f 37ff 	mov.w	r7, #4294967295
 8007c48:	e7ea      	b.n	8007c20 <__swbuf_r+0x6c>
 8007c4a:	bf00      	nop
 8007c4c:	08008c54 	.word	0x08008c54
 8007c50:	08008c74 	.word	0x08008c74
 8007c54:	08008c34 	.word	0x08008c34

08007c58 <__ascii_wctomb>:
 8007c58:	b149      	cbz	r1, 8007c6e <__ascii_wctomb+0x16>
 8007c5a:	2aff      	cmp	r2, #255	; 0xff
 8007c5c:	bf85      	ittet	hi
 8007c5e:	238a      	movhi	r3, #138	; 0x8a
 8007c60:	6003      	strhi	r3, [r0, #0]
 8007c62:	700a      	strbls	r2, [r1, #0]
 8007c64:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c68:	bf98      	it	ls
 8007c6a:	2001      	movls	r0, #1
 8007c6c:	4770      	bx	lr
 8007c6e:	4608      	mov	r0, r1
 8007c70:	4770      	bx	lr
	...

08007c74 <__swsetup_r>:
 8007c74:	4b32      	ldr	r3, [pc, #200]	; (8007d40 <__swsetup_r+0xcc>)
 8007c76:	b570      	push	{r4, r5, r6, lr}
 8007c78:	681d      	ldr	r5, [r3, #0]
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	b125      	cbz	r5, 8007c8a <__swsetup_r+0x16>
 8007c80:	69ab      	ldr	r3, [r5, #24]
 8007c82:	b913      	cbnz	r3, 8007c8a <__swsetup_r+0x16>
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f985 	bl	8007f94 <__sinit>
 8007c8a:	4b2e      	ldr	r3, [pc, #184]	; (8007d44 <__swsetup_r+0xd0>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	d10f      	bne.n	8007cb0 <__swsetup_r+0x3c>
 8007c90:	686c      	ldr	r4, [r5, #4]
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c98:	0719      	lsls	r1, r3, #28
 8007c9a:	d42c      	bmi.n	8007cf6 <__swsetup_r+0x82>
 8007c9c:	06dd      	lsls	r5, r3, #27
 8007c9e:	d411      	bmi.n	8007cc4 <__swsetup_r+0x50>
 8007ca0:	2309      	movs	r3, #9
 8007ca2:	6033      	str	r3, [r6, #0]
 8007ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ca8:	81a3      	strh	r3, [r4, #12]
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	e03e      	b.n	8007d2e <__swsetup_r+0xba>
 8007cb0:	4b25      	ldr	r3, [pc, #148]	; (8007d48 <__swsetup_r+0xd4>)
 8007cb2:	429c      	cmp	r4, r3
 8007cb4:	d101      	bne.n	8007cba <__swsetup_r+0x46>
 8007cb6:	68ac      	ldr	r4, [r5, #8]
 8007cb8:	e7eb      	b.n	8007c92 <__swsetup_r+0x1e>
 8007cba:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <__swsetup_r+0xd8>)
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	bf08      	it	eq
 8007cc0:	68ec      	ldreq	r4, [r5, #12]
 8007cc2:	e7e6      	b.n	8007c92 <__swsetup_r+0x1e>
 8007cc4:	0758      	lsls	r0, r3, #29
 8007cc6:	d512      	bpl.n	8007cee <__swsetup_r+0x7a>
 8007cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cca:	b141      	cbz	r1, 8007cde <__swsetup_r+0x6a>
 8007ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <__swsetup_r+0x66>
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7fd fc83 	bl	80055e0 <_free_r>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f043 0308 	orr.w	r3, r3, #8
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	b94b      	cbnz	r3, 8007d0e <__swsetup_r+0x9a>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d04:	d003      	beq.n	8007d0e <__swsetup_r+0x9a>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 fa05 	bl	8008118 <__smakebuf_r>
 8007d0e:	89a0      	ldrh	r0, [r4, #12]
 8007d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d14:	f010 0301 	ands.w	r3, r0, #1
 8007d18:	d00a      	beq.n	8007d30 <__swsetup_r+0xbc>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	6963      	ldr	r3, [r4, #20]
 8007d20:	425b      	negs	r3, r3
 8007d22:	61a3      	str	r3, [r4, #24]
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	b943      	cbnz	r3, 8007d3a <__swsetup_r+0xc6>
 8007d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d2c:	d1ba      	bne.n	8007ca4 <__swsetup_r+0x30>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	0781      	lsls	r1, r0, #30
 8007d32:	bf58      	it	pl
 8007d34:	6963      	ldrpl	r3, [r4, #20]
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	e7f4      	b.n	8007d24 <__swsetup_r+0xb0>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e7f7      	b.n	8007d2e <__swsetup_r+0xba>
 8007d3e:	bf00      	nop
 8007d40:	200006c0 	.word	0x200006c0
 8007d44:	08008c54 	.word	0x08008c54
 8007d48:	08008c74 	.word	0x08008c74
 8007d4c:	08008c34 	.word	0x08008c34

08007d50 <abort>:
 8007d50:	b508      	push	{r3, lr}
 8007d52:	2006      	movs	r0, #6
 8007d54:	f000 fa48 	bl	80081e8 <raise>
 8007d58:	2001      	movs	r0, #1
 8007d5a:	f7f9 fc59 	bl	8001610 <_exit>
	...

08007d60 <__sflush_r>:
 8007d60:	898a      	ldrh	r2, [r1, #12]
 8007d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d66:	4605      	mov	r5, r0
 8007d68:	0710      	lsls	r0, r2, #28
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	d458      	bmi.n	8007e20 <__sflush_r+0xc0>
 8007d6e:	684b      	ldr	r3, [r1, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc05      	bgt.n	8007d80 <__sflush_r+0x20>
 8007d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dc02      	bgt.n	8007d80 <__sflush_r+0x20>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	d0f9      	beq.n	8007d7a <__sflush_r+0x1a>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d8c:	682f      	ldr	r7, [r5, #0]
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	d032      	beq.n	8007df8 <__sflush_r+0x98>
 8007d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	075a      	lsls	r2, r3, #29
 8007d98:	d505      	bpl.n	8007da6 <__sflush_r+0x46>
 8007d9a:	6863      	ldr	r3, [r4, #4]
 8007d9c:	1ac0      	subs	r0, r0, r3
 8007d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007da0:	b10b      	cbz	r3, 8007da6 <__sflush_r+0x46>
 8007da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007da4:	1ac0      	subs	r0, r0, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	4602      	mov	r2, r0
 8007daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dac:	6a21      	ldr	r1, [r4, #32]
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b0      	blx	r6
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	d106      	bne.n	8007dc6 <__sflush_r+0x66>
 8007db8:	6829      	ldr	r1, [r5, #0]
 8007dba:	291d      	cmp	r1, #29
 8007dbc:	d82c      	bhi.n	8007e18 <__sflush_r+0xb8>
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	; (8007e68 <__sflush_r+0x108>)
 8007dc0:	40ca      	lsrs	r2, r1
 8007dc2:	07d6      	lsls	r6, r2, #31
 8007dc4:	d528      	bpl.n	8007e18 <__sflush_r+0xb8>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	6062      	str	r2, [r4, #4]
 8007dca:	04d9      	lsls	r1, r3, #19
 8007dcc:	6922      	ldr	r2, [r4, #16]
 8007dce:	6022      	str	r2, [r4, #0]
 8007dd0:	d504      	bpl.n	8007ddc <__sflush_r+0x7c>
 8007dd2:	1c42      	adds	r2, r0, #1
 8007dd4:	d101      	bne.n	8007dda <__sflush_r+0x7a>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	b903      	cbnz	r3, 8007ddc <__sflush_r+0x7c>
 8007dda:	6560      	str	r0, [r4, #84]	; 0x54
 8007ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dde:	602f      	str	r7, [r5, #0]
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d0ca      	beq.n	8007d7a <__sflush_r+0x1a>
 8007de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de8:	4299      	cmp	r1, r3
 8007dea:	d002      	beq.n	8007df2 <__sflush_r+0x92>
 8007dec:	4628      	mov	r0, r5
 8007dee:	f7fd fbf7 	bl	80055e0 <_free_r>
 8007df2:	2000      	movs	r0, #0
 8007df4:	6360      	str	r0, [r4, #52]	; 0x34
 8007df6:	e7c1      	b.n	8007d7c <__sflush_r+0x1c>
 8007df8:	6a21      	ldr	r1, [r4, #32]
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	47b0      	blx	r6
 8007e00:	1c41      	adds	r1, r0, #1
 8007e02:	d1c7      	bne.n	8007d94 <__sflush_r+0x34>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0c4      	beq.n	8007d94 <__sflush_r+0x34>
 8007e0a:	2b1d      	cmp	r3, #29
 8007e0c:	d001      	beq.n	8007e12 <__sflush_r+0xb2>
 8007e0e:	2b16      	cmp	r3, #22
 8007e10:	d101      	bne.n	8007e16 <__sflush_r+0xb6>
 8007e12:	602f      	str	r7, [r5, #0]
 8007e14:	e7b1      	b.n	8007d7a <__sflush_r+0x1a>
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	e7ad      	b.n	8007d7c <__sflush_r+0x1c>
 8007e20:	690f      	ldr	r7, [r1, #16]
 8007e22:	2f00      	cmp	r7, #0
 8007e24:	d0a9      	beq.n	8007d7a <__sflush_r+0x1a>
 8007e26:	0793      	lsls	r3, r2, #30
 8007e28:	680e      	ldr	r6, [r1, #0]
 8007e2a:	bf08      	it	eq
 8007e2c:	694b      	ldreq	r3, [r1, #20]
 8007e2e:	600f      	str	r7, [r1, #0]
 8007e30:	bf18      	it	ne
 8007e32:	2300      	movne	r3, #0
 8007e34:	eba6 0807 	sub.w	r8, r6, r7
 8007e38:	608b      	str	r3, [r1, #8]
 8007e3a:	f1b8 0f00 	cmp.w	r8, #0
 8007e3e:	dd9c      	ble.n	8007d7a <__sflush_r+0x1a>
 8007e40:	6a21      	ldr	r1, [r4, #32]
 8007e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e44:	4643      	mov	r3, r8
 8007e46:	463a      	mov	r2, r7
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b0      	blx	r6
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	dc06      	bgt.n	8007e5e <__sflush_r+0xfe>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	e78e      	b.n	8007d7c <__sflush_r+0x1c>
 8007e5e:	4407      	add	r7, r0
 8007e60:	eba8 0800 	sub.w	r8, r8, r0
 8007e64:	e7e9      	b.n	8007e3a <__sflush_r+0xda>
 8007e66:	bf00      	nop
 8007e68:	20400001 	.word	0x20400001

08007e6c <_fflush_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	4605      	mov	r5, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b913      	cbnz	r3, 8007e7c <_fflush_r+0x10>
 8007e76:	2500      	movs	r5, #0
 8007e78:	4628      	mov	r0, r5
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	b118      	cbz	r0, 8007e86 <_fflush_r+0x1a>
 8007e7e:	6983      	ldr	r3, [r0, #24]
 8007e80:	b90b      	cbnz	r3, 8007e86 <_fflush_r+0x1a>
 8007e82:	f000 f887 	bl	8007f94 <__sinit>
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <_fflush_r+0x6c>)
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	d11b      	bne.n	8007ec4 <_fflush_r+0x58>
 8007e8c:	686c      	ldr	r4, [r5, #4]
 8007e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0ef      	beq.n	8007e76 <_fflush_r+0xa>
 8007e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e98:	07d0      	lsls	r0, r2, #31
 8007e9a:	d404      	bmi.n	8007ea6 <_fflush_r+0x3a>
 8007e9c:	0599      	lsls	r1, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_fflush_r+0x3a>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea2:	f7ff fcf8 	bl	8007896 <__retarget_lock_acquire_recursive>
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7ff ff59 	bl	8007d60 <__sflush_r>
 8007eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb0:	07da      	lsls	r2, r3, #31
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	d4e0      	bmi.n	8007e78 <_fflush_r+0xc>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	059b      	lsls	r3, r3, #22
 8007eba:	d4dd      	bmi.n	8007e78 <_fflush_r+0xc>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ebe:	f7ff fceb 	bl	8007898 <__retarget_lock_release_recursive>
 8007ec2:	e7d9      	b.n	8007e78 <_fflush_r+0xc>
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <_fflush_r+0x70>)
 8007ec6:	429c      	cmp	r4, r3
 8007ec8:	d101      	bne.n	8007ece <_fflush_r+0x62>
 8007eca:	68ac      	ldr	r4, [r5, #8]
 8007ecc:	e7df      	b.n	8007e8e <_fflush_r+0x22>
 8007ece:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <_fflush_r+0x74>)
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	bf08      	it	eq
 8007ed4:	68ec      	ldreq	r4, [r5, #12]
 8007ed6:	e7da      	b.n	8007e8e <_fflush_r+0x22>
 8007ed8:	08008c54 	.word	0x08008c54
 8007edc:	08008c74 	.word	0x08008c74
 8007ee0:	08008c34 	.word	0x08008c34

08007ee4 <std>:
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	4604      	mov	r4, r0
 8007eea:	e9c0 3300 	strd	r3, r3, [r0]
 8007eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ef2:	6083      	str	r3, [r0, #8]
 8007ef4:	8181      	strh	r1, [r0, #12]
 8007ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ef8:	81c2      	strh	r2, [r0, #14]
 8007efa:	6183      	str	r3, [r0, #24]
 8007efc:	4619      	mov	r1, r3
 8007efe:	2208      	movs	r2, #8
 8007f00:	305c      	adds	r0, #92	; 0x5c
 8007f02:	f7fd fb65 	bl	80055d0 <memset>
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <std+0x38>)
 8007f08:	6263      	str	r3, [r4, #36]	; 0x24
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <std+0x3c>)
 8007f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <std+0x40>)
 8007f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f12:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <std+0x44>)
 8007f14:	6224      	str	r4, [r4, #32]
 8007f16:	6323      	str	r3, [r4, #48]	; 0x30
 8007f18:	bd10      	pop	{r4, pc}
 8007f1a:	bf00      	nop
 8007f1c:	08008221 	.word	0x08008221
 8007f20:	08008243 	.word	0x08008243
 8007f24:	0800827b 	.word	0x0800827b
 8007f28:	0800829f 	.word	0x0800829f

08007f2c <_cleanup_r>:
 8007f2c:	4901      	ldr	r1, [pc, #4]	; (8007f34 <_cleanup_r+0x8>)
 8007f2e:	f000 b8af 	b.w	8008090 <_fwalk_reent>
 8007f32:	bf00      	nop
 8007f34:	08007e6d 	.word	0x08007e6d

08007f38 <__sfmoreglue>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	2268      	movs	r2, #104	; 0x68
 8007f3c:	1e4d      	subs	r5, r1, #1
 8007f3e:	4355      	muls	r5, r2
 8007f40:	460e      	mov	r6, r1
 8007f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f46:	f7fd fbb7 	bl	80056b8 <_malloc_r>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	b140      	cbz	r0, 8007f60 <__sfmoreglue+0x28>
 8007f4e:	2100      	movs	r1, #0
 8007f50:	e9c0 1600 	strd	r1, r6, [r0]
 8007f54:	300c      	adds	r0, #12
 8007f56:	60a0      	str	r0, [r4, #8]
 8007f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f5c:	f7fd fb38 	bl	80055d0 <memset>
 8007f60:	4620      	mov	r0, r4
 8007f62:	bd70      	pop	{r4, r5, r6, pc}

08007f64 <__sfp_lock_acquire>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__sfp_lock_acquire+0x8>)
 8007f66:	f7ff bc96 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20000a3d 	.word	0x20000a3d

08007f70 <__sfp_lock_release>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__sfp_lock_release+0x8>)
 8007f72:	f7ff bc91 	b.w	8007898 <__retarget_lock_release_recursive>
 8007f76:	bf00      	nop
 8007f78:	20000a3d 	.word	0x20000a3d

08007f7c <__sinit_lock_acquire>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__sinit_lock_acquire+0x8>)
 8007f7e:	f7ff bc8a 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8007f82:	bf00      	nop
 8007f84:	20000a3e 	.word	0x20000a3e

08007f88 <__sinit_lock_release>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__sinit_lock_release+0x8>)
 8007f8a:	f7ff bc85 	b.w	8007898 <__retarget_lock_release_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20000a3e 	.word	0x20000a3e

08007f94 <__sinit>:
 8007f94:	b510      	push	{r4, lr}
 8007f96:	4604      	mov	r4, r0
 8007f98:	f7ff fff0 	bl	8007f7c <__sinit_lock_acquire>
 8007f9c:	69a3      	ldr	r3, [r4, #24]
 8007f9e:	b11b      	cbz	r3, 8007fa8 <__sinit+0x14>
 8007fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa4:	f7ff bff0 	b.w	8007f88 <__sinit_lock_release>
 8007fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fac:	6523      	str	r3, [r4, #80]	; 0x50
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <__sinit+0x68>)
 8007fb0:	4a13      	ldr	r2, [pc, #76]	; (8008000 <__sinit+0x6c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	bf04      	itt	eq
 8007fba:	2301      	moveq	r3, #1
 8007fbc:	61a3      	streq	r3, [r4, #24]
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f820 	bl	8008004 <__sfp>
 8007fc4:	6060      	str	r0, [r4, #4]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 f81c 	bl	8008004 <__sfp>
 8007fcc:	60a0      	str	r0, [r4, #8]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 f818 	bl	8008004 <__sfp>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	60e0      	str	r0, [r4, #12]
 8007fd8:	2104      	movs	r1, #4
 8007fda:	6860      	ldr	r0, [r4, #4]
 8007fdc:	f7ff ff82 	bl	8007ee4 <std>
 8007fe0:	68a0      	ldr	r0, [r4, #8]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	2109      	movs	r1, #9
 8007fe6:	f7ff ff7d 	bl	8007ee4 <std>
 8007fea:	68e0      	ldr	r0, [r4, #12]
 8007fec:	2202      	movs	r2, #2
 8007fee:	2112      	movs	r1, #18
 8007ff0:	f7ff ff78 	bl	8007ee4 <std>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	61a3      	str	r3, [r4, #24]
 8007ff8:	e7d2      	b.n	8007fa0 <__sinit+0xc>
 8007ffa:	bf00      	nop
 8007ffc:	080088b8 	.word	0x080088b8
 8008000:	08007f2d 	.word	0x08007f2d

08008004 <__sfp>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	4607      	mov	r7, r0
 8008008:	f7ff ffac 	bl	8007f64 <__sfp_lock_acquire>
 800800c:	4b1e      	ldr	r3, [pc, #120]	; (8008088 <__sfp+0x84>)
 800800e:	681e      	ldr	r6, [r3, #0]
 8008010:	69b3      	ldr	r3, [r6, #24]
 8008012:	b913      	cbnz	r3, 800801a <__sfp+0x16>
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff ffbd 	bl	8007f94 <__sinit>
 800801a:	3648      	adds	r6, #72	; 0x48
 800801c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008020:	3b01      	subs	r3, #1
 8008022:	d503      	bpl.n	800802c <__sfp+0x28>
 8008024:	6833      	ldr	r3, [r6, #0]
 8008026:	b30b      	cbz	r3, 800806c <__sfp+0x68>
 8008028:	6836      	ldr	r6, [r6, #0]
 800802a:	e7f7      	b.n	800801c <__sfp+0x18>
 800802c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008030:	b9d5      	cbnz	r5, 8008068 <__sfp+0x64>
 8008032:	4b16      	ldr	r3, [pc, #88]	; (800808c <__sfp+0x88>)
 8008034:	60e3      	str	r3, [r4, #12]
 8008036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800803a:	6665      	str	r5, [r4, #100]	; 0x64
 800803c:	f7ff fc2a 	bl	8007894 <__retarget_lock_init_recursive>
 8008040:	f7ff ff96 	bl	8007f70 <__sfp_lock_release>
 8008044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800804c:	6025      	str	r5, [r4, #0]
 800804e:	61a5      	str	r5, [r4, #24]
 8008050:	2208      	movs	r2, #8
 8008052:	4629      	mov	r1, r5
 8008054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008058:	f7fd faba 	bl	80055d0 <memset>
 800805c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008064:	4620      	mov	r0, r4
 8008066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008068:	3468      	adds	r4, #104	; 0x68
 800806a:	e7d9      	b.n	8008020 <__sfp+0x1c>
 800806c:	2104      	movs	r1, #4
 800806e:	4638      	mov	r0, r7
 8008070:	f7ff ff62 	bl	8007f38 <__sfmoreglue>
 8008074:	4604      	mov	r4, r0
 8008076:	6030      	str	r0, [r6, #0]
 8008078:	2800      	cmp	r0, #0
 800807a:	d1d5      	bne.n	8008028 <__sfp+0x24>
 800807c:	f7ff ff78 	bl	8007f70 <__sfp_lock_release>
 8008080:	230c      	movs	r3, #12
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	e7ee      	b.n	8008064 <__sfp+0x60>
 8008086:	bf00      	nop
 8008088:	080088b8 	.word	0x080088b8
 800808c:	ffff0001 	.word	0xffff0001

08008090 <_fwalk_reent>:
 8008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008094:	4606      	mov	r6, r0
 8008096:	4688      	mov	r8, r1
 8008098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800809c:	2700      	movs	r7, #0
 800809e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a2:	f1b9 0901 	subs.w	r9, r9, #1
 80080a6:	d505      	bpl.n	80080b4 <_fwalk_reent+0x24>
 80080a8:	6824      	ldr	r4, [r4, #0]
 80080aa:	2c00      	cmp	r4, #0
 80080ac:	d1f7      	bne.n	800809e <_fwalk_reent+0xe>
 80080ae:	4638      	mov	r0, r7
 80080b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b4:	89ab      	ldrh	r3, [r5, #12]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d907      	bls.n	80080ca <_fwalk_reent+0x3a>
 80080ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080be:	3301      	adds	r3, #1
 80080c0:	d003      	beq.n	80080ca <_fwalk_reent+0x3a>
 80080c2:	4629      	mov	r1, r5
 80080c4:	4630      	mov	r0, r6
 80080c6:	47c0      	blx	r8
 80080c8:	4307      	orrs	r7, r0
 80080ca:	3568      	adds	r5, #104	; 0x68
 80080cc:	e7e9      	b.n	80080a2 <_fwalk_reent+0x12>

080080ce <__swhatbuf_r>:
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	460e      	mov	r6, r1
 80080d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d6:	2900      	cmp	r1, #0
 80080d8:	b096      	sub	sp, #88	; 0x58
 80080da:	4614      	mov	r4, r2
 80080dc:	461d      	mov	r5, r3
 80080de:	da08      	bge.n	80080f2 <__swhatbuf_r+0x24>
 80080e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	061a      	lsls	r2, r3, #24
 80080ea:	d410      	bmi.n	800810e <__swhatbuf_r+0x40>
 80080ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f0:	e00e      	b.n	8008110 <__swhatbuf_r+0x42>
 80080f2:	466a      	mov	r2, sp
 80080f4:	f000 f8fa 	bl	80082ec <_fstat_r>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	dbf1      	blt.n	80080e0 <__swhatbuf_r+0x12>
 80080fc:	9a01      	ldr	r2, [sp, #4]
 80080fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008106:	425a      	negs	r2, r3
 8008108:	415a      	adcs	r2, r3
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	e7ee      	b.n	80080ec <__swhatbuf_r+0x1e>
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	2000      	movs	r0, #0
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	b016      	add	sp, #88	; 0x58
 8008116:	bd70      	pop	{r4, r5, r6, pc}

08008118 <__smakebuf_r>:
 8008118:	898b      	ldrh	r3, [r1, #12]
 800811a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800811c:	079d      	lsls	r5, r3, #30
 800811e:	4606      	mov	r6, r0
 8008120:	460c      	mov	r4, r1
 8008122:	d507      	bpl.n	8008134 <__smakebuf_r+0x1c>
 8008124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	2301      	movs	r3, #1
 800812e:	6163      	str	r3, [r4, #20]
 8008130:	b002      	add	sp, #8
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	ab01      	add	r3, sp, #4
 8008136:	466a      	mov	r2, sp
 8008138:	f7ff ffc9 	bl	80080ce <__swhatbuf_r>
 800813c:	9900      	ldr	r1, [sp, #0]
 800813e:	4605      	mov	r5, r0
 8008140:	4630      	mov	r0, r6
 8008142:	f7fd fab9 	bl	80056b8 <_malloc_r>
 8008146:	b948      	cbnz	r0, 800815c <__smakebuf_r+0x44>
 8008148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814c:	059a      	lsls	r2, r3, #22
 800814e:	d4ef      	bmi.n	8008130 <__smakebuf_r+0x18>
 8008150:	f023 0303 	bic.w	r3, r3, #3
 8008154:	f043 0302 	orr.w	r3, r3, #2
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	e7e3      	b.n	8008124 <__smakebuf_r+0xc>
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <__smakebuf_r+0x7c>)
 800815e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	6020      	str	r0, [r4, #0]
 8008164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	6163      	str	r3, [r4, #20]
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	6120      	str	r0, [r4, #16]
 8008172:	b15b      	cbz	r3, 800818c <__smakebuf_r+0x74>
 8008174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008178:	4630      	mov	r0, r6
 800817a:	f000 f8c9 	bl	8008310 <_isatty_r>
 800817e:	b128      	cbz	r0, 800818c <__smakebuf_r+0x74>
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	f023 0303 	bic.w	r3, r3, #3
 8008186:	f043 0301 	orr.w	r3, r3, #1
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	89a0      	ldrh	r0, [r4, #12]
 800818e:	4305      	orrs	r5, r0
 8008190:	81a5      	strh	r5, [r4, #12]
 8008192:	e7cd      	b.n	8008130 <__smakebuf_r+0x18>
 8008194:	08007f2d 	.word	0x08007f2d

08008198 <_raise_r>:
 8008198:	291f      	cmp	r1, #31
 800819a:	b538      	push	{r3, r4, r5, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	d904      	bls.n	80081ac <_raise_r+0x14>
 80081a2:	2316      	movs	r3, #22
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ae:	b112      	cbz	r2, 80081b6 <_raise_r+0x1e>
 80081b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081b4:	b94b      	cbnz	r3, 80081ca <_raise_r+0x32>
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 f830 	bl	800821c <_getpid_r>
 80081bc:	462a      	mov	r2, r5
 80081be:	4601      	mov	r1, r0
 80081c0:	4620      	mov	r0, r4
 80081c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c6:	f000 b817 	b.w	80081f8 <_kill_r>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00a      	beq.n	80081e4 <_raise_r+0x4c>
 80081ce:	1c59      	adds	r1, r3, #1
 80081d0:	d103      	bne.n	80081da <_raise_r+0x42>
 80081d2:	2316      	movs	r3, #22
 80081d4:	6003      	str	r3, [r0, #0]
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7e7      	b.n	80081aa <_raise_r+0x12>
 80081da:	2400      	movs	r4, #0
 80081dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081e0:	4628      	mov	r0, r5
 80081e2:	4798      	blx	r3
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7e0      	b.n	80081aa <_raise_r+0x12>

080081e8 <raise>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <raise+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f7ff bfd3 	b.w	8008198 <_raise_r>
 80081f2:	bf00      	nop
 80081f4:	200006c0 	.word	0x200006c0

080081f8 <_kill_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_kill_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7f9 f9f3 	bl	80015f0 <_kill>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_kill_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_kill_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	20000a38 	.word	0x20000a38

0800821c <_getpid_r>:
 800821c:	f7f9 b9e0 	b.w	80015e0 <_getpid>

08008220 <__sread>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	f000 f894 	bl	8008354 <_read_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	bfab      	itete	ge
 8008230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008232:	89a3      	ldrhlt	r3, [r4, #12]
 8008234:	181b      	addge	r3, r3, r0
 8008236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800823a:	bfac      	ite	ge
 800823c:	6563      	strge	r3, [r4, #84]	; 0x54
 800823e:	81a3      	strhlt	r3, [r4, #12]
 8008240:	bd10      	pop	{r4, pc}

08008242 <__swrite>:
 8008242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	461f      	mov	r7, r3
 8008248:	898b      	ldrh	r3, [r1, #12]
 800824a:	05db      	lsls	r3, r3, #23
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4616      	mov	r6, r2
 8008252:	d505      	bpl.n	8008260 <__swrite+0x1e>
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	2302      	movs	r3, #2
 800825a:	2200      	movs	r2, #0
 800825c:	f000 f868 	bl	8008330 <_lseek_r>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008276:	f000 b817 	b.w	80082a8 <_write_r>

0800827a <__sseek>:
 800827a:	b510      	push	{r4, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008282:	f000 f855 	bl	8008330 <_lseek_r>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	bf15      	itete	ne
 800828c:	6560      	strne	r0, [r4, #84]	; 0x54
 800828e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strheq	r3, [r4, #12]
 8008298:	bf18      	it	ne
 800829a:	81a3      	strhne	r3, [r4, #12]
 800829c:	bd10      	pop	{r4, pc}

0800829e <__sclose>:
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 b813 	b.w	80082cc <_close_r>
	...

080082a8 <_write_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	; (80082c8 <_write_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 f9d1 	bl	800165e <_write>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_write_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_write_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20000a38 	.word	0x20000a38

080082cc <_close_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_close_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7f9 f9dd 	bl	8001696 <_close>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_close_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_close_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20000a38 	.word	0x20000a38

080082ec <_fstat_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	; (800830c <_fstat_r+0x20>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f7f9 f9d8 	bl	80016ae <_fstat>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d102      	bne.n	8008308 <_fstat_r+0x1c>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b103      	cbz	r3, 8008308 <_fstat_r+0x1c>
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	20000a38 	.word	0x20000a38

08008310 <_isatty_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d06      	ldr	r5, [pc, #24]	; (800832c <_isatty_r+0x1c>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7f9 f9d7 	bl	80016ce <_isatty>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_isatty_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_isatty_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20000a38 	.word	0x20000a38

08008330 <_lseek_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	; (8008350 <_lseek_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f9 f9d0 	bl	80016e4 <_lseek>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_lseek_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_lseek_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000a38 	.word	0x20000a38

08008354 <_read_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_read_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7f9 f95e 	bl	8001624 <_read>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_read_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_read_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20000a38 	.word	0x20000a38

08008378 <expf>:
 8008378:	b508      	push	{r3, lr}
 800837a:	ed2d 8b02 	vpush	{d8}
 800837e:	eef0 8a40 	vmov.f32	s17, s0
 8008382:	f000 f82f 	bl	80083e4 <__ieee754_expf>
 8008386:	eeb0 8a40 	vmov.f32	s16, s0
 800838a:	eeb0 0a68 	vmov.f32	s0, s17
 800838e:	f000 f919 	bl	80085c4 <finitef>
 8008392:	b160      	cbz	r0, 80083ae <expf+0x36>
 8008394:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80083d4 <expf+0x5c>
 8008398:	eef4 8ae7 	vcmpe.f32	s17, s15
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	dd0a      	ble.n	80083b8 <expf+0x40>
 80083a2:	f7fd f8d5 	bl	8005550 <__errno>
 80083a6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80083d8 <expf+0x60>
 80083aa:	2322      	movs	r3, #34	; 0x22
 80083ac:	6003      	str	r3, [r0, #0]
 80083ae:	eeb0 0a48 	vmov.f32	s0, s16
 80083b2:	ecbd 8b02 	vpop	{d8}
 80083b6:	bd08      	pop	{r3, pc}
 80083b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80083dc <expf+0x64>
 80083bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80083c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c4:	d5f3      	bpl.n	80083ae <expf+0x36>
 80083c6:	f7fd f8c3 	bl	8005550 <__errno>
 80083ca:	2322      	movs	r3, #34	; 0x22
 80083cc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80083e0 <expf+0x68>
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	e7ec      	b.n	80083ae <expf+0x36>
 80083d4:	42b17180 	.word	0x42b17180
 80083d8:	7f800000 	.word	0x7f800000
 80083dc:	c2cff1b5 	.word	0xc2cff1b5
 80083e0:	00000000 	.word	0x00000000

080083e4 <__ieee754_expf>:
 80083e4:	ee10 2a10 	vmov	r2, s0
 80083e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80083ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80083f0:	d902      	bls.n	80083f8 <__ieee754_expf+0x14>
 80083f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083f6:	4770      	bx	lr
 80083f8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80083fc:	d106      	bne.n	800840c <__ieee754_expf+0x28>
 80083fe:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008538 <__ieee754_expf+0x154>
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf18      	it	ne
 8008406:	eeb0 0a67 	vmovne.f32	s0, s15
 800840a:	4770      	bx	lr
 800840c:	484b      	ldr	r0, [pc, #300]	; (800853c <__ieee754_expf+0x158>)
 800840e:	4282      	cmp	r2, r0
 8008410:	dd02      	ble.n	8008418 <__ieee754_expf+0x34>
 8008412:	2000      	movs	r0, #0
 8008414:	f000 b8d0 	b.w	80085b8 <__math_oflowf>
 8008418:	2a00      	cmp	r2, #0
 800841a:	da05      	bge.n	8008428 <__ieee754_expf+0x44>
 800841c:	4a48      	ldr	r2, [pc, #288]	; (8008540 <__ieee754_expf+0x15c>)
 800841e:	4291      	cmp	r1, r2
 8008420:	d902      	bls.n	8008428 <__ieee754_expf+0x44>
 8008422:	2000      	movs	r0, #0
 8008424:	f000 b8c2 	b.w	80085ac <__math_uflowf>
 8008428:	4a46      	ldr	r2, [pc, #280]	; (8008544 <__ieee754_expf+0x160>)
 800842a:	4291      	cmp	r1, r2
 800842c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008430:	d952      	bls.n	80084d8 <__ieee754_expf+0xf4>
 8008432:	4a45      	ldr	r2, [pc, #276]	; (8008548 <__ieee754_expf+0x164>)
 8008434:	4291      	cmp	r1, r2
 8008436:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800843a:	d834      	bhi.n	80084a6 <__ieee754_expf+0xc2>
 800843c:	4943      	ldr	r1, [pc, #268]	; (800854c <__ieee754_expf+0x168>)
 800843e:	4411      	add	r1, r2
 8008440:	ed91 7a00 	vldr	s14, [r1]
 8008444:	4942      	ldr	r1, [pc, #264]	; (8008550 <__ieee754_expf+0x16c>)
 8008446:	440a      	add	r2, r1
 8008448:	edd2 7a00 	vldr	s15, [r2]
 800844c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8008450:	f1c3 0201 	rsb	r2, r3, #1
 8008454:	1ad2      	subs	r2, r2, r3
 8008456:	ee37 0a67 	vsub.f32	s0, s14, s15
 800845a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800845e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8008554 <__ieee754_expf+0x170>
 8008462:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008558 <__ieee754_expf+0x174>
 8008466:	eee6 6a05 	vfma.f32	s13, s12, s10
 800846a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800855c <__ieee754_expf+0x178>
 800846e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008472:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008560 <__ieee754_expf+0x17c>
 8008476:	eee5 6a06 	vfma.f32	s13, s10, s12
 800847a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008564 <__ieee754_expf+0x180>
 800847e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008482:	eef0 6a40 	vmov.f32	s13, s0
 8008486:	eee5 6a46 	vfms.f32	s13, s10, s12
 800848a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800848e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008492:	bb92      	cbnz	r2, 80084fa <__ieee754_expf+0x116>
 8008494:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008498:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800849c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80084a0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80084a4:	4770      	bx	lr
 80084a6:	4b30      	ldr	r3, [pc, #192]	; (8008568 <__ieee754_expf+0x184>)
 80084a8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800856c <__ieee754_expf+0x188>
 80084ac:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008570 <__ieee754_expf+0x18c>
 80084b0:	4413      	add	r3, r2
 80084b2:	edd3 7a00 	vldr	s15, [r3]
 80084b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80084ba:	eeb0 7a40 	vmov.f32	s14, s0
 80084be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084c2:	ee17 2a90 	vmov	r2, s15
 80084c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084ca:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80084ce:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008574 <__ieee754_expf+0x190>
 80084d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084d6:	e7be      	b.n	8008456 <__ieee754_expf+0x72>
 80084d8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80084dc:	d20b      	bcs.n	80084f6 <__ieee754_expf+0x112>
 80084de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008578 <__ieee754_expf+0x194>
 80084e2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80084e6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80084ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ee:	dd02      	ble.n	80084f6 <__ieee754_expf+0x112>
 80084f0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80084f4:	4770      	bx	lr
 80084f6:	2200      	movs	r2, #0
 80084f8:	e7af      	b.n	800845a <__ieee754_expf+0x76>
 80084fa:	ee76 6a66 	vsub.f32	s13, s12, s13
 80084fe:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8008502:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8008506:	bfb8      	it	lt
 8008508:	3264      	addlt	r2, #100	; 0x64
 800850a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800850e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008512:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8008516:	ee17 3a90 	vmov	r3, s15
 800851a:	bfab      	itete	ge
 800851c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8008520:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8008524:	ee00 3a10 	vmovge	s0, r3
 8008528:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800857c <__ieee754_expf+0x198>
 800852c:	bfbc      	itt	lt
 800852e:	ee00 3a10 	vmovlt	s0, r3
 8008532:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8008536:	4770      	bx	lr
 8008538:	00000000 	.word	0x00000000
 800853c:	42b17217 	.word	0x42b17217
 8008540:	42cff1b5 	.word	0x42cff1b5
 8008544:	3eb17218 	.word	0x3eb17218
 8008548:	3f851591 	.word	0x3f851591
 800854c:	08008c9c 	.word	0x08008c9c
 8008550:	08008ca4 	.word	0x08008ca4
 8008554:	3331bb4c 	.word	0x3331bb4c
 8008558:	b5ddea0e 	.word	0xb5ddea0e
 800855c:	388ab355 	.word	0x388ab355
 8008560:	bb360b61 	.word	0xbb360b61
 8008564:	3e2aaaab 	.word	0x3e2aaaab
 8008568:	08008c94 	.word	0x08008c94
 800856c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008570:	3f317180 	.word	0x3f317180
 8008574:	3717f7d1 	.word	0x3717f7d1
 8008578:	7149f2ca 	.word	0x7149f2ca
 800857c:	0d800000 	.word	0x0d800000

08008580 <with_errnof>:
 8008580:	b513      	push	{r0, r1, r4, lr}
 8008582:	4604      	mov	r4, r0
 8008584:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008588:	f7fc ffe2 	bl	8005550 <__errno>
 800858c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008590:	6004      	str	r4, [r0, #0]
 8008592:	b002      	add	sp, #8
 8008594:	bd10      	pop	{r4, pc}

08008596 <xflowf>:
 8008596:	b130      	cbz	r0, 80085a6 <xflowf+0x10>
 8008598:	eef1 7a40 	vneg.f32	s15, s0
 800859c:	ee27 0a80 	vmul.f32	s0, s15, s0
 80085a0:	2022      	movs	r0, #34	; 0x22
 80085a2:	f7ff bfed 	b.w	8008580 <with_errnof>
 80085a6:	eef0 7a40 	vmov.f32	s15, s0
 80085aa:	e7f7      	b.n	800859c <xflowf+0x6>

080085ac <__math_uflowf>:
 80085ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80085b4 <__math_uflowf+0x8>
 80085b0:	f7ff bff1 	b.w	8008596 <xflowf>
 80085b4:	10000000 	.word	0x10000000

080085b8 <__math_oflowf>:
 80085b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80085c0 <__math_oflowf+0x8>
 80085bc:	f7ff bfeb 	b.w	8008596 <xflowf>
 80085c0:	70000000 	.word	0x70000000

080085c4 <finitef>:
 80085c4:	b082      	sub	sp, #8
 80085c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80085ca:	9801      	ldr	r0, [sp, #4]
 80085cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80085d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80085d4:	bfac      	ite	ge
 80085d6:	2000      	movge	r0, #0
 80085d8:	2001      	movlt	r0, #1
 80085da:	b002      	add	sp, #8
 80085dc:	4770      	bx	lr
	...

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
